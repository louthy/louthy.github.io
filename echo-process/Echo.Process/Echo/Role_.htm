<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../Echo/index.htm">Echo</a> \ <span class="nav-bar-link" href="Role_.htm">Role</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#Broadcast">Broadcast</a><a class="nav-link" href="#First">First</a><a class="nav-link" href="#Last">Last</a><a class="nav-link" href="#LeastBusy">LeastBusy</a><a class="nav-link" href="#Random">Random</a><a class="nav-link" href="#RoundRobin">RoundRobin</a><a class="nav-link" href="#Second">Second</a><a class="nav-link" href="#Third">Third</a><h3 >PROPERTIES</h3><a class="nav-link" href="#Current">Current</a><h3 >METHODS</h3><a class="nav-link" href="#Next">Next(SystemName)</a><a class="nav-link" href="#NodeIds">NodeIds(ProcessId)</a><a class="nav-link" href="#Nodes">Nodes(ProcessId, SystemName)</a><a class="nav-link" href="#Prev">Prev(SystemName)</a></div><div class="content-panel"><h1 >Role Class</h1><p ><span >Each node in the cluster has a role name and at all times the cluster-nodes have a list of the alive nodes and their roles (Process.ClusterNodes).  Nodes  are removed from Process.ClusterNodes if they don&#39;t phone in. Process.ClusterNodes  is at most 3 seconds out-of-date and can therefore be used to reliably find out which nodes are available and what roles they do.   <br/><br/>  By using Role.First, Role.Broadcast, Role.LeastBusy, Role.Random and Role.RoundRobin you can build a ProcessId that is resolved at the time of doing a &#39;tell&#39;, &#39;ask&#39;, &#39;subscribe&#39;, etc.  This can allow reliable messaging to Processes in the cluster. <br/><br/> </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Role</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>Echo</div></div><h2 >Fields</h2><div class="member-title"><a name="Broadcast"></a>Broadcast</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >A ProcessId that represents a set of nodes in a cluster.  When used for operations like &#39;tell&#39;, the message is dispatched to all nodes in the set. See remarks. </span></p><div class="section_title">REMARKS</div><span >You may create a reference to child nodes in the usual way:     Role.Broadcast[&quot;my-role&quot;][&quot;user&quot;][&quot;child-1&quot;][...] </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">ProcessId</span> <span class="ident">Broadcast</span></div></div></div><div class="member-title"><a name="First"></a>First</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >A ProcessId that represents a set of nodes in a cluster.  When used for  operations like &#39;tell&#39;, the node names are sorted in ascending order and  the message is dispatched to the first one.  This can be used for leader election for example. See remarks. </span></p><div class="section_title">REMARKS</div><span >You may create a reference to child nodes in the usual way:     Role.First[&quot;my-role&quot;][&quot;user&quot;][&quot;child-1&quot;][...] </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">ProcessId</span> <span class="ident">First</span></div></div></div><div class="member-title"><a name="Last"></a>Last</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >A ProcessId that represents a set of nodes in a cluster.  When used for  operations like &#39;tell&#39;, the node names are sorted in descending order and  the message is dispatched to the first one. See remarks. </span></p><div class="section_title">REMARKS</div><span >You may create a reference to child nodes in the usual way:     Role.Last[&quot;my-role&quot;][&quot;user&quot;][&quot;child-1&quot;][...] </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">ProcessId</span> <span class="ident">Last</span></div></div></div><div class="member-title"><a name="LeastBusy"></a>LeastBusy</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >A ProcessId that represents a set of nodes in a cluster.  When used for operations like &#39;tell&#39;, the message is dispatched to the least busy from the set. See remarks. </span></p><div class="section_title">REMARKS</div><span >You may create a reference to child nodes in the usual way:     Role.LeastBusy[&quot;my-role&quot;][&quot;user&quot;][&quot;child-1&quot;][...] </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">ProcessId</span> <span class="ident">LeastBusy</span></div></div></div><div class="member-title"><a name="Random"></a>Random</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >A ProcessId that represents a set of nodes in a cluster.  When used for operations like &#39;tell&#39;, the message is dispatched to a cryptographically random node from the set. See remarks. </span></p><div class="section_title">REMARKS</div><span >You may create a reference to child nodes in the usual way:     Role.Random[&quot;my-role&quot;][&quot;user&quot;][&quot;child-1&quot;][...] </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">ProcessId</span> <span class="ident">Random</span></div></div></div><div class="member-title"><a name="RoundRobin"></a>RoundRobin</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >A ProcessId that represents a set of nodes in a cluster.  When used for operations like &#39;tell&#39;, the message is dispatched to the nodes in a round- robin fashion See remarks. </span></p><div class="section_title">REMARKS</div><span >You may create a reference to child nodes in the usual way:     Role.RoundRobin[&quot;my-role&quot;][&quot;user&quot;][&quot;child-1&quot;][...] </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">ProcessId</span> <span class="ident">RoundRobin</span></div></div></div><div class="member-title"><a name="Second"></a>Second</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >A ProcessId that represents a set of nodes in a cluster.  When used for  operations like &#39;tell&#39;, the node names are sorted in ascending order and  the message is dispatched to the second one. See remarks. </span></p><div class="section_title">REMARKS</div><span >You may create a reference to child nodes in the usual way:     Role.Second[&quot;my-role&quot;][&quot;user&quot;][&quot;child-1&quot;][...] </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">ProcessId</span> <span class="ident">Second</span></div></div></div><div class="member-title"><a name="Third"></a>Third</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >A ProcessId that represents a set of nodes in a cluster.  When used for  operations like &#39;tell&#39;, the node names are sorted in ascending order and  the message is dispatched to the third one. See remarks. </span></p><div class="section_title">REMARKS</div><span >You may create a reference to child nodes in the usual way:     Role.Third[&quot;my-role&quot;][&quot;user&quot;][&quot;child-1&quot;][...] </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">ProcessId</span> <span class="ident">Third</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="Current"></a>Current</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The role that this node is a part of </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessName</span> <span class="ident">Current</span>  { <span class="keyword">get</span>; <span class="keyword">set</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessName</span></div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Next"></a>Next(SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Next__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Builds a ProcessId that represents the next node in the role that this node is a part of.  If there is only one node in the role then any messages sent will be sent to the leaf-process with itself.  Unlike other Roles, you do  not specify the role-name as the first child.  See remarks. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div><div class="section_title">REMARKS</div><span >You may create a reference to child nodes in the usual way:     Role.Next[&quot;user&quot;][&quot;child-1&quot;][...] </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">Next</span>(<span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Next__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            nextRoot[Root(system).Name]</div></div></div><div class="member-title"><a name="NodeIds"></a>NodeIds(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-NodeIds__ProcessId__leaf_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">leaf</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; <span class="ident">NodeIds</span>(<span class="ident">ProcessId</span> leaf)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-NodeIds__ProcessId__leaf_"><div class="section_title">SOURCE</div><div class="code">
            Nodes(leaf).Values.Map(node =&gt; ProcessId.Top[node.NodeName].Append(leaf.Skip(1)))</div></div></div><div class="member-title"><a name="Nodes"></a>Nodes(ProcessId, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Nodes__ProcessId__leaf__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">leaf</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">ProcessName</span>, <span class="ident">ClusterNode</span>&gt; <span class="ident">Nodes</span>(<span class="ident">ProcessId</span> leaf, <span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">ProcessName</span>, <span class="ident">ClusterNode</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Nodes__ProcessId__leaf__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            ClusterNodes(system).Filter(node =&gt; node.Role == leaf.Take(1).Name)</div></div></div><div class="member-title"><a name="Prev"></a>Prev(SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Prev__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Builds a ProcessId that represents the previous node in the role that this  node is a part of.  If there is only one node in the role then any messages  sent will be sent to the leaf-process with itself.  Unlike other Roles, you  do not specify the role-name as the first child.  See remarks. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div><div class="section_title">REMARKS</div><span >You may create a reference to child nodes in the usual way:     Role.Prev[&quot;user&quot;][&quot;child-1&quot;][...] </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">Prev</span>(<span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Prev__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            prevRoot[Root(system).Name]</div></div></div></div></body></html>