<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../Echo/index.htm">Echo</a> \ <span class="nav-bar-link" href="Strategy_.htm">Strategy</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#Context">Context</a><a class="nav-link" href="#FailedOnce">FailedOnce</a><a class="nav-link" href="#IncFailureCount">IncFailureCount</a><a class="nav-link" href="#ResetFailureCount">ResetFailureCount</a><h3 >PROPERTIES</h3><a class="nav-link" href="#Identity">Identity</a><a class="nav-link" href="#Reset">Reset</a><h3 >METHODS</h3><a class="nav-link" href="#AllForOne">AllForOne(State&lt;StrategyContext, Unit&gt;)</a><a class="nav-link" href="#Always">Always(Directive)</a><a class="nav-link" href="#Backoff">Backoff(Time, Time, Time)</a><a class="nav-link" href="#Backoff">Backoff(Time)</a><a class="nav-link" href="#Compose">Compose(State&lt;StrategyContext, Unit&gt;)</a><a class="nav-link" href="#MapGlobal">MapGlobal(Func&lt;StrategyState, StrategyState&gt;)</a><a class="nav-link" href="#Match">Match(State&lt;Exception, Option&lt;Directive&gt;&gt;)</a><a class="nav-link" href="#OneForOne">OneForOne(State&lt;StrategyContext, Unit&gt;)</a><a class="nav-link" href="#Otherwise">Otherwise(Func&lt;Exception, Directive&gt;)</a><a class="nav-link" href="#Otherwise">Otherwise(Directive)</a><a class="nav-link" href="#Otherwise">Otherwise(Func&lt;Directive, MessageDirective&gt;)</a><a class="nav-link" href="#Otherwise">Otherwise(MessageDirective)</a><a class="nav-link" href="#Pause">Pause(Time)</a><a class="nav-link" href="#Redirect">Redirect(State&lt;Directive, Option&lt;MessageDirective&gt;&gt;)</a><a class="nav-link" href="#Redirect">Redirect(MessageDirective)</a><a class="nav-link" href="#Retries">Retries(int)</a><a class="nav-link" href="#Retries">Retries(int, Time)</a><a class="nav-link" href="#Return">Return(Func&lt;StrategyContext, StrategyContext&gt;)</a><a class="nav-link" href="#Return&lt;A>">Return&lt;A&gt;(A)</a><a class="nav-link" href="#Return&lt;A>">Return&lt;A&gt;(Func&lt;StrategyContext, ValueTuple&lt;StrategyContext, A&gt;&gt;)</a><a class="nav-link" href="#Return&lt;A>">Return&lt;A&gt;(Func&lt;StrategyContext, ValueTuple&lt;TryOption&lt;A&gt;, StrategyContext&gt;&gt;)</a><a class="nav-link" href="#SetBackOffAmount">SetBackOffAmount(Time)</a><a class="nav-link" href="#SetDirective">SetDirective(Option&lt;Directive&gt;)</a><a class="nav-link" href="#SetLastFailure">SetLastFailure(DateTime)</a><a class="nav-link" href="#When&lt;TDirective>">When&lt;TDirective&gt;(Func&lt;TDirective, MessageDirective&gt;)</a><a class="nav-link" href="#When&lt;TDirective>">When&lt;TDirective&gt;(MessageDirective)</a><a class="nav-link" href="#With&lt;TException>">With&lt;TException&gt;(Func&lt;TException, Directive&gt;)</a><a class="nav-link" href="#With&lt;TException>">With&lt;TException&gt;(Directive)</a></div><div class="content-panel"><h1 >Strategy Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Strategy</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>Echo</div></div><h2 >Fields</h2><div class="member-title"><a name="Context"></a>Context</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the context state State monad </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">StrategyContext</span>&gt; <span class="ident">Context</span></div></div></div><div class="member-title"><a name="FailedOnce"></a>FailedOnce</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Set the failure count to 1 and set LastFailure to UtcNow </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">FailedOnce</span></div></div></div><div class="member-title"><a name="IncFailureCount"></a>IncFailureCount</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Increase the failure count state </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">IncFailureCount</span></div></div></div><div class="member-title"><a name="ResetFailureCount"></a>ResetFailureCount</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reset the failure count state to zero and set LastFailure to max-value </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">ResetFailureCount</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="Identity"></a>Identity</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Identity function for the strategy state monad.  Use when you want a no-op </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">Identity</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="Reset"></a>Reset</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Resets the global (to the Process) state.  This wipes out things like the current retries counter, the time since the last failure, etc. </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">Reset</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="AllForOne"></a>AllForOne(State&lt;StrategyContext, Unit&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AllForOne__State_StrategyContext_Unit_stages_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >All-for-one strategy This strategy affects the process that failed and its siblings </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stages</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Set of computations to compose that results in a behaviour  for the strategy</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">AllForOne</span>(<span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; stages)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-AllForOne__State_StrategyContext_Unit_stages_"><div class="section_title">SOURCE</div><div class="code">
            Return(state =&gt; Compose(stages).Run(state.With(Affects: state.Siblings)))</div></div></div><div class="member-title"><a name="Always"></a>Always(Directive)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Always__Directive__directive_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Always return this Directive in the final StrategyDecision </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">directive</div><div class="arg-type"><span class="ident">Directive</span></div></div><div class="arg-desc">Directive to return</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">Always</span>(<span class="ident">Directive</span> directive)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-Always__Directive__directive_"><div class="section_title">SOURCE</div><div class="code">
            Match(Otherwise(directive))</div></div></div><div class="member-title"><a name="Backoff"></a>Backoff(Time, Time, Time)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Backoff__Time__Min__Time__Max__Time__Step_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a strategy that causes the Process to &#39;back off&#39;.  That is it will be paused for an amount of time before it can continue doing other operations. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Min</div><div class="arg-type"><span class="ident">Time</span></div></div><div class="arg-desc">Minimum back-off time</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Max</div><div class="arg-type"><span class="ident">Time</span></div></div><div class="arg-desc">Maximum back-off time; once this point is reached the Process  will stop for good</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Step</div><div class="arg-type"><span class="ident">Time</span></div></div><div class="arg-desc">The amount to add to the current back-off time for each failure. That allows for the steps to grow gradually larger as the Process keeps failing</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">Backoff</span>(<span class="ident">Time</span> Min, <span class="ident">Time</span> Max, <span class="ident">Time</span> Step)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-Backoff__Time__Min__Time__Max__Time__Step_"><div class="section_title">SOURCE</div><div class="code">
            from x in Context
            let current = x.Global.Failures &lt; 2
                ? Min
                : (x.Global.BackoffAmount + Step).Max(Min)
            from y in current &gt; Max
                ? SetDirective(Directive.Stop)
                : SetBackOffAmount(current)
            select y</div></div></div><div class="member-title"><a name="Backoff"></a>Backoff(Time)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Backoff__Time__Duration_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a strategy that causes the Process to &#39;back off&#39; for a fixed amount of  time.  That is it will be paused for an amount of time before it can continue  doing other operations.  This strategy never causes a Process to be stopped. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Duration</div><div class="arg-type"><span class="ident">Time</span></div></div><div class="arg-desc">Back-off time period</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">Backoff</span>(<span class="ident">Time</span> Duration)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-Backoff__Time__Duration_"><div class="section_title">SOURCE</div><div class="code">
            Backoff(Duration, Double.MaxValue*seconds, 0*seconds)</div></div></div><div class="member-title"><a name="Compose"></a>Compose(State&lt;StrategyContext, Unit&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Compose__State_StrategyContext_Unit_stages_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Compose a sequence of state computations </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stages</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">Compose</span>(<span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; stages)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Compose__State_StrategyContext_Unit_stages_"><div class="section_title">SOURCE</div><div class="code">
            Return(state =&gt; (stages.Fold(state, (s, c) =&gt; c.Run(s).State), unit))</div></div></div><div class="member-title"><a name="MapGlobal"></a>MapGlobal(Func&lt;StrategyState, StrategyState&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapGlobal__Func_StrategyState_StrategyState_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the global (to the Process) state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">StrategyState</span>, <span class="ident">StrategyState</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">MapGlobal</span>(<span class="ident">Func</span>&lt;<span class="ident">StrategyState</span>, <span class="ident">StrategyState</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MapGlobal__Func_StrategyState_StrategyState_map_"><div class="section_title">SOURCE</div><div class="code">
            from x in Context
            from y in put(x.With(Global: map(x.Global)))
            select y</div></div></div><div class="member-title"><a name="Match"></a>Match(State&lt;Exception, Option&lt;Directive&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match__State_Exception_Option&lt;Directive>_directives_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match a range of State computations that take the Exception that caused the failure and map it to an Optional Directive.  The first computation to  return a Some(Directive) will succeed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">directives</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">Directive</span>&gt;&gt;</div></div><div class="arg-desc">Directive maps</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">Match</span>(<span class="ident">State</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">Directive</span>&gt;&gt; directives)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-Match__State_Exception_Option&lt;Directive>_directives_"><div class="section_title">SOURCE</div><div class="code">
            Return(state =&gt; 
                state.With(
                    Directive: choose(
                        directives.Concat(ProcessSetting.StandardDirectives)
                                  .ToArray())
                                  .Run(state.Exception)
                                  .Value.IfFailThrow()))</div></div></div><div class="member-title"><a name="OneForOne"></a>OneForOne(State&lt;StrategyContext, Unit&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-OneForOne__State_StrategyContext_Unit_stages_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >One-for-one strategy This strategy affects only the process that failed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stages</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Set of computations to compose that results in a behaviour  for the strategy</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">OneForOne</span>(<span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; stages)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-OneForOne__State_StrategyContext_Unit_stages_"><div class="section_title">SOURCE</div><div class="code">
            Return(state =&gt; Compose(stages).Run(state.With(Affects: new ProcessId[1] { state.Self })))</div></div></div><div class="member-title"><a name="Otherwise"></a>Otherwise(Func&lt;Exception, Directive&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Otherwise__Func_Exception_Directive_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Used within the Strategy.Match function to provide a default Directive if the Exception that caused the failure doesn&#39;t match any of the previous With clauses. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Directive</span>&gt;</div></div><div class="arg-desc">Map from the Exception to a Directive</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">Directive</span>&gt;&gt; <span class="ident">Otherwise</span>(<span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Directive</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">Directive</span>&gt;&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-Otherwise__Func_Exception_Directive_map_"><div class="section_title">SOURCE</div><div class="code">
            from ex in get&lt;Exception&gt;()
            select 
                (ex is ProcessKillException) || (ex is ProcessSetupException)
                    ? None
                    : Some(map(ex))</div></div></div><div class="member-title"><a name="Otherwise"></a>Otherwise(Directive)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Otherwise__Directive__directive_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Used within the Strategy.Match function to provide a default Directive if the Exception that caused the failure doesn&#39;t match any of the previous With clauses. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">directive</div><div class="arg-type"><span class="ident">Directive</span></div></div><div class="arg-desc">Directive to use</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">Directive</span>&gt;&gt; <span class="ident">Otherwise</span>(<span class="ident">Directive</span> directive)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">Directive</span>&gt;&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-Otherwise__Directive__directive_"><div class="section_title">SOURCE</div><div class="code">
            Otherwise(_ =&gt; directive)</div></div></div><div class="member-title"><a name="Otherwise"></a>Otherwise(Func&lt;Directive, MessageDirective&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Otherwise__Func_Directive_MessageDirective_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Directive</span>, <span class="ident">MessageDirective</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">Directive</span>, <span class="ident">Option</span>&lt;<span class="ident">MessageDirective</span>&gt;&gt; <span class="ident">Otherwise</span>(<span class="ident">Func</span>&lt;<span class="ident">Directive</span>, <span class="ident">MessageDirective</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">Directive</span>, <span class="ident">Option</span>&lt;<span class="ident">MessageDirective</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Otherwise__Func_Directive_MessageDirective_map_"><div class="section_title">SOURCE</div><div class="code">
            from directive in get&lt;Directive&gt;()
            select Some(map(directive))</div></div></div><div class="member-title"><a name="Otherwise"></a>Otherwise(MessageDirective)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Otherwise__MessageDirective__directive_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">directive</div><div class="arg-type"><span class="ident">MessageDirective</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">Directive</span>, <span class="ident">Option</span>&lt;<span class="ident">MessageDirective</span>&gt;&gt; <span class="ident">Otherwise</span>(<span class="ident">MessageDirective</span> directive)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">Directive</span>, <span class="ident">Option</span>&lt;<span class="ident">MessageDirective</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Otherwise__MessageDirective__directive_"><div class="section_title">SOURCE</div><div class="code">
            Otherwise(_ =&gt; directive)</div></div></div><div class="member-title"><a name="Pause"></a>Pause(Time)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Pause__Time__duration_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pauses the Process for a fixed amount of time </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">duration</div><div class="arg-type"><span class="ident">Time</span></div></div><div class="arg-desc">Duration of the pause before resuming</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">Pause</span>(<span class="ident">Time</span> duration)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-Pause__Time__duration_"><div class="section_title">SOURCE</div><div class="code">
            from x in Context
            from y in put(x.With(Pause: duration))
            select y</div></div></div><div class="member-title"><a name="Redirect"></a>Redirect(State&lt;Directive, Option&lt;MessageDirective&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Redirect__State_Directive_Option&lt;MessageDirective>_directives_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match a range of State computations that take the currently selected  Directive and map it to an Optional MessageDirective.  The first computation  to return a Some(MessageDirective) will succeed.  If a Directive hasn&#39;t been chosen by the time this is invoked then RestartNow is used by default. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">directives</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">Directive</span>, <span class="ident">Option</span>&lt;<span class="ident">MessageDirective</span>&gt;&gt;</div></div><div class="arg-desc">Directive maps</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">Redirect</span>(<span class="ident">State</span>&lt;<span class="ident">Directive</span>, <span class="ident">Option</span>&lt;<span class="ident">MessageDirective</span>&gt;&gt; directives)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-Redirect__State_Directive_Option&lt;MessageDirective>_directives_"><div class="section_title">SOURCE</div><div class="code">
            Return(state =&gt; 
                state.With(MessageDirective: 
                    choose(directives)
                        .Run(state.Directive.IfNone(Directive.Restart))
                        .Value
                        .IfFailThrow()))</div></div></div><div class="member-title"><a name="Redirect"></a>Redirect(MessageDirective)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Redirect__MessageDirective__defaultDirective_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Provides a message redirection strategy that always uses the same MessageDirective regardless of the Directive provided. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">defaultDirective</div><div class="arg-type"><span class="ident">MessageDirective</span></div></div><div class="arg-desc">Default message directive</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">Redirect</span>(<span class="ident">MessageDirective</span> defaultDirective)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-Redirect__MessageDirective__defaultDirective_"><div class="section_title">SOURCE</div><div class="code">
            Redirect(Otherwise(defaultDirective))</div></div></div><div class="member-title"><a name="Retries"></a>Retries(int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Retries__int__Count_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Gives the strategy a behaviour that will only fail N times before forcing the Process to stop </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of times to retry</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">Retries</span>(<span class="keyword">int</span> Count)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-Retries__int__Count_"><div class="section_title">SOURCE</div><div class="code">
            from x in Context
            from y in x.Global.Failures &gt;= Count
                ? SetDirective(Directive.Stop)
                : Identity
            select y</div></div></div><div class="member-title"><a name="Retries"></a>Retries(int, Time)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Retries__int__Count__Time__Duration_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Gives the strategy a behaviour that will only fail N times before forcing the Process to stop.  However if a time-peroid of Duration elapses, then the number of failures &#39;so far&#39; is reset to zero.<br/><br/> This behaviour allows something that&#39;s rapidly failing to shutdown, but will allow the occasional failure. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of times to retry</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Duration</div><div class="arg-type"><span class="ident">Time</span></div></div><div class="arg-desc">Time between failures</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">Retries</span>(<span class="keyword">int</span> Count, <span class="ident">Time</span> Duration)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-Retries__int__Count__Time__Duration_"><div class="section_title">SOURCE</div><div class="code">
            from x in Context
            let now = DateTime.UtcNow
            let expired = (Time)(now - x.Global.LastFailure) &gt; Duration
            let failures = x.Global.Failures
            from y in expired
                        ? Reset
                        : failures &gt;= Count 
                            ? SetDirective(Directive.Stop)
                            : Identity
            select y</div></div></div><div class="member-title"><a name="Return"></a>Return(Func&lt;StrategyContext, StrategyContext&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Return__Func_StrategyContext_StrategyContext_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">StrategyContext</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">Return</span>(<span class="ident">Func</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">StrategyContext</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Return__Func_StrategyContext_StrategyContext_f_"><div class="section_title">SOURCE</div><div class="code">
            State&lt;StrategyContext, Unit&gt;(s =&gt; (unit, f(s)))</div></div></div><div class="member-title"><a name="Return&lt;A>"></a>Return&lt;A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Return_A_A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">A</span>&gt; <span class="ident">Return</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Return_A_A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(MState&lt;SState&lt;StrategyContext, A&gt;, State&lt;StrategyContext, A&gt;, StrategyContext, A&gt;).Return(value)</div></div></div><div class="member-title"><a name="Return&lt;A>"></a>Return&lt;A&gt;(Func&lt;StrategyContext, ValueTuple&lt;StrategyContext, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Return_A_Func_StrategyContext_ValueTuple&lt;StrategyContext, A>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">A</span>&gt; <span class="ident">Return</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">A</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Return_A_Func_StrategyContext_ValueTuple&lt;StrategyContext, A>_f_"><div class="section_title">SOURCE</div><div class="code">
            State&lt;StrategyContext, A&gt;(s =&gt;
            {
                var (ns, na) = f(s);
                return (na, ns);
            })</div></div></div><div class="member-title"><a name="Return&lt;A>"></a>Return&lt;A&gt;(Func&lt;StrategyContext, ValueTuple&lt;TryOption&lt;A&gt;, StrategyContext&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Return_A_Func_StrategyContext_ValueTuple&lt;TryOption&lt;A>, StrategyContext>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">StrategyContext</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">A</span>&gt; <span class="ident">Return</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">StrategyContext</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Return_A_Func_StrategyContext_ValueTuple&lt;TryOption&lt;A>, StrategyContext>_f_"><div class="section_title">SOURCE</div><div class="code">
            default(MState&lt;SState&lt;StrategyContext, A&gt;, State&lt;StrategyContext, A&gt;, StrategyContext, A&gt;).Return( s =&gt;
            {
                var (a, ns) = f(s);
                return a.Match(
                    Some: na =&gt; (na, ns, false),
                    Fail: () =&gt; (default(A), s, true));
            })</div></div></div><div class="member-title"><a name="SetBackOffAmount"></a>SetBackOffAmount(Time)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SetBackOffAmount__Time__step_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sets the current back off amount </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">step</div><div class="arg-type"><span class="ident">Time</span></div></div><div class="arg-desc">Step size for the next Process pause before resuming</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">SetBackOffAmount</span>(<span class="ident">Time</span> step)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-SetBackOffAmount__Time__step_"><div class="section_title">SOURCE</div><div class="code">
            from x in Context
            from y in put(x.With(Global: x.Global.With(BackoffAmount: step), Pause: step))
            select y</div></div></div><div class="member-title"><a name="SetDirective"></a>SetDirective(Option&lt;Directive&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SetDirective__Option_Directive_directive_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sets the decision directive.  Once set, cant be un-set. If the directive is Stop then the Global state is reset for this strategy (global to the Process) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">directive</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">Directive</span>&gt;</div></div><div class="arg-desc">Directive to set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">SetDirective</span>(<span class="ident">Option</span>&lt;<span class="ident">Directive</span>&gt; directive)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-SetDirective__Option_Directive_directive_"><div class="section_title">SOURCE</div><div class="code">
            from x in Context
            from y in put(x.With(Directive: directive))
            select y</div></div></div><div class="member-title"><a name="SetLastFailure"></a>SetLastFailure(DateTime)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SetLastFailure__DateTime__when_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sets the last-failure state.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">when</div><div class="arg-type"><span class="ident">DateTime</span></div></div><div class="arg-desc">Time to set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">SetLastFailure</span>(<span class="ident">DateTime</span> when)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div></div><div style="display:none" id="code-SetLastFailure__DateTime__when_"><div class="section_title">SOURCE</div><div class="code">
            from x in Context
            from y in put(x.With(Global: x.Global.With(LastFailure: when)))
            select y</div></div></div><div class="member-title"><a name="When&lt;TDirective>"></a>When&lt;TDirective&gt;(Func&lt;TDirective, MessageDirective&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-When_TDirective_Func_TDirective_MessageDirective_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TDirective</span>, <span class="ident">MessageDirective</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">Directive</span>, <span class="ident">Option</span>&lt;<span class="ident">MessageDirective</span>&gt;&gt; <span class="ident">When</span>&lt;<span class="ident">TDirective</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">TDirective</span>, <span class="ident">MessageDirective</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">Directive</span>, <span class="ident">Option</span>&lt;<span class="ident">MessageDirective</span>&gt;&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">TDirective</span> : <span class="ident">Directive</span></div></div><div style="display:none" id="code-When_TDirective_Func_TDirective_MessageDirective_map_"><div class="section_title">SOURCE</div><div class="code">
            from directive in get&lt;Directive&gt;()
            let typeMatch = typeof(TDirective).GetTypeInfo().IsAssignableFrom(directive.GetType().GetTypeInfo())
            select typeMatch
                ? Some(map((TDirective)directive))
                : None</div></div></div><div class="member-title"><a name="When&lt;TDirective>"></a>When&lt;TDirective&gt;(MessageDirective)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-When_TDirective_MessageDirective__directive_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">directive</div><div class="arg-type"><span class="ident">MessageDirective</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">Directive</span>, <span class="ident">Option</span>&lt;<span class="ident">MessageDirective</span>&gt;&gt; <span class="ident">When</span>&lt;<span class="ident">TDirective</span>&gt;(<span class="ident">MessageDirective</span> directive)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">Directive</span>, <span class="ident">Option</span>&lt;<span class="ident">MessageDirective</span>&gt;&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">TDirective</span> : <span class="ident">Directive</span></div></div><div style="display:none" id="code-When_TDirective_MessageDirective__directive_"><div class="section_title">SOURCE</div><div class="code">
            When&lt;TDirective&gt;(_ =&gt; directive)</div></div></div><div class="member-title"><a name="With&lt;TException>"></a>With&lt;TException&gt;(Func&lt;TException, Directive&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-With_TException_Func_TException_Directive_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Used within the Strategy.Match function to match an Exception to a Directive.   Use the function&#39;s generic type to specify the type of Exception to match. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TException</span>, <span class="ident">Directive</span>&gt;</div></div><div class="arg-desc">Map from the TException to a Directive</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">Directive</span>&gt;&gt; <span class="ident">With</span>&lt;<span class="ident">TException</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">TException</span>, <span class="ident">Directive</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">Directive</span>&gt;&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">TException</span> : <span class="ident">Exception</span></div></div><div style="display:none" id="code-With_TException_Func_TException_Directive_map_"><div class="section_title">SOURCE</div><div class="code">
            from ex in get&lt;Exception&gt;()
            let typeMatch = typeof(TException).GetTypeInfo().IsAssignableFrom(ex.GetType().GetTypeInfo())
            select typeMatch
                ? Some(map((TException)ex))
                : None</div></div></div><div class="member-title"><a name="With&lt;TException>"></a>With&lt;TException&gt;(Directive)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-With_TException_Directive__directive_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Used within the Strategy.Match function to match an Exception to a Directive.   Use the function&#39;s generic type to specify the type of Exception to match. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">directive</div><div class="arg-type"><span class="ident">Directive</span></div></div><div class="arg-desc">Directive to use if the Exception matches TException</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">Directive</span>&gt;&gt; <span class="ident">With</span>&lt;<span class="ident">TException</span>&gt;(<span class="ident">Directive</span> directive)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">Directive</span>&gt;&gt;</div><div class="normal"><span >Strategy computation as a State monad</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">TException</span> : <span class="ident">Exception</span></div></div><div style="display:none" id="code-With_TException_Directive__directive_"><div class="section_title">SOURCE</div><div class="code">
            With&lt;TException&gt;(_ =&gt; directive)</div></div></div></div></body></html>