<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../Echo/index.htm">Echo</a> \ <span class="nav-bar-link" href="StrategyEvent_.htm">StrategyEvent</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Failure">Failure(State&lt;StrategyContext, Unit&gt;, ProcessId, ProcessId, ProcessId, IEnumerable&lt;ProcessId&gt;, Exception, object)</a></div><div class="content-panel"><h1 >StrategyEvent Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">StrategyEvent</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>Echo</div></div><h2 >Methods</h2><div class="member-title"><a name="Failure"></a>Failure(State&lt;StrategyContext, Unit&gt;, ProcessId, ProcessId, ProcessId, IEnumerable&lt;ProcessId&gt;, Exception, object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Failure__State_StrategyContext_Unit_strategy__ProcessId__pid__ProcessId__sender__ProcessId__parent__IEnumerable_ProcessId_siblings__Exception__ex__object__msg_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new State computation that is primed with the data of a particular failure event.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Strategy as a State computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process ID that failed</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process that sent the message that cause the failure</div></div><div class="arg"><div class="arg-header"><div class="arg-name">parent</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Supervisor of the failed Process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">siblings</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div><div class="arg-desc">The siblings of the failed Process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">ex</div><div class="arg-type"><span class="ident">Exception</span></div></div><div class="arg-desc">Exception</div></div><div class="arg"><div class="arg-header"><div class="arg-name">msg</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Message that caused the failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">StrategyState</span>, <span class="ident">StrategyDecision</span>&gt; <span class="ident">Failure</span>(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; strategy, <span class="ident">ProcessId</span> pid, <span class="ident">ProcessId</span> sender, <span class="ident">ProcessId</span> parent, <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; siblings, <span class="ident">Exception</span> ex, <span class="keyword">object</span> msg)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">StrategyState</span>, <span class="ident">StrategyDecision</span>&gt;</div><div class="normal"><span >State computation that can be invoked by passing it an object of StrategyState.  This will result in a StateResult that contains the mutated StrategyState and a StrategyDecision.  The StrategyDecision  contains all the information needed to decide the fate of a Process (and related processes)</span></div></div></div><div style="display:none" id="code-Failure__State_StrategyContext_Unit_strategy__ProcessId__pid__ProcessId__sender__ProcessId__parent__IEnumerable_ProcessId_siblings__Exception__ex__object__msg_"><div class="section_title">SOURCE</div><div class="code">
                State&lt;StrategyState, StrategyDecision&gt;(stateInst =&gt;
                {
                    var now = DateTime.UtcNow;

                    var state = strategy.Run(
                        StrategyContext.Empty.With(
                            Global: stateInst.With(Failures: stateInst.Failures + 1),
                            FailedProcess: pid,
                            ParentProcess: parent,
                            Sender: sender,
                            Siblings: siblings,
                            Exception: ex,
                            Message: msg)).State;

                    var decision = new StrategyDecision(
                        state.Directive.IfNone(Directive.Restart),
                        state.MessageDirective.IfNone(MessageDirective.ForwardToDeadLetters),
                        state.Affects,
                        state.Pause
                    );

                    return (decision, state.Global.With(LastFailure: now));
                })</div></div></div></div></body></html>