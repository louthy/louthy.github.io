<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../Echo/index.htm">Echo</a> \ <span class="nav-bar-link" href="ProcessConfig_.htm">ProcessConfig</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#clear">clear(string, string, SystemName)</a><a class="nav-link" href="#clear">clear(SystemName)</a><a class="nav-link" href="#initialise">initialise()</a><a class="nav-link" href="#initialise">initialise(SystemName, ProcessName, ProcessName, string, string, string)</a><a class="nav-link" href="#initialise">initialise(string, Option&lt;string&gt;, Action, IEnumerable&lt;FuncSpec&gt;)</a><a class="nav-link" href="#initialiseFileSystem">initialiseFileSystem(string, IEnumerable&lt;FuncSpec&gt;)</a><a class="nav-link" href="#initialiseFileSystem">initialiseFileSystem(Action, IEnumerable&lt;FuncSpec&gt;)</a><a class="nav-link" href="#initialiseFileSystem">initialiseFileSystem(IEnumerable&lt;FuncSpec&gt;)</a><a class="nav-link" href="#initialiseFileSystem">initialiseFileSystem(string, Action, IEnumerable&lt;FuncSpec&gt;)</a><a class="nav-link" href="#initialiseWeb">initialiseWeb(string, IEnumerable&lt;FuncSpec&gt;)</a><a class="nav-link" href="#initialiseWeb">initialiseWeb(string, Action, IEnumerable&lt;FuncSpec&gt;)</a><a class="nav-link" href="#read&lt;T>">read&lt;T&gt;(string, string, T, SystemName)</a><a class="nav-link" href="#read&lt;T>">read&lt;T&gt;(string, T)</a><a class="nav-link" href="#readList&lt;T>">readList&lt;T&gt;(string, string)</a><a class="nav-link" href="#readMap&lt;T>">readMap&lt;T&gt;(string, string)</a><a class="nav-link" href="#write">write(string, object)</a><a class="nav-link" href="#write">write(string, string, object, SystemName)</a></div><div class="content-panel"><h1 >ProcessConfig Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">ProcessConfig</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>Echo</div></div><h2 >Methods</h2><div class="member-title"><a name="clear"></a>clear(string, string, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-clear__string__name__string__prop__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Clear a setting </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Name of the setting</div></div><div class="arg"><div class="arg-header"><div class="arg-name">prop</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">If the setting is a complex value (like a map or record), then  this selects the property of the setting to access</div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">clear</span>(<span class="keyword">string</span> name, <span class="keyword">string</span> prop, <span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div></div><div style="display:none" id="code-clear__string__name__string__prop__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            if (InMessageLoop)
            {
                var trans = ActorContext.Request.Ops;
                ActorContext.Request.SetOps(trans.Clear(name, prop, ActorContext.Request.ProcessFlags));
                return unit;
            }
            else
            {
                return ActorContext.System(system).Settings.ClearSettingOverride($&quot;role-{Role.Current.Value}@settings&quot;, name, prop, ProcessFlags.PersistState);
            }
        </div></div></div><div class="member-title"><a name="clear"></a>clear(SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-clear__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Clear all settings for the process (or role if outside of the message-loop of a Process) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">clear</span>(<span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div></div><div style="display:none" id="code-clear__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            if (InMessageLoop)
            {
                var trans = ActorContext.Request.Ops;
                ActorContext.Request.SetOps(trans.ClearAll(ActorContext.Request.ProcessFlags));
                return unit;
            }
            else
            {
                return ActorContext.System(system).Settings.ClearSettingsOverride($&quot;role-{Role.Current.Value}@settings&quot;, ProcessFlags.PersistState);
            }
        </div></div></div><div class="member-title"><a name="initialise"></a>initialise()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-initialise__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Process system initialisation Initialises am in-memory only Process system </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">initialise</span>()</div></div><div style="display:none" id="code-initialise__"><div class="section_title">SOURCE</div><div class="code">
            initialise(&quot;&quot;, None, () =&gt; { })</div></div></div><div class="member-title"><a name="initialise"></a>initialise(SystemName, ProcessName, ProcessName, string, string, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-initialise__SystemName__systemName__ProcessName__roleName__ProcessName__nodeName__string__connectionString__string__catalogueName__string__providerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Initialise without a config file or text </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">systemName</div><div class="arg-type"><span class="ident">SystemName</span></div></div><div class="arg-desc">Name of the system - this is most useful</div></div><div class="arg"><div class="arg-header"><div class="arg-name">roleName</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">nodeName</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">connectionString</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">catalogueName</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">providerName</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc"></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">initialise</span>(<span class="ident">SystemName</span> systemName, <span class="ident">ProcessName</span> roleName, <span class="ident">ProcessName</span> nodeName, <span class="keyword">string</span> connectionString, <span class="keyword">string</span> catalogueName, <span class="keyword">string</span> providerName = &quot;redis&quot;)</div></div><div style="display:none" id="code-initialise__SystemName__systemName__ProcessName__roleName__ProcessName__nodeName__string__connectionString__string__catalogueName__string__providerName_"><div class="section_title">SOURCE</div><div class="code">
            lock (sync)
            {
                var types = new Types();

                StartFromConfig(new ProcessSystemConfig(
                    systemName,
                    nodeName.Value,
                    Map&lt;string, ValueToken&gt;(),
                    Map&lt;ProcessId, ProcessToken&gt;(),
                    Map&lt;string, State&lt;StrategyContext, Unit&gt;&gt;(),
                    new ClusterToken(
                        None,
                        List(
                            new NamedValueToken(&quot;node-name&quot;, new ValueToken(types.String, nodeName.Value), None),
                            new NamedValueToken(&quot;role&quot;, new ValueToken(types.String, roleName.Value), None),
                            new NamedValueToken(&quot;env&quot;, new ValueToken(types.String, systemName.Value), None),
                            new NamedValueToken(&quot;connection&quot;, new ValueToken(types.String, connectionString), None),
                            new NamedValueToken(&quot;database&quot;, new ValueToken(types.String, catalogueName), None),
                            new NamedValueToken(&quot;provider&quot;, new ValueToken(types.String, providerName), None))),
                    types
                ));
            }
            return unit;
        </div></div></div><div class="member-title"><a name="initialise"></a>initialise(string, Option&lt;string&gt;, Action, IEnumerable&lt;FuncSpec&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-initialise__string__configText__Option_string_nodeName__Action__setup__IEnumerable_FuncSpec_strategyFuncs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Process system configuration initialisation This will parse the configuration text, It can run multiple times, once the config has loaded the system won&#39;t  re-load the config until you call ProcessConfig.unload() followed by ProcessConfig.initialise(...), so it&#39;s safe  to not surround it with ifs.<br/><br/> NOTE: If a cluster is specified in config text and its &#39;node-name&#39; matches nodeName, then those settings  will be used to connect to the cluster.  This allows for different staging environments to be setup. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">configText</div><div class="arg-type"><span class="keyword">string</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">nodeName</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="keyword">string</span>&gt;</div></div><div class="arg-desc">If a cluster is specified in the cluster.conf and its &#39;node-name&#39; matches nodeName, then  those settings will be used to connect to the cluster.  This allows for different staging environments to be  setup.</div></div><div class="arg"><div class="arg-header"><div class="arg-name">setup</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc">A setup function to call on successful loading of the configuration files - this will happen once only.</div></div><div class="arg"><div class="arg-header"><div class="arg-name">strategyFuncs</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">FuncSpec</span>&gt;</div></div><div class="arg-desc">Plugin extra strategy behaviours by passing in a list of FuncSpecs.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">initialise</span>(<span class="keyword">string</span> configText, <span class="ident">Option</span>&lt;<span class="keyword">string</span>&gt; nodeName, <span class="ident">Action</span> setup = null, <span class="ident">IEnumerable</span>&lt;<span class="ident">FuncSpec</span>&gt; strategyFuncs = null)</div></div><div style="display:none" id="code-initialise__string__configText__Option_string_nodeName__Action__setup__IEnumerable_FuncSpec_strategyFuncs_"><div class="section_title">SOURCE</div><div class="code">
            lock (sync)
            {
                var parser = new ProcessSystemConfigParser(nodeName.IfNone(&quot;&quot;), new Types(), strategyFuncs);
                var configs = String.IsNullOrWhiteSpace(configText)
                    ? Map(Tuple(new SystemName(&quot;&quot;), ProcessSystemConfig.Empty))
                    : parser.ParseConfigText(configText);

                nodeName.Map(_ =&gt; configs.Filter(c =&gt; c.NodeName == nodeName).Iter(StartFromConfig))
                        .IfNone(() =&gt; configs.Filter(c =&gt; c.NodeName == &quot;root&quot;).Iter(StartFromConfig));

                setup?.Invoke();
                return unit;
            }
        </div></div></div><div class="member-title"><a name="initialiseFileSystem"></a>initialiseFileSystem(string, IEnumerable&lt;FuncSpec&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-initialiseFileSystem__string__nodeName__IEnumerable_FuncSpec_strategyFuncs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Process system configuration initialisation This will look for cluster.conf and process.conf files in the application folder.  It can run multiple times,  once the config has loaded the system won&#39;t re-load the config until you call ProcessConfig.unload() followed  by ProcessConfig.initialiseFileSystem(...), so it&#39;s safe to not surround it with ifs.<br/><br/> NOTE: If a cluster is specified in the cluster.conf and its &#39;node-name&#39; matches nodeName, then those settings  will be used to connect to the cluster.  This allows for different staging environments to be setup. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">nodeName</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">If a cluster is specified in the cluster.conf and its &#39;node-name&#39; matches nodeName, then  those settings will be used to connect to the cluster.  This allows for different staging environments to be  setup.</div></div><div class="arg"><div class="arg-header"><div class="arg-name">strategyFuncs</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">FuncSpec</span>&gt;</div></div><div class="arg-desc">Plugin extra strategy behaviours by passing in a list of FuncSpecs.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">initialiseFileSystem</span>(<span class="keyword">string</span> nodeName, <span class="ident">IEnumerable</span>&lt;<span class="ident">FuncSpec</span>&gt; strategyFuncs = null)</div></div><div style="display:none" id="code-initialiseFileSystem__string__nodeName__IEnumerable_FuncSpec_strategyFuncs_"><div class="section_title">SOURCE</div><div class="code">
            lock (sync)
            {
                return initialiseFileSystem(nodeName, () =&gt; { }, strategyFuncs);
            }
        </div></div></div><div class="member-title"><a name="initialiseFileSystem"></a>initialiseFileSystem(Action, IEnumerable&lt;FuncSpec&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-initialiseFileSystem__Action__setup__IEnumerable_FuncSpec_strategyFuncs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Process system configuration initialisation This will look for process.conf files in the application folder.  It can run multiple times,  once the config has loaded the system won&#39;t re-load the config until you call ProcessConfig.unload() followed  by  ProcessConfig.initialiseFileSystem(...), so it&#39;s safe to not surround it with ifs. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setup</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc">A setup function to call on successful loading of the configuration files - this will happen once only.</div></div><div class="arg"><div class="arg-header"><div class="arg-name">strategyFuncs</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">FuncSpec</span>&gt;</div></div><div class="arg-desc">Plugin extra strategy behaviours by passing in a list of FuncSpecs.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">initialiseFileSystem</span>(<span class="ident">Action</span> setup, <span class="ident">IEnumerable</span>&lt;<span class="ident">FuncSpec</span>&gt; strategyFuncs = null)</div></div><div style="display:none" id="code-initialiseFileSystem__Action__setup__IEnumerable_FuncSpec_strategyFuncs_"><div class="section_title">SOURCE</div><div class="code">
            lock (sync)
            {
                return initialiseFileSystem(null, setup, strategyFuncs);
            }
        </div></div></div><div class="member-title"><a name="initialiseFileSystem"></a>initialiseFileSystem(IEnumerable&lt;FuncSpec&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-initialiseFileSystem__IEnumerable_FuncSpec_strategyFuncs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Process system configuration initialisation This will look for process.conf files in the application folder.  It can run multiple times,  once the config has loaded the system won&#39;t re-load the config until you call ProcessConfig.unload() followed  by ProcessConfig.initialiseFileSystem(...), so it&#39;s safe to not surround it with ifs. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">strategyFuncs</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">FuncSpec</span>&gt;</div></div><div class="arg-desc">Plugin extra strategy behaviours by passing in a list of FuncSpecs.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">initialiseFileSystem</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">FuncSpec</span>&gt; strategyFuncs = null)</div></div><div style="display:none" id="code-initialiseFileSystem__IEnumerable_FuncSpec_strategyFuncs_"><div class="section_title">SOURCE</div><div class="code">
            lock (sync)
            {
                return initialiseFileSystem(null, () =&gt; { }, strategyFuncs);
            }
        </div></div></div><div class="member-title"><a name="initialiseFileSystem"></a>initialiseFileSystem(string, Action, IEnumerable&lt;FuncSpec&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-initialiseFileSystem__string__nodeName__Action__setup__IEnumerable_FuncSpec_strategyFuncs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Process system configuration initialisation This will look for cluster.conf and process.conf files in the application folder.  It can run multiple times,  but once the config has loaded the system won&#39;t re-load the config until you call ProcessConfig.unload() followed  by  ProcessConfig.initialiseFileSystem(...), so it&#39;s safe to not surround it with ifs.<br/><br/> NOTE: If a cluster is specified in the cluster.conf and its &#39;node-name&#39; matches nodeName, then those settings  will be used to connect to the cluster.  This allows for different staging environments to be setup. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">nodeName</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">If a cluster is specified in the cluster.conf and its &#39;node-name&#39; matches nodeName, then  those settings will be used to connect to the cluster.  This allows for different staging environments to be  setup.</div></div><div class="arg"><div class="arg-header"><div class="arg-name">setup</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc">A setup function to call on successful loading of the configuration files - this will happen once only.</div></div><div class="arg"><div class="arg-header"><div class="arg-name">strategyFuncs</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">FuncSpec</span>&gt;</div></div><div class="arg-desc">Plugin extra strategy behaviours by passing in a list of FuncSpecs.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">initialiseFileSystem</span>(<span class="keyword">string</span> nodeName, <span class="ident">Action</span> setup, <span class="ident">IEnumerable</span>&lt;<span class="ident">FuncSpec</span>&gt; strategyFuncs = null)</div></div><div style="display:none" id="code-initialiseFileSystem__string__nodeName__Action__setup__IEnumerable_FuncSpec_strategyFuncs_"><div class="section_title">SOURCE</div><div class="code">
            lock (sync)
            {
                var appPath = &quot;&quot;;
                var clusterPath = Path.Combine(appPath, &quot;cluster.conf&quot;);
                var processPath = Path.Combine(appPath, &quot;process.conf&quot;);

                var clusterText =
                    File.Exists(clusterPath)
                        ? File.ReadAllText(clusterPath)
                        : &quot;&quot;;

                var processText = File.Exists(processPath)
                    ? File.ReadAllText(processPath)
                    : &quot;&quot;;

                return initialise(clusterText + processText, nodeName, setup, strategyFuncs);
            }
        </div></div></div><div class="member-title"><a name="initialiseWeb"></a>initialiseWeb(string, IEnumerable&lt;FuncSpec&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-initialiseWeb__string__hostName__IEnumerable_FuncSpec_strategyFuncs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Process system configuration initialisation This will look for cluster.conf and process.conf files in the web application folder, you should call this function from within Application_BeginRequest of Global.asax.  It can run multiple times, once the config  has loaded the system won&#39;t re-load the config until you call ProcessConfig.unload() by  ProcessConfig.initialiseWeb(...) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">hostName</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Web-site host-name: i.e. www.example.com - you would usually call this when you  have your first Request object:  HttpContext.Request.Url.Host[CR-LF]      i.e. [CR-LF]      object sync = new object();     bool started = false;[CR-LF]             static bool started = false;             static object sync = new object();[CR-LF]             protected void Application_BeginRequest(Object sender, EventArgs e)             {                 if (!started)                 {                     lock (sync)                     {                         if (!started)                         {                             ProcessConfig.initialiseWeb(HttpContext.Request.Url.Host);                             started = true;                         }                     }                 }             } [CR-LF] </div></div><div class="arg"><div class="arg-header"><div class="arg-name">strategyFuncs</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">FuncSpec</span>&gt;</div></div><div class="arg-desc">Plugin extra strategy behaviours by passing in a list of FuncSpecs.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">initialiseWeb</span>(<span class="keyword">string</span> hostName, <span class="ident">IEnumerable</span>&lt;<span class="ident">FuncSpec</span>&gt; strategyFuncs = null)</div></div><div style="display:none" id="code-initialiseWeb__string__hostName__IEnumerable_FuncSpec_strategyFuncs_"><div class="section_title">SOURCE</div><div class="code">
            initialiseWeb(hostName, () =&gt; { }, strategyFuncs)</div></div></div><div class="member-title"><a name="initialiseWeb"></a>initialiseWeb(string, Action, IEnumerable&lt;FuncSpec&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-initialiseWeb__string__hostName__Action__setup__IEnumerable_FuncSpec_strategyFuncs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Process system configuration initialisation This will look for cluster.conf and process.conf files in the web application folder, you should call this function from within Application_BeginRequest of Global.asax.  It can run multiple times, once the config  has loaded the system won&#39;t re-load the config until you call ProcessConfig.unload() followed by  ProcessConfig.initialiseWeb(...)<br/><br/> NOTE: If a cluster is specified in the cluster.conf and its &#39;node-name&#39; matches the host name of the web- application (i.e. www.example.com), then those settings will be used to connect to the cluster.   This allows for different staging environments to be setup. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">hostName</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Web-site host-name: i.e. www.example.com - you would usually call this when you  have your first Request object:  HttpContext.Request.Url.Host[CR-LF]      i.e. [CR-LF]      object sync = new object();     bool started = false;[CR-LF]             static bool started = false;             static object sync = new object();[CR-LF]             protected void Application_BeginRequest(Object sender, EventArgs e)             {                 if (!started)                 {                     lock (sync)                     {                         if (!started)                         {                             ProcessConfig.initialiseWeb(HttpContext.Request.Url.Host);                             started = true;                         }                     }                 }             } [CR-LF] </div></div><div class="arg"><div class="arg-header"><div class="arg-name">setup</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc">A setup function to call on successful loading of the configuration files - this will happen once only.</div></div><div class="arg"><div class="arg-header"><div class="arg-name">strategyFuncs</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">FuncSpec</span>&gt;</div></div><div class="arg-desc">Plugin extra strategy behaviours by passing in a list of FuncSpecs.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">initialiseWeb</span>(<span class="keyword">string</span> hostName, <span class="ident">Action</span> setup, <span class="ident">IEnumerable</span>&lt;<span class="ident">FuncSpec</span>&gt; strategyFuncs = null)</div></div><div style="display:none" id="code-initialiseWeb__string__hostName__Action__setup__IEnumerable_FuncSpec_strategyFuncs_"><div class="section_title">SOURCE</div><div class="code">
            lock (sync)
            {
                return initialiseFileSystem(hostName, setup, strategyFuncs);
            }
        </div></div></div><div class="member-title"><a name="read&lt;T>"></a>read&lt;T&gt;(string, string, T, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-read_T_string__name__string__prop__T__defaultValue__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Access a setting  If in a Process message loop, then this accesses the configuration settings for the Process from the the configuration file, or stored in the cluster. If not in a Process message loop, then this accesses &#39;global&#39; configuration settings.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Name of the setting</div></div><div class="arg"><div class="arg-header"><div class="arg-name">prop</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">If the setting is a complex value (like a map or record), then  this selects the property of the setting to access</div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultValue</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">read</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">string</span> name, <span class="keyword">string</span> prop, <span class="ident">T</span> defaultValue, <span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Optional configuration setting value</span></div></div></div><div style="display:none" id="code-read_T_string__name__string__prop__T__defaultValue__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? ActorContext.Request.Ops.Read(name, prop, ActorContext.Request.ProcessFlags, defaultValue)
                : ActorContext.System(system).Settings.GetRoleSetting(name, prop, defaultValue)</div></div></div><div class="member-title"><a name="read&lt;T>"></a>read&lt;T&gt;(string, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-read_T_string__name__T__defaultValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Access a setting  If in a Process message loop, then this accesses the configuration settings for the Process from the the configuration file, or stored in the cluster. If not in a Process message loop, then this accesses &#39;global&#39; configuration settings.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Name of the setting</div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultValue</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">read</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">string</span> name, <span class="ident">T</span> defaultValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Optional configuration setting value</span></div></div></div><div style="display:none" id="code-read_T_string__name__T__defaultValue_"><div class="section_title">SOURCE</div><div class="code">
            read(name, &quot;value&quot;, defaultValue)</div></div></div><div class="member-title"><a name="readList&lt;T>"></a>readList&lt;T&gt;(string, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-readList_T_string__name__string__prop_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Access a list setting  If in a Process message loop, then this accesses the configuration settings for the Process from the the configuration file, or stored in the cluster. If not in a Process message loop, then this accesses &#39;global&#39; configuration settings.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Name of the setting</div></div><div class="arg"><div class="arg-header"><div class="arg-name">prop</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">If the setting is a complex value (like a map or record), then  this selects the property of the setting to access</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">readList</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">string</span> name, <span class="keyword">string</span> prop = &quot;value&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Optional configuration setting value</span></div></div></div><div style="display:none" id="code-readList_T_string__name__string__prop_"><div class="section_title">SOURCE</div><div class="code">
            read(name, prop, List&lt;T&gt;())</div></div></div><div class="member-title"><a name="readMap&lt;T>"></a>readMap&lt;T&gt;(string, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-readMap_T_string__name__string__prop_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Access a map setting  If in a Process message loop, then this accesses the configuration settings for the Process from the the configuration file, or stored in the cluster. If not in a Process message loop, then this accesses &#39;global&#39; configuration settings.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Name of the setting</div></div><div class="arg"><div class="arg-header"><div class="arg-name">prop</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">If the setting is a complex value (like a map or record), then  this selects the property of the setting to access</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">T</span>&gt; <span class="ident">readMap</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">string</span> name, <span class="keyword">string</span> prop = &quot;value&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >Optional configuration setting value</span></div></div></div><div style="display:none" id="code-readMap_T_string__name__string__prop_"><div class="section_title">SOURCE</div><div class="code">
            read(name, prop, Map&lt;string, T&gt;())</div></div></div><div class="member-title"><a name="write"></a>write(string, object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-write__string__name__object__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Write a setting </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Name of the setting</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Value to set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">write</span>(<span class="keyword">string</span> name, <span class="keyword">object</span> value)</div></div><div style="display:none" id="code-write__string__name__object__value_"><div class="section_title">SOURCE</div><div class="code">
            write(name, &quot;value&quot;, value)</div></div></div><div class="member-title"><a name="write"></a>write(string, string, object, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-write__string__name__string__prop__object__value__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Write a setting </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Name of the setting</div></div><div class="arg"><div class="arg-header"><div class="arg-name">prop</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">If the setting is a complex value (like a map or record), then  this selects the property of the setting to access</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Value to set</div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">write</span>(<span class="keyword">string</span> name, <span class="keyword">string</span> prop, <span class="keyword">object</span> value, <span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div></div><div style="display:none" id="code-write__string__name__string__prop__object__value__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            if (InMessageLoop)
            {
                var trans = ActorContext.Request.Ops;
                ActorContext.Request.SetOps(trans.Write(value, name, prop, ActorContext.Request.ProcessFlags));
                return unit;
            }
            else
            {
                return ActorContext.System(system).Settings.WriteSettingOverride($&quot;role-{Role.Current.Value}@settings&quot;, value, name, prop, ProcessFlags.PersistState);
            }
        </div></div></div></div></body></html>