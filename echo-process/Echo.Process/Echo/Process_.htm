<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../Echo/index.htm">Echo</a> \ <span class="nav-bar-link" href="Process_.htm">Process</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#DefaultStrategy">DefaultStrategy</a><a class="nav-link" href="#noreply">noreply</a><a class="nav-link" href="#SessionEnded">SessionEnded</a><a class="nav-link" href="#SessionStarted">SessionStarted</a><h3 >PROPERTIES</h3><a class="nav-link" href="#Children">Children</a><a class="nav-link" href="#isAsk">isAsk</a><a class="nav-link" href="#isTell">isTell</a><a class="nav-link" href="#Parent">Parent</a><a class="nav-link" href="#PreShutdown">PreShutdown</a><a class="nav-link" href="#ProcessSystemLog">ProcessSystemLog</a><a class="nav-link" href="#Self">Self</a><a class="nav-link" href="#Sender">Sender</a><a class="nav-link" href="#Shutdown">Shutdown</a><a class="nav-link" href="#Systems">Systems</a><h3 >METHODS</h3><a class="nav-link" href="#ask&lt;T>">ask&lt;T&gt;(ProcessId, object, ProcessId)</a><a class="nav-link" href="#ask&lt;T>">ask&lt;T&gt;(ProcessId, object)</a><a class="nav-link" href="#askAsync&lt;R>">askAsync&lt;R&gt;(ProcessId, object, ProcessId)</a><a class="nav-link" href="#askAsync&lt;R>">askAsync&lt;R&gt;(ProcessId, object)</a><a class="nav-link" href="#askChild&lt;T>">askChild&lt;T&gt;(ProcessName, object)</a><a class="nav-link" href="#askChild&lt;T>">askChild&lt;T&gt;(int, object)</a><a class="nav-link" href="#askChildren&lt;T>">askChildren&lt;T&gt;(object, int)</a><a class="nav-link" href="#askIfAlive&lt;T>">askIfAlive&lt;T&gt;(ProcessId, object, ProcessId)</a><a class="nav-link" href="#askIfAlive&lt;T>">askIfAlive&lt;T&gt;(ProcessId, object)</a><a class="nav-link" href="#askParent&lt;T>">askParent&lt;T&gt;(object)</a><a class="nav-link" href="#child">child(ProcessName)</a><a class="nav-link" href="#child">child(int)</a><a class="nav-link" href="#children">children(ProcessId)</a><a class="nav-link" href="#ClusterNodes">ClusterNodes(SystemName)</a><a class="nav-link" href="#dead">dead(object, string, SystemName)</a><a class="nav-link" href="#dead">dead(object, Exception, SystemName)</a><a class="nav-link" href="#dead">dead(object, Exception, string, SystemName)</a><a class="nav-link" href="#dead">dead(string, SystemName)</a><a class="nav-link" href="#dead">dead(Exception, SystemName)</a><a class="nav-link" href="#dead">dead(Exception, string, SystemName)</a><a class="nav-link" href="#DeadLetters">DeadLetters(SystemName)</a><a class="nav-link" href="#deregisterById">deregisterById(ProcessId)</a><a class="nav-link" href="#deregisterByName">deregisterByName(ProcessName, SystemName)</a><a class="nav-link" href="#Errors">Errors(SystemName)</a><a class="nav-link" href="#exists">exists(ProcessId)</a><a class="nav-link" href="#find">find(ProcessName)</a><a class="nav-link" href="#find">find(ProcessName, ProcessName)</a><a class="nav-link" href="#fwd">fwd(ProcessId)</a><a class="nav-link" href="#fwd&lt;T>">fwd&lt;T&gt;(ProcessId, T)</a><a class="nav-link" href="#fwdChild">fwdChild(ProcessName)</a><a class="nav-link" href="#fwdChild">fwdChild(int)</a><a class="nav-link" href="#fwdChild&lt;T>">fwdChild&lt;T&gt;(ProcessName, T)</a><a class="nav-link" href="#fwdChild&lt;T>">fwdChild&lt;T&gt;(int, T)</a><a class="nav-link" href="#hasSession">hasSession()</a><a class="nav-link" href="#inboxCount">inboxCount(ProcessId)</a><a class="nav-link" href="#kill">kill()</a><a class="nav-link" href="#kill">kill(ProcessId)</a><a class="nav-link" href="#observe&lt;T>">observe&lt;T&gt;(ProcessId)</a><a class="nav-link" href="#observeState&lt;T>">observeState&lt;T&gt;(ProcessId)</a><a class="nav-link" href="#pause">pause(ProcessId)</a><a class="nav-link" href="#pauseFor">pauseFor(ProcessId, Time)</a><a class="nav-link" href="#ping">ping(ProcessId)</a><a class="nav-link" href="#proxy&lt;TProcess>">proxy&lt;TProcess&gt;(ProcessId)</a><a class="nav-link" href="#publish&lt;T>">publish&lt;T&gt;(T)</a><a class="nav-link" href="#publish&lt;T>">publish&lt;T&gt;(T, TimeSpan)</a><a class="nav-link" href="#publish&lt;T>">publish&lt;T&gt;(T, DateTime)</a><a class="nav-link" href="#queryProcesses">queryProcesses(string, SystemName)</a><a class="nav-link" href="#queryProcessMetaData">queryProcessMetaData(string, SystemName)</a><a class="nav-link" href="#queryRegistered">queryRegistered(ProcessName, string, SystemName)</a><a class="nav-link" href="#register">register(ProcessName, SystemName)</a><a class="nav-link" href="#register">register(ProcessName, ProcessId)</a><a class="nav-link" href="#reply&lt;T>">reply&lt;T&gt;(T)</a><a class="nav-link" href="#replyError">replyError(Exception)</a><a class="nav-link" href="#replyError">replyError(string)</a><a class="nav-link" href="#replyErrorIfAsked">replyErrorIfAsked(Exception)</a><a class="nav-link" href="#replyErrorIfAsked">replyErrorIfAsked(string)</a><a class="nav-link" href="#replyIfAsked&lt;T>">replyIfAsked&lt;T&gt;(T)</a><a class="nav-link" href="#replyOrTellSender&lt;T>">replyOrTellSender&lt;T&gt;(T)</a><a class="nav-link" href="#resolve">resolve(ProcessId)</a><a class="nav-link" href="#resolvePID">resolvePID(ProcessId)</a><a class="nav-link" href="#restart">restart(ProcessId)</a><a class="nav-link" href="#Root">Root(SystemName)</a><a class="nav-link" href="#sessionClearData">sessionClearData(string)</a><a class="nav-link" href="#sessionGetData&lt;T>">sessionGetData&lt;T&gt;(string)</a><a class="nav-link" href="#sessionId">sessionId()</a><a class="nav-link" href="#sessionSetData">sessionSetData(string, object)</a><a class="nav-link" href="#sessionStart">sessionStart(SessionId, Time, SystemName)</a><a class="nav-link" href="#sessionStart">sessionStart(SessionId, Time)</a><a class="nav-link" href="#sessionStart">sessionStart(Time)</a><a class="nav-link" href="#sessionStop">sessionStop()</a><a class="nav-link" href="#sessionTouch">sessionTouch()</a><a class="nav-link" href="#sessionTouch">sessionTouch(SessionId)</a><a class="nav-link" href="#shutdown">shutdown()</a><a class="nav-link" href="#shutdown">shutdown(ProcessId)</a><a class="nav-link" href="#shutdownAll">shutdownAll()</a><a class="nav-link" href="#shutdownSystem">shutdownSystem(SystemName)</a><a class="nav-link" href="#spawn&lt;S, T>">spawn&lt;S, T&gt;(ProcessName, Func&lt;S&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, Func&lt;S, ProcessId, S&gt;, SystemName)</a><a class="nav-link" href="#spawn&lt;T>">spawn&lt;T&gt;(ProcessName, Action&lt;T&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, Action&lt;ProcessId&gt;)</a><a class="nav-link" href="#spawn&lt;TProcess, TMsg>">spawn&lt;TProcess, TMsg&gt;(ProcessName, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int)</a><a class="nav-link" href="#spawn&lt;TProcess>">spawn&lt;TProcess&gt;(ProcessName, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int)</a><a class="nav-link" href="#spawn&lt;TProcessInterface>">spawn&lt;TProcessInterface&gt;(ProcessName, Func&lt;TProcessInterface&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int)</a><a class="nav-link" href="#spawnMany&lt;S, T>">spawnMany&lt;S, T&gt;(int, ProcessName, Func&lt;S&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, Func&lt;S, ProcessId, S&gt;)</a><a class="nav-link" href="#spawnMany&lt;S, T>">spawnMany&lt;S, T&gt;(ProcessName, Map&lt;int, Func&lt;S&gt;&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, Func&lt;S, ProcessId, S&gt;)</a><a class="nav-link" href="#spawnMany&lt;T>">spawnMany&lt;T&gt;(int, ProcessName, Action&lt;T&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, Action&lt;ProcessId&gt;)</a><a class="nav-link" href="#spawnRoundRobin&lt;S, T>">spawnRoundRobin&lt;S, T&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int)</a><a class="nav-link" href="#spawnRoundRobin&lt;T>">spawnRoundRobin&lt;T&gt;(ProcessName, int, Action&lt;T&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int)</a><a class="nav-link" href="#spawnUnit&lt;T>">spawnUnit&lt;T&gt;(ProcessName, Func&lt;T, Unit&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, Func&lt;ProcessId, Unit&gt;)</a><a class="nav-link" href="#subscribe">subscribe(ProcessId)</a><a class="nav-link" href="#subscribe&lt;T>">subscribe&lt;T&gt;(ProcessId, IObserver&lt;T&gt;)</a><a class="nav-link" href="#subscribe&lt;T>">subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;, Action&lt;Exception&gt;, Action)</a><a class="nav-link" href="#subscribe&lt;T>">subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;, Action&lt;Exception&gt;)</a><a class="nav-link" href="#subscribe&lt;T>">subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;)</a><a class="nav-link" href="#subscribe&lt;T>">subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;, Action)</a><a class="nav-link" href="#subscribeState&lt;T>">subscribeState&lt;T&gt;(ProcessId)</a><a class="nav-link" href="#SystemCluster">SystemCluster(SystemName)</a><a class="nav-link" href="#tell&lt;T>">tell&lt;T&gt;(ProcessId, T, ProcessId)</a><a class="nav-link" href="#tell&lt;T>">tell&lt;T&gt;(ProcessId, T, TimeSpan, ProcessId)</a><a class="nav-link" href="#tell&lt;T>">tell&lt;T&gt;(ProcessId, T, DateTime, ProcessId)</a><a class="nav-link" href="#tellChild&lt;T>">tellChild&lt;T&gt;(ProcessName, T, ProcessId)</a><a class="nav-link" href="#tellChild&lt;T>">tellChild&lt;T&gt;(int, T, ProcessId)</a><a class="nav-link" href="#tellChildren&lt;T>">tellChildren&lt;T&gt;(T, ProcessId)</a><a class="nav-link" href="#tellChildren&lt;T>">tellChildren&lt;T&gt;(T, TimeSpan, ProcessId)</a><a class="nav-link" href="#tellChildren&lt;T>">tellChildren&lt;T&gt;(T, DateTime, ProcessId)</a><a class="nav-link" href="#tellChildren&lt;T>">tellChildren&lt;T&gt;(T, Func&lt;ProcessId, bool&gt;, ProcessId)</a><a class="nav-link" href="#tellChildren&lt;T>">tellChildren&lt;T&gt;(T, TimeSpan, Func&lt;ProcessId, bool&gt;, ProcessId)</a><a class="nav-link" href="#tellChildren&lt;T>">tellChildren&lt;T&gt;(T, DateTime, Func&lt;ProcessId, bool&gt;, ProcessId)</a><a class="nav-link" href="#tellParent&lt;T>">tellParent&lt;T&gt;(T, ProcessId)</a><a class="nav-link" href="#tellParent&lt;T>">tellParent&lt;T&gt;(T, TimeSpan, ProcessId)</a><a class="nav-link" href="#tellParent&lt;T>">tellParent&lt;T&gt;(T, DateTime, ProcessId)</a><a class="nav-link" href="#tellSelf&lt;T>">tellSelf&lt;T&gt;(T, ProcessId)</a><a class="nav-link" href="#tellSelf&lt;T>">tellSelf&lt;T&gt;(T, TimeSpan, ProcessId)</a><a class="nav-link" href="#tellSelf&lt;T>">tellSelf&lt;T&gt;(T, DateTime, ProcessId)</a><a class="nav-link" href="#unpause">unpause(ProcessId)</a><a class="nav-link" href="#unsubscribe">unsubscribe(ProcessId)</a><a class="nav-link" href="#unwatch">unwatch(ProcessId)</a><a class="nav-link" href="#unwatch">unwatch(ProcessId, ProcessId)</a><a class="nav-link" href="#User">User(SystemName)</a><a class="nav-link" href="#validMessageTypes">validMessageTypes(ProcessId)</a><a class="nav-link" href="#watch">watch(ProcessId)</a><a class="nav-link" href="#watch">watch(ProcessId, ProcessId)</a><a class="nav-link" href="#withSession">withSession(SessionId, Action)</a><a class="nav-link" href="#withSession&lt;R>">withSession&lt;R&gt;(SessionId, Func&lt;R&gt;)</a></div><div class="content-panel"><h1 >Process Class</h1><p ><span >The Language Ext process system uses the actor model as seen in Erlang      processes.  Actors are famed for their ability to support massive concurrency     through messaging and no shared memory. <br/><br/>      https://en.wikipedia.org/wiki/Actor_model <br/><br/>      Each process has an &#39;inbox&#39; and a state.  The state is the property of the     process and no other.  The messages in the inbox are passed to the process     one at a time.  When the process has finished processing a message it returns     its current state.  This state is then passed back in with the next message. <br/><br/>      You can think of it as a fold over a stream of messages. <br/><br/>      A process must finish dealing with a message before another will be given.       Therefore they are blocking.  But they block themselves only. The messages      will build up whilst they are processing. <br/><br/>      Because of this, processes are also in a &#39;supervision hierarchy&#39;.  Essentially     each process can spawn child-processes and the parent process &#39;owns&#39; the child.   <br/><br/>      Processes have a default failure strategy where the process just restarts with     its original state.  The inbox always survives a crash and the failed message      is sent to a &#39;dead letters&#39; process.  You can monitor this. You can also provide     bespoke strategies for different types of failure behaviours (See Strategy folder) <br/><br/>      So post crash the process restarts and continues processing the next message. <br/><br/>      By creating child processes it&#39;s possible for a parent process to &#39;offload&#39;     work.  It could create 10 child processes, and simply route the messages it     gets to its children for a very simple load balancer. Processes are very      lightweight and should not be seen as Threads or Tasks.  You can create      10s of 1000s of them and it will &#39;just work&#39;. <br/><br/>      Scheduled tasks become very simple also.  You can send a process to a message     with a delay.  So a background process that needs to run every 30 minutes      can just send itself a message with a delay on it at the end of its message     handler: <br/><br/>          tellSelf(unit, TimeSpan.FromMinutes(30)); <br/><br/>  </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">Process</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>Echo</div></div><h2 >Fields</h2><div class="member-title"><a name="DefaultStrategy"></a>DefaultStrategy</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Default Process strategy if one isn&#39;t provided on spawn </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; <span class="ident">DefaultStrategy</span></div></div></div><div class="member-title"><a name="noreply"></a>noreply</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Use this to cancel a reply in the proxy system </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">NoReturn</span> <span class="ident">noreply</span></div></div></div><div class="member-title"><a name="SessionEnded"></a>SessionEnded</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">IObservable</span>&lt;<span class="ident">SessionId</span>&gt; <span class="ident">SessionEnded</span></div></div></div><div class="member-title"><a name="SessionStarted"></a>SessionStarted</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">IObservable</span>&lt;<span class="ident">SessionId</span>&gt; <span class="ident">SessionStarted</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="Children"></a>Children</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the child processes of the running process </span></p><div class="section_title">REMARKS</div><span >This should be used from within a process message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">ProcessId</span>&gt; <span class="ident">Children</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">ProcessId</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="isAsk"></a>isAsk</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return True if the message sent is an Ask and not a Tell </span></p><div class="section_title">REMARKS</div><span >This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isAsk</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="isTell"></a>isTell</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return True if the message sent is a Tell and not an Ask </span></p><div class="section_title">REMARKS</div><span >This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isTell</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Parent"></a>Parent</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Parent process ID </span></p><div class="section_title">REMARKS</div><span >This should be used from within a process message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">Parent</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="PreShutdown"></a>PreShutdown</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Triggers when the Process system shuts down Either subscribe to the OnNext or OnCompleted </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">ShutdownCancellationToken</span>&gt; <span class="ident">PreShutdown</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">ShutdownCancellationToken</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="ProcessSystemLog"></a>ProcessSystemLog</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Log of everything that&#39;s going on in the Languge Ext process system </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">ProcessLogItem</span>&gt; <span class="ident">ProcessSystemLog</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">ProcessLogItem</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="Self"></a>Self</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Current process ID </span></p><div class="section_title">REMARKS</div><span >This should be used from within a process message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">Self</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Sender"></a>Sender</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sender process ID Always valid even if there&#39;s not a sender (the &#39;NoSender&#39; process ID will be provided). </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">Sender</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Shutdown"></a>Shutdown</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Triggers when the Process system shuts down Either subscribe to the OnNext or OnCompleted </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">SystemName</span>&gt; <span class="ident">Shutdown</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">SystemName</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="Systems"></a>Systems</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >List of system names running on this node </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">SystemName</span>&gt; <span class="ident">Systems</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">SystemName</span>&gt;</div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="ask&lt;T>"></a>ask&lt;T&gt;(ProcessId, object, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ask_T_ProcessId__pid__object__message__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ask a process for a reply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to ask</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ask</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid, <span class="keyword">object</span> message, <span class="ident">ProcessId</span> sender)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >The response to the request</span></div></div></div><div style="display:none" id="code-ask_T_ProcessId__pid__object__message__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(pid).Ask&lt;T&gt;(pid, message, sender)</div></div></div><div class="member-title"><a name="ask&lt;T>"></a>ask&lt;T&gt;(ProcessId, object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ask_T_ProcessId__pid__object__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ask a process for a reply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to ask</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Message to send</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ask</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid, <span class="keyword">object</span> message)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >The response to the request</span></div></div></div><div style="display:none" id="code-ask_T_ProcessId__pid__object__message_"><div class="section_title">SOURCE</div><div class="code">
            ask&lt;T&gt;(pid, message, Self)</div></div></div><div class="member-title"><a name="askAsync&lt;R>"></a>askAsync&lt;R&gt;(ProcessId, object, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-askAsync_R_ProcessId__pid__object__message__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Asynchronous ask - must be used outside of a Process </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to ask</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">askAsync</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">ProcessId</span> pid, <span class="keyword">object</span> message, <span class="ident">ProcessId</span> sender)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >A promise to return a response to the request</span></div></div></div><div style="display:none" id="code-askAsync_R_ProcessId__pid__object__message__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? raiseDontUseInMessageLoopException&lt;Task&lt;R&gt;&gt;(nameof(observeState))
                : Task.Run(() =&gt; ask&lt;R&gt;(pid, message, sender))</div></div></div><div class="member-title"><a name="askAsync&lt;R>"></a>askAsync&lt;R&gt;(ProcessId, object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-askAsync_R_ProcessId__pid__object__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Asynchronous ask - must be used outside of a Process </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to ask</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Message to send</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">askAsync</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">ProcessId</span> pid, <span class="keyword">object</span> message)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >A promise to return a response to the request</span></div></div></div><div style="display:none" id="code-askAsync_R_ProcessId__pid__object__message_"><div class="section_title">SOURCE</div><div class="code">
            askAsync&lt;R&gt;(pid, message, Self)</div></div></div><div class="member-title"><a name="askChild&lt;T>"></a>askChild&lt;T&gt;(ProcessName, object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-askChild_T_ProcessName__name__object__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ask a named child process for a reply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of the child process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Message to send</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">askChild</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> name, <span class="keyword">object</span> message)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div><div style="display:none" id="code-askChild_T_ProcessName__name__object__message_"><div class="section_title">SOURCE</div><div class="code">
            ask&lt;T&gt;(Self.Child(name), message)</div></div></div><div class="member-title"><a name="askChild&lt;T>"></a>askChild&lt;T&gt;(int, object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-askChild_T_int__index__object__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ask a child process (found by index) for a reply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Index of the child process (see remarks)</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Message to send</div></div><div class="section_title">REMARKS</div><span >Because of the potential changeable nature of child nodes, this will take the index and mod it by the number of children.  We expect this  call will mostly be used for load balancing, and round-robin type  behaviour, so feel that&#39;s acceptable.   </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">askChild</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">int</span> index, <span class="keyword">object</span> message)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div><div style="display:none" id="code-askChild_T_int__index__object__message_"><div class="section_title">SOURCE</div><div class="code">
            ask&lt;T&gt;(child(index), message)</div></div></div><div class="member-title"><a name="askChildren&lt;T>"></a>askChildren&lt;T&gt;(object, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-askChildren_T_object__message__int__take_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ask children the same message </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">take</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">askChildren</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">object</span> message, <span class="keyword">int</span> take = Int32.MaxValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span ></span></div></div></div><div style="display:none" id="code-askChildren_T_object__message__int__take_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(default(SystemName)).AskMany&lt;T&gt;(Children.Values, message, take)</div></div></div><div class="member-title"><a name="askIfAlive&lt;T>"></a>askIfAlive&lt;T&gt;(ProcessId, object, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-askIfAlive_T_ProcessId__pid__object__message__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ask a process for a reply (if the process is running).  If the process isn&#39;t running then None is returned </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to ask</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">askIfAlive</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid, <span class="keyword">object</span> message, <span class="ident">ProcessId</span> sender)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >The response to the request or None if the process isn&#39;t running</span></div></div></div><div style="display:none" id="code-askIfAlive_T_ProcessId__pid__object__message__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            ping(pid)
                ? Optional(ActorContext.System(pid).Ask&lt;T&gt;(pid, message, sender))
                : None</div></div></div><div class="member-title"><a name="askIfAlive&lt;T>"></a>askIfAlive&lt;T&gt;(ProcessId, object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-askIfAlive_T_ProcessId__pid__object__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ask a process for a reply (if the process is running).  If the process isn&#39;t running then None is returned </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to ask</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Message to send</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">askIfAlive</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid, <span class="keyword">object</span> message)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >The response to the request or None if the process isn&#39;t running</span></div></div></div><div style="display:none" id="code-askIfAlive_T_ProcessId__pid__object__message_"><div class="section_title">SOURCE</div><div class="code">
            ping(pid)
                ? Optional(ask&lt;T&gt;(pid, message, Self))
                : None</div></div></div><div class="member-title"><a name="askParent&lt;T>"></a>askParent&lt;T&gt;(object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-askParent_T_object__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ask parent process for a reply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Message to send</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">askParent</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">object</span> message)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >The response to the request</span></div></div></div><div style="display:none" id="code-askParent_T_object__message_"><div class="section_title">SOURCE</div><div class="code">
            ask&lt;T&gt;(Parent, message)</div></div></div><div class="member-title"><a name="child"></a>child(ProcessName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-child__ProcessName__name_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the child processes by name </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">child</span>(<span class="ident">ProcessName</span> name)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"></div></div></div><div style="display:none" id="code-child__ProcessName__name_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? Self[name]
                : raiseUseInMsgLoopOnlyException&lt;ProcessId&gt;(nameof(child))</div></div></div><div class="member-title"><a name="child"></a>child(int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-child__int__index_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the child processes by index. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="section_title">REMARKS</div><span >Because of the potential changeable nature of child nodes, this will take the index and mod it by the number of children.  We expect this  call will mostly be used for load balancing, and round-robin type  behaviour, so feel that&#39;s acceptable.   </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">child</span>(<span class="keyword">int</span> index)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"></div></div></div><div style="display:none" id="code-child__int__index_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? ActorContext.Request.Children.Count == 0
                    ? raise&lt;ProcessId&gt;(new NoChildProcessesException())
                    : ActorContext.Request
                                  .Children
                                  .Skip(index % ActorContext.Request.Children.Count)
                                  .Map( kv =&gt; kv.Value )
                                  .Head()
                : raiseUseInMsgLoopOnlyException&lt;ProcessId&gt;(nameof(child))</div></div></div><div class="member-title"><a name="children"></a>children(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-children__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the child processes of the process ID provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">ProcessId</span>&gt; <span class="ident">children</span>(<span class="ident">ProcessId</span> pid)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">ProcessId</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-children__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(pid).GetChildren(pid)</div></div></div><div class="member-title"><a name="ClusterNodes"></a>ClusterNodes(SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ClusterNodes__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get a list of cluster nodes that are online </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">ProcessName</span>, <span class="ident">ClusterNode</span>&gt; <span class="ident">ClusterNodes</span>(<span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">ProcessName</span>, <span class="ident">ClusterNode</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ClusterNodes__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(system).ClusterState?.Members ?? Map&lt;ProcessName, ClusterNode&gt;()</div></div></div><div class="member-title"><a name="dead"></a>dead(object, string, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-dead__object__message__string__reason__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Forward a message to dead-letters (and wrap it in a contextual dead-letter structre) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Dead letter message</div></div><div class="arg"><div class="arg-header"><div class="arg-name">reason</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Reason for the dead-letter</div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">dead</span>(<span class="keyword">object</span> message, <span class="keyword">string</span> reason, <span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div></div><div style="display:none" id="code-dead__object__message__string__reason__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            tell(
                ActorContext.System(system).DeadLetters, 
                DeadLetter.create(
                    Sender, 
                    Self,
                    reason, 
                    message
            ))</div></div></div><div class="member-title"><a name="dead"></a>dead(object, Exception, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-dead__object__message__Exception__ex__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Forward a message to dead-letters (and wrap it in a contextual dead-letter structre) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Dead letter message</div></div><div class="arg"><div class="arg-header"><div class="arg-name">ex</div><div class="arg-type"><span class="ident">Exception</span></div></div><div class="arg-desc">Exception that caused the dead-letter</div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">dead</span>(<span class="keyword">object</span> message, <span class="ident">Exception</span> ex, <span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div></div><div style="display:none" id="code-dead__object__message__Exception__ex__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            tell(
                ActorContext.System(system).DeadLetters,
                DeadLetter.create(
                    Sender,
                    Self,
                    ex,
                    message
            ))</div></div></div><div class="member-title"><a name="dead"></a>dead(object, Exception, string, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-dead__object__message__Exception__ex__string__reason__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Forward a message to dead-letters (and wrap it in a contextual dead-letter structre) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Dead letter message</div></div><div class="arg"><div class="arg-header"><div class="arg-name">ex</div><div class="arg-type"><span class="ident">Exception</span></div></div><div class="arg-desc">Exception that caused the dead-letter</div></div><div class="arg"><div class="arg-header"><div class="arg-name">reason</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Reason for the dead-letter</div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">dead</span>(<span class="keyword">object</span> message, <span class="ident">Exception</span> ex, <span class="keyword">string</span> reason, <span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div></div><div style="display:none" id="code-dead__object__message__Exception__ex__string__reason__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            tell(
                ActorContext.System(system).DeadLetters,
                DeadLetter.create(
                    Sender,
                    Self,
                    ex,
                    reason,
                    message
            ))</div></div></div><div class="member-title"><a name="dead"></a>dead(string, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-dead__string__reason__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Forward the current message to dead-letters (and wrap it in a contextual dead-letter structre) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">reason</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Reason for the dead-letter</div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">dead</span>(<span class="keyword">string</span> reason, <span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div></div><div style="display:none" id="code-dead__string__reason__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            tell(
                ActorContext.System(system).DeadLetters,
                DeadLetter.create(
                    Sender,
                    Self,
                    reason,
                    ActorContext.Request.CurrentMsg
            ))</div></div></div><div class="member-title"><a name="dead"></a>dead(Exception, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-dead__Exception__ex__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Forward the current message to dead-letters (and wrap it in a contextual dead-letter structre) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ex</div><div class="arg-type"><span class="ident">Exception</span></div></div><div class="arg-desc">Exception that caused the dead-letter</div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">dead</span>(<span class="ident">Exception</span> ex, <span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div></div><div style="display:none" id="code-dead__Exception__ex__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            tell(
                ActorContext.System(system).DeadLetters,
                DeadLetter.create(
                    Sender,
                    Self,
                    ex,
                    ActorContext.Request.CurrentMsg
            ))</div></div></div><div class="member-title"><a name="dead"></a>dead(Exception, string, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-dead__Exception__ex__string__reason__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Forward a message to dead-letters (and wrap it in a contextual dead-letter structre) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ex</div><div class="arg-type"><span class="ident">Exception</span></div></div><div class="arg-desc">Exception that caused the dead-letter</div></div><div class="arg"><div class="arg-header"><div class="arg-name">reason</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Reason for the dead-letter</div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">dead</span>(<span class="ident">Exception</span> ex, <span class="keyword">string</span> reason, <span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div></div><div style="display:none" id="code-dead__Exception__ex__string__reason__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            tell(
                ActorContext.System(system).DeadLetters,
                DeadLetter.create(
                    Sender,
                    Self,
                    ex,
                    reason,
                    ActorContext.Request.CurrentMsg
            ))</div></div></div><div class="member-title"><a name="DeadLetters"></a>DeadLetters(SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DeadLetters__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Dead letters process Subscribe to it to monitor the failed messages (&lt;see cref=&quot;subscribe(ProcessId)&quot;/&gt;) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">DeadLetters</span>(<span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"></div></div></div><div style="display:none" id="code-DeadLetters__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(system).DeadLetters</div></div></div><div class="member-title"><a name="deregisterById"></a>deregisterById(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-deregisterById__ProcessId__process_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Deregister a Process from any names it&#39;s been registered as.<br/><br/> See remarks. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">process</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="section_title">REMARKS</div><span >Any Process (or dispatcher, or role, etc.) can be registered by a name -  a kind of DNS for ProcessIds.  There can be multiple names associated with a single ProcessId.  <br/><br/> This function removes all registered names for a specific ProcessId. If you wish to deregister all ProcessIds registered under a name then use Process.deregisterByName(name) </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">deregisterById</span>(<span class="ident">ProcessId</span> process)</div></div><div style="display:none" id="code-deregisterById__ProcessId__process_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(process).DeregisterById(process)</div></div></div><div class="member-title"><a name="deregisterByName"></a>deregisterByName(ProcessName, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-deregisterByName__ProcessName__name__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Deregister all Processes associated with a name. NOTE: Be very careful with usage of this function if you didn&#39;t handle the registration you are potentially disconnecting many Processes from their registered name.<br/><br/> See remarks. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of the process to deregister</div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div><div class="section_title">REMARKS</div><span >Any Process (or dispatcher, or role, etc.) can be registered by a name -  a kind of DNS for ProcessIds.  There can be multiple names associated with a single ProcessId and multiple ProcessIds associated with a name.<br/><br/> This function removes all registered ProcessIds for a specific name. If you wish to deregister all names registered for specific Process then use Process.deregisterById(pid) </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">deregisterByName</span>(<span class="ident">ProcessName</span> name, <span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div></div><div style="display:none" id="code-deregisterByName__ProcessName__name__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(system).DeregisterByName($&quot;{Role.Current.Value}-{name.Value}&quot;)</div></div></div><div class="member-title"><a name="Errors"></a>Errors(SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Errors__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Errors process Subscribe to it to monitor the errors thrown  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">Errors</span>(<span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Errors__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(system).Errors</div></div></div><div class="member-title"><a name="exists"></a>exists(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find out if a process exists<br/><br/>     Rules:         * Local processes   - the process must actually be alive and in-memory         * Remote processes  - the process must have an inbox to receive messages                                and may be active, but it&#39;s not required.         * Dispatchers/roles - at least one process in the collection must exist(pid)         * JS processes      - not current supported </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process ID to check</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>(<span class="ident">ProcessId</span> pid)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if exists</span></div></div></div><div style="display:none" id="code-exists__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(pid).GetDispatcher(pid).Exists</div></div></div><div class="member-title"><a name="find"></a>find(ProcessName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-find__ProcessName__name_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find a process by its *registered* name (a kind of DNS for Processes).<br/><br/> Names are registered in roles.  This function will find registered  processes in the current role only.  Use the &#39;find&#39; variant to find  registered processes in other roles.<br/><br/> See remarks. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Process name</div></div><div class="section_title">REMARKS</div><span >Multiple Processes can register under the same name.  You may use  a dispatcher to work on them collectively (wherever they are in the  cluster).  i.e. <br/><br/>     var regd = register(&quot;proc&quot;, pid);     tell(Dispatch.Broadcast[regd], &quot;Hello&quot;);     tell(Dispatch.First[regd], &quot;Hello&quot;);     tell(Dispatch.LeastBusy[regd], &quot;Hello&quot;);     tell(Dispatch.Random[regd], &quot;Hello&quot;);     tell(Dispatch.RoundRobin[regd], &quot;Hello&quot;);<br/><br/> </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">find</span>(<span class="ident">ProcessName</span> name)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >A ProcessId that allows dispatching to the process(es).  The result would look like /disp/reg/name</span></div></div></div><div style="display:none" id="code-find__ProcessName__name_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(default(SystemName)).Disp[&quot;reg&quot;][$&quot;{Role.Current.Value}-{name.Value}&quot;]</div></div></div><div class="member-title"><a name="find"></a>find(ProcessName, ProcessName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-find__ProcessName__role__ProcessName__name_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find a process by its *registered* name (a kind of DNS for Processes) in the role specified.<br/><br/> See remarks. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">role</div><div class="arg-type"><span class="ident">ProcessName</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Process name</div></div><div class="section_title">REMARKS</div><span >Multiple Processes can register under the same name.  You may use  a dispatcher to work on them collectively (wherever they are in the  cluster).  i.e. <br/><br/>     var regd = register(&quot;proc&quot;, pid);     tell(Dispatch.Broadcast[regd], &quot;Hello&quot;);     tell(Dispatch.First[regd], &quot;Hello&quot;);     tell(Dispatch.LeastBusy[regd], &quot;Hello&quot;);     tell(Dispatch.Random[regd], &quot;Hello&quot;);     tell(Dispatch.RoundRobin[regd], &quot;Hello&quot;);<br/><br/> </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">find</span>(<span class="ident">ProcessName</span> role, <span class="ident">ProcessName</span> name)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >A ProcessId that allows dispatching to the process(es).  The result would look like /disp/reg/name</span></div></div></div><div style="display:none" id="code-find__ProcessName__role__ProcessName__name_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(default(SystemName)).Disp[&quot;reg&quot;][$&quot;{role.Value}-{name.Value}&quot;]</div></div></div><div class="member-title"><a name="fwd"></a>fwd(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fwd__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Forward a message </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process ID to send to</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">fwd</span>(<span class="ident">ProcessId</span> pid)</div></div><div style="display:none" id="code-fwd__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.Request.CurrentRequest == null
                ? tell(pid, ActorContext.Request.CurrentMsg, Sender)
                : tell(pid, ActorContext.Request.CurrentRequest, ActorContext.System(pid).AskId)</div></div></div><div class="member-title"><a name="fwd&lt;T>"></a>fwd&lt;T&gt;(ProcessId, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fwd_T_ProcessId__pid__T__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Forward a message </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process ID to send to</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">fwd</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid, <span class="ident">T</span> message)</div></div><div style="display:none" id="code-fwd_T_ProcessId__pid__T__message_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.Request.CurrentRequest == null
                ? tell(pid, message, Sender)
                : tell(pid, 
                    new ActorRequest(
                        message,
                        pid,
                        ActorContext.Request.CurrentRequest.ReplyTo,
                        ActorContext.Request.CurrentRequest.RequestId),
                    ActorContext.System(pid).AskId)</div></div></div><div class="member-title"><a name="fwdChild"></a>fwdChild(ProcessName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fwdChild__ProcessName__name_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Forward a message to a named child process </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of the child process</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">fwdChild</span>(<span class="ident">ProcessName</span> name)</div></div><div style="display:none" id="code-fwdChild__ProcessName__name_"><div class="section_title">SOURCE</div><div class="code">
            fwd(Self.Child(name))</div></div></div><div class="member-title"><a name="fwdChild"></a>fwdChild(int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fwdChild__int__index_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Forward a message to a child process (found by index) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Index of the child process (see remarks)</div></div><div class="section_title">REMARKS</div><span >Because of the potential changeable nature of child nodes, this will take the index and mod it by the number of children.  We expect this  call will mostly be used for load balancing, and round-robin type  behaviour, so feel that&#39;s acceptable.   </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">fwdChild</span>(<span class="keyword">int</span> index)</div></div><div style="display:none" id="code-fwdChild__int__index_"><div class="section_title">SOURCE</div><div class="code">
            fwd(child(index))</div></div></div><div class="member-title"><a name="fwdChild&lt;T>"></a>fwdChild&lt;T&gt;(ProcessName, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fwdChild_T_ProcessName__name__T__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Forward a message to a named child process </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of the child process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">fwdChild</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> name, <span class="ident">T</span> message)</div></div><div style="display:none" id="code-fwdChild_T_ProcessName__name__T__message_"><div class="section_title">SOURCE</div><div class="code">
            fwd(Self.Child(name), message)</div></div></div><div class="member-title"><a name="fwdChild&lt;T>"></a>fwdChild&lt;T&gt;(int, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fwdChild_T_int__index__T__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Forward a message to a child process (found by index) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Index of the child process (see remarks)</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="section_title">REMARKS</div><span >Because of the potential changeable nature of child nodes, this will take the index and mod it by the number of children.  We expect this  call will mostly be used for load balancing, and round-robin type  behaviour, so feel that&#39;s acceptable.   </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">fwdChild</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">int</span> index, <span class="ident">T</span> message)</div></div><div style="display:none" id="code-fwdChild_T_int__index__T__message_"><div class="section_title">SOURCE</div><div class="code">
            fwd(child(index), message)</div></div></div><div class="member-title"><a name="hasSession"></a>hasSession()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-hasSession__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if there is a session ID available.  NOTE: That doesn&#39;t mean the session is still alive. </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">hasSession</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ></span></div></div></div><div style="display:none" id="code-hasSession__"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.SessionId.IsSome</div></div></div><div class="member-title"><a name="inboxCount"></a>inboxCount(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-inboxCount__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the number of items in the Process inbox </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">inboxCount</span>(<span class="ident">ProcessId</span> pid)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of items in the Process inbox</span></div></div></div><div style="display:none" id="code-inboxCount__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(pid).GetDispatcher(pid).GetInboxCount()</div></div></div><div class="member-title"><a name="kill"></a>kill()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-kill__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Immediately kills the Process that is running from within its message loop.  It does this by throwing a ProcessKillException which is caught and triggers the shutdown of the Process.  Any Process that has a  persistent inbox or state will also have its persistent data wiped.   If the Process is registered it will have its registration revoked. If you wish for the data to be maintained for future spawns then call  Process.shutdown() </span></p><div class="section_title">REMARKS</div><span >This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">kill</span>()</div></div><div style="display:none" id="code-kill__"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? raise&lt;Unit&gt;(new ProcessKillException())
                : raiseUseInMsgLoopOnlyException&lt;Unit&gt;(nameof(kill))</div></div></div><div class="member-title"><a name="kill"></a>kill(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-kill__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Kill a specified running process. Forces the specified Process to shutdown.  The kill message jumps  ahead of any messages already in the process&#39;s queue.  Any Process that has a persistent inbox or state will also have its persistent data wiped.  If the Process is registered it will also its  registration revoked. If you wish for the data to be maintained for future spawns then call Process.shutdown(pid); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">kill</span>(<span class="ident">ProcessId</span> pid)</div></div><div style="display:none" id="code-kill__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(pid).Kill(pid, false)</div></div></div><div class="member-title"><a name="observe&lt;T>"></a>observe&lt;T&gt;(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-observe_T_ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get an IObservable for a process publish stream.  When a process calls &#39;publish&#39; it emits messages on the observable returned by this method. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored.<br/><br/> Because this call is asychronous it could allow access to the message loop, therefore you can&#39;t call it from within a process message loop. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">observe</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >IObservable T</span></div></div></div><div style="display:none" id="code-observe_T_ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? raiseDontUseInMessageLoopException&lt;IObservable&lt;T&gt;&gt;(nameof(observe))
                : ActorContext.System(pid).Observe&lt;T&gt;(pid)</div></div></div><div class="member-title"><a name="observeState&lt;T>"></a>observeState&lt;T&gt;(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-observeState_T_ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get an IObservable for a process&#39;s state stream.  When a process state updates at the end of its message loop it announces it on the stream returned from this method.  You should use this for  notification only.  Never modify the state object belonging to a process.  Best practice is to make the state type immutable. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored.<br/><br/> Because this call is asychronous it could allow access to the message loop, therefore you can&#39;t call it from within a process message loop. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">observeState</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >IObservable T</span></div></div></div><div style="display:none" id="code-observeState_T_ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? raiseDontUseInMessageLoopException&lt;IObservable&lt;T&gt;&gt;(nameof(observeState))
                : ActorContext.System(pid).ObserveState&lt;T&gt;(pid)</div></div></div><div class="member-title"><a name="pause"></a>pause(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-pause__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pauses a running process.  Messages will still be accepted into the Process&#39; inbox (unless the inbox is full); but they won&#39;t be processed until the Process is unpaused: &lt;see cref=&quot;unpause(ProcessId)&quot;/&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to pause</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">pause</span>(<span class="ident">ProcessId</span> pid)</div></div><div style="display:none" id="code-pause__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(pid).TellSystem(pid, SystemMessage.Pause)</div></div></div><div class="member-title"><a name="pauseFor"></a>pauseFor(ProcessId, Time)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-pauseFor__ProcessId__pid__Time__delay_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pauses a running process.  Messages will still be accepted into the Process&#39; inbox (unless the inbox is full); but they won&#39;t be processed until the Process is unpaused: &lt;see cref=&quot;unpause(ProcessId)&quot;/&gt; manually, or until the  delay expires. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to pause</div></div><div class="arg"><div class="arg-header"><div class="arg-name">delay</div><div class="arg-type"><span class="ident">Time</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">pauseFor</span>(<span class="ident">ProcessId</span> pid, <span class="ident">Time</span> delay)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"></div></div></div><div style="display:none" id="code-pauseFor__ProcessId__pid__Time__delay_"><div class="section_title">SOURCE</div><div class="code">
            pause(pid);
            return (IDisposable)Task.Delay((int)delay.Milliseconds).ContinueWith(_ =&gt; unpause(pid));
        </div></div></div><div class="member-title"><a name="ping"></a>ping(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ping__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find out if a process exists and is alive<br/><br/>     Rules:         * Local processes   - the process must actually be running         * Remote processes  - the process must actually be running         * Dispatchers/roles - at least one process in the collection must be running         * JS processes      - not current supported </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process ID to check</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ping</span>(<span class="ident">ProcessId</span> pid)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if exists</span></div></div></div><div style="display:none" id="code-ping__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(pid).GetDispatcher(pid).Ping()</div></div></div><div class="member-title"><a name="proxy&lt;TProcess>"></a>proxy&lt;TProcess&gt;(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-proxy_TProcess_ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Proxy based system for processes that are defined by a single type:  their state type.  The state type holds state in its member variables and its message handlers are its member functions.  This function builds a proxy from the interface passed so that you can invoke the message- handlers in a strongly typed way. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">ProcessId of the Process to proxy</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TProcess</span> <span class="ident">proxy</span>&lt;<span class="ident">TProcess</span>&gt;(<span class="ident">ProcessId</span> pid)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TProcess</span></div><div class="normal"><span >An interface that automatically tells and asks depending on method arguments and return types.</span></div></div></div><div style="display:none" id="code-proxy_TProcess_ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            ProxyBuilder.Build&lt;TProcess&gt;(pid)</div></div></div><div class="member-title"><a name="publish&lt;T>"></a>publish&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-publish_T_T__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Publish a message for any listening subscribers </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to publish</div></div><div class="section_title">REMARKS</div><span >This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">publish</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message)</div></div><div style="display:none" id="code-publish_T_T__message_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? ActorContext.Publish(message)
                : raiseUseInMsgLoopOnlyException&lt;Unit&gt;(nameof(publish))</div></div></div><div class="member-title"><a name="publish&lt;T>"></a>publish&lt;T&gt;(T, TimeSpan)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-publish_T_T__message__TimeSpan__delayFor_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Publish a message for any listening subscribers, delayed. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to publish</div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayFor</div><div class="arg-type"><span class="ident">TimeSpan</span></div></div><div class="arg-desc">How long to delay sending for</div></div><div class="section_title">REMARKS</div><span >This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">publish</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message, <span class="ident">TimeSpan</span> delayFor)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable that you can use to cancel the operation if necessary.  You do not need to call Dispose  for any other reason.</span></div></div></div><div style="display:none" id="code-publish_T_T__message__TimeSpan__delayFor_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? safedelay(() =&gt; ActorContext.Publish(message), delayFor)
                : raiseUseInMsgLoopOnlyException&lt;IDisposable&gt;(nameof(publish))</div></div></div><div class="member-title"><a name="publish&lt;T>"></a>publish&lt;T&gt;(T, DateTime)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-publish_T_T__message__DateTime__delayUntil_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Publish a message for any listening subscribers, delayed. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to publish</div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayUntil</div><div class="arg-type"><span class="ident">DateTime</span></div></div><div class="arg-desc">When to send</div></div><div class="section_title">REMARKS</div><span >This should be used from within a process&#39; message loop only This will fail to be accurate across a Daylight Saving Time boundary </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">publish</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message, <span class="ident">DateTime</span> delayUntil)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable that you can use to cancel the operation if necessary.  You do not need to call Dispose  for any other reason.</span></div></div></div><div style="display:none" id="code-publish_T_T__message__DateTime__delayUntil_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? safedelay(() =&gt; ActorContext.Publish(message), delayUntil)
                : raiseUseInMsgLoopOnlyException&lt;IDisposable&gt;(nameof(publish))</div></div></div><div class="member-title"><a name="queryProcesses"></a>queryProcesses(string, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-queryProcesses__string__keyQuery__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds all *persistent* processes based on the search pattern provided.  Note the returned ProcessIds may contain processes that aren&#39;t currently active.  You can still post to them however. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keyQuery</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Key query.  * is a wildcard</div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; <span class="ident">queryProcesses</span>(<span class="keyword">string</span> keyQuery, <span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div><div class="normal"><span >Matching ProcessIds</span></div></div></div><div style="display:none" id="code-queryProcesses__string__keyQuery__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(system).Cluster
                        .Map(c =&gt; c.QueryProcesses(keyQuery))
                        .IfNone(new ProcessId[0])</div></div></div><div class="member-title"><a name="queryProcessMetaData"></a>queryProcessMetaData(string, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-queryProcessMetaData__string__keyQuery__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds all *persistent* processes based on the search pattern provided and then returns the meta-data associated with them. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keyQuery</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Key query.  * is a wildcard</div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">ProcessId</span>, <span class="ident">ProcessMetaData</span>&gt; <span class="ident">queryProcessMetaData</span>(<span class="keyword">string</span> keyQuery, <span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">ProcessId</span>, <span class="ident">ProcessMetaData</span>&gt;</div><div class="normal"><span >Map of ProcessId to ProcessMetaData</span></div></div></div><div style="display:none" id="code-queryProcessMetaData__string__keyQuery__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(system).Cluster
                        .Map(c =&gt; c.QueryProcessMetaData(keyQuery))
                        .IfNone(Map.empty&lt;ProcessId,ProcessMetaData&gt;())</div></div></div><div class="member-title"><a name="queryRegistered"></a>queryRegistered(ProcessName, string, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-queryRegistered__ProcessName__role__string__keyQuery__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds all *persistent* registered names in a role </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">role</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Role to limit search to</div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyQuery</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Key query.  * is a wildcard</div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessName</span>&gt; <span class="ident">queryRegistered</span>(<span class="ident">ProcessName</span> role, <span class="keyword">string</span> keyQuery, <span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessName</span>&gt;</div><div class="normal"><span >Registered names</span></div></div></div><div style="display:none" id="code-queryRegistered__ProcessName__role__string__keyQuery__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(system).Cluster
                        .Map(c =&gt; c.QueryRegistered(role.Value, keyQuery))
                        .IfNone(List.empty&lt;ProcessName&gt;())</div></div></div><div class="member-title"><a name="register"></a>register(ProcessName, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-register__ProcessName__name__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Register a named process (a kind of DNS for Processes).  <br/><br/> If the Process is visible to the cluster (PersistInbox) then the  registration becomes a permanent named look-up until Process.deregister  is called.<br/><br/> See remarks. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name to register under</div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div><div class="section_title">REMARKS</div><span >Multiple Processes can register under the same name.  You may use  a dispatcher to work on them collectively (wherever they are in the  cluster).  i.e. <br/><br/>     var regd = register(&quot;proc&quot;);     tell(Dispatch.Broadcast[regd], &quot;Hello&quot;);     tell(Dispatch.First[regd], &quot;Hello&quot;);     tell(Dispatch.LeastBusy[regd], &quot;Hello&quot;);     tell(Dispatch.Random[regd], &quot;Hello&quot;);     tell(Dispatch.RoundRobin[regd], &quot;Hello&quot;);<br/><br/>     This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">register</span>(<span class="ident">ProcessName</span> name, <span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >A ProcessId that allows dispatching to the process via the name.  The result would look like /disp/reg/name</span></div></div></div><div style="display:none" id="code-register__ProcessName__name__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? ActorContext.System(system).Register($&quot;{Role.Current.Value}-{name.Value}&quot;, Self)
                : raiseUseInMsgLoopOnlyException&lt;ProcessId&gt;(nameof(name))</div></div></div><div class="member-title"><a name="register"></a>register(ProcessName, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-register__ProcessName__name__ProcessId__process_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Register a named process (a kind of DNS for Processes).  <br/><br/> If the Process is visible to the cluster (PersistInbox) then the  registration becomes a permanent named look-up until Process.deregister  is called.<br/><br/> See remarks. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name to register under</div></div><div class="arg"><div class="arg-header"><div class="arg-name">process</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to be registered</div></div><div class="section_title">REMARKS</div><span >Multiple Processes can register under the same name.  You may use  a dispatcher to work on them collectively (wherever they are in the  cluster).  i.e. <br/><br/>     var regd = register(&quot;proc&quot;, pid);     tell(Dispatch.Broadcast[regd], &quot;Hello&quot;);     tell(Dispatch.First[regd], &quot;Hello&quot;);     tell(Dispatch.LeastBusy[regd], &quot;Hello&quot;);     tell(Dispatch.Random[regd], &quot;Hello&quot;);     tell(Dispatch.RoundRobin[regd], &quot;Hello&quot;);<br/><br/> </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">register</span>(<span class="ident">ProcessName</span> name, <span class="ident">ProcessId</span> process)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >A ProcessId that allows dispatching to the process(es).  The result would look like /disp/reg/name</span></div></div></div><div style="display:none" id="code-register__ProcessName__name__ProcessId__process_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(process).Register($&quot;{Role.Current.Value}-{name.Value}&quot;, process)</div></div></div><div class="member-title"><a name="reply&lt;T>"></a>reply&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-reply_T_T__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reply to an ask </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="section_title">REMARKS</div><span >This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">reply</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message)</div></div><div style="display:none" id="code-reply_T_T__message_"><div class="section_title">SOURCE</div><div class="code">
            (message is IReturn) &amp;&amp; !((IReturn)message).HasValue
                ? unit
                : InMessageLoop
                    ? ActorContext.Request.CurrentRequest == null
                        ? failwith&lt;Unit&gt;(&quot;You can&#39;t reply to this message.  It wasn&#39;t an &#39;ask&#39;.  Use isAsk to confirm whether something is an &#39;ask&#39; or a &#39;tell&#39;&quot;)
                        : ActorContext.System(default(SystemName)).Tell(
                            ActorContext.Request.CurrentRequest.ReplyTo, 
                                new ActorResponse(
                                    message,
                                    ActorContext.Request.CurrentRequest.ReplyTo, 
                                    ActorContext.Request.Self.Actor.Id, 
                                    ActorContext.Request.CurrentRequest.RequestId,
                                    typeof(T).AssemblyQualifiedName
                                ), 
                                ActorContext.Request.Self.Actor.Id
                            )
                    : raiseUseInMsgLoopOnlyException&lt;Unit&gt;(nameof(reply))</div></div></div><div class="member-title"><a name="replyError"></a>replyError(Exception)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-replyError__Exception__exception_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reply to an ask with an error </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">exception</div><div class="arg-type"><span class="ident">Exception</span></div></div></div><div class="section_title">REMARKS</div><span >This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">replyError</span>(<span class="ident">Exception</span> exception)</div></div><div style="display:none" id="code-replyError__Exception__exception_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? ActorContext.Request.CurrentRequest == null
                    ? failwith&lt;Unit&gt;(&quot;You can&#39;t reply to this message.  It wasn&#39;t an &#39;ask&#39;.  Use isAsk to confirm whether something is an &#39;ask&#39; or a &#39;tell&#39;&quot;)
                    : ActorContext.System(default(SystemName)).Tell(ActorContext.Request.CurrentRequest.ReplyTo, 
                            new ActorResponse(
                                exception, 
                                ActorContext.Request.CurrentRequest.ReplyTo, 
                                ActorContext.Request.Self.Actor.Id, 
                                ActorContext.Request.CurrentRequest.RequestId,
                                exception.GetType().AssemblyQualifiedName,
                                true
                            ), 
                            ActorContext.Request.Self.Actor.Id
                        )
                : raiseUseInMsgLoopOnlyException&lt;Unit&gt;(nameof(reply))</div></div></div><div class="member-title"><a name="replyError"></a>replyError(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-replyError__string__errorMessage_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reply to an ask with an error </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">errorMessage</div><div class="arg-type"><span class="keyword">string</span></div></div></div><div class="section_title">REMARKS</div><span >This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">replyError</span>(<span class="keyword">string</span> errorMessage)</div></div><div style="display:none" id="code-replyError__string__errorMessage_"><div class="section_title">SOURCE</div><div class="code">
            replyError(new Exception(errorMessage))</div></div></div><div class="member-title"><a name="replyErrorIfAsked"></a>replyErrorIfAsked(Exception)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-replyErrorIfAsked__Exception__exception_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reply with an error if asked </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">exception</div><div class="arg-type"><span class="ident">Exception</span></div></div></div><div class="section_title">REMARKS</div><span >This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">replyErrorIfAsked</span>(<span class="ident">Exception</span> exception)</div></div><div style="display:none" id="code-replyErrorIfAsked__Exception__exception_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop &amp;&amp; isAsk
                ? replyError(exception)
                : unit</div></div></div><div class="member-title"><a name="replyErrorIfAsked"></a>replyErrorIfAsked(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-replyErrorIfAsked__string__errorMessage_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reply with an error if asked </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">errorMessage</div><div class="arg-type"><span class="keyword">string</span></div></div></div><div class="section_title">REMARKS</div><span >This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">replyErrorIfAsked</span>(<span class="keyword">string</span> errorMessage)</div></div><div style="display:none" id="code-replyErrorIfAsked__string__errorMessage_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop &amp;&amp; isAsk
                ? replyError(errorMessage)
                : unit</div></div></div><div class="member-title"><a name="replyIfAsked&lt;T>"></a>replyIfAsked&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-replyIfAsked_T_T__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reply if asked </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="section_title">REMARKS</div><span >This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">replyIfAsked</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message)</div></div><div style="display:none" id="code-replyIfAsked_T_T__message_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop &amp;&amp; isAsk
                ? reply(message)
                : unit</div></div></div><div class="member-title"><a name="replyOrTellSender&lt;T>"></a>replyOrTellSender&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-replyOrTellSender_T_T__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reply to the asker, or if it&#39;s not an ask then tell the sender via a message to their inbox. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">replyOrTellSender</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message)</div></div><div style="display:none" id="code-replyOrTellSender_T_T__message_"><div class="section_title">SOURCE</div><div class="code">
            isAsk
                ? reply(message)
                : Sender.IsValid
                    ? (message is IReturn) &amp;&amp; !((IReturn)message).HasValue
                        ? unit
                        : tell(Sender, message, Self)
                    : unit</div></div></div><div class="member-title"><a name="resolve"></a>resolve(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-resolve__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Resolves a ProcessId into the absolute ProcessIds that it represents This allows live resolution of role-based ProcessIds to their real node ProcessIds.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc"></div></div><div class="section_title">REMARKS</div><span >Mostly useful for debugging, but could be useful for layering additional logic to any message dispatch. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; <span class="ident">resolve</span>(<span class="ident">ProcessId</span> pid)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div><div class="normal"><span >Enumerable of resolved ProcessIds - could be zero length</span></div></div></div><div style="display:none" id="code-resolve__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(pid).ResolveProcessIdSelection(pid)</div></div></div><div class="member-title"><a name="resolvePID"></a>resolvePID(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-resolvePID__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">resolvePID</span>(<span class="ident">ProcessId</span> pid)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"></div></div></div><div style="display:none" id="code-resolvePID__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.ResolvePID(pid)</div></div></div><div class="member-title"><a name="restart"></a>restart(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-restart__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Forces a running process to restart.  This will reset its state and drop any subscribers, or any of its subscriptions. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">restart</span>(<span class="ident">ProcessId</span> pid)</div></div><div style="display:none" id="code-restart__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(pid).TellSystem(pid, SystemMessage.Restart)</div></div></div><div class="member-title"><a name="Root"></a>Root(SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Root__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Root process ID The Root process is the parent of all processes </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">Root</span>(<span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Root__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(system).Root</div></div></div><div class="member-title"><a name="sessionClearData"></a>sessionClearData(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sessionClearData__string__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Clear the meta-data key stored with the session </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Key</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">sessionClearData</span>(<span class="keyword">string</span> key)</div></div><div style="display:none" id="code-sessionClearData__string__key_"><div class="section_title">SOURCE</div><div class="code">
            if (InMessageLoop)
            {
                var vect = (from sid in ActorContext.SessionId
                            from session in ActorContext.Request.System.Sessions.GetSession(sid)
                            from data in session.Data.Find(key)
                            select Tuple(sid, data.Time))
                           .IfNone(Tuple(default(SessionId), 0L));

                if (vect.Item2 == 0L)
                {
                    return unit;
                }

                return ActorContext.Request.System.Sessions.ClearData(vect.Item2, vect.Item1, key);
            }
            else
            {
                return raiseUseInMsgLoopOnlyException&lt;Unit&gt;(nameof(sessionClearData));
            }
        </div></div></div><div class="member-title"><a name="sessionGetData&lt;T>"></a>sessionGetData&lt;T&gt;(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sessionGetData_T_string__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the meta-data stored with the session.    The session system allows concurrent updates from across the cluster or from within the app-domain (from multiple processes). To maintain the integrity of the data in any one session, the system  uses a version clock per-key. <br/><br/>  That means that if two Processes update the session from the same &#39;time&#39; start point, then there will be a conflict and the session  will  contain both values stored against the key.   <br/><br/>  It is up to you  to decide on the best approach to resolving the conflict.   Calling Head() / HeadOrNone() on the result will get the value that was  written first, calling Last() will get the value that was written last. However, being first or last doesn&#39;t necessarily make a value &#39;right&#39;, in an asynchronous system the last value could be the newest or oldest. Both value commits had the same starting state, so if the consistency of the session data is important to you then you should implement a more robust strategy to deal with value conflicts, if integrity doesn&#39;t really matter, call HeadOrNone(). <br/><br/>  The versioning system is closest to Lamport Clocks.  Eventually this  implementation will be replaced with a Dotted Version Vector system. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">sessionGetData</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">string</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-sessionGetData_T_string__key_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? (from sessionId in ActorContext.SessionId
                   from session   in ActorContext.Request.System.Sessions.GetSession(sessionId)
                   from vector    in session.Data.Find(key)
                   select vector.Vector.Map(obj =&gt;
                       obj is T
                           ? (T)obj
                           : default(T)))
                  .IfNone(List&lt;T&gt;())
                  .Filter(notnull)
                :  raiseUseInMsgLoopOnlyException&lt;Lst&lt;T&gt;&gt;(nameof(sessionGetData))</div></div></div><div class="member-title"><a name="sessionId"></a>sessionId()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sessionId__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Gets the current session ID </span></p><div class="section_title">REMARKS</div><span >Also touches the session so that its time-to-expiry  is reset</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">SessionId</span>&gt; <span class="ident">sessionId</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">SessionId</span>&gt;</div><div class="normal"><span >Optional session ID</span></div></div></div><div style="display:none" id="code-sessionId__"><div class="section_title">SOURCE</div><div class="code">
            if (InMessageLoop)
            {
                var sid = ActorContext.SessionId;
                sid.IfSome(x =&gt; sessionTouch());
                return sid;
            }
            else
            {
                return raiseUseInMsgLoopOnlyException&lt;Option&lt;SessionId&gt;&gt;(nameof(sessionId));
            }
        </div></div></div><div class="member-title"><a name="sessionSetData"></a>sessionSetData(string, object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sessionSetData__string__key__object__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Set the meta-data to store with the session, this is typically user credentials when they&#39;ve logged in.  But can be anything.  It is a  key/value store that is sync&#39;d around the cluster. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Data value </div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">sessionSetData</span>(<span class="keyword">string</span> key, <span class="keyword">object</span> value)</div></div><div style="display:none" id="code-sessionSetData__string__key__object__value_"><div class="section_title">SOURCE</div><div class="code">
            if (InMessageLoop)
            {
                var session = from sid in ActorContext.SessionId
                              from ses in ActorContext.Request.System.Sessions.GetSession(sid)
                              select ses;

                if (session.IsNone)
                {
                    throw new Exception(&quot;Session not started&quot;);
                }

                var time = (from sess in session
                            from data in sess.Data.Find(key)
                            select data.Time)
                           .IfNone(0L);

                return ActorContext.Request.System.Sessions.SetData(time + 1, ActorContext.SessionId.IfNone(default(SessionId)), key, value);
            }
            else
            {
                return raiseUseInMsgLoopOnlyException&lt;Unit&gt;(nameof(sessionSetData));
            }
        </div></div></div><div class="member-title"><a name="sessionStart"></a>sessionStart(SessionId, Time, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sessionStart__SessionId__sid__Time__timeout__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Starts a new session in the Process system with the specified session ID </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">sid</div><div class="arg-type"><span class="ident">SessionId</span></div></div><div class="arg-desc">Session ID</div></div><div class="arg"><div class="arg-header"><div class="arg-name">timeout</div><div class="arg-type"><span class="ident">Time</span></div></div><div class="arg-desc">Session timeout</div></div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SessionId</span> <span class="ident">sessionStart</span>(<span class="ident">SessionId</span> sid, <span class="ident">Time</span> timeout, <span class="ident">SystemName</span> system)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SessionId</span></div><div class="normal"></div></div></div><div style="display:none" id="code-sessionStart__SessionId__sid__Time__timeout__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(system).Sessions.Start(sid, (int)(timeout/1.Seconds()));
            ActorContext.SessionId = sid;
            return sid;
        </div></div></div><div class="member-title"><a name="sessionStart"></a>sessionStart(SessionId, Time)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sessionStart__SessionId__sid__Time__timeout_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Starts a new session in the Process system.  This variant must be called from within a Process, use the variant where you specify the SystemName to use it from outside </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">sid</div><div class="arg-type"><span class="ident">SessionId</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">timeout</div><div class="arg-type"><span class="ident">Time</span></div></div><div class="arg-desc">Session timeout</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SessionId</span> <span class="ident">sessionStart</span>(<span class="ident">SessionId</span> sid, <span class="ident">Time</span> timeout)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SessionId</span></div><div class="normal"><span >sid</span></div></div></div><div style="display:none" id="code-sessionStart__SessionId__sid__Time__timeout_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? sessionStart(sid, timeout, ActorContext.Request.System.SystemName)
                : raiseUseInMsgLoopOnlyException&lt;SessionId&gt;(nameof(sessionStart))</div></div></div><div class="member-title"><a name="sessionStart"></a>sessionStart(Time)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sessionStart__Time__timeout_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Starts a new session in the Process system.  This variant must be called from within a Process, use the variant where you specify the SystemName to use it from outside </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">timeout</div><div class="arg-type"><span class="ident">Time</span></div></div><div class="arg-desc">Session timeout</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SessionId</span> <span class="ident">sessionStart</span>(<span class="ident">Time</span> timeout)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SessionId</span></div><div class="normal"><span >Session ID of the newly created session</span></div></div></div><div style="display:none" id="code-sessionStart__Time__timeout_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? sessionStart(SessionId.Generate(), timeout, ActorContext.Request.System.SystemName)
                : raiseUseInMsgLoopOnlyException&lt;SessionId&gt;(nameof(sessionStart))</div></div></div><div class="member-title"><a name="sessionStop"></a>sessionStop()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sessionStop__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ends a session in the Process system with the specified session ID </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">sessionStop</span>()</div></div><div style="display:none" id="code-sessionStop__"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? ActorContext.SessionId.Iter(sid =&gt; ActorContext.Request.System.Sessions.Stop(sid))
                : raiseUseInMsgLoopOnlyException&lt;Unit&gt;(nameof(sessionTouch))</div></div></div><div class="member-title"><a name="sessionTouch"></a>sessionTouch()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sessionTouch__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Touch a session Time-stamps the session so that its time-to-expiry is reset </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">sessionTouch</span>()</div></div><div style="display:none" id="code-sessionTouch__"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? ActorContext.SessionId.Iter(sid =&gt; ActorContext.Request.System.Sessions.Touch(sid))
                : raiseUseInMsgLoopOnlyException&lt;Unit&gt;(nameof(sessionTouch))</div></div></div><div class="member-title"><a name="sessionTouch"></a>sessionTouch(SessionId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sessionTouch__SessionId__sid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Touch a session Time-stamps the session so that its time-to-expiry is reset and also sets the current session ID. This should be used from outside of the  Process system to &#39;acquire&#39; an existing session.  This is useful for web-requests for example to set the current session ID and to indicate activity. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">sid</div><div class="arg-type"><span class="ident">SessionId</span></div></div><div class="arg-desc">Session ID</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">sessionTouch</span>(<span class="ident">SessionId</span> sid)</div></div><div style="display:none" id="code-sessionTouch__SessionId__sid_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? raiseDontUseInMessageLoopException&lt;Unit&gt;(nameof(sessionTouch))
                : ignore((ActorContext.SessionId = sid).Map(ActorContext.Request.System.Sessions.Touch))</div></div></div><div class="member-title"><a name="shutdown"></a>shutdown()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-shutdown__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Shutdown the currently running process.  The shutdown message jumps  ahead of any messages already in the process&#39;s queue but doesn&#39;t exit immediately like kill().  Any Process that has a persistent inbox or  state will have its state maintained for future spawns.  If you wish  for the data to be dropped then call Process.kill() </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">shutdown</span>()</div></div><div style="display:none" id="code-shutdown__"><div class="section_title">SOURCE</div><div class="code">
            shutdown(Self)</div></div></div><div class="member-title"><a name="shutdown"></a>shutdown(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-shutdown__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Shutdown a specified running process. Forces the specified Process to shutdown.  The shutdown message jumps  ahead of any messages already in the process&#39;s queue.  Any Process that has a persistent inbox or state will have its state maintained for future spawns.  If you wish for the data to be dropped then call Process.kill(pid) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">shutdown</span>(<span class="ident">ProcessId</span> pid)</div></div><div style="display:none" id="code-shutdown__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(pid).Kill(pid, true)</div></div></div><div class="member-title"><a name="shutdownAll"></a>shutdownAll()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-shutdownAll__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Shutdown all processes on all process-systems </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">shutdownAll</span>()</div></div><div style="display:none" id="code-shutdownAll__"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.StopAllSystems()</div></div></div><div class="member-title"><a name="shutdownSystem"></a>shutdownSystem(SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-shutdownSystem__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Shutdown all processes on the specified process-system </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">shutdownSystem</span>(<span class="ident">SystemName</span> system)</div></div><div style="display:none" id="code-shutdownSystem__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.StopSystem(system)</div></div></div><div class="member-title"><a name="spawn&lt;S, T>"></a>spawn&lt;S, T&gt;(ProcessName, Func&lt;S&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, Func&lt;S, ProcessId, S&gt;, SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-spawn_S_T_ProcessName__Name__Func_S_Setup__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__Func_S_ProcessId_S_Terminated__SystemName__System_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a new process by name.   If this is called from within a process&#39; message loop  then the new process will be a child of the current process.  If it is called from outside of a process, then it will be made a child of the root &#39;user&#39; process. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of the child-process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div><div class="arg-desc">Startup and restart function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Function that is the process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Terminated</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">ProcessId</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Message function to call when a Process [that this Process watches] terminates</div></div><div class="arg"><div class="arg-header"><div class="arg-name">System</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">spawn</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">ProcessId</span>, <span class="ident">S</span>&gt; Terminated = null, <span class="ident">SystemName</span> System = <span class="keyword">default</span><span class="ident">SystemName</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >A ProcessId that identifies the child</span></div></div></div><div style="display:none" id="code-spawn_S_T_ProcessName__Name__Func_S_Setup__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__Func_S_ProcessId_S_Terminated__SystemName__System_"><div class="section_title">SOURCE</div><div class="code">
            if (System.IsValid &amp;&amp; ActorContext.Request != null) throw new ProcessException(&quot;When spawning you can only specify a System from outside of a Process&quot;, ActorContext.Self[Name].Path, &quot;&quot;);

            var sys = System.IsValid
                ? ActorContext.System(System)
                : ActorContext.DefaultSystem;

            var parent = System.IsValid
                ? sys.UserContext.Self
                : ActorContext.SelfProcess;

            return sys.ActorCreate(parent, Name, Inbox, Setup, Terminated, Strategy, Flags, MaxMailboxSize, false);
        </div></div></div><div class="member-title"><a name="spawn&lt;T>"></a>spawn&lt;T&gt;(ProcessName, Action&lt;T&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, Action&lt;ProcessId&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-spawn_T_ProcessName__Name__Action_T_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__Action_ProcessId_Terminated_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a new process by name.   If this is called from within a process&#39; message loop  then the new process will be a child of the current process.  If it is called from outside of a process, then it will be made a child of the root &#39;user&#39; process. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of the child-process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Function that is the process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Terminated</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div><div class="arg-desc">Message function to call when a Process [that this Process watches] terminates</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">spawn</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="ident">Action</span>&lt;<span class="ident">ProcessId</span>&gt; Terminated = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >A ProcessId that identifies the child</span></div></div></div><div style="display:none" id="code-spawn_T_ProcessName__Name__Action_T_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__Action_ProcessId_Terminated_"><div class="section_title">SOURCE</div><div class="code">
            spawn&lt;Unit, T&gt;(
                Name,
                () =&gt; unit,
                (state, msg) =&gt; {
                    Inbox(msg);
                    return state;
                },
                Flags,
                Strategy,
                MaxMailboxSize,
                (state, pid) =&gt; {
                    Terminated(pid);
                    return state;
                }
            )</div></div></div><div class="member-title"><a name="spawn&lt;TProcess, TMsg>"></a>spawn&lt;TProcess, TMsg&gt;(ProcessName, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-spawn_TProcess_TMsg_ProcessName__Name__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawn by type </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of process to spawn</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">spawn</span>&lt;<span class="ident">TProcess</span>, <span class="ident">TMsg</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >ProcessId</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">TProcess</span> : <span class="ident">IProcess</span>&lt;<span class="ident">TMsg</span>&gt; <span class="keyword">new</span></div></div><div style="display:none" id="code-spawn_TProcess_TMsg_ProcessName__Name__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            return spawn&lt;IProcess&lt;TMsg&gt;, TMsg&gt;(Name, () =&gt; new TProcess(),
              (process, msg) =&gt; {
                  process.OnMessage(msg);
                  return process;
              },
              Flags,
              Strategy,
              MaxMailboxSize,
              (process, pid) =&gt; {
                  process.OnTerminated(pid);
                  return process;
              }
            );
        </div></div></div><div class="member-title"><a name="spawn&lt;TProcess>"></a>spawn&lt;TProcess&gt;(ProcessName, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-spawn_TProcess_ProcessName__Name__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawn by type.   Communication is via proxy - call Process.proxy(pid) on the resulting ProcessId to send tells and asks in a strongly typed fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of process to spawn</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">spawn</span>&lt;<span class="ident">TProcess</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >TProcessInterface - The proxy for communicating with the Process</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">TProcess</span> : <span class="keyword">new</span></div></div><div style="display:none" id="code-spawn_TProcess_ProcessName__Name__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            spawn&lt;TProcess, ProxyMsg&gt;(
              Name, 
              () =&gt; new TProcess(),
              ProxyMsgInbox,
              Flags,
              Strategy,
              MaxMailboxSize,
              ProxyTerminatedInbox
            )</div></div></div><div class="member-title"><a name="spawn&lt;TProcessInterface>"></a>spawn&lt;TProcessInterface&gt;(ProcessName, Func&lt;TProcessInterface&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-spawn_TProcessInterface_ProcessName__Name__Func_TProcessInterface_Setup__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawn by iterface type.  You must provide a Setup function that returns the concrete implementation of TProcessInterface.  Communication is via a generated proxy: the returned TProcessInterface. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of process to spawn</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TProcessInterface</span>&gt;</div></div><div class="arg-desc">You must provide a Setup function that returns the concrete implementation of TProcessInterface</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TProcessInterface</span> <span class="ident">spawn</span>&lt;<span class="ident">TProcessInterface</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">Func</span>&lt;<span class="ident">TProcessInterface</span>&gt; Setup, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TProcessInterface</span></div><div class="normal"><span >TProcessInterface - The proxy for communicating with the Process</span></div></div></div><div style="display:none" id="code-spawn_TProcessInterface_ProcessName__Name__Func_TProcessInterface_Setup__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            proxy&lt;TProcessInterface&gt;(spawn&lt;TProcessInterface, ProxyMsg&gt;(
              Name, 
              Setup,
              ProxyMsgInbox,
              Flags,
              Strategy,
              MaxMailboxSize,
              ProxyTerminatedInbox
            ))</div></div></div><div class="member-title"><a name="spawnMany&lt;S, T>"></a>spawnMany&lt;S, T&gt;(int, ProcessName, Func&lt;S&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, Func&lt;S, ProcessId, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-spawnMany_S_T_int__Count__ProcessName__Name__Func_S_Setup__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__Func_S_ProcessId_S_Terminated_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create N child processes. The name provided will be used as a basis to generate the child names.  Each child will be named &quot;name-index&quot; where index starts at zero.   If this is called from within a process&#39; message loop  then the new processes will be a children of the current process.  If it is called from outside of a process, then they will be made a child of the root &#39;user&#39; process. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of processes to spawn</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of the child-process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div><div class="arg-desc">Startup and restart function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Function that is the process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Terminated</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">ProcessId</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Message function to call when a Process [that this Process watches] terminates</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; <span class="ident">spawnMany</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">int</span> Count, <span class="ident">ProcessName</span> Name, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">ProcessId</span>, <span class="ident">S</span>&gt; Terminated = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div><div class="normal"><span >ProcessId IEnumerable</span></div></div></div><div style="display:none" id="code-spawnMany_S_T_int__Count__ProcessName__Name__Func_S_Setup__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__Func_S_ProcessId_S_Terminated_"><div class="section_title">SOURCE</div><div class="code">
            Range(0, Count).Map(n =&gt; ActorContext.System(default(SystemName)).ActorCreate(ActorContext.SelfProcess, $&quot;{Name}-{n}&quot;, Inbox, Setup, Terminated, Strategy, Flags, MaxMailboxSize, false)).ToList()</div></div></div><div class="member-title"><a name="spawnMany&lt;S, T>"></a>spawnMany&lt;S, T&gt;(ProcessName, Map&lt;int, Func&lt;S&gt;&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, Func&lt;S, ProcessId, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-spawnMany_S_T_ProcessName__Name__Map_int_Func&lt;S>_Spec__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__Func_S_ProcessId_S_Terminated_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create N child processes. The name provided will be used as a basis to generate the child names.  Each child will be named &quot;name-index&quot; where index starts at zero.   If this is called from within a process&#39; message loop  then the new processes will be a children of the current process.  If it is called from outside of a process, then they will be made a child of the root &#39;user&#39; process. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of the child-process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Spec</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="keyword">int</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Map of IDs and State for generating child workers</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Function that is the process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Terminated</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">ProcessId</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Message function to call when a Process [that this Process watches] terminates</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; <span class="ident">spawnMany</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">Map</span>&lt;<span class="keyword">int</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;&gt; Spec, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">ProcessId</span>, <span class="ident">S</span>&gt; Terminated = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div><div class="normal"><span >ProcessId IEnumerable</span></div></div></div><div style="display:none" id="code-spawnMany_S_T_ProcessName__Name__Map_int_Func&lt;S>_Spec__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__Func_S_ProcessId_S_Terminated_"><div class="section_title">SOURCE</div><div class="code">
            Spec.Map((id,state) =&gt; ActorContext.System(default(SystemName)).ActorCreate(ActorContext.SelfProcess, $&quot;{Name}-{id}&quot;, Inbox, state, Terminated, Strategy, Flags, MaxMailboxSize, false)).Values.ToList()</div></div></div><div class="member-title"><a name="spawnMany&lt;T>"></a>spawnMany&lt;T&gt;(int, ProcessName, Action&lt;T&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, Action&lt;ProcessId&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-spawnMany_T_int__Count__ProcessName__Name__Action_T_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__Action_ProcessId_Terminated_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create N child processes. The name provided will be used as a basis to generate the child names.  Each child will be named &quot;name-index&quot; where index starts at zero.   If this is called from within a process&#39; message loop  then the new processes will be a children of the current process.  If it is called from outside of a process, then they will be made a child of the root &#39;user&#39; process. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of processes to spawn</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of the child-process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Function that is the process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Terminated</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div><div class="arg-desc">Message function to call when a Process [that this Process watches] terminates</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; <span class="ident">spawnMany</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">int</span> Count, <span class="ident">ProcessName</span> Name, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="ident">Action</span>&lt;<span class="ident">ProcessId</span>&gt; Terminated = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div><div class="normal"><span >ProcessId IEnumerable</span></div></div></div><div style="display:none" id="code-spawnMany_T_int__Count__ProcessName__Name__Action_T_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__Action_ProcessId_Terminated_"><div class="section_title">SOURCE</div><div class="code">
            Range(0, Count).Map(n =&gt; spawn($&quot;{Name}-{n}&quot;, Inbox, Flags, Strategy, MaxMailboxSize, Terminated)).ToList()</div></div></div><div class="member-title"><a name="spawnRoundRobin&lt;S, T>"></a>spawnRoundRobin&lt;S, T&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-spawnRoundRobin_S_T_ProcessName__Name__int__Count__Func_S_Setup__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with N worker processes, each message is sent to one worker process in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;spawnRoundRobin is obsolete, use Router.roundRobin instead&quot;)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">spawnRoundRobin</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-spawnRoundRobin_S_T_ProcessName__Name__int__Count__Func_S_Setup__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            Router.roundRobin(Name, Count, Setup, Inbox, Flags, Strategy, MaxMailboxSize)</div></div></div><div class="member-title"><a name="spawnRoundRobin&lt;T>"></a>spawnRoundRobin&lt;T&gt;(ProcessName, int, Action&lt;T&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-spawnRoundRobin_T_ProcessName__Name__int__Count__Action_T_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with N worker processes, each message is sent to one worker process in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;spawnRoundRobin is obsolete, use Router.roundRobin instead&quot;)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">spawnRoundRobin</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-spawnRoundRobin_T_ProcessName__Name__int__Count__Action_T_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            Router.roundRobin(Name, Count, Inbox, Flags, Strategy, MaxMailboxSize)</div></div></div><div class="member-title"><a name="spawnUnit&lt;T>"></a>spawnUnit&lt;T&gt;(ProcessName, Func&lt;T, Unit&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, Func&lt;ProcessId, Unit&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-spawnUnit_T_ProcessName__Name__Func_T_Unit_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__Func_ProcessId_Unit_Terminated_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a new process by name (accepts Unit as a return value instead of void).   If this is called from within a process&#39; message loop  then the new process will be a child of the current process.  If it is called from outside of a process, then it will be made a child of the root &#39;user&#39; process. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of the child-process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Function that is the process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Terminated</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ProcessId</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Message function to call when a Process [that this Process watches] terminates</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">spawnUnit</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Unit</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="ident">Func</span>&lt;<span class="ident">ProcessId</span>, <span class="ident">Unit</span>&gt; Terminated = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >A ProcessId that identifies the child</span></div></div></div><div style="display:none" id="code-spawnUnit_T_ProcessName__Name__Func_T_Unit_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__Func_ProcessId_Unit_Terminated_"><div class="section_title">SOURCE</div><div class="code">
            spawn&lt;Unit, T&gt;(Name, () =&gt; unit, (state, msg) =&gt; { Inbox(msg); return state; }, Flags, Strategy, MaxMailboxSize, (state, pid) =&gt; { Terminated(pid); return state; })</div></div></div><div class="member-title"><a name="subscribe"></a>subscribe(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subscribe__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subscribes our inbox to another process publish stream.  When it calls &#39;publish&#39; it will arrive in our inbox. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to subscribe to</div></div><div class="section_title">REMARKS</div><span >This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">subscribe</span>(<span class="ident">ProcessId</span> pid)</div></div><div style="display:none" id="code-subscribe__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? ActorContext.Request.Self.Actor.AddSubscription(pid, ActorContext.System(pid).Observe&lt;object&gt;(pid).Subscribe(x =&gt; tell(Self, x, pid)))
                : raiseUseInMsgLoopOnlyException&lt;Unit&gt;(nameof(subscribe))</div></div></div><div class="member-title"><a name="subscribe&lt;T>"></a>subscribe&lt;T&gt;(ProcessId, IObserver&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subscribe_T_ProcessId__pid__IObserver_T_observer_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subscribe to the process publish stream.  When a process calls &#39;publish&#39; it emits messages that can be consumed using this method. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">observer</div><div class="arg-type"><span class="ident">IObserver</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored.<br/><br/> Because this call is asychronous it could allow access to the message loop, therefore you can&#39;t call it from within a process message loop. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">subscribe</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid, <span class="ident">IObserver</span>&lt;<span class="ident">T</span>&gt; observer)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable, call IDispose to end the subscription</span></div></div></div><div style="display:none" id="code-subscribe_T_ProcessId__pid__IObserver_T_observer_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? raiseDontUseInMessageLoopException&lt;IDisposable&gt;(nameof(subscribe))
                : observe&lt;T&gt;(pid).Subscribe(observer)</div></div></div><div class="member-title"><a name="subscribe&lt;T>"></a>subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;, Action&lt;Exception&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subscribe_T_ProcessId__pid__Action_T_onNext__Action_Exception_onError__Action__onComplete_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subscribe to the process publish stream.  When a process calls &#39;publish&#39; it emits messages that can be consumed using this method. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onNext</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onError</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onComplete</div><div class="arg-type"><span class="ident">Action</span></div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored.<br/><br/> Because this call is asychronous it could allow access to the message loop, therefore you can&#39;t call it from within a process message loop. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">subscribe</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; onNext, <span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt; onError, <span class="ident">Action</span> onComplete)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable, call IDispose to end the subscription</span></div></div></div><div style="display:none" id="code-subscribe_T_ProcessId__pid__Action_T_onNext__Action_Exception_onError__Action__onComplete_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? raiseDontUseInMessageLoopException&lt;IDisposable&gt;(nameof(subscribe))
                : observe&lt;T&gt;(pid).Subscribe(onNext, onError, onComplete)</div></div></div><div class="member-title"><a name="subscribe&lt;T>"></a>subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;, Action&lt;Exception&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subscribe_T_ProcessId__pid__Action_T_onNext__Action_Exception_onError_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subscribe to the process publish stream.  When a process calls &#39;publish&#39; it emits messages that can be consumed using this method. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onNext</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onError</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored.<br/><br/> Because this call is asychronous it could allow access to the message loop, therefore you can&#39;t call it from within a process message loop. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">subscribe</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; onNext, <span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt; onError)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"></div></div></div><div style="display:none" id="code-subscribe_T_ProcessId__pid__Action_T_onNext__Action_Exception_onError_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? raiseDontUseInMessageLoopException&lt;IDisposable&gt;(nameof(subscribe))
                : observe&lt;T&gt;(pid).Subscribe(onNext, onError, () =&gt; { })</div></div></div><div class="member-title"><a name="subscribe&lt;T>"></a>subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subscribe_T_ProcessId__pid__Action_T_onNext_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subscribe to the process publish stream.  When a process calls &#39;publish&#39; it emits messages that can be consumed using this method. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onNext</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored.<br/><br/> Because this call is asychronous it could allow access to the message loop, therefore you can&#39;t call it from within a process message loop. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">subscribe</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; onNext)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"></div></div></div><div style="display:none" id="code-subscribe_T_ProcessId__pid__Action_T_onNext_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? raiseDontUseInMessageLoopException&lt;IDisposable&gt;(nameof(subscribe))
                : observe&lt;T&gt;(pid).Subscribe(onNext, ex =&gt; { }, () =&gt; { })</div></div></div><div class="member-title"><a name="subscribe&lt;T>"></a>subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subscribe_T_ProcessId__pid__Action_T_onNext__Action__onComplete_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subscribe to the process publish stream.  When a process calls &#39;publish&#39; it emits messages that can be consumed using this method. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onNext</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onComplete</div><div class="arg-type"><span class="ident">Action</span></div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored.<br/><br/> Because this call is asychronous it could allow access to the message loop, therefore you can&#39;t call it from within a process message loop. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">subscribe</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; onNext, <span class="ident">Action</span> onComplete)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable, call IDispose to end the subscription</span></div></div></div><div style="display:none" id="code-subscribe_T_ProcessId__pid__Action_T_onNext__Action__onComplete_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? raiseDontUseInMessageLoopException&lt;IDisposable&gt;(nameof(subscribe))
                : observe&lt;T&gt;(pid).Subscribe(onNext, ex =&gt; { }, onComplete)</div></div></div><div class="member-title"><a name="subscribeState&lt;T>"></a>subscribeState&lt;T&gt;(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subscribeState_T_ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subscribes our inbox to another process state publish stream.   When a process state updates at the end of its message loop it announces it arrives in our inbox. You should use this for notification only.  Never modify the state object belonging to a process.   Best practice is to make the state type immutable. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored. This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">subscribeState</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid)</div></div><div style="display:none" id="code-subscribeState_T_ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? ActorContext.Request.Self.Actor.AddSubscription(
                      pid,
                      ActorContext.System(pid).ObserveState&lt;T&gt;(pid).Subscribe(x =&gt; tell(Self, x, pid)))
                : raiseUseInMsgLoopOnlyException&lt;Unit&gt;(nameof(subscribeState))</div></div></div><div class="member-title"><a name="SystemCluster"></a>SystemCluster(SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SystemCluster__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Not advised to use this directly, but allows access to the underlying data-store. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">ICluster</span>&gt; <span class="ident">SystemCluster</span>(<span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">ICluster</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SystemCluster__SystemName__system_"><div class="section_title">SOURCE</div><div class="code"> 
            ActorContext.System(system).Cluster</div></div></div><div class="member-title"><a name="tell&lt;T>"></a>tell&lt;T&gt;(ProcessId, T, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tell_T_ProcessId__pid__T__message__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Send a message to a process </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process ID to send to</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">tell</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid, <span class="ident">T</span> message, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div></div><div style="display:none" id="code-tell_T_ProcessId__pid__T__message__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            message is UserControlMessage
                ? ActorContext.System(pid).TellUserControl(pid, message as UserControlMessage)
                : ActorContext.System(pid).Tell(pid, message, sender)</div></div></div><div class="member-title"><a name="tell&lt;T>"></a>tell&lt;T&gt;(ProcessId, T, TimeSpan, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tell_T_ProcessId__pid__T__message__TimeSpan__delayFor__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Send a message at a specified time in the future </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process ID to send to</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayFor</div><div class="arg-type"><span class="ident">TimeSpan</span></div></div><div class="arg-desc">How long to delay sending for</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">tell</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid, <span class="ident">T</span> message, <span class="ident">TimeSpan</span> delayFor, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable that you can use to cancel the operation if necessary.  You do not need to call Dispose  for any other reason.</span></div></div></div><div style="display:none" id="code-tell_T_ProcessId__pid__T__message__TimeSpan__delayFor__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            safedelay(() =&gt; tell(pid, message, sender), delayFor)</div></div></div><div class="member-title"><a name="tell&lt;T>"></a>tell&lt;T&gt;(ProcessId, T, DateTime, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tell_T_ProcessId__pid__T__message__DateTime__delayUntil__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Send a message at a specified time in the future </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process ID to send to</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayUntil</div><div class="arg-type"><span class="ident">DateTime</span></div></div><div class="arg-desc">Date and time to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div><div class="section_title">REMARKS</div><span >It is advised to use the variant that takes a TimeSpan, this will fail to be accurate across a Daylight Saving  Time boundary or if you use non-UTC dates </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">tell</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessId</span> pid, <span class="ident">T</span> message, <span class="ident">DateTime</span> delayUntil, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable that you can use to cancel the operation if necessary.  You do not need to call Dispose  for any other reason.</span></div></div></div><div style="display:none" id="code-tell_T_ProcessId__pid__T__message__DateTime__delayUntil__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            safedelay(() =&gt; tell(pid, message, sender), delayUntil)</div></div></div><div class="member-title"><a name="tellChild&lt;T>"></a>tellChild&lt;T&gt;(ProcessName, T, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tellChild_T_ProcessName__name__T__message__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Send a message to a named child process </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of the child process</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">tellChild</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> name, <span class="ident">T</span> message, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div></div><div style="display:none" id="code-tellChild_T_ProcessName__name__T__message__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            tell(Self.Child(name), message, sender)</div></div></div><div class="member-title"><a name="tellChild&lt;T>"></a>tellChild&lt;T&gt;(int, T, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tellChild_T_int__index__T__message__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Send a message to a child process (found by index) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Index of the child process (see remarks)</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div><div class="section_title">REMARKS</div><span >Because of the potential changeable nature of child nodes, this will take the index and mod it by the number of children.  We expect this  call will mostly be used for load balancing, and round-robin type  behaviour, so feel that&#39;s acceptable.   </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">tellChild</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">int</span> index, <span class="ident">T</span> message, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div></div><div style="display:none" id="code-tellChild_T_int__index__T__message__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            tell(child(index), message, sender)</div></div></div><div class="member-title"><a name="tellChildren&lt;T>"></a>tellChildren&lt;T&gt;(T, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tellChildren_T_T__message__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tell children the same message </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">tellChildren</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div></div><div style="display:none" id="code-tellChildren_T_T__message__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            iter(Children, child =&gt; tell(child, message, sender))</div></div></div><div class="member-title"><a name="tellChildren&lt;T>"></a>tellChildren&lt;T&gt;(T, TimeSpan, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tellChildren_T_T__message__TimeSpan__delayFor__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tell children the same message, delayed. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayFor</div><div class="arg-type"><span class="ident">TimeSpan</span></div></div><div class="arg-desc">How long to delay sending for</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">tellChildren</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message, <span class="ident">TimeSpan</span> delayFor, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable that you can use to cancel the operation if necessary.  You do not need to call Dispose  for any other reason.</span></div></div></div><div style="display:none" id="code-tellChildren_T_T__message__TimeSpan__delayFor__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            safedelay(() =&gt; tellChildren(message, sender), delayFor)</div></div></div><div class="member-title"><a name="tellChildren&lt;T>"></a>tellChildren&lt;T&gt;(T, DateTime, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tellChildren_T_T__message__DateTime__delayUntil__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tell children the same message, delayed. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayUntil</div><div class="arg-type"><span class="ident">DateTime</span></div></div><div class="arg-desc">Date and time to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div><div class="section_title">REMARKS</div><span >This will fail to be accurate across a Daylight Saving Time boundary </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">tellChildren</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message, <span class="ident">DateTime</span> delayUntil, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable that you can use to cancel the operation if necessary.  You do not need to call Dispose  for any other reason.</span></div></div></div><div style="display:none" id="code-tellChildren_T_T__message__DateTime__delayUntil__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            safedelay(() =&gt; tellChildren(message, sender), delayUntil)</div></div></div><div class="member-title"><a name="tellChildren&lt;T>"></a>tellChildren&lt;T&gt;(T, Func&lt;ProcessId, bool&gt;, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tellChildren_T_T__message__Func_ProcessId_bool_predicate__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tell children the same message The list of children to send to are filtered by the predicate provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ProcessId</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The list of children to send to are filtered by the predicate provided</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">tellChildren</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message, <span class="ident">Func</span>&lt;<span class="ident">ProcessId</span>, <span class="keyword">bool</span>&gt; predicate, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div></div><div style="display:none" id="code-tellChildren_T_T__message__Func_ProcessId_bool_predicate__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            iter(filter(Children, predicate), child =&gt; tell(child, message, sender))</div></div></div><div class="member-title"><a name="tellChildren&lt;T>"></a>tellChildren&lt;T&gt;(T, TimeSpan, Func&lt;ProcessId, bool&gt;, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tellChildren_T_T__message__TimeSpan__delayFor__Func_ProcessId_bool_predicate__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tell children the same message, delayed. The list of children to send to are filtered by the predicate provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayFor</div><div class="arg-type"><span class="ident">TimeSpan</span></div></div><div class="arg-desc">How long to delay sending for</div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ProcessId</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The list of children to send to are filtered by the predicate provided</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">tellChildren</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message, <span class="ident">TimeSpan</span> delayFor, <span class="ident">Func</span>&lt;<span class="ident">ProcessId</span>, <span class="keyword">bool</span>&gt; predicate, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable that you can use to cancel the operation if necessary.  You do not need to call Dispose  for any other reason.</span></div></div></div><div style="display:none" id="code-tellChildren_T_T__message__TimeSpan__delayFor__Func_ProcessId_bool_predicate__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            safedelay(() =&gt; tellChildren(message, predicate, sender), delayFor)</div></div></div><div class="member-title"><a name="tellChildren&lt;T>"></a>tellChildren&lt;T&gt;(T, DateTime, Func&lt;ProcessId, bool&gt;, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tellChildren_T_T__message__DateTime__delayUntil__Func_ProcessId_bool_predicate__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tell children the same message, delayed. The list of children to send to are filtered by the predicate provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayUntil</div><div class="arg-type"><span class="ident">DateTime</span></div></div><div class="arg-desc">Date and time to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ProcessId</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The list of children to send to are filtered by the predicate provided</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div><div class="section_title">REMARKS</div><span >This will fail to be accurate across a Daylight Saving Time boundary </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">tellChildren</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message, <span class="ident">DateTime</span> delayUntil, <span class="ident">Func</span>&lt;<span class="ident">ProcessId</span>, <span class="keyword">bool</span>&gt; predicate, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable that you can use to cancel the operation if necessary.  You do not need to call Dispose  for any other reason.</span></div></div></div><div style="display:none" id="code-tellChildren_T_T__message__DateTime__delayUntil__Func_ProcessId_bool_predicate__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            safedelay(() =&gt; tellChildren(message, predicate, sender), delayUntil)</div></div></div><div class="member-title"><a name="tellParent&lt;T>"></a>tellParent&lt;T&gt;(T, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tellParent_T_T__message__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Send a message to the parent process </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">tellParent</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div></div><div style="display:none" id="code-tellParent_T_T__message__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            tell(Parent, message, sender)</div></div></div><div class="member-title"><a name="tellParent&lt;T>"></a>tellParent&lt;T&gt;(T, TimeSpan, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tellParent_T_T__message__TimeSpan__delayFor__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Send a message to the parent process at a specified time in the future </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayFor</div><div class="arg-type"><span class="ident">TimeSpan</span></div></div><div class="arg-desc">How long to delay sending for</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">tellParent</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message, <span class="ident">TimeSpan</span> delayFor, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable that you can use to cancel the operation if necessary.  You do not need to call Dispose  for any other reason.</span></div></div></div><div style="display:none" id="code-tellParent_T_T__message__TimeSpan__delayFor__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            tell(Parent, message, delayFor, sender)</div></div></div><div class="member-title"><a name="tellParent&lt;T>"></a>tellParent&lt;T&gt;(T, DateTime, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tellParent_T_T__message__DateTime__delayUntil__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Send a message to the parent process at a specified time in the future </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayUntil</div><div class="arg-type"><span class="ident">DateTime</span></div></div><div class="arg-desc">Date and time to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div><div class="section_title">REMARKS</div><span >This will fail to be accurate across a Daylight Saving Time boundary </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">tellParent</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message, <span class="ident">DateTime</span> delayUntil, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable that you can use to cancel the operation if necessary.  You do not need to call Dispose  for any other reason.</span></div></div></div><div style="display:none" id="code-tellParent_T_T__message__DateTime__delayUntil__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            tell(Parent, message, delayUntil, sender)</div></div></div><div class="member-title"><a name="tellSelf&lt;T>"></a>tellSelf&lt;T&gt;(T, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tellSelf_T_T__message__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Send a message to ourself </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">tellSelf</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div></div><div style="display:none" id="code-tellSelf_T_T__message__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            tell(Self, message, sender)</div></div></div><div class="member-title"><a name="tellSelf&lt;T>"></a>tellSelf&lt;T&gt;(T, TimeSpan, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tellSelf_T_T__message__TimeSpan__delayFor__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Send a message to ourself at a specified time in the future </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayFor</div><div class="arg-type"><span class="ident">TimeSpan</span></div></div><div class="arg-desc">How long to delay sending for</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">tellSelf</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message, <span class="ident">TimeSpan</span> delayFor, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable that you can use to cancel the operation if necessary.  You do not need to call Dispose  for any other reason.</span></div></div></div><div style="display:none" id="code-tellSelf_T_T__message__TimeSpan__delayFor__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            tell(Self, message, delayFor, sender)</div></div></div><div class="member-title"><a name="tellSelf&lt;T>"></a>tellSelf&lt;T&gt;(T, DateTime, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tellSelf_T_T__message__DateTime__delayUntil__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Send a message to ourself at a specified time in the future </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayUntil</div><div class="arg-type"><span class="ident">DateTime</span></div></div><div class="arg-desc">Date and time to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div><div class="section_title">REMARKS</div><span >This will fail to be accurate across a Daylight Saving Time boundary </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">tellSelf</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> message, <span class="ident">DateTime</span> delayUntil, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable that you can use to cancel the operation if necessary.  You do not need to call Dispose  for any other reason.</span></div></div></div><div style="display:none" id="code-tellSelf_T_T__message__DateTime__delayUntil__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
            tell(Self, message, delayUntil, sender)</div></div></div><div class="member-title"><a name="unpause"></a>unpause(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-unpause__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Un-pauses a paused process.  Messages that have built-up in the inbox whilst the Process was paused will be Processed immediately. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to un-pause</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">unpause</span>(<span class="ident">ProcessId</span> pid)</div></div><div style="display:none" id="code-unpause__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(pid).TellSystem(pid, SystemMessage.Unpause)</div></div></div><div class="member-title"><a name="unsubscribe"></a>unsubscribe(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-unsubscribe__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Unsubscribe from a process&#39;s publications </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to unsub from</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">unsubscribe</span>(<span class="ident">ProcessId</span> pid)</div></div><div style="display:none" id="code-unsubscribe__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? ActorContext.Request.Self.Actor.RemoveSubscription(pid)
                : raiseUseInMsgLoopOnlyException&lt;Unit&gt;(nameof(unsubscribe))</div></div></div><div class="member-title"><a name="unwatch"></a>unwatch(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-unwatch__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Un-watch another Process that this Process has been watching </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to watch</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">unwatch</span>(<span class="ident">ProcessId</span> pid)</div></div><div style="display:none" id="code-unwatch__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? ActorContext.Request.Self.Actor.DispatchUnWatch(pid)
                : raiseUseInMsgLoopOnlyException&lt;Unit&gt;(nameof(unwatch))</div></div></div><div class="member-title"><a name="unwatch"></a>unwatch(ProcessId, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-unwatch__ProcessId__watcher__ProcessId__watching_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Stop watching for the death of the watching process </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">watcher</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Watcher</div></div><div class="arg"><div class="arg-header"><div class="arg-name">watching</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Watched</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">unwatch</span>(<span class="ident">ProcessId</span> watcher, <span class="ident">ProcessId</span> watching)</div></div><div style="display:none" id="code-unwatch__ProcessId__watcher__ProcessId__watching_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(watcher).GetDispatcher(watcher).DispatchUnWatch(watching)</div></div></div><div class="member-title"><a name="User"></a>User(SystemName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-User__SystemName__system_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >User process ID The User process is the default entry process, your first process spawned will be a child of this process. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">system</div><div class="arg-type"><span class="ident">SystemName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">User</span>(<span class="ident">SystemName</span> system = <span class="keyword">default</span><span class="ident">SystemName</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"></div></div></div><div style="display:none" id="code-User__SystemName__system_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(system).User</div></div></div><div class="member-title"><a name="validMessageTypes"></a>validMessageTypes(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-validMessageTypes__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the types of messages that the provided ProcessId accepts.  Returns an empty list if it can&#39;t be resolved for whatever reason (process doesn&#39;t exist/JS process/etc.). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process ID to query</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Type</span>&gt; <span class="ident">validMessageTypes</span>(<span class="ident">ProcessId</span> pid)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Type</span>&gt;</div><div class="normal"><span >List of types</span></div></div></div><div style="display:none" id="code-validMessageTypes__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(pid).GetDispatcher(pid).GetValidMessageTypes()</div></div></div><div class="member-title"><a name="watch"></a>watch(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-watch__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Watch another Process in case it terminates </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to watch</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">watch</span>(<span class="ident">ProcessId</span> pid)</div></div><div style="display:none" id="code-watch__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? ActorContext.Request.Self.Actor.DispatchWatch(pid)
                : raiseUseInMsgLoopOnlyException&lt;Unit&gt;(nameof(watch))</div></div></div><div class="member-title"><a name="watch"></a>watch(ProcessId, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-watch__ProcessId__watcher__ProcessId__watching_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Watch for the death of the watching process and tell the watcher process when that happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">watcher</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Watcher</div></div><div class="arg"><div class="arg-header"><div class="arg-name">watching</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Watched</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">watch</span>(<span class="ident">ProcessId</span> watcher, <span class="ident">ProcessId</span> watching)</div></div><div style="display:none" id="code-watch__ProcessId__watcher__ProcessId__watching_"><div class="section_title">SOURCE</div><div class="code">
            ActorContext.System(watcher).GetDispatcher(watcher).DispatchWatch(watching)</div></div></div><div class="member-title"><a name="withSession"></a>withSession(SessionId, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-withSession__SessionId__sid__Action__f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Acquires a session ID for the duration of invocation of the  provided action.  NOTE: This does not create a session, or check that a session exists.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">sid</div><div class="arg-type"><span class="ident">SessionId</span></div></div><div class="arg-desc">Session ID</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc">Action to invoke</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">withSession</span>(<span class="ident">SessionId</span> sid, <span class="ident">Action</span> f)</div></div><div style="display:none" id="code-withSession__SessionId__sid__Action__f_"><div class="section_title">SOURCE</div><div class="code">
            withSession(sid, fun(f))</div></div></div><div class="member-title"><a name="withSession&lt;R>"></a>withSession&lt;R&gt;(SessionId, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-withSession_R_SessionId__sid__Func_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Acquires a session for the duration of invocation of the  provided function. NOTE: This does not create a session, or check that a session exists.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">sid</div><div class="arg-type"><span class="ident">SessionId</span></div></div><div class="arg-desc">Session ID</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">Function to invoke</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">withSession</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">SessionId</span> sid, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Result of the function</span></div></div></div><div style="display:none" id="code-withSession_R_SessionId__sid__Func_R_f_"><div class="section_title">SOURCE</div><div class="code">
            InMessageLoop
                ? ActorContext.Request.System.WithContext(
                    ActorContext.Request.Self,
                    ActorContext.Request.Self.Actor.Parent,
                    Process.Sender,
                    ActorContext.Request.CurrentRequest,
                    ActorContext.Request.CurrentMsg,
                    Some(sid),
                    f)
                : raiseUseInMsgLoopOnlyException&lt;R&gt;(nameof(withSession))</div></div></div></div></body></html>