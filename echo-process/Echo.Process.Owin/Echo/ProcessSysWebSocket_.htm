<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../Echo/index.htm">Echo</a> \ <span class="nav-bar-link" href="ProcessSysWebSocket_.htm">ProcessSysWebSocket</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#OnClose">OnClose(WebSocketCloseStatus?, string)</a><a class="nav-link" href="#OnMessageReceived">OnMessageReceived(ArraySegment&lt;byte&gt;, WebSocketMessageType)</a><a class="nav-link" href="#OnOpen">OnOpen()</a></div><div class="content-panel"><h1 >ProcessSysWebSocket Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ProcessSysWebSocket</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">WebSocketConnection</span></span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>Echo</div></div><h2 >Methods</h2><div class="member-title"><a name="OnClose"></a>OnClose(WebSocketCloseStatus?, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-OnClose__WebSocketCloseStatus__closeStatus__string__closeStatusDescription_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">closeStatus</div><div class="arg-type"><span class="ident">WebSocketCloseStatus</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">closeStatusDescription</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="ident">OnClose</span>(<span class="ident">WebSocketCloseStatus</span>? closeStatus, <span class="keyword">string</span> closeStatusDescription)</div></div><div style="display:none" id="code-OnClose__WebSocketCloseStatus__closeStatus__string__closeStatusDescription_"><div class="section_title">SOURCE</div><div class="code">
        </div></div></div><div class="member-title"><a name="OnMessageReceived"></a>OnMessageReceived(ArraySegment&lt;byte&gt;, WebSocketMessageType)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-OnMessageReceived__ArraySegment_byte_message__WebSocketMessageType__type_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">ArraySegment</span>&lt;<span class="keyword">byte</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">type</div><div class="arg-type"><span class="ident">WebSocketMessageType</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">override</span> <span class="ident">Task</span> <span class="ident">OnMessageReceived</span>(<span class="ident">ArraySegment</span>&lt;<span class="keyword">byte</span>&gt; message, <span class="ident">WebSocketMessageType</span> type)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span></div><div class="normal"></div></div></div><div style="display:none" id="code-OnMessageReceived__ArraySegment_byte_message__WebSocketMessageType__type_"><div class="section_title">SOURCE</div><div class="code">
            await Req.Parse(Encoding.UTF8.GetString(message.Array, message.Offset, message.Count), ProcessHub.Connections).MatchAsync(
                Right: async msg =&gt;
                {
                    switch (msg)
                    {
                        case TellReq req:
                        {
                            var to = FixRootName(req.To);

                            if (ProcessHub.RouteValidator(to))
                            {
                                var sender = req.Sender.IsValid
                                    ? Root(to.System)[&quot;js&quot;][(string)req.Id].Append(req.Sender)
                                    : ProcessId.NoSender;

                                tell(to, req.Message, sender);
                            }
                            await SendText(Encoding.UTF8.GetBytes($&quot;{{\&quot;tag\&quot;:\&quot;tellr\&quot;,\&quot;id\&quot;:\&quot;{req.Id}\&quot;}}&quot;), true);
                            return unit;
                        }

                        case AskReq req:
                        {
                            try
                            {
                                var to = FixRootName(req.To);

                                if (ProcessHub.RouteValidator(to))
                                {
                                    var sender = req.Sender.IsValid
                                        ? Root(to.System)[&quot;js&quot;][(string)req.Id].Append(req.Sender)
                                        : ProcessId.NoSender;

                                    var result = await askAsync&lt;object&gt;(to, req.Message, req.Sender);
                                    await SendText(Encoding.UTF8.GetBytes($&quot;{{\&quot;tag\&quot;:\&quot;askr\&quot;,\&quot;id\&quot;:\&quot;{req.Id}\&quot;,\&quot;mid\&quot;:\&quot;{req.MessageId}\&quot;,\&quot;done\&quot;:{JsonConvert.SerializeObject(result)}}}&quot;), true);
                                }
                                else
                                {
                                    await SendText(Encoding.UTF8.GetBytes($&quot;{{\&quot;tag\&quot;:\&quot;askr\&quot;,\&quot;id\&quot;:\&quot;{req.Id}\&quot;,\&quot;mid\&quot;:\&quot;{req.MessageId}\&quot;,\&quot;fail\&quot;:\&quot;Invalid route\&quot;}}&quot;), true);
                                }
                            }
                            catch
                            {
                                await SendText(Encoding.UTF8.GetBytes($&quot;{{\&quot;tag\&quot;:\&quot;askr\&quot;,\&quot;id\&quot;:\&quot;{req.Id}\&quot;,\&quot;mid\&quot;:\&quot;{req.MessageId}\&quot;,\&quot;fail\&quot;:\&quot;Error\&quot;}}&quot;), true);
                                // TODO:
                                //logSysErr(e);
                            }
                            return unit;
                        }

                        case ConnectReq req:
                            var conn = ProcessHub.OpenConnection(Tell);
                            await SendText(Encoding.UTF8.GetBytes($&quot;{{\&quot;tag\&quot;:\&quot;conn\&quot;,\&quot;id\&quot;:\&quot;{conn}\&quot;}}&quot;), true);
                            return unit;

                        case DisconnectReq req:
                            ProcessHub.CloseConnection(req.Id);
                            await SendText(Encoding.UTF8.GetBytes($&quot;{{\&quot;tag\&quot;:\&quot;disc\&quot;,\&quot;id\&quot;:\&quot;{req.Id}\&quot;}}&quot;), true);
                            return unit;

                        case SubscribeReq req:
                            ProcessHub.Subscribe(req.Id, req.Publisher, req.Subscriber);
                            await SendText(Encoding.UTF8.GetBytes($&quot;{{\&quot;tag\&quot;:\&quot;subr\&quot;,\&quot;id\&quot;:\&quot;{req.Id}\&quot;,\&quot;pub\&quot;:\&quot;{req.Publisher}\&quot;,\&quot;sub\&quot;:\&quot;{req.Subscriber}\&quot;}}&quot;), true);
                            return unit;

                        case UnSubscribeReq req:
                            ProcessHub.UnSubscribe(req.Id, req.Publisher, req.Subscriber);
                            await SendText(Encoding.UTF8.GetBytes($&quot;{{\&quot;tag\&quot;:\&quot;usubr\&quot;,\&quot;id\&quot;:\&quot;{req.Id}\&quot;,\&quot;pub\&quot;:\&quot;{req.Publisher}\&quot;,\&quot;sub\&quot;:\&quot;{req.Subscriber}\&quot;}}&quot;), true);
                            return unit;

                        case PingReq req:
                            ProcessHub.TouchConnection(req.Id);
                            await SendText(Encoding.UTF8.GetBytes($&quot;{{\&quot;tag\&quot;:\&quot;pong\&quot;,\&quot;id\&quot;:\&quot;{req.Id}\&quot;}}&quot;), true);
                            return unit;

                        default:
                            // TODO:
                            //logSysErr($&quot;Unknown message type in switch: {msg?.GetType()?.FullName}&quot;);
                            return unit;
                    }
                },
                Left: err =&gt; /*TODO: logUserErr(err)*/ unit)</div></div></div><div class="member-title"><a name="OnOpen"></a>OnOpen()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-OnOpen__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="ident">OnOpen</span>()</div></div><div style="display:none" id="code-OnOpen__"><div class="section_title">SOURCE</div><div class="code">
        </div></div></div></div></body></html>