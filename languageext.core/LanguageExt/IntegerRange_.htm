<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="IntegerRange_.htm">IntegerRange</span></div><div class="nav-panel"><h3 >CONSTRUCTORS</h3><a class="nav-link" href="#IntegerRange">IntegerRange(int, int, int)</a><h3 >PROPERTIES</h3><a class="nav-link" href="#Count">Count</a><a class="nav-link" href="#From">From</a><a class="nav-link" href="#Step">Step</a><h3 >METHODS</h3><a class="nav-link" href="#AsEnumerable">AsEnumerable()</a><a class="nav-link" href="#GetEnumerator">GetEnumerator()</a></div><div class="content-panel"><h1 >IntegerRange Class</h1><p ><span >Represents a range of integers lazily. </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">IntegerRange</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="keyword">int</span>&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Constructors</h2><div class="member-title"><a name="IntegerRange"></a>IntegerRange(int, int, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IntegerRange__int__from__int__count__int__step_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">from</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">count</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">step</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">ctor</span> <span class="ident">IntegerRange</span>(<span class="keyword">int</span> from, <span class="keyword">int</span> count, <span class="keyword">int</span> step = 1)</div></div><div style="display:none" id="code-IntegerRange__int__from__int__count__int__step_"><div class="section_title">SOURCE</div><div class="code">
            if (count &lt; 0)
            {
                throw new ArgumentException(&quot;&#39;count&#39; should be zero or greater.&quot;);
            }
            From = from;
            Count = count;
            Step = step;
        </div></div></div><h2 >Properties</h2><div class="member-title"><a name="Count"></a>Count</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Count of integers in the range </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">Count</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="From"></a>From</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >First integer in the range </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">From</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Step"></a>Step</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Step size between integers </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">Step</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="AsEnumerable"></a>AsEnumerable()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">AsEnumerable</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsEnumerable__"><div class="section_title">SOURCE</div><div class="code">
            if (Count == 0) yield break;

            if (Step &gt; 0)
            {
                var to = From + Count;
                if(to &lt; From)
                {
                    throw new OverflowException();
                }
                for (var i = From; i &lt; to; i += Step)
                {
                    yield return i;
                }
            }
            else
            {
                var to = From - Count;
                if (to &gt; From)
                {
                    throw new OverflowException();
                }
                for (var i = From; i &gt; to; i += Step)
                {
                    yield return i;
                }
            }
        </div></div></div><div class="member-title"><a name="GetEnumerator"></a>GetEnumerator()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetEnumerator__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerator</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">GetEnumerator</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerator</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-GetEnumerator__"><div class="section_title">SOURCE</div><div class="code"> 
            AsEnumerable().GetEnumerator()</div></div></div></div></body></html>