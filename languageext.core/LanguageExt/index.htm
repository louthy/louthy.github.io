<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <span class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</span></div><div class="nav-panel"><h3 >NAMESPACES</h3><a class="nav-link" href="SomeHelp/index.htm">SomeHelp</a><h3 >DELEGATES</h3><a class="nav-link" href="#Reader_Env_T">Reader&lt;Env, T&gt;</a><a class="nav-link" href="#Rws_R_W_S_T">Rws&lt;R, W, S, T&gt;</a><a class="nav-link" href="#State_S_T">State&lt;S, T&gt;</a><a class="nav-link" href="#Try_T">Try&lt;T&gt;</a><a class="nav-link" href="#TryOption_T">TryOption&lt;T&gt;</a><a class="nav-link" href="#Writer_Out_T">Writer&lt;Out, T&gt;</a><h3 >STRUCTS</h3><a class="nav-link" href="#Either_L_R">Either&lt;L, R&gt;</a><a class="nav-link" href="#EitherContext_L_R_Ret">EitherContext&lt;L, R, Ret&gt;</a><a class="nav-link" href="#EitherUnitContext_L_R">EitherUnitContext&lt;L, R&gt;</a><a class="nav-link" href="#EitherUnsafe_L_R">EitherUnsafe&lt;L, R&gt;</a><a class="nav-link" href="#EitherUnsafeContext_L_R_Ret">EitherUnsafeContext&lt;L, R, Ret&gt;</a><a class="nav-link" href="#EitherUnsafeUnitContext_L_R">EitherUnsafeUnitContext&lt;L, R&gt;</a><a class="nav-link" href="#Option_T">Option&lt;T&gt;</a><a class="nav-link" href="#OptionNone_">OptionNone</a><a class="nav-link" href="#OptionUnsafe_T">OptionUnsafe&lt;T&gt;</a><a class="nav-link" href="#ReaderResult_T">ReaderResult&lt;T&gt;</a><a class="nav-link" href="#RwsResult_W_S_T">RwsResult&lt;W, S, T&gt;</a><a class="nav-link" href="#Some_T">Some&lt;T&gt;</a><a class="nav-link" href="#SomeContext_T_R">SomeContext&lt;T, R&gt;</a><a class="nav-link" href="#SomeUnitContext_T">SomeUnitContext&lt;T&gt;</a><a class="nav-link" href="#SomeUnsafeContext_T_R">SomeUnsafeContext&lt;T, R&gt;</a><a class="nav-link" href="#SomeUnsafeUnitContext_T">SomeUnsafeUnitContext&lt;T&gt;</a><a class="nav-link" href="#StateResult_S_T">StateResult&lt;S, T&gt;</a><a class="nav-link" href="#TryOptionNoneContext_T_R">TryOptionNoneContext&lt;T, R&gt;</a><a class="nav-link" href="#TryOptionNoneUnitContext_T">TryOptionNoneUnitContext&lt;T&gt;</a><a class="nav-link" href="#TryOptionResult_T">TryOptionResult&lt;T&gt;</a><a class="nav-link" href="#TryOptionSomeContext_T_R">TryOptionSomeContext&lt;T, R&gt;</a><a class="nav-link" href="#TryOptionSomeUnitContext_T">TryOptionSomeUnitContext&lt;T&gt;</a><a class="nav-link" href="#TryResult_T">TryResult&lt;T&gt;</a><a class="nav-link" href="#TrySuccContext_T_R">TrySuccContext&lt;T, R&gt;</a><a class="nav-link" href="#TrySuccUnitContext_T">TrySuccUnitContext&lt;T&gt;</a><a class="nav-link" href="#Unit_">Unit</a><a class="nav-link" href="#WriterResult_Out_T">WriterResult&lt;Out, T&gt;</a><h3 >CLASSES</h3><a class="nav-link" href="#__ComposeExt_">__ComposeExt</a><a class="nav-link" href="#__IEnumerableEitherTransExt_">__IEnumerableEitherTransExt</a><a class="nav-link" href="#__IEnumerableEitherUnsafeTransExt_">__IEnumerableEitherUnsafeTransExt</a><a class="nav-link" href="#__TaskExt_">__TaskExt</a><a class="nav-link" href="#ActionObservable_T">ActionObservable&lt;T&gt;</a><a class="nav-link" href="#BottomException_">BottomException</a><a class="nav-link" href="#CharRange_">CharRange</a><a class="nav-link" href="#ClockEntry_">ClockEntry</a><a class="nav-link" href="#EitherExtensions_">EitherExtensions</a><a class="nav-link" href="#EitherIsNotLeftException_">EitherIsNotLeftException</a><a class="nav-link" href="#EitherIsNotRightException_">EitherIsNotRightException</a><a class="nav-link" href="#EitherT_">EitherT</a><a class="nav-link" href="#EitherUnsafeExtensions_">EitherUnsafeExtensions</a><a class="nav-link" href="#EitherUnsafeT_">EitherUnsafeT</a><a class="nav-link" href="#EnumerableExtensions_">EnumerableExtensions</a><a class="nav-link" href="#ExceptionExtensions_">ExceptionExtensions</a><a class="nav-link" href="#ExceptionMatch_R">ExceptionMatch&lt;R&gt;</a><a class="nav-link" href="#IntegerRange_">IntegerRange</a><a class="nav-link" href="#List_">List</a><a class="nav-link" href="#ListT_">ListT</a><a class="nav-link" href="#Lst_T">Lst&lt;T&gt;</a><a class="nav-link" href="#Map_">Map</a><a class="nav-link" href="#Map_K_V">Map&lt;K, V&gt;</a><a class="nav-link" href="#MapExtensions_">MapExtensions</a><a class="nav-link" href="#MapT_">MapT</a><a class="nav-link" href="#MemoExtensions_">MemoExtensions</a><a class="nav-link" href="#NewType_">NewType</a><a class="nav-link" href="#NewType_T">NewType&lt;T&gt;</a><a class="nav-link" href="#NewTypeExtensions_">NewTypeExtensions</a><a class="nav-link" href="#NotAppendableException_">NotAppendableException</a><a class="nav-link" href="#NotDivisibleException_">NotDivisibleException</a><a class="nav-link" href="#NotMultiplicableException_">NotMultiplicableException</a><a class="nav-link" href="#NotSubtractableException_">NotSubtractableException</a><a class="nav-link" href="#NullableExtensions_">NullableExtensions</a><a class="nav-link" href="#ObservableExt_">ObservableExt</a><a class="nav-link" href="#OptionalTypeConverter_">OptionalTypeConverter</a><a class="nav-link" href="#OptionExtensions_">OptionExtensions</a><a class="nav-link" href="#OptionIsNoneException_">OptionIsNoneException</a><a class="nav-link" href="#OptionT_">OptionT</a><a class="nav-link" href="#OptionUnsafeExtensions_">OptionUnsafeExtensions</a><a class="nav-link" href="#OptionUnsafeT_">OptionUnsafeT</a><a class="nav-link" href="#OutExtensions_">OutExtensions</a><a class="nav-link" href="#Prelude_">Prelude</a><a class="nav-link" href="#Que_T">Que&lt;T&gt;</a><a class="nav-link" href="#Query_">Query</a><a class="nav-link" href="#QueryExtensions_">QueryExtensions</a><a class="nav-link" href="#Queue_">Queue</a><a class="nav-link" href="#QueueExtensions_">QueueExtensions</a><a class="nav-link" href="#ReaderExt_">ReaderExt</a><a class="nav-link" href="#ReaderT_">ReaderT</a><a class="nav-link" href="#ResultIsNullException_">ResultIsNullException</a><a class="nav-link" href="#RwsExt_">RwsExt</a><a class="nav-link" href="#RwsT_">RwsT</a><a class="nav-link" href="#Set_">Set</a><a class="nav-link" href="#Set_T">Set&lt;T&gt;</a><a class="nav-link" href="#Some_">Some</a><a class="nav-link" href="#SomeNotInitialisedException_">SomeNotInitialisedException</a><a class="nav-link" href="#SomeTypeConverter_">SomeTypeConverter</a><a class="nav-link" href="#Stack_">Stack</a><a class="nav-link" href="#StackExtensions_">StackExtensions</a><a class="nav-link" href="#StateExt_">StateExt</a><a class="nav-link" href="#StateResult_">StateResult</a><a class="nav-link" href="#StateT_">StateT</a><a class="nav-link" href="#Stck_T">Stck&lt;T&gt;</a><a class="nav-link" href="#TaskT_">TaskT</a><a class="nav-link" href="#TryConfig_">TryConfig</a><a class="nav-link" href="#TryExtensions_">TryExtensions</a><a class="nav-link" href="#TryOptionExtensions_">TryOptionExtensions</a><a class="nav-link" href="#TryOptionT_">TryOptionT</a><a class="nav-link" href="#TryResult_">TryResult</a><a class="nav-link" href="#TryT_">TryT</a><a class="nav-link" href="#Tuple2Extensions_">Tuple2Extensions</a><a class="nav-link" href="#Tuple3Extensions_">Tuple3Extensions</a><a class="nav-link" href="#TupleExtensions_">TupleExtensions</a><a class="nav-link" href="#ValueIsNoneException_">ValueIsNoneException</a><a class="nav-link" href="#ValueIsNullException_">ValueIsNullException</a><a class="nav-link" href="#VectorClock_">VectorClock</a><a class="nav-link" href="#Versioned_">Versioned</a><a class="nav-link" href="#Versioned_T">Versioned&lt;T&gt;</a><a class="nav-link" href="#WriterExt_">WriterExt</a><a class="nav-link" href="#WriterT_">WriterT</a><h3 >INTERFACES</h3><a class="nav-link" href="#IAppendable_">IAppendable</a><a class="nav-link" href="#IAppendable_T">IAppendable&lt;T&gt;</a><a class="nav-link" href="#IDivisible_">IDivisible</a><a class="nav-link" href="#IDivisible_T">IDivisible&lt;T&gt;</a><a class="nav-link" href="#IEither_">IEither</a><a class="nav-link" href="#IMapItem_K_V">IMapItem&lt;K, V&gt;</a><a class="nav-link" href="#IMultiplicable_">IMultiplicable</a><a class="nav-link" href="#IMultiplicable_T">IMultiplicable&lt;T&gt;</a><a class="nav-link" href="#IOptional_">IOptional</a><a class="nav-link" href="#ISubtractable_">ISubtractable</a><a class="nav-link" href="#ISubtractable_T">ISubtractable&lt;T&gt;</a><h3 >ENUMS</h3><a class="nav-link" href="#EitherState">EitherState</a><a class="nav-link" href="#ValueTypeDesc">ValueTypeDesc</a></div><div class="content-panel"><h1 >LanguageExt Namespace</h1><h2 >DELEGATES</h2><div class="doc-ns-type"><a name="Reader_Env_T"></a><div class="left"><p ><a class="type-name" href="Reader_Env_T.htm">Reader&lt;Env, T&gt;</a></p><p ><span >The reader monad Allows for an &#39;environment&#39; value to be carried through bind functions </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="ident">ReaderResult</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">T</span>&gt;(<span class="ident">Env</span> environment)</div></div></div><div class="doc-ns-type"><a name="Rws_R_W_S_T"></a><div class="left"><p ><a class="type-name" href="Rws_R_W_S_T.htm">Rws&lt;R, W, S, T&gt;</a></p><p ><span >Reader Writer State monad </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="ident">RwsResult</span>&lt;<span class="ident">W</span>, <span class="ident">S</span>, <span class="ident">T</span>&gt; <span class="ident">Rws</span>&lt;<span class="ident">R</span>, <span class="ident">W</span>, <span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">R</span>, <span class="ident">S</span>&gt; rws)</div></div></div><div class="doc-ns-type"><a name="State_S_T"></a><div class="left"><p ><a class="type-name" href="State_S_T.htm">State&lt;S, T&gt;</a></p><p ><span ><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="ident">StateResult</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">S</span> state)</div></div></div><div class="doc-ns-type"><a name="Try_T"></a><div class="left"><p ><a class="type-name" href="Try_T.htm">Try&lt;T&gt;</a></p><p ><span >Try delegate </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="ident">TryResult</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;()</div></div></div><div class="doc-ns-type"><a name="TryOption_T"></a><div class="left"><p ><a class="type-name" href="TryOption_T.htm">TryOption&lt;T&gt;</a></p><p ><span >TryOption delegate </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="ident">TryOptionResult</span>&lt;<span class="ident">T</span>&gt; <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;()</div></div></div><div class="doc-ns-type"><a name="Writer_Out_T"></a><div class="left"><p ><a class="type-name" href="Writer_Out_T.htm">Writer&lt;Out, T&gt;</a></p><p ><span >Writer monad </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="ident">WriterResult</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt; <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;()</div></div></div><h2 >STRUCTS</h2><div class="doc-ns-type"><a name="Either_L_R"></a><div class="left"><p ><a class="type-name" href="Either_L_R.htm">Either&lt;L, R&gt;</a></p><p ><span >Either L R Holds one of two values &#39;Left&#39; or &#39;Right&#39;.  Usually &#39;Left&#39; is considered &#39;wrong&#39; or &#39;in error&#39;, and &#39;Right&#39; is, well, right.  So when the Either is in a Left state, it cancels computations like bind or map, etc.  So you can see Left as an &#39;early out, with a message&#39;.  Unlike Option that has None as its alternative value (i.e. it has an &#39;early out, but no message&#39;). </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEither</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IMultiplicable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IDivisible</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="EitherContext_L_R_Ret"></a><div class="left"><p ><a class="type-name" href="EitherContext_L_R_Ret.htm">EitherContext&lt;L, R, Ret&gt;</a></p><p ><span >Context for the fluent Either matching </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EitherContext</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;</div></div></div><div class="doc-ns-type"><a name="EitherUnitContext_L_R"></a><div class="left"><p ><a class="type-name" href="EitherUnitContext_L_R.htm">EitherUnitContext&lt;L, R&gt;</a></p><p ><span >Context for the fluent Either matching </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EitherUnitContext</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="EitherUnsafe_L_R"></a><div class="left"><p ><a class="type-name" href="EitherUnsafe_L_R.htm">EitherUnsafe&lt;L, R&gt;</a></p><p ><span >EitherUnsafe L R - This is &#39;unsafe&#39; because L or R can be null.<br/><br/> Holds one of two values &#39;Left&#39; or &#39;Right&#39;.  Usually &#39;Left&#39; is considered &#39;wrong&#39; or &#39;in error&#39;, and &#39;Right&#39; is, well, right.  So when the Either is in a Left state, it cancels computations like bind or map, etc.  So you can see Left as an &#39;early out, with a message&#39;.  Unlike Option that has None as its alternative value (i.e. it has an &#39;early out, but no message&#39;). </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEither</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IMultiplicable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IDivisible</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="EitherUnsafeContext_L_R_Ret"></a><div class="left"><p ><a class="type-name" href="EitherUnsafeContext_L_R_Ret.htm">EitherUnsafeContext&lt;L, R, Ret&gt;</a></p><p ><span >Context for the fluent Either matching </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EitherUnsafeContext</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;</div></div></div><div class="doc-ns-type"><a name="EitherUnsafeUnitContext_L_R"></a><div class="left"><p ><a class="type-name" href="EitherUnsafeUnitContext_L_R.htm">EitherUnsafeUnitContext&lt;L, R&gt;</a></p><p ><span >Context for the fluent Either matching </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EitherUnsafeUnitContext</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="Option_T"></a><div class="left"><p ><a class="type-name" href="Option_T.htm">Option&lt;T&gt;</a></p><p ><span >Option T can be in two states:     1. Some(x) -- which means there is a value stored inside     2. None    -- which means there&#39;s no value stored inside To extract the value you must use the &#39;match&#39; function. </span></p></div><div class="right"><div class="code"><div class="attr">[TypeConverter(typeof(OptionalTypeConverter))]</div><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IOptional</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IMultiplicable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IDivisible</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="OptionNone_"></a><div class="left"><p ><a class="type-name" href="OptionNone_.htm">OptionNone</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OptionNone</span></div></div></div><div class="doc-ns-type"><a name="OptionUnsafe_T"></a><div class="left"><p ><a class="type-name" href="OptionUnsafe_T.htm">OptionUnsafe&lt;T&gt;</a></p><p ><span >OptionUnsafe T can be in two states:     1. Some(x) -- which means there is a value stored inside     2. None    -- which means there&#39;s no value stored inside To extract the value you must use the &#39;matchUnsafe&#39; function. This differs from Option T  in that it allows Some(null) which is expressly forbidden for Option T.  That is what makes this type &#39;unsafe&#39;.   </span></p></div><div class="right"><div class="code"><div class="attr">[TypeConverter(typeof(OptionalTypeConverter))]</div><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IOptional</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IMultiplicable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IDivisible</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="ReaderResult_T"></a><div class="left"><p ><a class="type-name" href="ReaderResult_T.htm">ReaderResult&lt;T&gt;</a></p><p ><span >State result. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">ReaderResult</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="doc-ns-type"><a name="RwsResult_W_S_T"></a><div class="left"><p ><a class="type-name" href="RwsResult_W_S_T.htm">RwsResult&lt;W, S, T&gt;</a></p><p ><span >RWS result. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">RwsResult</span>&lt;<span class="ident">W</span>, <span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="doc-ns-type"><a name="Some_T"></a><div class="left"><p ><a class="type-name" href="Some_T.htm">Some&lt;T&gt;</a></p><p ></p></div><div class="right"><div class="code"><div class="attr">[TypeConverter(typeof(OptionalTypeConverter))]</div><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Some</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IOptional</span></span></div></div></div><div class="doc-ns-type"><a name="SomeContext_T_R"></a><div class="left"><p ><a class="type-name" href="SomeContext_T_R.htm">SomeContext&lt;T, R&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">SomeContext</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="SomeUnitContext_T"></a><div class="left"><p ><a class="type-name" href="SomeUnitContext_T.htm">SomeUnitContext&lt;T&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">SomeUnitContext</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="doc-ns-type"><a name="SomeUnsafeContext_T_R"></a><div class="left"><p ><a class="type-name" href="SomeUnsafeContext_T_R.htm">SomeUnsafeContext&lt;T, R&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">SomeUnsafeContext</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="SomeUnsafeUnitContext_T"></a><div class="left"><p ><a class="type-name" href="SomeUnsafeUnitContext_T.htm">SomeUnsafeUnitContext&lt;T&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">SomeUnsafeUnitContext</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="doc-ns-type"><a name="StateResult_S_T"></a><div class="left"><p ><a class="type-name" href="StateResult_S_T.htm">StateResult&lt;S, T&gt;</a></p><p ><span >State result. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">StateResult</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TryOptionNoneContext_T_R"></a><div class="left"><p ><a class="type-name" href="TryOptionNoneContext_T_R.htm">TryOptionNoneContext&lt;T, R&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TryOptionNoneContext</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TryOptionNoneUnitContext_T"></a><div class="left"><p ><a class="type-name" href="TryOptionNoneUnitContext_T.htm">TryOptionNoneUnitContext&lt;T&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TryOptionNoneUnitContext</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TryOptionResult_T"></a><div class="left"><p ><a class="type-name" href="TryOptionResult_T.htm">TryOptionResult&lt;T&gt;</a></p><p ><span >Holds the state of the TryOption post invocation. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TryOptionResult</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TryOptionSomeContext_T_R"></a><div class="left"><p ><a class="type-name" href="TryOptionSomeContext_T_R.htm">TryOptionSomeContext&lt;T, R&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TryOptionSomeContext</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TryOptionSomeUnitContext_T"></a><div class="left"><p ><a class="type-name" href="TryOptionSomeUnitContext_T.htm">TryOptionSomeUnitContext&lt;T&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TryOptionSomeUnitContext</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TryResult_T"></a><div class="left"><p ><a class="type-name" href="TryResult_T.htm">TryResult&lt;T&gt;</a></p><p ><span >Holds the state of the Try post invocation. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TryResult</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TrySuccContext_T_R"></a><div class="left"><p ><a class="type-name" href="TrySuccContext_T_R.htm">TrySuccContext&lt;T, R&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TrySuccContext</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TrySuccUnitContext_T"></a><div class="left"><p ><a class="type-name" href="TrySuccUnitContext_T.htm">TrySuccUnitContext&lt;T&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TrySuccUnitContext</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="doc-ns-type"><a name="Unit_"></a><div class="left"><p ><a class="type-name" href="Unit_.htm">Unit</a></p><p ><span >A unit type is a type that allows only one value (and thus can hold no information) </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Unit</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Unit</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="WriterResult_Out_T"></a><div class="left"><p ><a class="type-name" href="WriterResult_Out_T.htm">WriterResult&lt;Out, T&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">WriterResult</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;</div></div></div><h2 >CLASSES</h2><div class="doc-ns-type"><a name="__ComposeExt_"></a><div class="left"><p ><a class="type-name" href="__ComposeExt_.htm">__ComposeExt</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">__ComposeExt</span></div></div></div><div class="doc-ns-type"><a name="__IEnumerableEitherTransExt_"></a><div class="left"><p ><a class="type-name" href="__IEnumerableEitherTransExt_.htm">__IEnumerableEitherTransExt</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">__IEnumerableEitherTransExt</span></div></div></div><div class="doc-ns-type"><a name="__IEnumerableEitherUnsafeTransExt_"></a><div class="left"><p ><a class="type-name" href="__IEnumerableEitherUnsafeTransExt_.htm">__IEnumerableEitherUnsafeTransExt</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">__IEnumerableEitherUnsafeTransExt</span></div></div></div><div class="doc-ns-type"><a name="__TaskExt_"></a><div class="left"><p ><a class="type-name" href="__TaskExt_.htm">__TaskExt</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">__TaskExt</span></div></div></div><div class="doc-ns-type"><a name="ActionObservable_T"></a><div class="left"><p ><a class="type-name" href="ActionObservable_T.htm">ActionObservable&lt;T&gt;</a></p><p ><span >Executes an action post-subscription.  This is useful when the action is  going to publish to the observable.  A kind of request/response. Use the IObservable extension method: PostSubscribe(() =&gt; ...) </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ActionObservable</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="BottomException_"></a><div class="left"><p ><a class="type-name" href="BottomException_.htm">BottomException</a></p><p ><span >Value is bottom </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">BottomException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="CharRange_"></a><div class="left"><p ><a class="type-name" href="CharRange_.htm">CharRange</a></p><p ><span >Represents a range of chars lazily. </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">CharRange</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="ClockEntry_"></a><div class="left"><p ><a class="type-name" href="ClockEntry_.htm">ClockEntry</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ClockEntry</span></div></div></div><div class="doc-ns-type"><a name="EitherExtensions_"></a><div class="left"><p ><a class="type-name" href="EitherExtensions_.htm">EitherExtensions</a></p><p ><span >Extension methods for Either </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">EitherExtensions</span></div></div></div><div class="doc-ns-type"><a name="EitherIsNotLeftException_"></a><div class="left"><p ><a class="type-name" href="EitherIsNotLeftException_.htm">EitherIsNotLeftException</a></p><p ><span >Either is not left </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">EitherIsNotLeftException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="EitherIsNotRightException_"></a><div class="left"><p ><a class="type-name" href="EitherIsNotRightException_.htm">EitherIsNotRightException</a></p><p ><span >Either is not right </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">EitherIsNotRightException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="EitherT_"></a><div class="left"><p ><a class="type-name" href="EitherT_.htm">EitherT</a></p><p ><span ><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">EitherT</span></div></div></div><div class="doc-ns-type"><a name="EitherUnsafeExtensions_"></a><div class="left"><p ><a class="type-name" href="EitherUnsafeExtensions_.htm">EitherUnsafeExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">EitherUnsafeExtensions</span></div></div></div><div class="doc-ns-type"><a name="EitherUnsafeT_"></a><div class="left"><p ><a class="type-name" href="EitherUnsafeT_.htm">EitherUnsafeT</a></p><p ><span ><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">EitherUnsafeT</span></div></div></div><div class="doc-ns-type"><a name="EnumerableExtensions_"></a><div class="left"><p ><a class="type-name" href="EnumerableExtensions_.htm">EnumerableExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">EnumerableExtensions</span></div></div></div><div class="doc-ns-type"><a name="ExceptionExtensions_"></a><div class="left"><p ><a class="type-name" href="ExceptionExtensions_.htm">ExceptionExtensions</a></p><p ><span >Exception extensions </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">ExceptionExtensions</span></div></div></div><div class="doc-ns-type"><a name="ExceptionMatch_R"></a><div class="left"><p ><a class="type-name" href="ExceptionMatch_R.htm">ExceptionMatch&lt;R&gt;</a></p><p ><span >Pattern matching for exceptions.  This is to aid expression based error handling. </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ExceptionMatch</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="IntegerRange_"></a><div class="left"><p ><a class="type-name" href="IntegerRange_.htm">IntegerRange</a></p><p ><span >Represents a range of integers lazily. </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">IntegerRange</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="keyword">int</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="List_"></a><div class="left"><p ><a class="type-name" href="List_.htm">List</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">List</span></div></div></div><div class="doc-ns-type"><a name="ListT_"></a><div class="left"><p ><a class="type-name" href="ListT_.htm">ListT</a></p><p ><span ><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">ListT</span></div></div></div><div class="doc-ns-type"><a name="Lst_T"></a><div class="left"><p ><a class="type-name" href="Lst_T.htm">Lst&lt;T&gt;</a></p><p ><span >Immutable list </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyList</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyCollection</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IMultiplicable</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IDivisible</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="Map_"></a><div class="left"><p ><a class="type-name" href="Map_.htm">Map</a></p><p ><span >Immutable map module AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">Map</span></div></div></div><div class="doc-ns-type"><a name="Map_K_V"></a><div class="left"><p ><a class="type-name" href="Map_K_V.htm">Map&lt;K, V&gt;</a></p><p ><span >Immutable map AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="MapExtensions_"></a><div class="left"><p ><a class="type-name" href="MapExtensions_.htm">MapExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">MapExtensions</span></div></div></div><div class="doc-ns-type"><a name="MapT_"></a><div class="left"><p ><a class="type-name" href="MapT_.htm">MapT</a></p><p ><span ><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">MapT</span></div></div></div><div class="doc-ns-type"><a name="MemoExtensions_"></a><div class="left"><p ><a class="type-name" href="MemoExtensions_.htm">MemoExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">MemoExtensions</span></div></div></div><div class="doc-ns-type"><a name="NewType_"></a><div class="left"><p ><a class="type-name" href="NewType_.htm">NewType</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">NewType</span></div></div></div><div class="doc-ns-type"><a name="NewType_T"></a><div class="left"><p ><a class="type-name" href="NewType_T.htm">NewType&lt;T&gt;</a></p><p ><span >NewType - inspired by Haskell&#39;s &#39;newtype&#39; keyword. https://wiki.haskell.org/Newtype Derive type from this one to get: Equatable, Comparable, Appendable, Subtractable,  Multiplicable, Divisible, Foldable, Monadic, Functor, Interable: strongly typed values.  <br/><br/> For example:<br/><br/>     class Metres : NewType&lt;double&gt; { public class Metres(int x) : base(x) {} }     class Hours : NewType&lt;double&gt; { public class Hours(int x) : base(x) {} }<br/><br/> Will not accept null values<br/><br/> </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IMultiplicable</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IDivisible</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="NewTypeExtensions_"></a><div class="left"><p ><a class="type-name" href="NewTypeExtensions_.htm">NewTypeExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">NewTypeExtensions</span></div></div></div><div class="doc-ns-type"><a name="NotAppendableException_"></a><div class="left"><p ><a class="type-name" href="NotAppendableException_.htm">NotAppendableException</a></p><p ></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">NotAppendableException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="NotDivisibleException_"></a><div class="left"><p ><a class="type-name" href="NotDivisibleException_.htm">NotDivisibleException</a></p><p ></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">NotDivisibleException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="NotMultiplicableException_"></a><div class="left"><p ><a class="type-name" href="NotMultiplicableException_.htm">NotMultiplicableException</a></p><p ></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">NotMultiplicableException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="NotSubtractableException_"></a><div class="left"><p ><a class="type-name" href="NotSubtractableException_.htm">NotSubtractableException</a></p><p ></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">NotSubtractableException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="NullableExtensions_"></a><div class="left"><p ><a class="type-name" href="NullableExtensions_.htm">NullableExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">NullableExtensions</span></div></div></div><div class="doc-ns-type"><a name="ObservableExt_"></a><div class="left"><p ><a class="type-name" href="ObservableExt_.htm">ObservableExt</a></p><p ><span >Observable extensions </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">ObservableExt</span></div></div></div><div class="doc-ns-type"><a name="OptionalTypeConverter_"></a><div class="left"><p ><a class="type-name" href="OptionalTypeConverter_.htm">OptionalTypeConverter</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">OptionalTypeConverter</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">TypeConverter</span></span></div></div></div><div class="doc-ns-type"><a name="OptionExtensions_"></a><div class="left"><p ><a class="type-name" href="OptionExtensions_.htm">OptionExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">OptionExtensions</span></div></div></div><div class="doc-ns-type"><a name="OptionIsNoneException_"></a><div class="left"><p ><a class="type-name" href="OptionIsNoneException_.htm">OptionIsNoneException</a></p><p ><span >Option T is none </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">OptionIsNoneException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="OptionT_"></a><div class="left"><p ><a class="type-name" href="OptionT_.htm">OptionT</a></p><p ><span ><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">OptionT</span></div></div></div><div class="doc-ns-type"><a name="OptionUnsafeExtensions_"></a><div class="left"><p ><a class="type-name" href="OptionUnsafeExtensions_.htm">OptionUnsafeExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">OptionUnsafeExtensions</span></div></div></div><div class="doc-ns-type"><a name="OptionUnsafeT_"></a><div class="left"><p ><a class="type-name" href="OptionUnsafeT_.htm">OptionUnsafeT</a></p><p ><span ><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">OptionUnsafeT</span></div></div></div><div class="doc-ns-type"><a name="OutExtensions_"></a><div class="left"><p ><a class="type-name" href="OutExtensions_.htm">OutExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">OutExtensions</span></div></div></div><div class="doc-ns-type"><a name="Prelude_"></a><div class="left"><p ><a class="type-name" href="Prelude_.htm">Prelude</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">Prelude</span></div></div></div><div class="doc-ns-type"><a name="Que_T"></a><div class="left"><p ><a class="type-name" href="Que_T.htm">Que&lt;T&gt;</a></p><p ></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Que</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">Que</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="Query_"></a><div class="left"><p ><a class="type-name" href="Query_.htm">Query</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Query</span></div></div></div><div class="doc-ns-type"><a name="QueryExtensions_"></a><div class="left"><p ><a class="type-name" href="QueryExtensions_.htm">QueryExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">QueryExtensions</span></div></div></div><div class="doc-ns-type"><a name="Queue_"></a><div class="left"><p ><a class="type-name" href="Queue_.htm">Queue</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Queue</span></div></div></div><div class="doc-ns-type"><a name="QueueExtensions_"></a><div class="left"><p ><a class="type-name" href="QueueExtensions_.htm">QueueExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">QueueExtensions</span></div></div></div><div class="doc-ns-type"><a name="ReaderExt_"></a><div class="left"><p ><a class="type-name" href="ReaderExt_.htm">ReaderExt</a></p><p ><span >Reader monad extensions </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">ReaderExt</span></div></div></div><div class="doc-ns-type"><a name="ReaderT_"></a><div class="left"><p ><a class="type-name" href="ReaderT_.htm">ReaderT</a></p><p ><span ><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">ReaderT</span></div></div></div><div class="doc-ns-type"><a name="ResultIsNullException_"></a><div class="left"><p ><a class="type-name" href="ResultIsNullException_.htm">ResultIsNullException</a></p><p ><span >Result is null </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ResultIsNullException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="RwsExt_"></a><div class="left"><p ><a class="type-name" href="RwsExt_.htm">RwsExt</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">RwsExt</span></div></div></div><div class="doc-ns-type"><a name="RwsT_"></a><div class="left"><p ><a class="type-name" href="RwsT_.htm">RwsT</a></p><p ><span ><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">RwsT</span></div></div></div><div class="doc-ns-type"><a name="Set_"></a><div class="left"><p ><a class="type-name" href="Set_.htm">Set</a></p><p ><span >Immutable set module AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Set</span></div></div></div><div class="doc-ns-type"><a name="Set_T"></a><div class="left"><p ><a class="type-name" href="Set_T.htm">Set&lt;T&gt;</a></p><p ><span >Immutable set AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyCollection</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ICollection</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISet</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ICollection</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IMultiplicable</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IDivisible</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="Some_"></a><div class="left"><p ><a class="type-name" href="Some_.htm">Some</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Some</span></div></div></div><div class="doc-ns-type"><a name="SomeNotInitialisedException_"></a><div class="left"><p ><a class="type-name" href="SomeNotInitialisedException_.htm">SomeNotInitialisedException</a></p><p ><span >Some T not initialised </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">SomeNotInitialisedException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="SomeTypeConverter_"></a><div class="left"><p ><a class="type-name" href="SomeTypeConverter_.htm">SomeTypeConverter</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">SomeTypeConverter</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">TypeConverter</span></span></div></div></div><div class="doc-ns-type"><a name="Stack_"></a><div class="left"><p ><a class="type-name" href="Stack_.htm">Stack</a></p><p ><span >Functional module for working with the Stck T type </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Stack</span></div></div></div><div class="doc-ns-type"><a name="StackExtensions_"></a><div class="left"><p ><a class="type-name" href="StackExtensions_.htm">StackExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">StackExtensions</span></div></div></div><div class="doc-ns-type"><a name="StateExt_"></a><div class="left"><p ><a class="type-name" href="StateExt_.htm">StateExt</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">StateExt</span></div></div></div><div class="doc-ns-type"><a name="StateResult_"></a><div class="left"><p ><a class="type-name" href="StateResult_.htm">StateResult</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">StateResult</span></div></div></div><div class="doc-ns-type"><a name="StateT_"></a><div class="left"><p ><a class="type-name" href="StateT_.htm">StateT</a></p><p ><span ><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">StateT</span></div></div></div><div class="doc-ns-type"><a name="Stck_T"></a><div class="left"><p ><a class="type-name" href="Stck_T.htm">Stck&lt;T&gt;</a></p><p ><span >Immutable stack </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="TaskT_"></a><div class="left"><p ><a class="type-name" href="TaskT_.htm">TaskT</a></p><p ><span ><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TaskT</span></div></div></div><div class="doc-ns-type"><a name="TryConfig_"></a><div class="left"><p ><a class="type-name" href="TryConfig_.htm">TryConfig</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">TryConfig</span></div></div></div><div class="doc-ns-type"><a name="TryExtensions_"></a><div class="left"><p ><a class="type-name" href="TryExtensions_.htm">TryExtensions</a></p><p ><span >Extension methods for the Try monad </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">TryExtensions</span></div></div></div><div class="doc-ns-type"><a name="TryOptionExtensions_"></a><div class="left"><p ><a class="type-name" href="TryOptionExtensions_.htm">TryOptionExtensions</a></p><p ><span >Extension methods for the TryOption monad </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">TryOptionExtensions</span></div></div></div><div class="doc-ns-type"><a name="TryOptionT_"></a><div class="left"><p ><a class="type-name" href="TryOptionT_.htm">TryOptionT</a></p><p ><span ><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TryOptionT</span></div></div></div><div class="doc-ns-type"><a name="TryResult_"></a><div class="left"><p ><a class="type-name" href="TryResult_.htm">TryResult</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">TryResult</span></div></div></div><div class="doc-ns-type"><a name="TryT_"></a><div class="left"><p ><a class="type-name" href="TryT_.htm">TryT</a></p><p ><span ><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TryT</span></div></div></div><div class="doc-ns-type"><a name="Tuple2Extensions_"></a><div class="left"><p ><a class="type-name" href="Tuple2Extensions_.htm">Tuple2Extensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Tuple2Extensions</span></div></div></div><div class="doc-ns-type"><a name="Tuple3Extensions_"></a><div class="left"><p ><a class="type-name" href="Tuple3Extensions_.htm">Tuple3Extensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Tuple3Extensions</span></div></div></div><div class="doc-ns-type"><a name="TupleExtensions_"></a><div class="left"><p ><a class="type-name" href="TupleExtensions_.htm">TupleExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">TupleExtensions</span></div></div></div><div class="doc-ns-type"><a name="ValueIsNoneException_"></a><div class="left"><p ><a class="type-name" href="ValueIsNoneException_.htm">ValueIsNoneException</a></p><p ><span >Value is none </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ValueIsNoneException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="ValueIsNullException_"></a><div class="left"><p ><a class="type-name" href="ValueIsNullException_.htm">ValueIsNullException</a></p><p ><span >Value is null </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ValueIsNullException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="VectorClock_"></a><div class="left"><p ><a class="type-name" href="VectorClock_.htm">VectorClock</a></p><p ><span >Vector clock </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">VectorClock</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">VectorClock</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="Versioned_"></a><div class="left"><p ><a class="type-name" href="Versioned_.htm">Versioned</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Versioned</span></div></div></div><div class="doc-ns-type"><a name="Versioned_T"></a><div class="left"><p ><a class="type-name" href="Versioned_T.htm">Versioned&lt;T&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Versioned</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Versioned</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">Versioned</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="WriterExt_"></a><div class="left"><p ><a class="type-name" href="WriterExt_.htm">WriterExt</a></p><p ><span >Writer extension methods </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">WriterExt</span></div></div></div><div class="doc-ns-type"><a name="WriterT_"></a><div class="left"><p ><a class="type-name" href="WriterT_.htm">WriterT</a></p><p ><span ><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">WriterT</span></div></div></div><h2 >INTERFACES</h2><div class="doc-ns-type"><a name="IAppendable_"></a><div class="left"><p ><a class="type-name" href="IAppendable_.htm">IAppendable</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">IAppendable</span></div></div></div><div class="doc-ns-type"><a name="IAppendable_T"></a><div class="left"><p ><a class="type-name" href="IAppendable_T.htm">IAppendable&lt;T&gt;</a></p><p ><span >Provides the Append method </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">IAppendable</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span></span></div></div></div><div class="doc-ns-type"><a name="IDivisible_"></a><div class="left"><p ><a class="type-name" href="IDivisible_.htm">IDivisible</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">IDivisible</span></div></div></div><div class="doc-ns-type"><a name="IDivisible_T"></a><div class="left"><p ><a class="type-name" href="IDivisible_T.htm">IDivisible&lt;T&gt;</a></p><p ><span >Provides the Divide method </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">IDivisible</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IDivisible</span></span></div></div></div><div class="doc-ns-type"><a name="IEither_"></a><div class="left"><p ><a class="type-name" href="IEither_.htm">IEither</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">IEither</span></div></div></div><div class="doc-ns-type"><a name="IMapItem_K_V"></a><div class="left"><p ><a class="type-name" href="IMapItem_K_V.htm">IMapItem&lt;K, V&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="doc-ns-type"><a name="IMultiplicable_"></a><div class="left"><p ><a class="type-name" href="IMultiplicable_.htm">IMultiplicable</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">IMultiplicable</span></div></div></div><div class="doc-ns-type"><a name="IMultiplicable_T"></a><div class="left"><p ><a class="type-name" href="IMultiplicable_T.htm">IMultiplicable&lt;T&gt;</a></p><p ><span >Provides the Multiply method </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">IMultiplicable</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IMultiplicable</span></span></div></div></div><div class="doc-ns-type"><a name="IOptional_"></a><div class="left"><p ><a class="type-name" href="IOptional_.htm">IOptional</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">IOptional</span></div></div></div><div class="doc-ns-type"><a name="ISubtractable_"></a><div class="left"><p ><a class="type-name" href="ISubtractable_.htm">ISubtractable</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">ISubtractable</span></div></div></div><div class="doc-ns-type"><a name="ISubtractable_T"></a><div class="left"><p ><a class="type-name" href="ISubtractable_T.htm">ISubtractable&lt;T&gt;</a></p><p ><span >Provides the Subtract method </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">ISubtractable</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span></span></div></div></div><h2 >ENUMS</h2><div class="doc-ns-type"><a name="EitherState"></a><div class="left"><p ><a class="type-name" href="EitherState.htm">EitherState</a></p><p ><span >Possible states of an Either </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="ident">EitherState</span> : <span class="keyword">byte</span></div></div></div><div class="doc-ns-type"><a name="ValueTypeDesc"></a><div class="left"><p ><a class="type-name" href="ValueTypeDesc.htm">ValueTypeDesc</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="ident">ValueTypeDesc</span> : <span class="keyword">int</span></div></div></div></div></body></html>