<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="WriterExt_.htm">WriterExt</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#AsEnumerable&lt;Out, T>">AsEnumerable&lt;Out, T&gt;(Writer&lt;Out, T&gt;)</a><a class="nav-link" href="#Bind&lt;Out, T, R>">Bind&lt;Out, T, R&gt;(Writer&lt;Out, T&gt;, Func&lt;T, Writer&lt;Out, R&gt;&gt;)</a><a class="nav-link" href="#Count&lt;Out, T>">Count&lt;Out, T&gt;(Writer&lt;Out, T&gt;)</a><a class="nav-link" href="#Exists&lt;Out, T>">Exists&lt;Out, T&gt;(Writer&lt;Out, T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Filter&lt;W, T>">Filter&lt;W, T&gt;(Writer&lt;W, T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Fold&lt;Out, S, T>">Fold&lt;Out, S, T&gt;(Writer&lt;Out, T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#foldT&lt;Out, Env, T, V>">foldT&lt;Out, Env, T, V&gt;(Writer&lt;Out, Reader&lt;Env, T&gt;&gt;, V, Func&lt;V, T, V&gt;)</a><a class="nav-link" href="#FoldT&lt;Out, Env, T, V>">FoldT&lt;Out, Env, T, V&gt;(Writer&lt;Out, Reader&lt;Env, T&gt;&gt;, V, Func&lt;V, T, V&gt;)</a><a class="nav-link" href="#foldT&lt;Out, S, T, V>">foldT&lt;Out, S, T, V&gt;(Writer&lt;Out, State&lt;S, T&gt;&gt;, V, Func&lt;V, T, V&gt;)</a><a class="nav-link" href="#FoldT&lt;Out, S, T, V>">FoldT&lt;Out, S, T, V&gt;(Writer&lt;Out, State&lt;S, T&gt;&gt;, V, Func&lt;V, T, V&gt;)</a><a class="nav-link" href="#foldT&lt;Out, T, V>">foldT&lt;Out, T, V&gt;(Writer&lt;Out, Writer&lt;Out, T&gt;&gt;, V, Func&lt;V, T, V&gt;)</a><a class="nav-link" href="#FoldT&lt;Out, T, V>">FoldT&lt;Out, T, V&gt;(Writer&lt;Out, Writer&lt;Out, T&gt;&gt;, V, Func&lt;V, T, V&gt;)</a><a class="nav-link" href="#ForAll&lt;Out, T>">ForAll&lt;Out, T&gt;(Writer&lt;Out, T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Iter&lt;Out, T>">Iter&lt;Out, T&gt;(Writer&lt;Out, T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#Map&lt;Out, T, R>">Map&lt;Out, T, R&gt;(Writer&lt;Out, T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#Select&lt;W, T, U>">Select&lt;W, T, U&gt;(Writer&lt;W, T&gt;, Func&lt;T, U&gt;)</a><a class="nav-link" href="#SelectMany&lt;Out, E, T, U, V>">SelectMany&lt;Out, E, T, U, V&gt;(Writer&lt;Out, T&gt;, Func&lt;T, Reader&lt;E, U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#SelectMany&lt;Out, S, T, U, V>">SelectMany&lt;Out, S, T, U, V&gt;(Writer&lt;Out, T&gt;, Func&lt;T, State&lt;S, U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#SelectMany&lt;W, T, U, V>">SelectMany&lt;W, T, U, V&gt;(Writer&lt;W, T&gt;, Func&lt;T, Writer&lt;W, U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#Sum&lt;W>">Sum&lt;W&gt;(Writer&lt;W, int&gt;)</a><a class="nav-link" href="#Where&lt;W, T>">Where&lt;W, T&gt;(Writer&lt;W, T&gt;, Func&lt;T, bool&gt;)</a></div><div class="content-panel"><h1 >WriterExt Class</h1><p ><span >Writer extension methods </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">WriterExt</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="AsEnumerable&lt;Out, T>"></a>AsEnumerable&lt;Out, T&gt;(Writer&lt;Out, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable_Out_T_Writer_Out_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">AsEnumerable</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsEnumerable_Out_T_Writer_Out_T_self_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Valid()();
            if (!res.IsBottom)
            {
                yield return self().Value;
            }
        </div></div></div><div class="member-title"><a name="Bind&lt;Out, T, R>"></a>Bind&lt;Out, T, R&gt;(Writer&lt;Out, T&gt;, Func&lt;T, Writer&lt;Out, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_Out_T_R_Writer_Out_T_self__Func_T_Writer&lt;Out, R>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">R</span>&gt; <span class="ident">Bind</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">R</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Bind_Out_T_R_Writer_Out_T_self__Func_T_Writer&lt;Out, R>_binder_"><div class="section_title">SOURCE</div><div class="code">
            return () =&gt;
            {
                var t = self.Valid()();
                if (t.IsBottom) return WriterResult.Bottom&lt;Out, R&gt;(t.Output);
                var u = binder(t.Value).Valid()();
                return WriterResult.Return(u.Value, t.Output.Concat(u.Output));
            };
        </div></div></div><div class="member-title"><a name="Count&lt;Out, T>"></a>Count&lt;Out, T&gt;(Writer&lt;Out, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Count_Out_T_Writer_Out_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="keyword">int</span>&gt; <span class="ident">Count</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Count_Out_T_Writer_Out_T_self_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
            bmap(self.Valid()(), x =&gt; 1)</div></div></div><div class="member-title"><a name="Exists&lt;Out, T>"></a>Exists&lt;Out, T&gt;(Writer&lt;Out, T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists_Out_T_Writer_Out_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="keyword">bool</span>&gt; <span class="ident">Exists</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Exists_Out_T_Writer_Out_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
            bmap(self.Valid()(), x =&gt; pred(x))</div></div></div><div class="member-title"><a name="Filter&lt;W, T>"></a>Filter&lt;W, T&gt;(Writer&lt;W, T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter_W_T_Writer_W_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>&gt; <span class="ident">Filter</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Filter_W_T_Writer_W_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Where(pred)</div></div></div><div class="member-title"><a name="Fold&lt;Out, S, T>"></a>Fold&lt;Out, S, T&gt;(Writer&lt;Out, T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_Out_S_T_Writer_Out_T_self__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">S</span>&gt; <span class="ident">Fold</span>&lt;<span class="ident">Out</span>, <span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Fold_Out_S_T_Writer_Out_T_self__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
            bmap(self.Valid()(), x =&gt; folder(state, x))</div></div></div><div class="member-title"><a name="foldT&lt;Out, Env, T, V>"></a>foldT&lt;Out, Env, T, V&gt;(Writer&lt;Out, Reader&lt;Env, T&gt;&gt;, V, Func&lt;V, T, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_Out_Env_T_V_Writer_Out_Reader&lt;Env, T>_self__V__state__Func_V_T_V_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">V</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">foldT</span>&lt;<span class="ident">Out</span>, <span class="ident">Env</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">T</span>&gt;&gt; self, <span class="ident">V</span> state, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-foldT_Out_Env_T_V_Writer_Out_Reader&lt;Env, T>_self__V__state__Func_V_T_V_fold_"><div class="section_title">SOURCE</div><div class="code">
            self.FoldT(state, fold)</div></div></div><div class="member-title"><a name="FoldT&lt;Out, Env, T, V>"></a>FoldT&lt;Out, Env, T, V&gt;(Writer&lt;Out, Reader&lt;Env, T&gt;&gt;, V, Func&lt;V, T, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_Out_Env_T_V_Writer_Out_Reader&lt;Env, T>_self__V__state__Func_V_T_V_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">V</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">FoldT</span>&lt;<span class="ident">Out</span>, <span class="ident">Env</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">T</span>&gt;&gt; self, <span class="ident">V</span> state, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FoldT_Out_Env_T_V_Writer_Out_Reader&lt;Env, T>_self__V__state__Func_V_T_V_fold_"><div class="section_title">SOURCE</div><div class="code">
            return () =&gt;
            {
                var inner = self.Valid()();
                if (inner.IsBottom) return WriterResult.Bottom&lt;Out, Reader&lt;Env, V&gt;&gt;(inner.Output);

                return WriterResult.Return&lt;Out, Reader&lt;Env, V&gt;&gt;(env =&gt;
                   inner.Value.Fold(state, fold)(env),
                   inner.Output
                );
            };
        </div></div></div><div class="member-title"><a name="foldT&lt;Out, S, T, V>"></a>foldT&lt;Out, S, T, V&gt;(Writer&lt;Out, State&lt;S, T&gt;&gt;, V, Func&lt;V, T, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_Out_S_T_V_Writer_Out_State&lt;S, T>_self__V__state__Func_V_T_V_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">V</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">foldT</span>&lt;<span class="ident">Out</span>, <span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;&gt; self, <span class="ident">V</span> state, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-foldT_Out_S_T_V_Writer_Out_State&lt;S, T>_self__V__state__Func_V_T_V_fold_"><div class="section_title">SOURCE</div><div class="code">
            self.FoldT(state, fold)</div></div></div><div class="member-title"><a name="FoldT&lt;Out, S, T, V>"></a>FoldT&lt;Out, S, T, V&gt;(Writer&lt;Out, State&lt;S, T&gt;&gt;, V, Func&lt;V, T, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_Out_S_T_V_Writer_Out_State&lt;S, T>_self__V__state__Func_V_T_V_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">V</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">FoldT</span>&lt;<span class="ident">Out</span>, <span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;&gt; self, <span class="ident">V</span> state, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FoldT_Out_S_T_V_Writer_Out_State&lt;S, T>_self__V__state__Func_V_T_V_fold_"><div class="section_title">SOURCE</div><div class="code">
            return () =&gt;
            {
                var inner = self.Valid()();
                if (inner.IsBottom) return WriterResult.Bottom&lt;Out, State&lt;S, V&gt;&gt;(inner.Output);

                return WriterResult.Return&lt;Out, State&lt;S, V&gt;&gt;(s =&gt;
                   inner.Value.Fold(state, fold)(s),
                   inner.Output
                );
            };
        </div></div></div><div class="member-title"><a name="foldT&lt;Out, T, V>"></a>foldT&lt;Out, T, V&gt;(Writer&lt;Out, Writer&lt;Out, T&gt;&gt;, V, Func&lt;V, T, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_Out_T_V_Writer_Out_Writer&lt;Out, T>_self__V__state__Func_V_T_V_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">V</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">V</span>&gt; <span class="ident">foldT</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;&gt; self, <span class="ident">V</span> state, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-foldT_Out_T_V_Writer_Out_Writer&lt;Out, T>_self__V__state__Func_V_T_V_fold_"><div class="section_title">SOURCE</div><div class="code">
            self.FoldT(state, fold)</div></div></div><div class="member-title"><a name="FoldT&lt;Out, T, V>"></a>FoldT&lt;Out, T, V&gt;(Writer&lt;Out, Writer&lt;Out, T&gt;&gt;, V, Func&lt;V, T, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_Out_T_V_Writer_Out_Writer&lt;Out, T>_self__V__state__Func_V_T_V_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">V</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">V</span>&gt; <span class="ident">FoldT</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;&gt; self, <span class="ident">V</span> state, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FoldT_Out_T_V_Writer_Out_Writer&lt;Out, T>_self__V__state__Func_V_T_V_fold_"><div class="section_title">SOURCE</div><div class="code">
            return () =&gt;
            {
                var inner = self.Valid()();
                if (inner.IsBottom) return WriterResult.Bottom&lt;Out, V&gt;(inner.Output);
                var res = inner.Value.Fold(state, fold)();
                return WriterResult.Return&lt;Out, V&gt;(res.Value, inner.Output.Concat(res.Output));
            };
        </div></div></div><div class="member-title"><a name="ForAll&lt;Out, T>"></a>ForAll&lt;Out, T&gt;(Writer&lt;Out, T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll_Out_T_Writer_Out_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="keyword">bool</span>&gt; <span class="ident">ForAll</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ForAll_Out_T_Writer_Out_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
            bmap(self.Valid()(), x =&gt; pred(x))</div></div></div><div class="member-title"><a name="Iter&lt;Out, T>"></a>Iter&lt;Out, T&gt;(Writer&lt;Out, T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter_Out_T_Writer_Out_T_self__Action_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Unit</span>&gt; <span class="ident">Iter</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; action)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Iter_Out_T_Writer_Out_T_self__Action_T_action_"><div class="section_title">SOURCE</div><div class="code">
            return () =&gt;
            {
                var res = self.Valid()();
                if (!res.IsBottom)
                {
                    action(res.Value);
                }
                return WriterResult.Return(unit,res.Output);
            };
        </div></div></div><div class="member-title"><a name="Map&lt;Out, T, R>"></a>Map&lt;Out, T, R&gt;(Writer&lt;Out, T&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_Out_T_R_Writer_Out_T_self__Func_T_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">R</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Map_Out_T_R_Writer_Out_T_self__Func_T_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
            self.Select(mapper)</div></div></div><div class="member-title"><a name="Select&lt;W, T, U>"></a>Select&lt;W, T, U&gt;(Writer&lt;W, T&gt;, Func&lt;T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_W_T_U_Writer_W_T_self__Func_T_U_select_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Select </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">select</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">U</span>&gt; <span class="ident">Select</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; select)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">U</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Select_W_T_U_Writer_W_T_self__Func_T_U_select_"><div class="section_title">SOURCE</div><div class="code">
            if (select == null) throw new ArgumentNullException(nameof(select));
            return () =&gt;
            {
                var resT = self.Valid()();
                if (resT.IsBottom) return WriterResult.Bottom&lt;W, U&gt;(resT.Output);
                var resU = select(resT.Value);
                return WriterResult.Return(resU, resT.Output);
            };
        </div></div></div><div class="member-title"><a name="SelectMany&lt;Out, E, T, U, V>"></a>SelectMany&lt;Out, E, T, U, V&gt;(Writer&lt;Out, T&gt;, Func&lt;T, Reader&lt;E, U&gt;&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_Out_E_T_U_V_Writer_Out_T_self__Func_T_Reader&lt;E, U>_bind__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Select Many </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Reader</span>&lt;<span class="ident">E</span>, <span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Reader</span>&lt;<span class="ident">E</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">Out</span>, <span class="ident">E</span>, <span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Reader</span>&lt;<span class="ident">E</span>, <span class="ident">U</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">Reader</span>&lt;<span class="ident">E</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_Out_E_T_U_V_Writer_Out_T_self__Func_T_Reader&lt;E, U>_bind__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            if (bind == null) throw new ArgumentNullException(nameof(bind));
            if (project == null) throw new ArgumentNullException(nameof(project));
            return () =&gt;
            {
                var resT = self.Valid()();
                if (resT.IsBottom) return WriterResult.Bottom&lt;Out, Reader&lt;E, V&gt;&gt;(resT.Output);
                return WriterResult.Return&lt;Out, Reader&lt;E, V&gt;&gt;(env =&gt;
                {
                    var resU = bind(resT.Value).Valid()(env);
                    if (resU.IsBottom) return ReaderResult.Bottom&lt;V&gt;();
                    return ReaderResult.Return(project(resT.Value, resU.Value));
                },resT.Output);
            };
        </div></div></div><div class="member-title"><a name="SelectMany&lt;Out, S, T, U, V>"></a>SelectMany&lt;Out, S, T, U, V&gt;(Writer&lt;Out, T&gt;, Func&lt;T, State&lt;S, U&gt;&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_Out_S_T_U_V_Writer_Out_T_self__Func_T_State&lt;S, U>_bind__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Select Many </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">Out</span>, <span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_Out_S_T_U_V_Writer_Out_T_self__Func_T_State&lt;S, U>_bind__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            if (bind == null) throw new ArgumentNullException(nameof(bind));
            if (project == null) throw new ArgumentNullException(nameof(project));
            return () =&gt;
            {
                var resT = self.Valid()();
                if (resT.IsBottom) return WriterResult.Bottom&lt;Out, State&lt;S, V&gt;&gt;(resT.Output);
                return WriterResult.Return&lt;Out, State&lt;S, V&gt;&gt;(state =&gt;
                {
                    var resU = bind(resT.Value).Valid()(state);
                    if (resU.IsBottom) return StateResult.Bottom&lt;S, V&gt;(state);
                    return StateResult.Return(resU.State, project(resT.Value, resU.Value));
                },resT.Output);
            };
        </div></div></div><div class="member-title"><a name="SelectMany&lt;W, T, U, V>"></a>SelectMany&lt;W, T, U, V&gt;(Writer&lt;W, T&gt;, Func&lt;T, Writer&lt;W, U&gt;&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_W_T_U_V_Writer_W_T_self__Func_T_Writer&lt;W, U>_bind__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Select Many </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">V</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">U</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_W_T_U_V_Writer_W_T_self__Func_T_Writer&lt;W, U>_bind__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            if (bind == null) throw new ArgumentNullException(nameof(bind));
            if (project == null) throw new ArgumentNullException(nameof(project));

            return () =&gt;
            {
                var resT = self.Valid()();
                if (resT.IsBottom) return WriterResult.Bottom&lt;W, V&gt;(resT.Output);
                var resU = bind(resT.Value).Valid().Invoke();
                if (resT.IsBottom) return WriterResult.Bottom&lt;W, V&gt;(resU.Output);
                var resV = project(resT.Value, resU.Value);
                return WriterResult.Return(resV, resT.Output.Concat(resU.Output));
            };
        </div></div></div><div class="member-title"><a name="Sum&lt;W>"></a>Sum&lt;W&gt;(Writer&lt;W, int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum_W_Writer_W_int_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="keyword">int</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="keyword">int</span>&gt; <span class="ident">Sum</span>&lt;<span class="ident">W</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="keyword">int</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Sum_W_Writer_W_int_self_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt; bmap(self.Valid()(), x =&gt; x)</div></div></div><div class="member-title"><a name="Where&lt;W, T>"></a>Where&lt;W, T&gt;(Writer&lt;W, T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_W_T_Writer_W_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>&gt; <span class="ident">Where</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">W</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Where_W_T_Writer_W_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            return () =&gt;
            {
                var res = self.Valid()();
                return pred(res.Value)
                    ? WriterResult.Return(res.Value, res.Output)
                    : WriterResult.Bottom&lt;W, T&gt;(res.Output);
            };
        </div></div></div></div></body></html>