<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="TryOptionExtensions_.htm">TryOptionExtensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Append&lt;T>">Append&lt;T&gt;(TryOption&lt;T&gt;, TryOption&lt;T&gt;)</a><a class="nav-link" href="#Apply&lt;T, R>">Apply&lt;T, R&gt;(TryOption&lt;Func&lt;T, R&gt;&gt;, TryOption&lt;T&gt;)</a><a class="nav-link" href="#Apply&lt;T1, T2, R>">Apply&lt;T1, T2, R&gt;(TryOption&lt;Func&lt;T1, T2, R&gt;&gt;, TryOption&lt;T1&gt;)</a><a class="nav-link" href="#Apply&lt;T1, T2, R>">Apply&lt;T1, T2, R&gt;(TryOption&lt;Func&lt;T1, T2, R&gt;&gt;, TryOption&lt;T1&gt;, TryOption&lt;T2&gt;)</a><a class="nav-link" href="#AsEnumerable&lt;T>">AsEnumerable&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#AsString&lt;T>">AsString&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#Bind&lt;T, R>">Bind&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, TryOption&lt;R&gt;&gt;)</a><a class="nav-link" href="#Bind&lt;T, R>">Bind&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, TryOption&lt;R&gt;&gt;, Func&lt;TryOption&lt;R&gt;&gt;, Func&lt;Exception, TryOption&lt;R&gt;&gt;)</a><a class="nav-link" href="#Count&lt;T>">Count&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#Divide&lt;T>">Divide&lt;T&gt;(TryOption&lt;T&gt;, TryOption&lt;T&gt;)</a><a class="nav-link" href="#Exists&lt;T>">Exists&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Exists&lt;T>">Exists&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;, Func&lt;bool&gt;, Func&lt;Exception, bool&gt;)</a><a class="nav-link" href="#Filter&lt;T>">Filter&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Fold&lt;S, T>">Fold&lt;S, T&gt;(TryOption&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#Fold&lt;S, T>">Fold&lt;S, T&gt;(TryOption&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#ForAll&lt;T>">ForAll&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#ForAll&lt;T>">ForAll&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;, Func&lt;bool&gt;, Func&lt;Exception, bool&gt;)</a><a class="nav-link" href="#IfFailThrow&lt;T>">IfFailThrow&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#IfNone&lt;T>">IfNone&lt;T&gt;(TryOption&lt;T&gt;, T)</a><a class="nav-link" href="#IfNone&lt;T>">IfNone&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T&gt;)</a><a class="nav-link" href="#IfNoneOrFail&lt;T>">IfNoneOrFail&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T&gt;, Func&lt;Exception, T&gt;)</a><a class="nav-link" href="#IfSome&lt;T>">IfSome&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, Unit&gt;)</a><a class="nav-link" href="#IfSome&lt;T>">IfSome&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#Iter&lt;T>">Iter&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#Iter&lt;T>">Iter&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;, Action, Action&lt;Exception&gt;)</a><a class="nav-link" href="#Join&lt;L, T, U, K, V>">Join&lt;L, T, U, K, V&gt;(TryOption&lt;T&gt;, TryOption&lt;U&gt;, Func&lt;T, K&gt;, Func&lt;U, K&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#Map&lt;T, R>">Map&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#Map&lt;T, R>">Map&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#Match&lt;T, R>">Match&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#Match&lt;T, R>">Match&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, R, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#Match&lt;T, R>">Match&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, R)</a><a class="nav-link" href="#Match&lt;T, R>">Match&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, R, R)</a><a class="nav-link" href="#Match&lt;T>">Match&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;, Action, Action&lt;Exception&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#Multiply&lt;T>">Multiply&lt;T&gt;(TryOption&lt;T&gt;, TryOption&lt;T&gt;)</a><a class="nav-link" href="#ParMap&lt;T1, T2, R>">ParMap&lt;T1, T2, R&gt;(TryOption&lt;T1&gt;, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#ParMap&lt;T1, T2, T3, R>">ParMap&lt;T1, T2, T3, R&gt;(TryOption&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#Select&lt;T, U>">Select&lt;T, U&gt;(TryOption&lt;T&gt;, Func&lt;T, U&gt;)</a><a class="nav-link" href="#SelectMany&lt;T, U, V>">SelectMany&lt;T, U, V&gt;(TryOption&lt;T&gt;, Func&lt;T, TryOption&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#SelectMany&lt;T, U, V>">SelectMany&lt;T, U, V&gt;(TryOption&lt;T&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#SelectMany&lt;T, U, V>">SelectMany&lt;T, U, V&gt;(IEnumerable&lt;T&gt;, Func&lt;T, TryOption&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#Some&lt;T, R>">Some&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#Some&lt;T>">Some&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#Subtract&lt;T>">Subtract&lt;T&gt;(TryOption&lt;T&gt;, TryOption&lt;T&gt;)</a><a class="nav-link" href="#Sum">Sum(TryOption&lt;int&gt;)</a><a class="nav-link" href="#ToArray&lt;T>">ToArray&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#ToList&lt;T>">ToList&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#ToOption&lt;T>">ToOption&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#Try&lt;T>">Try&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#Where&lt;T>">Where&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;)</a></div><div class="content-panel"><h1 >TryOptionExtensions Class</h1><p ><span >Extension methods for the TryOption monad </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">TryOptionExtensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="Append&lt;T>"></a>Append&lt;T&gt;(TryOption&lt;T&gt;, TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Append_T_TryOption_T_lhs__TryOption_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append the TryOption(x) to TryOption(y). If either of the TryOptions throw then the result is Fail If either of the TryOptions return None then the result is None For numeric values the behaviour is to sum the TryOptions (lhs + rhs) For string values the behaviour is to concatenate the strings For Lst/Stck/Que values the behaviour is to concatenate the lists For Map or Set values the behaviour is to merge the sets Otherwise if the R type derives from IAppendable then the behaviour is to call lhs.Append(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Left-hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Append</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div></div><div style="display:none" id="code-Append_T_TryOption_T_lhs__TryOption_T_rhs_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
        {
            var lhsRes = lhs.Try();
            if (lhsRes.IsFaulted) return lhsRes;
            var rhsRes = rhs.Try();
            if (rhsRes.IsFaulted) return rhsRes;
            return lhsRes.Value.Append(rhsRes.Value);
        }</div></div></div><div class="member-title"><a name="Apply&lt;T, R>"></a>Apply&lt;T, R&gt;(TryOption&lt;Func&lt;T, R&gt;&gt;, TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_T_R_TryOption_Func&lt;T, R>_self__TryOption_T_arg_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a TryOption value to a TryOption function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">TryOption function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">arg</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">TryOption argument</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; arg)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Returns the result of applying the TryOption argument to the TryOption function</span></div></div></div><div style="display:none" id="code-Apply_T_R_TryOption_Func&lt;T, R>_self__TryOption_T_arg_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
        {
            var res = self.Try();
            if (res.IsFaulted) return new TryOptionResult&lt;R&gt;(res.Exception);
            if (res.Value.IsNone) return new TryOptionResult&lt;R&gt;(None);
            var val = arg.Try();
            if (val.IsFaulted) return new TryOptionResult&lt;R&gt;(val.Exception);
            if (val.Value.IsNone) return new TryOptionResult&lt;R&gt;(None);
            return new TryOptionResult&lt;R&gt;(res.Value.Value(val.Value.Value));
        }</div></div></div><div class="member-title"><a name="Apply&lt;T1, T2, R>"></a>Apply&lt;T1, T2, R&gt;(TryOption&lt;Func&lt;T1, T2, R&gt;&gt;, TryOption&lt;T1&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_T1_T2_R_TryOption_Func&lt;T1, T2, R>_self__TryOption_T1_arg_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a TryOption value to a TryOption function of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">TryOption function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">arg</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T1</span>&gt;</div></div><div class="arg-desc">TryOption argument</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">TryOption</span>&lt;<span class="ident">T1</span>&gt; arg)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"><span >Returns the result of applying the TryOption argument to the TryOption function: a TryOption function of arity 1</span></div></div></div><div style="display:none" id="code-Apply_T1_T2_R_TryOption_Func&lt;T1, T2, R>_self__TryOption_T1_arg_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
        {
            var res = self.Try();
            if (res.IsFaulted) return new TryOptionResult&lt;Func&lt;T2, R&gt;&gt;(res.Exception);
            if (res.Value.IsNone) return new TryOptionResult&lt;Func&lt;T2, R&gt;&gt;(None);
            var val = arg.Try();
            if (val.IsFaulted) return new TryOptionResult&lt;Func&lt;T2, R&gt;&gt;(val.Exception);
            if (val.Value.IsNone) return new TryOptionResult&lt;Func&lt;T2, R&gt;&gt;(None);
            return new TryOptionResult&lt;Func&lt;T2, R&gt;&gt;(par(res.Value.Value, val.Value.Value));
        }</div></div></div><div class="member-title"><a name="Apply&lt;T1, T2, R>"></a>Apply&lt;T1, T2, R&gt;(TryOption&lt;Func&lt;T1, T2, R&gt;&gt;, TryOption&lt;T1&gt;, TryOption&lt;T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_T1_T2_R_TryOption_Func&lt;T1, T2, R>_self__TryOption_T1_arg1__TryOption_T2_arg2_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply TryOption values to a TryOption function of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">TryOption function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">arg1</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T1</span>&gt;</div></div><div class="arg-desc">TryOption argument</div></div><div class="arg"><div class="arg-header"><div class="arg-name">arg2</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T2</span>&gt;</div></div><div class="arg-desc">TryOption argument</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">TryOption</span>&lt;<span class="ident">T1</span>&gt; arg1, <span class="ident">TryOption</span>&lt;<span class="ident">T2</span>&gt; arg2)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Returns the result of applying the TryOption arguments to TryOption Try function</span></div></div></div><div style="display:none" id="code-Apply_T1_T2_R_TryOption_Func&lt;T1, T2, R>_self__TryOption_T1_arg1__TryOption_T2_arg2_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
        {
            var res = self.Try();
            if (res.IsFaulted) return new TryOptionResult&lt;R&gt;(res.Exception);
            if (res.Value.IsNone) return new TryOptionResult&lt;R&gt;(None);
            var val1 = arg1.Try();
            if (val1.IsFaulted) return new TryOptionResult&lt;R&gt;(val1.Exception);
            if (val1.Value.IsNone) return new TryOptionResult&lt;R&gt;(None);
            var val2 = arg2.Try();
            if (val2.IsFaulted) return new TryOptionResult&lt;R&gt;(val2.Exception);
            if (val2.Value.IsNone) return new TryOptionResult&lt;R&gt;(None);
            return new TryOptionResult&lt;R&gt;(res.Value.Value(val1.Value.Value, val2.Value.Value));
        }</div></div></div><div class="member-title"><a name="AsEnumerable&lt;T>"></a>AsEnumerable&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable_T_TryOption_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">Exception</span>, <span class="ident">T</span>&gt;&gt; <span class="ident">AsEnumerable</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">Exception</span>, <span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsEnumerable_T_TryOption_T_self_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();

            if (res.IsFaulted)
            {
                yield return res.Exception;
            }
            else if (res.Value.IsSome)
            {
                yield return res.Value.Value;
            }
        </div></div></div><div class="member-title"><a name="AsString&lt;T>"></a>AsString&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsString_T_TryOption_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="ident">AsString</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">string</span></div><div class="normal"></div></div></div><div style="display:none" id="code-AsString_T_TryOption_T_self_"><div class="section_title">SOURCE</div><div class="code">
            match(self,
                Some: v =&gt; isnull(v)
                            ? &quot;Some(null)&quot;
                            : $&quot;Some({v})&quot;,
                None: () =&gt; &quot;None&quot;,
                Fail: ex =&gt; $&quot;Fail({ex.Message})&quot;
            )</div></div></div><div class="member-title"><a name="Bind&lt;T, R>"></a>Bind&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, TryOption&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_T_R_TryOption_T_self__Func_T_TryOption&lt;R>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Bind_T_R_TryOption_T_self__Func_T_TryOption&lt;R>_binder_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
        {
            var res = self.Try();
            return res.IsFaulted
                ? new TryOptionResult&lt;R&gt;(res.Exception)
                : res.Value.IsNone
                    ? new TryOptionResult&lt;R&gt;(None)
                    : binder(res.Value.Value).Try();
        }</div></div></div><div class="member-title"><a name="Bind&lt;T, R>"></a>Bind&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, TryOption&lt;R&gt;&gt;, Func&lt;TryOption&lt;R&gt;&gt;, Func&lt;Exception, TryOption&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_T_R_TryOption_T_self__Func_T_TryOption&lt;R>_Some__Func_TryOption&lt;R>_None__Func_Exception_TryOption&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Bind_T_R_TryOption_T_self__Func_T_TryOption&lt;R>_Some__Func_TryOption&lt;R>_None__Func_Exception_TryOption&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
        {
            var res = self.Try();
            return res.IsFaulted
                ? Fail(res.Exception).Try()
                : res.Value.IsNone
                    ? None().Try()
                    : Some(res.Value.Value).Try();
        }</div></div></div><div class="member-title"><a name="Count&lt;T>"></a>Count&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Count_T_TryOption_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">Count</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Count_T_TryOption_T_self_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return res.IsFaulted
                ? 0
                : res.Value.Count();
        </div></div></div><div class="member-title"><a name="Divide&lt;T>"></a>Divide&lt;T&gt;(TryOption&lt;T&gt;, TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Divide_T_TryOption_T_lhs__TryOption_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide TryOption(x) by TryOption(y).   If either of the TryOptions throw then the result is Fail If either of the TryOptions return None then the result is None For numeric values the behaviour is to divide the TryOptions (lhs / rhs) For Lst values the behaviour is to divide all combinations of values in both lists  to produce a new list Otherwise if the R type derives from IDivisible then the behaviour is to call lhs.Divide(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Left-hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Divide</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs / rhs</span></div></div></div><div style="display:none" id="code-Divide_T_TryOption_T_lhs__TryOption_T_rhs_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
        {
            var lhsRes = lhs.Try();
            if (lhsRes.IsFaulted) return lhsRes;
            var rhsRes = rhs.Try();
            if (rhsRes.IsFaulted) return rhsRes;
            return lhsRes.Value.Divide(rhsRes.Value);
        }</div></div></div><div class="member-title"><a name="Exists&lt;T>"></a>Exists&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists_T_TryOption_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">Exists</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Exists_T_TryOption_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return res.IsFaulted
                ? false
                : res.Value.Exists(pred);
        </div></div></div><div class="member-title"><a name="Exists&lt;T>"></a>Exists&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;, Func&lt;bool&gt;, Func&lt;Exception, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists_T_TryOption_T_self__Func_T_bool_Some__Func_bool_None__Func_Exception_bool_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">Exists</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="keyword">bool</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Exists_T_TryOption_T_self__Func_T_bool_Some__Func_bool_None__Func_Exception_bool_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.Exists(Some, None);
        </div></div></div><div class="member-title"><a name="Filter&lt;T>"></a>Filter&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter_T_TryOption_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Filter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Filter_T_TryOption_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return res.IsFaulted || res.Value.IsNone
                ? () =&gt; res
                : pred(res.Value.Value)
                    ? self
                    : () =&gt; None;
        </div></div></div><div class="member-title"><a name="Fold&lt;S, T>"></a>Fold&lt;S, T&gt;(TryOption&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_S_T_TryOption_T_self__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds TryOption value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Try to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">Fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-Fold_S_T_TryOption_T_self__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return res.IsFaulted
                ? state
                : res.Value.Fold(state, folder);
        </div></div></div><div class="member-title"><a name="Fold&lt;S, T>"></a>Fold&lt;S, T&gt;(TryOption&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_S_T_TryOption_T_self__S__state__Func_S_T_S_Some__Func_S_S_None__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds TryOption value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Try to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for Some</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for None</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for Failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">Fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-Fold_S_T_TryOption_T_self__S__state__Func_S_T_S_Some__Func_S_S_None__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return res.IsFaulted
                ? Fail(state, res.Exception)
                : res.Value.Fold(state, Some, None);
        </div></div></div><div class="member-title"><a name="ForAll&lt;T>"></a>ForAll&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll_T_TryOption_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAll</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-ForAll_T_TryOption_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return res.IsFaulted
                ? false
                : res.Value.ForAll(pred);
        </div></div></div><div class="member-title"><a name="ForAll&lt;T>"></a>ForAll&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;, Func&lt;bool&gt;, Func&lt;Exception, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll_T_TryOption_T_self__Func_T_bool_Some__Func_bool_None__Func_Exception_bool_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAll</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="keyword">bool</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-ForAll_T_TryOption_T_self__Func_T_bool_Some__Func_bool_None__Func_Exception_bool_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.ForAll(Some, None);
        </div></div></div><div class="member-title"><a name="IfFailThrow&lt;T>"></a>IfFailThrow&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfFailThrow_T_TryOption_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">IfFailThrow</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfFailThrow_T_TryOption_T_self_"><div class="section_title">SOURCE</div><div class="code">
            try
            {
                if (self == null) return None;
                var res = self();
                if (res.IsFaulted)
                {
                    throw res.Exception;
                }
                return res.Value;
            }
            catch (Exception e)
            {
                TryConfig.ErrorLogger(e);
                throw;
            }
        </div></div></div><div class="member-title"><a name="IfNone&lt;T>"></a>IfNone&lt;T&gt;(TryOption&lt;T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNone_T_TryOption_T_self__T__defaultValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the Some(value) of the TryOption or a default if it&#39;s None or Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultValue</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">IfNone</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">T</span> defaultValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div><div style="display:none" id="code-IfNone_T_TryOption_T_self__T__defaultValue_"><div class="section_title">SOURCE</div><div class="code">
            if (isnull(defaultValue)) throw new ArgumentNullException(nameof(defaultValue));

            var res = self.Try();
            if (res.IsFaulted || res.Value.IsNone)
                return defaultValue;
            else
                return res.Value.Value;
        </div></div></div><div class="member-title"><a name="IfNone&lt;T>"></a>IfNone&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNone_T_TryOption_T_self__Func_T_defaultAction_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the Some(value) of the TryOption or a default if it&#39;s None or Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultAction</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">IfNone</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; defaultAction)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div><div style="display:none" id="code-IfNone_T_TryOption_T_self__Func_T_defaultAction_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            if (res.IsFaulted || res.Value.IsNone)
                return defaultAction();
            else
                return res.Value.Value;
        </div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;T>"></a>IfNoneOrFail&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T&gt;, Func&lt;Exception, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_T_TryOption_T_self__Func_T_None__Func_Exception_T_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">T</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div><div style="display:none" id="code-IfNoneOrFail_T_TryOption_T_self__Func_T_None__Func_Exception_T_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            if (res.Value.IsNone)
                return None();
            else if (res.IsFaulted)
                return Fail(res.Exception);
            else
                return res.Value.Value;
        </div></div></div><div class="member-title"><a name="IfSome&lt;T>"></a>IfSome&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, Unit&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfSome_T_TryOption_T_self__Func_T_Unit_someHandler_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the someHandler if TryOption is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Unit</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IfSome</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Unit</span>&gt; someHandler)</div></div><div style="display:none" id="code-IfSome_T_TryOption_T_self__Func_T_Unit_someHandler_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            if (res.Value.IsSome)
            {
                someHandler(res.Value.Value);
            }
            return unit;
        </div></div></div><div class="member-title"><a name="IfSome&lt;T>"></a>IfSome&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfSome_T_TryOption_T_self__Action_T_someHandler_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the someHandler if TryOption is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IfSome</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; someHandler)</div></div><div style="display:none" id="code-IfSome_T_TryOption_T_self__Action_T_someHandler_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            if (res.Value.IsSome)
            {
                someHandler(res.Value.Value);
            }
            return unit;
        </div></div></div><div class="member-title"><a name="Iter&lt;T>"></a>Iter&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter_T_TryOption_T_self__Action_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Iter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; action)</div></div><div style="display:none" id="code-Iter_T_TryOption_T_self__Action_T_action_"><div class="section_title">SOURCE</div><div class="code">
            self.IfSome(action)</div></div></div><div class="member-title"><a name="Iter&lt;T>"></a>Iter&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;, Action, Action&lt;Exception&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter_T_TryOption_T_self__Action_T_Some__Action__None__Action_Exception_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Iter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Some, <span class="ident">Action</span> None, <span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt; Fail)</div></div><div style="display:none" id="code-Iter_T_TryOption_T_self__Action_T_Some__Action__None__Action_Exception_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            if (res.IsFaulted) Fail(res.Exception);
            else if (res.Value.IsNone) None();
            else if (res.Value.IsNone) Some(res.Value.Value);
            return unit;
        </div></div></div><div class="member-title"><a name="Join&lt;L, T, U, K, V>"></a>Join&lt;L, T, U, K, V&gt;(TryOption&lt;T&gt;, TryOption&lt;U&gt;, Func&lt;T, K&gt;, Func&lt;U, K&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Join_L_T_U_K_V_TryOption_T_self__TryOption_U_inner__Func_T_K_outerKeyMap__Func_U_K_innerKeyMap__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">inner</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">outerKeyMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">K</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">innerKeyMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">U</span>, <span class="ident">K</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">V</span>&gt; <span class="ident">Join</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">TryOption</span>&lt;<span class="ident">U</span>&gt; inner, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">K</span>&gt; outerKeyMap, <span class="ident">Func</span>&lt;<span class="ident">U</span>, <span class="ident">K</span>&gt; innerKeyMap, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Join_L_T_U_K_V_TryOption_T_self__TryOption_U_inner__Func_T_K_outerKeyMap__Func_U_K_innerKeyMap__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
            {
                var selfRes = self.Try();
                if (selfRes.IsFaulted) return new TryOptionResult&lt;V&gt;(selfRes.Exception);
                if (selfRes.Value.IsNone) return new TryOptionResult&lt;V&gt;(None);

                var innerRes = inner.Try();
                if (innerRes.IsFaulted) return new TryOptionResult&lt;V&gt;(innerRes.Exception);
                if (innerRes.Value.IsNone) return new TryOptionResult&lt;V&gt;(None);

                return EqualityComparer&lt;K&gt;.Default.Equals(outerKeyMap(selfRes.Value.Value), innerKeyMap(innerRes.Value.Value))
                    ? new TryOptionResult&lt;V&gt;(project(selfRes.Value.Value, innerRes.Value.Value))
                    : None;
            }</div></div></div><div class="member-title"><a name="Map&lt;T, R>"></a>Map&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_T_R_TryOption_T_self__Func_T_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Map_T_R_TryOption_T_self__Func_T_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
            self.Select(mapper)</div></div></div><div class="member-title"><a name="Map&lt;T, R>"></a>Map&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_T_R_TryOption_T_self__Func_T_R_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Map_T_R_TryOption_T_self__Func_T_R_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
        {
            var res = self.Try();
            if (res.IsFaulted) return Fail(res.Exception);
            if (res.Value.IsNone) return None();
            return Some(res.Value.Value);
        }</div></div></div><div class="member-title"><a name="Match&lt;T, R>"></a>Match&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_T_R_TryOption_T_self__Func_T_R_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Match_T_R_TryOption_T_self__Func_T_R_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return res.IsFaulted
                ? Fail(res.Exception)
                : match(res.Value, Some, None);
        </div></div></div><div class="member-title"><a name="Match&lt;T, R>"></a>Match&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, R, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_T_R_TryOption_T_self__Func_T_R_Some__R__None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">R</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">R</span> None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Match_T_R_TryOption_T_self__Func_T_R_Some__R__None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return res.IsFaulted
                ? Fail(res.Exception)
                : match(res.Value, Some, () =&gt; None);
        </div></div></div><div class="member-title"><a name="Match&lt;T, R>"></a>Match&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_T_R_TryOption_T_self__Func_T_R_Some__Func_R_None__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Match_T_R_TryOption_T_self__Func_T_R_Some__Func_R_None__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
            if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

            var res = self.Try();
            return res.IsFaulted
                ? Fail
                : match(res.Value, Some, None);
        </div></div></div><div class="member-title"><a name="Match&lt;T, R>"></a>Match&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, R, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_T_R_TryOption_T_self__Func_T_R_Some__R__None__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">R</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">R</span> None, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Match_T_R_TryOption_T_self__Func_T_R_Some__R__None__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
            if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

            var res = self.Try();
            return res.IsFaulted
                ? Fail
                : match(res.Value, Some, () =&gt; None);
        </div></div></div><div class="member-title"><a name="Match&lt;T>"></a>Match&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;, Action, Action&lt;Exception&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_T_TryOption_T_self__Action_T_Some__Action__None__Action_Exception_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Match</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Some, <span class="ident">Action</span> None, <span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt; Fail)</div></div><div style="display:none" id="code-Match_T_TryOption_T_self__Action_T_Some__Action__None__Action_Exception_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();

            if (res.IsFaulted)
                Fail(res.Exception);
            else
                match(res.Value, Some, None);

            return Unit.Default;
        </div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_TryOption_T_self__Func_T_Task&lt;R>_Succ__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_TryOption_T_self__Func_T_Task&lt;R>_Succ__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return await (res.IsFaulted
                ? Task.FromResult(Fail(res.Exception))
                : res.Value.IsSome
                    ? Succ(res.Value.Value)
                    : Task.FromResult(None()));
        </div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_TryOption_T_self__Func_T_Task&lt;R>_Succ__Func_R_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_TryOption_T_self__Func_T_Task&lt;R>_Succ__Func_R_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return await (res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.IsSome
                    ? Succ(res.Value.Value)
                    : Task.FromResult(None()));
        </div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_TryOption_T_self__Func_T_R_Succ__Func_R_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_TryOption_T_self__Func_T_R_Succ__Func_R_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return await (res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.IsSome
                    ? Task.FromResult(Succ(res.Value.Value))
                    : Task.FromResult(None()));
        </div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_R_Succ__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_R_Succ__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            await self.ContinueWith(trySelf =&gt;
            {
                TryOptionResult&lt;T&gt; res = trySelf.Result.Try();
                return res.IsFaulted
                    ? Fail(res.Exception)
                    : res.Value.IsSome
                        ? Succ(res.Value.Value)
                        : None();
            })</div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Succ__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Succ__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            await (from tt in self.ContinueWith(trySelf =&gt;
            {
                var res = trySelf.Result.Try();
                return res.IsFaulted
                    ? Task.FromResult(Fail(res.Exception))
                    : res.Value.IsSome
                        ? Succ(res.Value.Value)
                        : Task.FromResult(None());
            })
                   from t in tt
                   select t)</div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Succ__Func_R_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Succ__Func_R_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            await (from tt in self.ContinueWith(trySelf =&gt;
            {
                var res = trySelf.Result.Try();
                return res.IsFaulted
                    ? Fail(res.Exception)
                    : res.Value.IsSome
                        ? Succ(res.Value.Value)
                        : Task.FromResult(None());
            })
                   from t in tt
                   select t)</div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_R_Succ__Func_R_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_R_Succ__Func_R_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            await (from tt in self.ContinueWith(trySelf =&gt;
            {
                var res = trySelf.Result.Try();
                return res.IsFaulted
                    ? Fail(res.Exception)
                    : res.Value.IsSome
                        ? Task.FromResult(Succ(res.Value.Value))
                        : Task.FromResult(None());
            })
                   from t in tt
                   select t)</div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_TryOption_T_self__Func_T_Task&lt;R>_Succ__Func_Task&lt;R>_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_TryOption_T_self__Func_T_Task&lt;R>_Succ__Func_Task&lt;R>_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return await (res.IsFaulted
                ? Task.FromResult(Fail(res.Exception))
                : res.Value.IsSome
                    ? Succ(res.Value.Value)
                    : None());
        </div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_TryOption_T_self__Func_T_Task&lt;R>_Succ__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_TryOption_T_self__Func_T_Task&lt;R>_Succ__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return await (res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.IsSome
                    ? Succ(res.Value.Value)
                    : None());
        </div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_TryOption_T_self__Func_T_R_Succ__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_TryOption_T_self__Func_T_R_Succ__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return await (res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.IsSome
                    ? Task.FromResult(Succ(res.Value.Value))
                    : None());
        </div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Succ__Func_Task&lt;R>_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Succ__Func_Task&lt;R>_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            await (from tt in self.ContinueWith(trySelf =&gt;
            {
                var res = trySelf.Result.Try();
                return res.IsFaulted
                    ? Task.FromResult(Fail(res.Exception))
                    : res.Value.IsSome
                        ? Succ(res.Value.Value)
                        : None();
            })
                   from t in tt
                   select t)</div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Succ__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Succ__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            await (from tt in self.ContinueWith(trySelf =&gt;
            {
                var res = trySelf.Result.Try();
                return res.IsFaulted
                    ? Fail(res.Exception)
                    : res.Value.IsSome
                        ? Succ(res.Value.Value)
                        : None();
            })
                   from t in tt
                   select t)</div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_R_Succ__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_R_Succ__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            await (from tt in self.ContinueWith(trySelf =&gt;
            {
                var res = trySelf.Result.Try();
                return res.IsFaulted
                    ? Fail(res.Exception)
                    : res.Value.IsSome
                        ? Task.FromResult(Succ(res.Value.Value))
                        : None();
            })
                   from t in tt
                   select t)</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_TryOption_T_self__Func_T_IObservable&lt;R>_Succ__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_TryOption_T_self__Func_T_IObservable&lt;R>_Succ__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return (res.IsFaulted
                ? Observable.Return(Fail(res.Exception))
                : res.Value.IsSome
                    ? Succ(res.Value.Value)
                    : Observable.Return(None()));
        </div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_TryOption_T_self__Func_T_IObservable&lt;R>_Succ__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_TryOption_T_self__Func_T_IObservable&lt;R>_Succ__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return (res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.IsSome
                    ? Succ(res.Value.Value)
                    : Observable.Return(None()));
        </div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_TryOption_T_self__Func_T_R_Succ__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_TryOption_T_self__Func_T_R_Succ__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return (res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.IsSome
                    ? Observable.Return(Succ(res.Value.Value))
                    : Observable.Return(None()));
        </div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_R_Succ__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_R_Succ__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Select(trySelf =&gt;
            {
                TryOptionResult&lt;T&gt; res = trySelf.Try();
                return res.IsFaulted
                    ? Fail(res.Exception)
                    : res.Value.IsSome
                        ? Succ(res.Value.Value)
                        : None();
            })</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Succ__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Succ__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            from tt in self.Select(trySelf =&gt;
            {
                var res = trySelf.Try();
                return res.IsFaulted
                    ? Observable.Return(Fail(res.Exception))
                    : res.Value.IsSome
                        ? Succ(res.Value.Value)
                        : Observable.Return(None());
            })
            from t in tt
            select t</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Succ__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Succ__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            from tt in self.Select(trySelf =&gt;
            {
                var res = trySelf.Try();
                return res.IsFaulted
                    ? Fail(res.Exception)
                    : res.Value.IsSome
                        ? Succ(res.Value.Value)
                        : Observable.Return(None());
            })
            from t in tt
            select t</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_R_Succ__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_R_Succ__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            from tt in self.Select(trySelf =&gt;
            {
                var res = trySelf.Try();
                return res.IsFaulted
                    ? Fail(res.Exception)
                    : res.Value.IsSome
                        ? Observable.Return(Succ(res.Value.Value))
                        : Observable.Return(None());
            })
            from t in tt
            select t</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_TryOption_T_self__Func_T_IObservable&lt;R>_Succ__Func_IObservable&lt;R>_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_TryOption_T_self__Func_T_IObservable&lt;R>_Succ__Func_IObservable&lt;R>_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return (res.IsFaulted
                ? Observable.Return(Fail(res.Exception))
                : res.Value.IsSome
                    ? Succ(res.Value.Value)
                    : None());
        </div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_TryOption_T_self__Func_T_IObservable&lt;R>_Succ__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_TryOption_T_self__Func_T_IObservable&lt;R>_Succ__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return (res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.IsSome
                    ? Succ(res.Value.Value)
                    : None());
        </div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_TryOption_T_self__Func_T_R_Succ__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_TryOption_T_self__Func_T_R_Succ__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            return (res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.IsSome
                    ? Observable.Return(Succ(res.Value.Value))
                    : None());
        </div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Succ__Func_IObservable&lt;R>_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Succ__Func_IObservable&lt;R>_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            from tt in self.Select(trySelf =&gt;
            {
                var res = trySelf.Try();
                return res.IsFaulted
                    ? Observable.Return(Fail(res.Exception))
                    : res.Value.IsSome
                        ? Succ(res.Value.Value)
                        : None();
            })
            from t in tt
            select t</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Succ__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Succ__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            from tt in self.Select(trySelf =&gt;
            {
                var res = trySelf.Try();
                return res.IsFaulted
                    ? Fail(res.Exception)
                    : res.Value.IsSome
                        ? Succ(res.Value.Value)
                        : None();
            })
            from t in tt
            select t</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_R_Succ__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_R_Succ__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            from tt in self.Select(trySelf =&gt;
            {
                var res = trySelf.Try();
                return res.IsFaulted
                    ? Fail(res.Exception)
                    : res.Value.IsSome
                        ? Observable.Return(Succ(res.Value.Value))
                        : None();
            })
            from t in tt
            select t</div></div></div><div class="member-title"><a name="Multiply&lt;T>"></a>Multiply&lt;T&gt;(TryOption&lt;T&gt;, TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Multiply_T_TryOption_T_lhs__TryOption_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product of TryOption(x) and TryOption(y). If either of the TryOptions throw then the result is Fail If either of the TryOptions return None then the result is None For numeric values the behaviour is to multiply the TryOptions (lhs * rhs) For Lst values the behaviour is to multiply all combinations of values in both lists  to produce a new list Otherwise if the R type derives from IMultiplicable then the behaviour is to call lhs.Multiply(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Left-hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Multiply</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs * rhs</span></div></div></div><div style="display:none" id="code-Multiply_T_TryOption_T_lhs__TryOption_T_rhs_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
        {
            var lhsRes = lhs.Try();
            if (lhsRes.IsFaulted) return lhsRes;
            var rhsRes = rhs.Try();
            if (rhsRes.IsFaulted) return rhsRes;
            return lhsRes.Value.Multiply(rhsRes.Value);
        }</div></div></div><div class="member-title"><a name="ParMap&lt;T1, T2, R>"></a>ParMap&lt;T1, T2, R&gt;(TryOption&lt;T1&gt;, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParMap_T1_T2_R_TryOption_T1_self__Func_T1_T2_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">ParMap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T1</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParMap_T1_T2_R_TryOption_T1_self__Func_T1_T2_R_func_"><div class="section_title">SOURCE</div><div class="code">
            self.Map(curry(func))</div></div></div><div class="member-title"><a name="ParMap&lt;T1, T2, T3, R>"></a>ParMap&lt;T1, T2, T3, R&gt;(TryOption&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParMap_T1_T2_T3_R_TryOption_T1_self__Func_T1_T2_T3_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">ParMap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T1</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParMap_T1_T2_T3_R_TryOption_T1_self__Func_T1_T2_T3_R_func_"><div class="section_title">SOURCE</div><div class="code">
            self.Map(curry(func))</div></div></div><div class="member-title"><a name="Select&lt;T, U>"></a>Select&lt;T, U&gt;(TryOption&lt;T&gt;, Func&lt;T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_T_U_TryOption_T_self__Func_T_U_select_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">select</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">U</span>&gt; <span class="ident">Select</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; select)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">U</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Select_T_U_TryOption_T_self__Func_T_U_select_"><div class="section_title">SOURCE</div><div class="code">
            return new TryOption&lt;U&gt;(() =&gt;
            {
                TryOptionResult&lt;T&gt; resT;
                resT = self.Try();
                if (resT.IsFaulted) return new TryOptionResult&lt;U&gt;(resT.Exception);
                if (resT.Value.IsNone) return new TryOptionResult&lt;U&gt;(None);

                Option&lt;U&gt; resU;
                try
                {
                    resU = select(resT.Value.Value);
                }
                catch (Exception e)
                {
                    TryConfig.ErrorLogger(e);
                    return new TryOptionResult&lt;U&gt;(e);
                }

                return new TryOptionResult&lt;U&gt;(resU);
            });
        </div></div></div><div class="member-title"><a name="SelectMany&lt;T, U, V>"></a>SelectMany&lt;T, U, V&gt;(TryOption&lt;T&gt;, Func&lt;T, TryOption&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_T_U_V_TryOption_T_self__Func_T_TryOption&lt;U>_bind__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOption</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">V</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOption</span>&lt;<span class="ident">U</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_T_U_V_TryOption_T_self__Func_T_TryOption&lt;U>_bind__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            return new TryOption&lt;V&gt;(
                () =&gt;
                {
                    var resT = self.Try();
                    if (resT.IsFaulted) return new TryOptionResult&lt;V&gt;(resT.Exception);
                    if (resT.Value.IsNone) return new TryOptionResult&lt;V&gt;(None);
                    var resU = bind(resT.Value.Value).Try();
                    if (resU.IsFaulted)
                    {
                        return new TryOptionResult&lt;V&gt;(resU.Exception);
                    }
                    if (resU.Value.IsNone)
                    {
                        return new TryOptionResult&lt;V&gt;(None);
                    }

                    try
                    {
                        var res = new TryOptionResult&lt;V&gt;(project(resT.Value.Value, resU.Value.Value));
                        return res;
                    }
                    catch (Exception e)
                    {
                        TryConfig.ErrorLogger(e);
                        return new TryOptionResult&lt;V&gt;(e);
                    }
                }
            );
        </div></div></div><div class="member-title"><a name="SelectMany&lt;T, U, V>"></a>SelectMany&lt;T, U, V&gt;(TryOption&lt;T&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_T_U_V_TryOption_T_self__Func_T_IEnumerable&lt;U>_bind__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_T_U_V_TryOption_T_self__Func_T_IEnumerable&lt;U>_bind__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            var resT = self.Try();
            if (resT.IsFaulted || resT.Value.IsNone) return new V[0];
            return bind(resT.Value.Value).Map(resU =&gt; project(resT.Value.Value, resU));
        </div></div></div><div class="member-title"><a name="SelectMany&lt;T, U, V>"></a>SelectMany&lt;T, U, V&gt;(IEnumerable&lt;T&gt;, Func&lt;T, TryOption&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_T_U_V_IEnumerable_T_self__Func_T_TryOption&lt;U>_bind__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOption</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">V</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOption</span>&lt;<span class="ident">U</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_T_U_V_IEnumerable_T_self__Func_T_TryOption&lt;U>_bind__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            return new TryOption&lt;V&gt;(() =&gt;
           {
               var ta = self.Take(1).ToArray();
               if (ta.Length == 0) return None;
               var u = bind(ta[0]);
               var resU = u.Try();
               if (resU.IsFaulted) return new TryOptionResult&lt;V&gt;(resU.Exception);
               if (resU.Value.IsNone) return new TryOptionResult&lt;V&gt;(None);
               return Optional(project(ta[0], resU.Value.Value));
           });
        </div></div></div><div class="member-title"><a name="Some&lt;T, R>"></a>Some&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Some_T_R_TryOption_T_self__Func_T_R_someHandler_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionSomeContext</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">Some</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; someHandler)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionSomeContext</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Some_T_R_TryOption_T_self__Func_T_R_someHandler_"><div class="section_title">SOURCE</div><div class="code">
            new TryOptionSomeContext&lt;T, R&gt;(self, someHandler)</div></div></div><div class="member-title"><a name="Some&lt;T>"></a>Some&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Some_T_TryOption_T_self__Action_T_someHandler_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionSomeUnitContext</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Some</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; someHandler)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionSomeUnitContext</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Some_T_TryOption_T_self__Action_T_someHandler_"><div class="section_title">SOURCE</div><div class="code">
            new TryOptionSomeUnitContext&lt;T&gt;(self, someHandler)</div></div></div><div class="member-title"><a name="Subtract&lt;T>"></a>Subtract&lt;T&gt;(TryOption&lt;T&gt;, TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subtract_T_TryOption_T_lhs__TryOption_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subtract the TryOption(x) from TryOption(y). If either of the TryOptions throw then the result is Fail If either of the TryOptions return None then the result is None For numeric values the behaviour is to find the difference between the TryOptions (lhs - rhs) For Lst values the behaviour is to remove items in the rhs from the lhs For Map or Set values the behaviour is to remove items in the rhs from the lhs Otherwise if the R type derives from ISubtractable then the behaviour is to call lhs.Subtract(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Left-hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Subtract</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs - rhs</span></div></div></div><div style="display:none" id="code-Subtract_T_TryOption_T_lhs__TryOption_T_rhs_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
        {
            var lhsRes = lhs.Try();
            if (lhsRes.IsFaulted) return lhsRes;
            var rhsRes = rhs.Try();
            if (rhsRes.IsFaulted) return rhsRes;
            return lhsRes.Value.Subtract(rhsRes.Value);
        }</div></div></div><div class="member-title"><a name="Sum"></a>Sum(TryOption&lt;int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum__TryOption_int_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="keyword">int</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">Sum</span>(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="keyword">int</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Sum__TryOption_int_self_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Try();
            if (res.IsFaulted) return 0;
            return res.Value.Sum();
        </div></div></div><div class="member-title"><a name="ToArray&lt;T>"></a>ToArray&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToArray_T_TryOption_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">Exception</span>, <span class="ident">T</span>&gt;[] <span class="ident">ToArray</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">Exception</span>, <span class="ident">T</span>&gt;[]</div><div class="normal"></div></div></div><div style="display:none" id="code-ToArray_T_TryOption_T_self_"><div class="section_title">SOURCE</div><div class="code">
            toArray(self.AsEnumerable())</div></div></div><div class="member-title"><a name="ToList&lt;T>"></a>ToList&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToList_T_TryOption_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">Exception</span>, <span class="ident">T</span>&gt;&gt; <span class="ident">ToList</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">Exception</span>, <span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToList_T_TryOption_T_self_"><div class="section_title">SOURCE</div><div class="code">
            toList(self.AsEnumerable())</div></div></div><div class="member-title"><a name="ToOption&lt;T>"></a>ToOption&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToOption_T_TryOption_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">ToOption</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToOption_T_TryOption_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Try().Value</div></div></div><div class="member-title"><a name="Try&lt;T>"></a>Try&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Try_T_TryOption_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionResult</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionResult</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Try_T_TryOption_T_self_"><div class="section_title">SOURCE</div><div class="code">
            try
            {
                if (self == null) return None;
                return self();
            }
            catch (Exception e)
            {
                TryConfig.ErrorLogger(e);
                return new TryOptionResult&lt;T&gt;(e);
            }
        </div></div></div><div class="member-title"><a name="Where&lt;T>"></a>Where&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_T_TryOption_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Where</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Where_T_TryOption_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Filter(pred)</div></div></div></div></body></html>