<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Map_K_V.htm">Map&lt;K, V&gt;</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#Empty">Empty</a><h3 >PROPERTIES</h3><a class="nav-link" href="#Count">Count</a><a class="nav-link" href="#IsEmpty">IsEmpty</a><a class="nav-link" href="#Keys">Keys</a><a class="nav-link" href="#Length">Length</a><a class="nav-link" href="#this">this</a><a class="nav-link" href="#Tuples">Tuples</a><a class="nav-link" href="#Values">Values</a><h3 >METHODS</h3><a class="nav-link" href="#Add">Add(K, V)</a><a class="nav-link" href="#AddOrUpdate">AddOrUpdate(K, V)</a><a class="nav-link" href="#AddOrUpdate">AddOrUpdate(K, Func&lt;V, V&gt;, Func&lt;V&gt;)</a><a class="nav-link" href="#AddOrUpdate">AddOrUpdate(K, Func&lt;V, V&gt;, V)</a><a class="nav-link" href="#AddOrUpdateRange">AddOrUpdateRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#AddOrUpdateRange">AddOrUpdateRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#AddRange">AddRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#AddRange">AddRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#Append">Append(Map&lt;K, V&gt;)</a><a class="nav-link" href="#AsEnumerable">AsEnumerable()</a><a class="nav-link" href="#Clear">Clear()</a><a class="nav-link" href="#Contains">Contains(K, V)</a><a class="nav-link" href="#Contains">Contains(KeyValuePair&lt;K, V&gt;)</a><a class="nav-link" href="#ContainsKey">ContainsKey(K)</a><a class="nav-link" href="#Find">Find(K)</a><a class="nav-link" href="#Find&lt;R>">Find&lt;R&gt;(K, Func&lt;V, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#FindRange">FindRange(K, K)</a><a class="nav-link" href="#FindSeq">FindSeq(K)</a><a class="nav-link" href="#GetEnumerator">GetEnumerator()</a><a class="nav-link" href="#Remove">Remove(K)</a><a class="nav-link" href="#RemoveRange">RemoveRange(IEnumerable&lt;K&gt;)</a><a class="nav-link" href="#SetItem">SetItem(K, V)</a><a class="nav-link" href="#SetItem">SetItem(K, Func&lt;V, V&gt;)</a><a class="nav-link" href="#SetItems">SetItems(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#SetItems">SetItems(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#Skip">Skip(int)</a><a class="nav-link" href="#Subtract">Subtract(Map&lt;K, V&gt;)</a><a class="nav-link" href="#ToDictionary">ToDictionary()</a><a class="nav-link" href="#ToDictionary&lt;KR, VR>">ToDictionary&lt;KR, VR&gt;(Func&lt;IMapItem&lt;K, V&gt;, KR&gt;, Func&lt;IMapItem&lt;K, V&gt;, VR&gt;)</a><a class="nav-link" href="#TryAdd">TryAdd(K, V)</a><a class="nav-link" href="#TryAdd">TryAdd(K, V, Func&lt;Map&lt;K, V&gt;, V, Map&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TryAddRange">TryAddRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TryAddRange">TryAddRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TryGetKey">TryGetKey(K, K)</a><a class="nav-link" href="#TryGetValue">TryGetValue(K, V)</a><a class="nav-link" href="#TrySetItem">TrySetItem(K, V)</a><a class="nav-link" href="#TrySetItem">TrySetItem(K, Func&lt;V, V&gt;)</a><a class="nav-link" href="#TrySetItem">TrySetItem(K, Func&lt;V, V&gt;, Func&lt;Map&lt;K, V&gt;, Map&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TrySetItems">TrySetItems(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TrySetItems">TrySetItems(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TrySetItems">TrySetItems(IEnumerable&lt;K&gt;, Func&lt;V, V&gt;)</a></div><div class="content-panel"><h1 >Map&lt;K, V&gt; Class</h1><p >Immutable map AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Fields</h2><div class="member-title"><a name="Empty"></a>Empty</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Empty</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="Count"></a>Count</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Number of items in the map </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">int</span> <span class="ident">Count</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IsEmpty"></a>IsEmpty</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Is the map empty </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">IsEmpty</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Keys"></a>Keys</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Enumerable of map keys </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt; <span class="ident">Keys</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="Length"></a>Length</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Alias of Count </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">int</span> <span class="ident">Length</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="this"></a>this</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >&#39;this&#39; accessor </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">V</span> <span class="ident">this</span> [<span class="ident">K</span> <span class="ident">key</span>] { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">V</span></div><div class="normal">Optional value</div></div></div></div><div class="member-title"><a name="Tuples"></a>Tuples</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Enumerable of in-order tuples that make up the map </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">Tuples</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal">Tuples</div></div></div></div><div class="member-title"><a name="Values"></a>Values</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Enumerable of map values </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">Values</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Add"></a>Add(K, V)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a new item to the map </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Add</span>(<span class="ident">K</span> <span class="ident">key</span>, <span class="ident">V</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the item added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal">Throws ArgumentException if the key already exists</div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the key or value are null</div></div></div></div><div class="member-title"><a name="AddOrUpdate"></a>AddOrUpdate(K, V)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a new item to the map. If the key already exists, the new item replaces it. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdate</span>(<span class="ident">K</span> <span class="ident">key</span>, <span class="ident">V</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the item added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the key or value are null</div></div></div></div><div class="member-title"><a name="AddOrUpdate"></a>AddOrUpdate(K, Func&lt;V, V&gt;, Func&lt;V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Retrieve a value from the map by key, map it to a new value, put it back.  If it doesn&#39;t exist, add a new one based on None result. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdate</span>(<span class="ident">K</span> <span class="ident">key</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the mapped value</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal">Throws Exception if None returns null</div></div><div class="code"><div class="member-title">Exception</div><div class="normal">Throws Exception if Some returns null</div></div></div></div><div class="member-title"><a name="AddOrUpdate"></a>AddOrUpdate(K, Func&lt;V, V&gt;, V)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Retrieve a value from the map by key, map it to a new value, put it back.  If it doesn&#39;t exist, add a new one based on None result. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">V</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdate</span>(<span class="ident">K</span> <span class="ident">key</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; <span class="ident">Some</span>, <span class="ident">V</span> <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the mapped value</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException if None is null</div></div><div class="code"><div class="member-title">Exception</div><div class="normal">Throws Exception if Some returns null</div></div></div></div><div class="member-title"><a name="AddOrUpdateRange"></a>AddOrUpdateRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re replaced. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Range of tuples to add</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdateRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">range</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the items added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the keys or values are null</div></div></div></div><div class="member-title"><a name="AddOrUpdateRange"></a>AddOrUpdateRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re replaced. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Range of KeyValuePairs to add</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdateRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">range</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the items added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the keys or values are null</div></div></div></div><div class="member-title"><a name="AddRange"></a>AddRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a range of items to the map. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Range of tuples to add</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">range</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the items added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal">Throws ArgumentException if any of the keys already exist</div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the keys or values are null</div></div></div></div><div class="member-title"><a name="AddRange"></a>AddRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a range of items to the map </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pairs</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Range of KeyValuePairs to add</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">pairs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the items added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal">Throws ArgumentException if any of the keys already exist</div></div></div></div><div class="member-title"><a name="Append"></a>Append(Map&lt;K, V&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Append</span>(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">rhs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="AsEnumerable"></a>AsEnumerable()</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">AsEnumerable</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="Clear"></a>Clear()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Clears all items from the map  </p><div class="section_title">REMARKS</div>Functionally equivalent to calling Map.empty as the original structure is untouched</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Clear</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">Empty map</div></div></div></div><div class="member-title"><a name="Contains"></a>Contains(K, V)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Checks for existence of a key in the map </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to check</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">Contains</span>(<span class="ident">K</span> <span class="ident">key</span>, <span class="ident">V</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if an item with the key supplied is in the map</div></div></div></div><div class="member-title"><a name="Contains"></a>Contains(KeyValuePair&lt;K, V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns true if a Key/Value pair exists in the map </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pair</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">Pair to find</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">Contains</span>(<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">pair</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if exists, false otherwise</div></div></div></div><div class="member-title"><a name="ContainsKey"></a>ContainsKey(K)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Checks for existence of a key in the map </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to check</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">ContainsKey</span>(<span class="ident">K</span> <span class="ident">key</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if an item with the key supplied is in the map</div></div></div></div><div class="member-title"><a name="Find"></a>Find(K)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Retrieve a value from the map by key </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Option</span>&lt;<span class="ident">V</span>&gt; <span class="ident">Find</span>(<span class="ident">K</span> <span class="ident">key</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal">Found value</div></div></div></div><div class="member-title"><a name="Find&lt;R>"></a>Find&lt;R&gt;(K, Func&lt;V, R&gt;, Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Retrieve a value from the map by key and pattern match the result. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">Find</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">K</span> <span class="ident">key</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal">Found value</div></div></div></div><div class="member-title"><a name="FindRange"></a>FindRange(K, K)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Retrieve a range of values  </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keyFrom</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Range start (inclusive)</div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyTo</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Range to (inclusive)</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">FindRange</span>(<span class="ident">K</span> <span class="ident">keyFrom</span>, <span class="ident">K</span> <span class="ident">keyTo</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal">Range of values</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the keyFrom or keyTo are null</div></div></div></div><div class="member-title"><a name="FindSeq"></a>FindSeq(K)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Retrieve a value from the map by key as an enumerable </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">FindSeq</span>(<span class="ident">K</span> <span class="ident">key</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal">Found value</div></div></div></div><div class="member-title"><a name="GetEnumerator"></a>GetEnumerator()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >GetEnumerator - IEnumerable interface </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">IEnumerator</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">GetEnumerator</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerator</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="Remove"></a>Remove(K)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically removes an item from the map If the key doesn&#39;t exists, the request is ignored. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Remove</span>(<span class="ident">K</span> <span class="ident">key</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the item removed</div></div></div></div><div class="member-title"><a name="RemoveRange"></a>RemoveRange(IEnumerable&lt;K&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically removes a set of keys from the map </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keys</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt;</div></div><div class="arg-desc">Keys to remove</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">RemoveRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt; <span class="ident">keys</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the items removed</div></div></div></div><div class="member-title"><a name="SetItem"></a>SetItem(K, V)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically updates an existing item </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">SetItem</span>(<span class="ident">K</span> <span class="ident">key</span>, <span class="ident">V</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the item added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the key or value are null</div></div></div></div><div class="member-title"><a name="SetItem"></a>SetItem(K, Func&lt;V, V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Retrieve a value from the map by key, map it to a new value, put it back. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to set</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">SetItem</span>(<span class="ident">K</span> <span class="ident">key</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; <span class="ident">Some</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the mapped value</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal">Throws ArgumentException if the item isn&#39;t found</div></div><div class="code"><div class="member-title">Exception</div><div class="normal">Throws Exception if Some returns null</div></div></div></div><div class="member-title"><a name="SetItems"></a>SetItems(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically sets a series of items using the KeyValuePairs provided </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Items to set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">SetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">items</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the items set</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal">Throws ArgumentException if any of the keys aren&#39;t in the map</div></div></div></div><div class="member-title"><a name="SetItems"></a>SetItems(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically sets a series of items using the Tuples provided. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Items to set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">SetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">items</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the items set</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal">Throws ArgumentException if any of the keys aren&#39;t in the map</div></div></div></div><div class="member-title"><a name="Skip"></a>Skip(int)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Skips &#39;amount&#39; values and returns a new tree without the  skipped values. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">amount</div><div class="arg-type"><span class="ident">int</span></div></div><div class="arg-desc">Amount to skip</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">Skip</span>(<span class="ident">int</span> <span class="ident">amount</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal">New tree</div></div></div></div><div class="member-title"><a name="Subtract"></a>Subtract(Map&lt;K, V&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Subtract</span>(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">rhs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="ToDictionary"></a>ToDictionary()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Convert the map to an IDictionary </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">ToDictionary</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="ToDictionary&lt;KR, VR>"></a>ToDictionary&lt;KR, VR&gt;(Func&lt;IMapItem&lt;K, V&gt;, KR&gt;, Func&lt;IMapItem&lt;K, V&gt;, VR&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Map the map the a dictionary </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keySelector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">KR</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">valueSelector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">VR</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IDictionary</span>&lt;<span class="ident">KR</span>, <span class="ident">VR</span>&gt; <span class="ident">ToDictionary</span>&lt;<span class="ident">KR</span>, <span class="ident">VR</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">KR</span>&gt; <span class="ident">keySelector</span>, <span class="ident">Func</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">VR</span>&gt; <span class="ident">valueSelector</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDictionary</span>&lt;<span class="ident">KR</span>, <span class="ident">VR</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="TryAdd"></a>TryAdd(K, V)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a new item to the map. If the key already exists, then the new item is ignored </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TryAdd</span>(<span class="ident">K</span> <span class="ident">key</span>, <span class="ident">V</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the item added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the key or value are null</div></div></div></div><div class="member-title"><a name="TryAdd"></a>TryAdd(K, V, Func&lt;Map&lt;K, V&gt;, V, Map&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a new item to the map. If the key already exists then the Fail handler is called with the unaltered map  and the value already set for the key, it expects a new map returned. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">V</span>, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to handle failure, you&#39;re given the unaltered map  and the value already set for the key</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TryAdd</span>(<span class="ident">K</span> <span class="ident">key</span>, <span class="ident">V</span> <span class="ident">value</span>, <span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">V</span>, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">Fail</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the item added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the key or value are null</div></div></div></div><div class="member-title"><a name="TryAddRange"></a>TryAddRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re ignored. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Range of tuples to add</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TryAddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">range</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the items added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the keys or values are null</div></div></div></div><div class="member-title"><a name="TryAddRange"></a>TryAddRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re ignored. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Range of KeyValuePairs to add</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TryAddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">range</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the items added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the keys or values are null</div></div></div></div><div class="member-title"><a name="TryGetKey"></a>TryGetKey(K, K)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">equalKey</div><div class="arg-type"><span class="ident">K</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">actualKey</div><div class="arg-type"><span class="ident">K</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">TryGetKey</span>(<span class="ident">K</span> <span class="ident">equalKey</span>, <span class="keyword">out</span> <span class="ident">K</span> <span class="ident">actualKey</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="TryGetValue"></a>TryGetValue(K, V)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >TryGetValue </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;TryGetValue is obsolete, use TryFind instead&quot;)]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">TryGetValue</span>(<span class="ident">K</span> <span class="ident">key</span>, <span class="keyword">out</span> <span class="ident">V</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="TrySetItem"></a>TrySetItem(K, V)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically updates an existing item, unless it doesn&#39;t exist, in which case  it is ignored </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItem</span>(<span class="ident">K</span> <span class="ident">key</span>, <span class="ident">V</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the item added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the value is null</div></div></div></div><div class="member-title"><a name="TrySetItem"></a>TrySetItem(K, Func&lt;V, V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically sets an item by first retrieving it, applying a map, and then putting it back. Silently fails if the value doesn&#39;t exist </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to set</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">delegate to map the existing value to a new one before setting</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItem</span>(<span class="ident">K</span> <span class="ident">key</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; <span class="ident">Some</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the item set</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal">Throws Exception if Some returns null</div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the key or value are null</div></div></div></div><div class="member-title"><a name="TrySetItem"></a>TrySetItem(K, Func&lt;V, V&gt;, Func&lt;Map&lt;K, V&gt;, Map&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically sets an item by first retrieving it, applying a map, and then putting it back. Calls the None delegate to return a new map if the item can&#39;t be found </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">delegate to map the existing value to a new one before setting</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">delegate to return a new map if the item can&#39;t be found</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItem</span>(<span class="ident">K</span> <span class="ident">key</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the item set</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal">Throws Exception if Some returns null</div></div><div class="code"><div class="member-title">Exception</div><div class="normal">Throws Exception if None returns null</div></div></div></div><div class="member-title"><a name="TrySetItems"></a>TrySetItems(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically sets a series of items using the KeyValuePairs provided.  If any of the  items don&#39;t exist then they&#39;re silently ignored. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Items to set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">items</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the items set</div></div></div></div><div class="member-title"><a name="TrySetItems"></a>TrySetItems(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically sets a series of items using the Tuples provided  If any of the  items don&#39;t exist then they&#39;re silently ignored. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Items to set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">items</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the items set</div></div></div></div><div class="member-title"><a name="TrySetItems"></a>TrySetItems(IEnumerable&lt;K&gt;, Func&lt;V, V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically sets a series of items using the keys provided to find the items and the Some delegate maps to a new value.  If the items don&#39;t exist then they&#39;re silently ignored. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keys</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt;</div></div><div class="arg-desc">Keys of items to set</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">Function map the existing item to a new one</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt; <span class="ident">keys</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; <span class="ident">Some</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the items set</div></div></div></div></div></body></html>