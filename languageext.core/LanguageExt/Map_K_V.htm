<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="https://louthy.github.io/">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Map_K_V.htm">Map&lt;K, V&gt;</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#Empty">Empty</a><h3 >PROPERTIES</h3><a class="nav-link" href="#Count">Count</a><a class="nav-link" href="#IsEmpty">IsEmpty</a><a class="nav-link" href="#Keys">Keys</a><a class="nav-link" href="#Length">Length</a><a class="nav-link" href="#this">this</a><a class="nav-link" href="#Tuples">Tuples</a><a class="nav-link" href="#Values">Values</a><h3 >METHODS</h3><a class="nav-link" href="#Add">Add(K, V)</a><a class="nav-link" href="#AddOrUpdate">AddOrUpdate(K, V)</a><a class="nav-link" href="#AddOrUpdate">AddOrUpdate(K, Func&lt;V, V&gt;, Func&lt;V&gt;)</a><a class="nav-link" href="#AddOrUpdate">AddOrUpdate(K, Func&lt;V, V&gt;, V)</a><a class="nav-link" href="#AddOrUpdateRange">AddOrUpdateRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#AddOrUpdateRange">AddOrUpdateRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#AddRange">AddRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#AddRange">AddRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#Append">Append(Map&lt;K, V&gt;)</a><a class="nav-link" href="#AsEnumerable">AsEnumerable()</a><a class="nav-link" href="#Clear">Clear()</a><a class="nav-link" href="#Contains">Contains(K, V)</a><a class="nav-link" href="#Contains">Contains(KeyValuePair&lt;K, V&gt;)</a><a class="nav-link" href="#ContainsKey">ContainsKey(K)</a><a class="nav-link" href="#Find">Find(K)</a><a class="nav-link" href="#Find&lt;R>">Find&lt;R&gt;(K, Func&lt;V, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#FindRange">FindRange(K, K)</a><a class="nav-link" href="#FindSeq">FindSeq(K)</a><a class="nav-link" href="#GetEnumerator">GetEnumerator()</a><a class="nav-link" href="#Remove">Remove(K)</a><a class="nav-link" href="#RemoveRange">RemoveRange(IEnumerable&lt;K&gt;)</a><a class="nav-link" href="#SetItem">SetItem(K, V)</a><a class="nav-link" href="#SetItem">SetItem(K, Func&lt;V, V&gt;)</a><a class="nav-link" href="#SetItems">SetItems(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#SetItems">SetItems(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#Skip">Skip(int)</a><a class="nav-link" href="#Subtract">Subtract(Map&lt;K, V&gt;)</a><a class="nav-link" href="#ToDictionary">ToDictionary()</a><a class="nav-link" href="#ToDictionary&lt;KR, VR>">ToDictionary&lt;KR, VR&gt;(Func&lt;IMapItem&lt;K, V&gt;, KR&gt;, Func&lt;IMapItem&lt;K, V&gt;, VR&gt;)</a><a class="nav-link" href="#TryAdd">TryAdd(K, V)</a><a class="nav-link" href="#TryAdd">TryAdd(K, V, Func&lt;Map&lt;K, V&gt;, V, Map&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TryAddRange">TryAddRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TryAddRange">TryAddRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TryGetKey">TryGetKey(K, K)</a><a class="nav-link" href="#TryGetValue">TryGetValue(K, V)</a><a class="nav-link" href="#TrySetItem">TrySetItem(K, V)</a><a class="nav-link" href="#TrySetItem">TrySetItem(K, Func&lt;V, V&gt;)</a><a class="nav-link" href="#TrySetItem">TrySetItem(K, Func&lt;V, V&gt;, Func&lt;Map&lt;K, V&gt;, Map&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TrySetItems">TrySetItems(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TrySetItems">TrySetItems(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TrySetItems">TrySetItems(IEnumerable&lt;K&gt;, Func&lt;V, V&gt;)</a></div><div class="content-panel"><h1 >Map&lt;K, V&gt; Class</h1><p ><span >Immutable map AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Fields</h2><div class="member-title"><a name="Empty"></a>Empty</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Empty</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="Count"></a>Count</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Number of items in the map </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">Count</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IsEmpty"></a>IsEmpty</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Is the map empty </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsEmpty</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Keys"></a>Keys</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Enumerable of map keys </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt; <span class="ident">Keys</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="Length"></a>Length</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Alias of Count </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">Length</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="this"></a>this</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >&#39;this&#39; accessor </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">V</span> <span class="keyword">this</span> [<span class="ident">K</span> key] { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">V</span></div><div class="normal"><span >Optional value</span></div></div></div></div><div class="member-title"><a name="Tuples"></a>Tuples</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Enumerable of in-order tuples that make up the map </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">Tuples</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"><span >Tuples</span></div></div></div></div><div class="member-title"><a name="Values"></a>Values</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Enumerable of map values </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">Values</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Add"></a>Add(K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Add__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Add</span>(<span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if the key already exists</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-Add__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            if (isnull(key)) throw new ArgumentNullException(nameof(key));
            if (isnull(value)) throw new ArgumentNullException(nameof(value));
            return SetRoot(MapModule.Add(Root, key, value, Comparer&lt;K&gt;.Default));
        </div></div></div><div class="member-title"><a name="AddOrUpdate"></a>AddOrUpdate(K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddOrUpdate__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map. If the key already exists, the new item replaces it. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdate</span>(<span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-AddOrUpdate__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            if (isnull(key)) throw new ArgumentNullException(nameof(key));
            return SetRoot(MapModule.AddOrUpdate(Root, key, value, Comparer&lt;K&gt;.Default));
        </div></div></div><div class="member-title"><a name="AddOrUpdate"></a>AddOrUpdate(K, Func&lt;V, V&gt;, Func&lt;V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddOrUpdate__K__key__Func_V_V_Some__Func_V_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key, map it to a new value, put it back.  If it doesn&#39;t exist, add a new one based on None result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdate</span>(<span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">V</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the mapped value</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if None returns null</span></div></div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div></div><div style="display:none" id="code-AddOrUpdate__K__key__Func_V_V_Some__Func_V_None_"><div class="section_title">SOURCE</div><div class="code">
            isnull(key)
                ? this
                : match(MapModule.TryFind(Root, key, Comparer&lt;K&gt;.Default),
                        Some: x  =&gt; SetItem(key, Some(x)),
                        None: () =&gt; Add(key, None()))</div></div></div><div class="member-title"><a name="AddOrUpdate"></a>AddOrUpdate(K, Func&lt;V, V&gt;, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddOrUpdate__K__key__Func_V_V_Some__V__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key, map it to a new value, put it back.  If it doesn&#39;t exist, add a new one based on None result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">V</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdate</span>(<span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some, <span class="ident">V</span> None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the mapped value</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException if None is null</span></div></div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div></div><div style="display:none" id="code-AddOrUpdate__K__key__Func_V_V_Some__V__None_"><div class="section_title">SOURCE</div><div class="code">
            if (isnull(None)) throw new ArgumentNullException(nameof(None));

            return isnull(key)
                ? this
                : match(MapModule.TryFind(Root, key, Comparer&lt;K&gt;.Default),
                        Some: x =&gt; SetItem(key, Some(x)),
                        None: () =&gt; Add(key, None));
        </div></div></div><div class="member-title"><a name="AddOrUpdateRange"></a>AddOrUpdateRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddOrUpdateRange__IEnumerable_Tuple&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re replaced. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Range of tuples to add</div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdateRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-AddOrUpdateRange__IEnumerable_Tuple&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code">
            if (range == null)
            {
                return this;
            }

            var self = Root;
            foreach (var item in range)
            {
                if (isnull(item.Item1)) throw new ArgumentNullException(nameof(item.Item1));
                self = MapModule.AddOrUpdate(self, item.Item1, item.Item2, Comparer&lt;K&gt;.Default);
            }
            return SetRoot(self);
        </div></div></div><div class="member-title"><a name="AddOrUpdateRange"></a>AddOrUpdateRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddOrUpdateRange__IEnumerable_KeyValuePair&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re replaced. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Range of KeyValuePairs to add</div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdateRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-AddOrUpdateRange__IEnumerable_KeyValuePair&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code">
            if (range == null)
            {
                return this;
            }

            var self = Root;
            foreach (var item in range)
            {
                if (isnull(item.Key)) throw new ArgumentNullException(nameof(item.Key));
                self = MapModule.AddOrUpdate(self, item.Key, item.Value, Comparer&lt;K&gt;.Default);
            }
            return SetRoot(self);
        </div></div></div><div class="member-title"><a name="AddRange"></a>AddRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddRange__IEnumerable_Tuple&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Range of tuples to add</div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-AddRange__IEnumerable_Tuple&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code">
            if (range == null)
            {
                return this;
            }
            var self = Root;
            foreach (var item in range)
            {
                if (isnull(item.Item1)) throw new ArgumentNullException(nameof(item.Item1));
                self = MapModule.Add(self, item.Item1, item.Item2, Comparer&lt;K&gt;.Default);
            }
            return SetRoot(self);
        </div></div></div><div class="member-title"><a name="AddRange"></a>AddRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddRange__IEnumerable_KeyValuePair&lt;K, V>_pairs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pairs</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Range of KeyValuePairs to add</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; pairs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div></div><div style="display:none" id="code-AddRange__IEnumerable_KeyValuePair&lt;K, V>_pairs_"><div class="section_title">SOURCE</div><div class="code">
            AddRange(from kv in pairs
                     select Tuple(kv.Key, kv.Value))</div></div></div><div class="member-title"><a name="Append"></a>Append(Map&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Append__Map_K_V_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Append</span>(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Append__Map_K_V_rhs_"><div class="section_title">SOURCE</div><div class="code">
            var self = this;
            foreach (var item in rhs)
            {
                if (!self.ContainsKey(item.Key))
                {
                    self = self.Add(item.Key, item.Value);
                }
            }
            return self;
        </div></div></div><div class="member-title"><a name="AsEnumerable"></a>AsEnumerable()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">AsEnumerable</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsEnumerable__"><div class="section_title">SOURCE</div><div class="code">
            MapModule.AsEnumerable(this)</div></div></div><div class="member-title"><a name="Clear"></a>Clear()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Clear__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Clears all items from the map  </span></p><div class="section_title">REMARKS</div><span >Functionally equivalent to calling Map.empty as the original structure is untouched</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Clear</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >Empty map</span></div></div></div><div style="display:none" id="code-Clear__"><div class="section_title">SOURCE</div><div class="code">
            Empty</div></div></div><div class="member-title"><a name="Contains"></a>Contains(K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Contains__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Checks for existence of a key in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to check</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Contains</span>(<span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if an item with the key supplied is in the map</span></div></div></div><div style="display:none" id="code-Contains__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            match(Find(key),
                Some: v =&gt; ReferenceEquals(v, value),
                None: () =&gt; false
                )</div></div></div><div class="member-title"><a name="Contains"></a>Contains(KeyValuePair&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Contains__KeyValuePair_K_V_pair_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if a Key/Value pair exists in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pair</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">Pair to find</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Contains</span>(<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; pair)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if exists, false otherwise</span></div></div></div><div style="display:none" id="code-Contains__KeyValuePair_K_V_pair_"><div class="section_title">SOURCE</div><div class="code">
            match(MapModule.TryFind(Root, pair.Key, Comparer&lt;K&gt;.Default),
                  Some: v =&gt; ReferenceEquals(v, pair.Value),
                  None: () =&gt; false)</div></div></div><div class="member-title"><a name="ContainsKey"></a>ContainsKey(K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ContainsKey__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Checks for existence of a key in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to check</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">ContainsKey</span>(<span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if an item with the key supplied is in the map</span></div></div></div><div style="display:none" id="code-ContainsKey__K__key_"><div class="section_title">SOURCE</div><div class="code">
            isnull(key)
                ? false
                : Find(key)
                    ? true
                    : false</div></div></div><div class="member-title"><a name="Find"></a>Find(K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Find__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Option</span>&lt;<span class="ident">V</span>&gt; <span class="ident">Find</span>(<span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"><span >Found value</span></div></div></div><div style="display:none" id="code-Find__K__key_"><div class="section_title">SOURCE</div><div class="code">
            isnull(key)
                ? None
                : MapModule.TryFind(Root, key, Comparer&lt;K&gt;.Default)</div></div></div><div class="member-title"><a name="Find&lt;R>"></a>Find&lt;R&gt;(K, Func&lt;V, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Find_R_K__key__Func_V_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key and pattern match the result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">Find</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Found value</span></div></div></div><div style="display:none" id="code-Find_R_K__key__Func_V_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            isnull(key)
                ? None()
                : match(MapModule.TryFind(Root, key, Comparer&lt;K&gt;.Default), Some, None)</div></div></div><div class="member-title"><a name="FindRange"></a>FindRange(K, K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FindRange__K__keyFrom__K__keyTo_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a range of values  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keyFrom</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Range start (inclusive)</div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyTo</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Range to (inclusive)</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">FindRange</span>(<span class="ident">K</span> keyFrom, <span class="ident">K</span> keyTo)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"><span >Range of values</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keyFrom or keyTo are null</span></div></div></div><div style="display:none" id="code-FindRange__K__keyFrom__K__keyTo_"><div class="section_title">SOURCE</div><div class="code">
            if (isnull(keyFrom)) throw new ArgumentNullException(nameof(keyFrom));
            if (isnull(keyTo)) throw new ArgumentNullException(nameof(keyTo));
            return Comparer&lt;K&gt;.Default.Compare(keyFrom, keyTo) &gt; 0
                ? MapModule.FindRange(Root, keyTo, keyFrom, Comparer&lt;K&gt;.Default)
                : MapModule.FindRange(Root, keyFrom, keyTo, Comparer&lt;K&gt;.Default);
        </div></div></div><div class="member-title"><a name="FindSeq"></a>FindSeq(K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FindSeq__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key as an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">FindSeq</span>(<span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"><span >Found value</span></div></div></div><div style="display:none" id="code-FindSeq__K__key_"><div class="section_title">SOURCE</div><div class="code">
            Find(key).AsEnumerable()</div></div></div><div class="member-title"><a name="GetEnumerator"></a>GetEnumerator()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetEnumerator__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >GetEnumerator - IEnumerable interface </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">IEnumerator</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">GetEnumerator</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerator</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-GetEnumerator__"><div class="section_title">SOURCE</div><div class="code">
            new MapModule.MapEnumerator&lt;K, V&gt;(Root, Rev, 0)</div></div></div><div class="member-title"><a name="Remove"></a>Remove(K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Remove__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically removes an item from the map If the key doesn&#39;t exists, the request is ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Remove</span>(<span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the item removed</span></div></div></div><div style="display:none" id="code-Remove__K__key_"><div class="section_title">SOURCE</div><div class="code">
            isnull(key)
                ? this
                : SetRoot(MapModule.Remove(Root, key, Comparer&lt;K&gt;.Default))</div></div></div><div class="member-title"><a name="RemoveRange"></a>RemoveRange(IEnumerable&lt;K&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-RemoveRange__IEnumerable_K_keys_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically removes a set of keys from the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keys</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt;</div></div><div class="arg-desc">Keys to remove</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">RemoveRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt; keys)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items removed</span></div></div></div><div style="display:none" id="code-RemoveRange__IEnumerable_K_keys_"><div class="section_title">SOURCE</div><div class="code">
            var self = Root;
            foreach (var key in keys)
            {
                self = MapModule.Remove(self, key, Comparer&lt;K&gt;.Default);
            }
            return SetRoot(self);
        </div></div></div><div class="member-title"><a name="SetItem"></a>SetItem(K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SetItem__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically updates an existing item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">SetItem</span>(<span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-SetItem__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            if (isnull(key)) throw new ArgumentNullException(nameof(key));
            return SetRoot(MapModule.SetItem(Root, key, value, Comparer&lt;K&gt;.Default));
        </div></div></div><div class="member-title"><a name="SetItem"></a>SetItem(K, Func&lt;V, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SetItem__K__key__Func_V_V_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key, map it to a new value, put it back. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to set</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">SetItem</span>(<span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the mapped value</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if the item isn&#39;t found</span></div></div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div></div><div style="display:none" id="code-SetItem__K__key__Func_V_V_Some_"><div class="section_title">SOURCE</div><div class="code">
            isnull(key)
                ? this
                : match(MapModule.TryFind(Root, key, Comparer&lt;K&gt;.Default),
                        Some: x =&gt; SetItem(key, Some(x)),
                        None: () =&gt; raise&lt;Map&lt;K, V&gt;&gt;(new ArgumentException(&quot;Key not found in Map&quot;)))</div></div></div><div class="member-title"><a name="SetItems"></a>SetItems(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SetItems__IEnumerable_KeyValuePair&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the KeyValuePairs provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Items to set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">SetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys aren&#39;t in the map</span></div></div></div><div style="display:none" id="code-SetItems__IEnumerable_KeyValuePair&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            if (items == null) return this;
            var self = Root;
            foreach (var item in items)
            {
                if (isnull(item.Key)) continue;
                self = MapModule.SetItem(self, item.Key, item.Value, Comparer&lt;K&gt;.Default);
            }
            return SetRoot(self);
        </div></div></div><div class="member-title"><a name="SetItems"></a>SetItems(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SetItems__IEnumerable_Tuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the Tuples provided. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Items to set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">SetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys aren&#39;t in the map</span></div></div></div><div style="display:none" id="code-SetItems__IEnumerable_Tuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            if (items == null) return this;
            var self = Root;
            foreach (var item in items)
            {
                if (isnull(item.Item1)) continue;
                self = MapModule.SetItem(self, item.Item1, item.Item2, Comparer&lt;K&gt;.Default);
            }
            return SetRoot(self);
        </div></div></div><div class="member-title"><a name="Skip"></a>Skip(int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Skip__int__amount_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Skips &#39;amount&#39; values and returns a new tree without the  skipped values. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">amount</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Amount to skip</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">Skip</span>(<span class="keyword">int</span> amount)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"><span >New tree</span></div></div></div><div style="display:none" id="code-Skip__int__amount_"><div class="section_title">SOURCE</div><div class="code">
            var enumer = new MapModule.MapEnumerator&lt;K, V&gt;(Root, Rev, amount);
            while (enumer.MoveNext())
            {
                yield return enumer.Current;
            }
        </div></div></div><div class="member-title"><a name="Subtract"></a>Subtract(Map&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subtract__Map_K_V_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Subtract</span>(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Subtract__Map_K_V_rhs_"><div class="section_title">SOURCE</div><div class="code">
            var self = this;
            foreach (var item in rhs)
            {
                self = self.Remove(item.Key);
            }
            return self;
        </div></div></div><div class="member-title"><a name="ToDictionary"></a>ToDictionary()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToDictionary__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the map to an IDictionary </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">ToDictionary</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span ></span></div></div></div><div style="display:none" id="code-ToDictionary__"><div class="section_title">SOURCE</div><div class="code">
            new Dictionary&lt;K, V&gt;((IDictionary&lt;K, V&gt;)this)</div></div></div><div class="member-title"><a name="ToDictionary&lt;KR, VR>"></a>ToDictionary&lt;KR, VR&gt;(Func&lt;IMapItem&lt;K, V&gt;, KR&gt;, Func&lt;IMapItem&lt;K, V&gt;, VR&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToDictionary_KR_VR_Func_IMapItem&lt;K, V>_KR_keySelector__Func_IMapItem&lt;K, V>_VR_valueSelector_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map the map the a dictionary </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keySelector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">KR</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">valueSelector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">VR</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IDictionary</span>&lt;<span class="ident">KR</span>, <span class="ident">VR</span>&gt; <span class="ident">ToDictionary</span>&lt;<span class="ident">KR</span>, <span class="ident">VR</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">KR</span>&gt; keySelector, <span class="ident">Func</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">VR</span>&gt; valueSelector)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDictionary</span>&lt;<span class="ident">KR</span>, <span class="ident">VR</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToDictionary_KR_VR_Func_IMapItem&lt;K, V>_KR_keySelector__Func_IMapItem&lt;K, V>_VR_valueSelector_"><div class="section_title">SOURCE</div><div class="code">
            AsEnumerable().ToDictionary(x =&gt; keySelector(x), x =&gt; valueSelector(x))</div></div></div><div class="member-title"><a name="TryAdd"></a>TryAdd(K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryAdd__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map. If the key already exists, then the new item is ignored </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TryAdd</span>(<span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-TryAdd__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            if (isnull(key)) throw new ArgumentNullException(nameof(key));
            return SetRoot(MapModule.TryAdd(Root, key, value, Comparer&lt;K&gt;.Default));
        </div></div></div><div class="member-title"><a name="TryAdd"></a>TryAdd(K, V, Func&lt;Map&lt;K, V&gt;, V, Map&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryAdd__K__key__V__value__Func_Map&lt;K, V>_V_Map&lt;K, V>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map. If the key already exists then the Fail handler is called with the unaltered map  and the value already set for the key, it expects a new map returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">V</span>, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to handle failure, you&#39;re given the unaltered map  and the value already set for the key</div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TryAdd</span>(<span class="ident">K</span> key, <span class="ident">V</span> value, <span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">V</span>, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-TryAdd__K__key__V__value__Func_Map&lt;K, V>_V_Map&lt;K, V>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            if (isnull(key)) throw new ArgumentNullException(nameof(key));
            return Find(key, v =&gt; Fail(this, v), () =&gt; Add(key, value));
        </div></div></div><div class="member-title"><a name="TryAddRange"></a>TryAddRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryAddRange__IEnumerable_Tuple&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Range of tuples to add</div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TryAddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-TryAddRange__IEnumerable_Tuple&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code">
            if (range == null)
            {
                return this;
            }

            var self = Root;
            foreach (var item in range)
            {
                if (isnull(item.Item1)) throw new ArgumentNullException(nameof(item.Item1));
                self = MapModule.TryAdd(self, item.Item1, item.Item2, Comparer&lt;K&gt;.Default);
            }
            return SetRoot(self);
        </div></div></div><div class="member-title"><a name="TryAddRange"></a>TryAddRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryAddRange__IEnumerable_KeyValuePair&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Range of KeyValuePairs to add</div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TryAddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-TryAddRange__IEnumerable_KeyValuePair&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code">
            if (range == null)
            {
                return this;
            }

            var self = Root;
            foreach (var item in range)
            {
                if (isnull(item.Key)) throw new ArgumentNullException(nameof(item.Key));
                self = MapModule.TryAdd(self, item.Key, item.Value, Comparer&lt;K&gt;.Default);
            }
            return SetRoot(self);
        </div></div></div><div class="member-title"><a name="TryGetKey"></a>TryGetKey(K, K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryGetKey__K__equalKey__K__actualKey_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">equalKey</div><div class="arg-type"><span class="ident">K</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">actualKey</div><div class="arg-type"><span class="ident">K</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">TryGetKey</span>(<span class="ident">K</span> equalKey, <span class="keyword">out</span> <span class="ident">K</span> actualKey)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-TryGetKey__K__equalKey__K__actualKey_"><div class="section_title">SOURCE</div><div class="code">
            // TODO: Not sure of the behaviour here
            throw new NotImplementedException();
        </div></div></div><div class="member-title"><a name="TryGetValue"></a>TryGetValue(K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryGetValue__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >TryGetValue </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;TryGetValue is obsolete, use TryFind instead&quot;)]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">TryGetValue</span>(<span class="ident">K</span> key, <span class="keyword">out</span> <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ></span></div></div></div><div style="display:none" id="code-TryGetValue__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            var res = match(Find(key),
                            Some: x =&gt; Tuple(x, true),
                            None: () =&gt; Tuple(default(V), false));
            value = res.Item1;
            return res.Item2;
        </div></div></div><div class="member-title"><a name="TrySetItem"></a>TrySetItem(K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TrySetItem__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically updates an existing item, unless it doesn&#39;t exist, in which case  it is ignored </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItem</span>(<span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the value is null</span></div></div></div><div style="display:none" id="code-TrySetItem__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            if (isnull(key)) return this;
            return SetRoot(MapModule.TrySetItem(Root, key, value, Comparer&lt;K&gt;.Default));
        </div></div></div><div class="member-title"><a name="TrySetItem"></a>TrySetItem(K, Func&lt;V, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TrySetItem__K__key__Func_V_V_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets an item by first retrieving it, applying a map, and then putting it back. Silently fails if the value doesn&#39;t exist </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to set</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">delegate to map the existing value to a new one before setting</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItem</span>(<span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the item set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-TrySetItem__K__key__Func_V_V_Some_"><div class="section_title">SOURCE</div><div class="code">
            isnull(key)
                ? this
                : match(MapModule.TryFind(Root, key, Comparer&lt;K&gt;.Default),
                        Some: x =&gt; SetItem(key, Some(x)),
                        None: () =&gt; this)</div></div></div><div class="member-title"><a name="TrySetItem"></a>TrySetItem(K, Func&lt;V, V&gt;, Func&lt;Map&lt;K, V&gt;, Map&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TrySetItem__K__key__Func_V_V_Some__Func_Map&lt;K, V>_Map&lt;K, V>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets an item by first retrieving it, applying a map, and then putting it back. Calls the None delegate to return a new map if the item can&#39;t be found </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">delegate to map the existing value to a new one before setting</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">delegate to return a new map if the item can&#39;t be found</div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItem</span>(<span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the item set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if None returns null</span></div></div></div><div style="display:none" id="code-TrySetItem__K__key__Func_V_V_Some__Func_Map&lt;K, V>_Map&lt;K, V>_None_"><div class="section_title">SOURCE</div><div class="code">
            isnull(key)
                ? this
                : match(MapModule.TryFind(Root, key, Comparer&lt;K&gt;.Default),
                        Some: x =&gt; SetItem(key, Some(x)),
                        None: () =&gt; None(this))</div></div></div><div class="member-title"><a name="TrySetItems"></a>TrySetItems(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TrySetItems__IEnumerable_KeyValuePair&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the KeyValuePairs provided.  If any of the  items don&#39;t exist then they&#39;re silently ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Items to set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div></div><div style="display:none" id="code-TrySetItems__IEnumerable_KeyValuePair&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            var self = Root;
            foreach (var item in items)
            {
                if (isnull(item.Key)) continue;
                self = MapModule.TrySetItem(self, item.Key, item.Value, Comparer&lt;K&gt;.Default);
            }
            return SetRoot(self);
        </div></div></div><div class="member-title"><a name="TrySetItems"></a>TrySetItems(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TrySetItems__IEnumerable_Tuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the Tuples provided  If any of the  items don&#39;t exist then they&#39;re silently ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Items to set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div></div><div style="display:none" id="code-TrySetItems__IEnumerable_Tuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            var self = Root;
            foreach (var item in items)
            {
                if (isnull(item.Item1)) continue;
                self = MapModule.TrySetItem(self, item.Item1, item.Item2, Comparer&lt;K&gt;.Default);
            }
            return SetRoot(self);
        </div></div></div><div class="member-title"><a name="TrySetItems"></a>TrySetItems(IEnumerable&lt;K&gt;, Func&lt;V, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TrySetItems__IEnumerable_K_keys__Func_V_V_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the keys provided to find the items and the Some delegate maps to a new value.  If the items don&#39;t exist then they&#39;re silently ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keys</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt;</div></div><div class="arg-desc">Keys of items to set</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">Function map the existing item to a new one</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt; keys, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div></div><div style="display:none" id="code-TrySetItems__IEnumerable_K_keys__Func_V_V_Some_"><div class="section_title">SOURCE</div><div class="code">
            var self = this;
            foreach (var key in keys)
            {
                if (isnull(key)) continue;
                self = TrySetItem(key, Some);
            }
            return self;
        </div></div></div></div></body></html>