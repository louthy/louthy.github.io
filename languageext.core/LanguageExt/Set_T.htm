<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="https://louthy.github.io/">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Set_T.htm">Set&lt;T&gt;</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#Empty">Empty</a><h3 >PROPERTIES</h3><a class="nav-link" href="#Count">Count</a><a class="nav-link" href="#IsEmpty">IsEmpty</a><a class="nav-link" href="#IsReadOnly">IsReadOnly</a><a class="nav-link" href="#IsSynchronized">IsSynchronized</a><a class="nav-link" href="#SyncRoot">SyncRoot</a><h3 >METHODS</h3><a class="nav-link" href="#Add">Add(T)</a><a class="nav-link" href="#AddOrUpdate">AddOrUpdate(T)</a><a class="nav-link" href="#Append">Append(Set&lt;T&gt;)</a><a class="nav-link" href="#Clear">Clear()</a><a class="nav-link" href="#Compare">Compare(Set&lt;T&gt;)</a><a class="nav-link" href="#Contains">Contains(T)</a><a class="nav-link" href="#CopyTo">CopyTo(T[], int)</a><a class="nav-link" href="#CopyTo">CopyTo(Array, int)</a><a class="nav-link" href="#Difference">Difference(Set&lt;T&gt;)</a><a class="nav-link" href="#Divide">Divide(Set&lt;T&gt;)</a><a class="nav-link" href="#Equals">Equals(Set&lt;T&gt;)</a><a class="nav-link" href="#Except">Except(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#ExceptWith">ExceptWith(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#Exists">Exists(Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Filter">Filter(Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Find">Find(T)</a><a class="nav-link" href="#Fold&lt;S>">Fold&lt;S&gt;(S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#FoldBack&lt;S>">FoldBack&lt;S&gt;(S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#GetEnumerator">GetEnumerator()</a><a class="nav-link" href="#Intersect">Intersect(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#IntersectWith">IntersectWith(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#IsProperSubsetOf">IsProperSubsetOf(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#IsProperSupersetOf">IsProperSupersetOf(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#IsSubsetOf">IsSubsetOf(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#IsSupersetOf">IsSupersetOf(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#Length">Length()</a><a class="nav-link" href="#Map&lt;U>">Map&lt;U&gt;(Func&lt;T, U&gt;)</a><a class="nav-link" href="#Multiply">Multiply(Set&lt;T&gt;)</a><a class="nav-link" href="#Overlaps">Overlaps(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#Remove">Remove(T)</a><a class="nav-link" href="#SetEquals">SetEquals(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#Subtract">Subtract(Set&lt;T&gt;)</a><a class="nav-link" href="#SymmetricExcept">SymmetricExcept(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#SymmetricExceptWith">SymmetricExceptWith(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#TryAdd">TryAdd(T)</a><a class="nav-link" href="#Union">Union(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#UnionWith">UnionWith(IEnumerable&lt;T&gt;)</a></div><div class="content-panel"><h1 >Set&lt;T&gt; Class</h1><p ><span >Immutable set AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyCollection</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ICollection</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISet</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ICollection</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IMultiplicable</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IDivisible</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Fields</h2><div class="member-title"><a name="Empty"></a>Empty</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Empty</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="Count"></a>Count</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Number of items in the set </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">Count</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IsEmpty"></a>IsEmpty</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >True if the set has no elements </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsEmpty</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IsReadOnly"></a>IsReadOnly</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >IsReadOnly - Always true </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsReadOnly</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IsSynchronized"></a>IsSynchronized</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >IsSynchronized - Always true </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsSynchronized</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="SyncRoot"></a>SyncRoot</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Syncronisation root </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">object</span> <span class="ident">SyncRoot</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">object</span></div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Add"></a>Add(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Add__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add an item to the set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Value to add to the set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Add</span>(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >New set with the item added</span></div></div></div><div style="display:none" id="code-Add__T__value_"><div class="section_title">SOURCE</div><div class="code">
            new Set&lt;T&gt;(SetModule.Add(set,value,Comparer&lt;T&gt;.Default))</div></div></div><div class="member-title"><a name="AddOrUpdate"></a>AddOrUpdate(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddOrUpdate__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add an item to the set.  If an item already exists then replace it. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Value to add to the set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">AddOrUpdate</span>(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >New set with the item maybe added</span></div></div></div><div style="display:none" id="code-AddOrUpdate__T__value_"><div class="section_title">SOURCE</div><div class="code">
            new Set&lt;T&gt;(SetModule.AddOrUpdate(set, value, Comparer&lt;T&gt;.Default))</div></div></div><div class="member-title"><a name="Append"></a>Append(Set&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Append__Set_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add operator - performs a union of the two sets </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right hand side set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Append</span>(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Unioned set</span></div></div></div><div style="display:none" id="code-Append__Set_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            Union(rhs)</div></div></div><div class="member-title"><a name="Clear"></a>Clear()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Clear__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Clears the set </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Clear</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >An empty set</span></div></div></div><div style="display:none" id="code-Clear__"><div class="section_title">SOURCE</div><div class="code">
            new Set&lt;T&gt;()</div></div></div><div class="member-title"><a name="Compare"></a>Compare(Set&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Compare__Set_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if both sets contain the same elements </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Compare</span>(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Compare__Set_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            SetEquals(setB)</div></div></div><div class="member-title"><a name="Contains"></a>Contains(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Contains__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if the value is in the set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Value to check</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Contains</span>(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the item &#39;value&#39; is in the Set &#39;set&#39;</span></div></div></div><div style="display:none" id="code-Contains__T__value_"><div class="section_title">SOURCE</div><div class="code">
            SetModule.Contains(set, value, Comparer&lt;T&gt;.Default)</div></div></div><div class="member-title"><a name="CopyTo"></a>CopyTo(T[], int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CopyTo__T__array__int__index_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Copy the items from the set into the specified array </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">array</div><div class="arg-type"><span class="ident">T</span>[]</div></div><div class="arg-desc">Array to copy to</div></div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Index into the array to start</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">void</span> <span class="ident">CopyTo</span>(<span class="ident">T</span>[] array, <span class="keyword">int</span> index)</div></div><div style="display:none" id="code-CopyTo__T__array__int__index_"><div class="section_title">SOURCE</div><div class="code">
            if (array == null) throw new ArgumentNullException(nameof(array));
            if (index &lt; 0 || index &gt; array.Length) throw new IndexOutOfRangeException();
            if (index + Count &gt; array.Length) throw new IndexOutOfRangeException();

            foreach (var element in this)
            {
                array[index++] = element;
            }
        </div></div></div><div class="member-title"><a name="CopyTo"></a>CopyTo(Array, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CopyTo__Array__array__int__index_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Copy the items from the set into the specified array </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">array</div><div class="arg-type"><span class="ident">Array</span></div></div><div class="arg-desc">Array to copy to</div></div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Index into the array to start</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">void</span> <span class="ident">CopyTo</span>(<span class="ident">Array</span> array, <span class="keyword">int</span> index)</div></div><div style="display:none" id="code-CopyTo__Array__array__int__index_"><div class="section_title">SOURCE</div><div class="code">
            if (array == null) throw new ArgumentNullException(nameof(array));
            if (index &lt; 0 || index &gt; array.Length) throw new IndexOutOfRangeException();
            if (index + Count &gt; array.Length) throw new IndexOutOfRangeException();

            foreach (var element in this)
            {
                array.SetValue(element, index++);
            }
        </div></div></div><div class="member-title"><a name="Difference"></a>Difference(Set&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Difference__Set_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns this - setB.  Only the items in this that are not in  setB will be returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Difference</span>(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Difference__Set_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            Except(setB)</div></div></div><div class="member-title"><a name="Divide"></a>Divide(Set&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Divide__Set_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide operator - runs through every combination of items in the two sets and performs a divide operation on them; and then puts the result in a new distinct set. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right hand side set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Divide</span>(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Result of the division of the two sets</span></div></div></div><div style="display:none" id="code-Divide__Set_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            new Set&lt;T&gt;((from y in rhs.AsEnumerable()
                        from x in this.AsEnumerable()
                        select TypeDesc.Divide(x, y, TypeDesc&lt;T&gt;.Default)), true)</div></div></div><div class="member-title"><a name="Equals"></a>Equals(Set&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__Set_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Other set to test</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if sets are equal</span></div></div></div><div style="display:none" id="code-Equals__Set_T_other_"><div class="section_title">SOURCE</div><div class="code">
            SetEquals(other)</div></div></div><div class="member-title"><a name="Except"></a>Except(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Except__IEnumerable_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns this - other.  Only the items in this that are not in  other will be returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Except</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Except__IEnumerable_T_other_"><div class="section_title">SOURCE</div><div class="code">
            var self = this;
            foreach (var item in other)
            {
                if (self.Contains(item))
                {
                    self = self.Remove(item);
                }
            }
            return self;
        </div></div></div><div class="member-title"><a name="ExceptWith"></a>ExceptWith(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExceptWith__IEnumerable_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;ExceptWith can&#39;t be implemented because this type is immutable&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">void</span> <span class="ident">ExceptWith</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; other)</div></div><div style="display:none" id="code-ExceptWith__IEnumerable_T_other_"><div class="section_title">SOURCE</div><div class="code">
            throw new NotSupportedException();
        </div></div></div><div class="member-title"><a name="Exists"></a>Exists(Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Check the existence of an item in the set using a  predicate. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div><div class="section_title">REMARKS</div><span >Note this scans the entire set.</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Exists</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if predicate returns true for any item</span></div></div></div><div style="display:none" id="code-Exists__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            SetModule.Exists(set, pred)</div></div></div><div class="member-title"><a name="Filter"></a>Filter(Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filters items from the set using the predicate.  If the predicate returns True for any item then it remains in the set, otherwise it&#39;s dropped. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Filter</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Filtered enumerable</span></div></div></div><div style="display:none" id="code-Filter__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            new Set&lt;T&gt;(SetModule.Filter(set, pred))</div></div></div><div class="member-title"><a name="Find"></a>Find(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Find__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Attempts to find an item in the set.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Value to find</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Find</span>(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Some(T) if found, None otherwise</span></div></div></div><div style="display:none" id="code-Find__T__value_"><div class="section_title">SOURCE</div><div class="code">
            SetModule.TryFind(set, value, Comparer&lt;T&gt;.Default)</div></div></div><div class="member-title"><a name="Fold&lt;S>"></a>Fold&lt;S&gt;(S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_S_S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection, threading an accumulator  argument through the computation. The fold function takes the state argument, and  applies the function &#39;folder&#39; to it and the first element of the set. Then, it feeds this  result into the function &#39;folder&#39; along with the second element, and so on. It returns the  final result. (Aggregate in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">S</span> <span class="ident">Fold</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-Fold_S_S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            SetModule.Fold(set,state,folder)</div></div></div><div class="member-title"><a name="FoldBack&lt;S>"></a>FoldBack&lt;S&gt;(S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBack_S_S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection (from last element to first),  threading an aggregate state through the computation. The fold function takes the state  argument, and applies the function &#39;folder&#39; to it and the first element of the set. Then,  it feeds this result into the function &#39;folder&#39; along with the second element, and so on. It  returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">S</span> <span class="ident">FoldBack</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldBack_S_S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            SetModule.FoldBack(set, state, folder)</div></div></div><div class="member-title"><a name="GetEnumerator"></a>GetEnumerator()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetEnumerator__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get enumerator </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerator</span>&lt;<span class="ident">T</span>&gt; <span class="ident">GetEnumerator</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerator</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >IEnumerator T</span></div></div></div><div style="display:none" id="code-GetEnumerator__"><div class="section_title">SOURCE</div><div class="code">
            new SetModule.SetEnumerator&lt;T&gt;(set,false,0)</div></div></div><div class="member-title"><a name="Intersect"></a>Intersect(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Intersect__IEnumerable_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the elements that are in both this and other </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Intersect</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Intersect__IEnumerable_T_other_"><div class="section_title">SOURCE</div><div class="code">
            var res = new List&lt;T&gt;();
            foreach (var item in other)
            {
                if (Contains(item)) res.Add(item);
            }
            return new Set&lt;T&gt;(res);
        </div></div></div><div class="member-title"><a name="IntersectWith"></a>IntersectWith(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IntersectWith__IEnumerable_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;IntersectWith can&#39;t be implemented because this type is immutable&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">void</span> <span class="ident">IntersectWith</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; other)</div></div><div style="display:none" id="code-IntersectWith__IEnumerable_T_other_"><div class="section_title">SOURCE</div><div class="code">
            throw new NotSupportedException();
        </div></div></div><div class="member-title"><a name="IsProperSubsetOf"></a>IsProperSubsetOf(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IsProperSubsetOf__IEnumerable_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if &#39;other&#39; is a proper subset of this set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsProperSubsetOf</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if &#39;other&#39; is a proper subset of this set</span></div></div></div><div style="display:none" id="code-IsProperSubsetOf__IEnumerable_T_other_"><div class="section_title">SOURCE</div><div class="code">
            if (IsEmpty)
            {
                return other.Any();
            }

            var otherSet = new Set&lt;T&gt;(other);
            if (Count &gt;= otherSet.Count)
            {
                return false;
            }

            int matches = 0;
            bool extraFound = false;
            foreach (T item in otherSet)
            {
                if (Contains(item))
                {
                    matches++;
                }
                else
                {
                    extraFound = true;
                }

                if (matches == Count &amp;&amp; extraFound)
                {
                    return true;
                }
            }

            return false;
        </div></div></div><div class="member-title"><a name="IsProperSupersetOf"></a>IsProperSupersetOf(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IsProperSupersetOf__IEnumerable_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if &#39;other&#39; is a proper superset of this set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsProperSupersetOf</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if &#39;other&#39; is a proper superset of this set</span></div></div></div><div style="display:none" id="code-IsProperSupersetOf__IEnumerable_T_other_"><div class="section_title">SOURCE</div><div class="code">
            if (IsEmpty)
            {
                return false;
            }

            int matchCount = 0;
            foreach (T item in other)
            {
                matchCount++;
                if (!Contains(item))
                {
                    return false;
                }
            }

            return Count &gt; matchCount;
        </div></div></div><div class="member-title"><a name="IsSubsetOf"></a>IsSubsetOf(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IsSubsetOf__IEnumerable_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if &#39;other&#39; is a superset of this set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsSubsetOf</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if &#39;other&#39; is a superset of this set</span></div></div></div><div style="display:none" id="code-IsSubsetOf__IEnumerable_T_other_"><div class="section_title">SOURCE</div><div class="code">
            if (IsEmpty)
            {
                return true;
            }

            var otherSet = new Set&lt;T&gt;(other);
            int matches = 0;
            foreach (T item in otherSet)
            {
                if (Contains(item))
                {
                    matches++;
                }
            }
            return matches == Count;
        </div></div></div><div class="member-title"><a name="IsSupersetOf"></a>IsSupersetOf(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IsSupersetOf__IEnumerable_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if &#39;other&#39; is a superset of this set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsSupersetOf</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if &#39;other&#39; is a superset of this set</span></div></div></div><div style="display:none" id="code-IsSupersetOf__IEnumerable_T_other_"><div class="section_title">SOURCE</div><div class="code">
            foreach (T item in other)
            {
                if (!Contains(item))
                {
                    return false;
                }
            }
            return true;
        </div></div></div><div class="member-title"><a name="Length"></a>Length()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Length__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the number of elements in the set </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">Length</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of elements</span></div></div></div><div style="display:none" id="code-Length__"><div class="section_title">SOURCE</div><div class="code">
            Count</div></div></div><div class="member-title"><a name="Map&lt;U>"></a>Map&lt;U&gt;(Func&lt;T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_U_Func_T_U_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the values of this set into a new set of values using the mapper function to tranform the source values. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">U</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">U</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">U</span>&gt;</div><div class="normal"><span >Mapped Set</span></div></div></div><div style="display:none" id="code-Map_U_Func_T_U_map_"><div class="section_title">SOURCE</div><div class="code">
            new Set&lt;U&gt;(this.AsEnumerable().Select(map), true)</div></div></div><div class="member-title"><a name="Multiply"></a>Multiply(Set&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Multiply__Set_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Multiply operator - runs through every combination of items in the two sets and performs a multiply operation on them; and then puts the result in a new distinct set. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right hand side set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Multiply</span>(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Product of the two sets</span></div></div></div><div style="display:none" id="code-Multiply__Set_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            new Set&lt;T&gt;((from x in this.AsEnumerable()
                        from y in rhs.AsEnumerable()
                        select TypeDesc.Multiply(x, y, TypeDesc&lt;T&gt;.Default)), true)</div></div></div><div class="member-title"><a name="Overlaps"></a>Overlaps(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Overlaps__IEnumerable_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if other overlaps this set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Overlaps</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if other overlaps this set</span></div></div></div><div style="display:none" id="code-Overlaps__IEnumerable_T_other_"><div class="section_title">SOURCE</div><div class="code">
            if (IsEmpty)
            {
                return false;
            }

            foreach (T item in other)
            {
                if (Contains(item))
                {
                    return true;
                }
            }
            return false;
        </div></div></div><div class="member-title"><a name="Remove"></a>Remove(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Remove__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Removes an item from the set (if it exists) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Value to check</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Remove</span>(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >New set with item removed</span></div></div></div><div style="display:none" id="code-Remove__T__value_"><div class="section_title">SOURCE</div><div class="code">
            new Set&lt;T&gt;(SetModule.Remove(set, value, Comparer&lt;T&gt;.Default))</div></div></div><div class="member-title"><a name="SetEquals"></a>SetEquals(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SetEquals__IEnumerable_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if both sets contain the same elements </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Other distinct set to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">SetEquals</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the sets are equal</span></div></div></div><div style="display:none" id="code-SetEquals__IEnumerable_T_other_"><div class="section_title">SOURCE</div><div class="code">
            var rhs = new Set&lt;T&gt;(other);
            if (rhs.Count() != Count) return false;
            foreach (var item in rhs)
            {
                if (!Contains(item)) return false;
            }
            return true;
        </div></div></div><div class="member-title"><a name="Subtract"></a>Subtract(Set&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subtract__Set_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subtract operator - performs a difference of the two sets </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right hand side set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Subtract</span>(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Differenced set</span></div></div></div><div style="display:none" id="code-Subtract__Set_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            var self = this;
            foreach (var item in rhs)
            {
                self = self.Remove(item);
            }
            return self;
        </div></div></div><div class="member-title"><a name="SymmetricExcept"></a>SymmetricExcept(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SymmetricExcept__IEnumerable_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Only items that are in one set or the other will be returned. If an item is in both, it is dropped. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">SymmetricExcept</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SymmetricExcept__IEnumerable_T_other_"><div class="section_title">SOURCE</div><div class="code">
            var rhs = new Set&lt;T&gt;(other);
            var res = new List&lt;T&gt;();

            foreach (var item in this)
            {
                if (!rhs.Contains(item))
                {
                    res.Add(item);
                }
            }

            foreach (var item in other)
            {
                if (!Contains(item))
                {
                    res.Add(item);
                }
            }

            return new Set&lt;T&gt;(res);
        </div></div></div><div class="member-title"><a name="SymmetricExceptWith"></a>SymmetricExceptWith(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SymmetricExceptWith__IEnumerable_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;SymmetricExceptWith can&#39;t be implemented because this type is immutable&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">void</span> <span class="ident">SymmetricExceptWith</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; other)</div></div><div style="display:none" id="code-SymmetricExceptWith__IEnumerable_T_other_"><div class="section_title">SOURCE</div><div class="code">
            throw new NotSupportedException();
        </div></div></div><div class="member-title"><a name="TryAdd"></a>TryAdd(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryAdd__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Attempt to add an item to the set.  If an item already exists then return the Set as-is. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Value to add to the set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">TryAdd</span>(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >New set with the item maybe added</span></div></div></div><div style="display:none" id="code-TryAdd__T__value_"><div class="section_title">SOURCE</div><div class="code">
            Contains(value)
                ? this
                : Add(value)</div></div></div><div class="member-title"><a name="Union"></a>Union(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Union__IEnumerable_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the union of two sets and produces a new set with  the results </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Other set to union with</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Union</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A set which contains all items from both sets</span></div></div></div><div style="display:none" id="code-Union__IEnumerable_T_other_"><div class="section_title">SOURCE</div><div class="code">
            var self = this;
            foreach (var item in other)
            {
                self = self.TryAdd(item);
            }
            return self;
        </div></div></div><div class="member-title"><a name="UnionWith"></a>UnionWith(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-UnionWith__IEnumerable_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;UnionWith can&#39;t be implemented because this type is immutable&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">void</span> <span class="ident">UnionWith</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; other)</div></div><div style="display:none" id="code-UnionWith__IEnumerable_T_other_"><div class="section_title">SOURCE</div><div class="code">
            throw new NotSupportedException();
        </div></div></div></div></body></html>