<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="https://louthy.github.io/">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Lst_T.htm">Lst&lt;T&gt;</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#Empty">Empty</a><h3 >PROPERTIES</h3><a class="nav-link" href="#Count">Count</a><a class="nav-link" href="#this">this</a><h3 >METHODS</h3><a class="nav-link" href="#Add">Add(T)</a><a class="nav-link" href="#AddRange">AddRange(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#Append">Append(Lst&lt;T&gt;)</a><a class="nav-link" href="#Clear">Clear()</a><a class="nav-link" href="#Divide">Divide(Lst&lt;T&gt;)</a><a class="nav-link" href="#Equals">Equals(object)</a><a class="nav-link" href="#Equals">Equals(Lst&lt;T&gt;)</a><a class="nav-link" href="#Filter">Filter(Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Fold&lt;S>">Fold&lt;S&gt;(S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#GetEnumerator">GetEnumerator()</a><a class="nav-link" href="#GetHashCode">GetHashCode()</a><a class="nav-link" href="#IndexOf">IndexOf(T, int, int, IEqualityComparer&lt;T&gt;)</a><a class="nav-link" href="#Insert">Insert(int, T)</a><a class="nav-link" href="#InsertRange">InsertRange(int, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#LastIndexOf">LastIndexOf(T, int, int, IEqualityComparer&lt;T&gt;)</a><a class="nav-link" href="#Map&lt;U>">Map&lt;U&gt;(Func&lt;T, U&gt;)</a><a class="nav-link" href="#Multiply">Multiply(Lst&lt;T&gt;)</a><a class="nav-link" href="#Remove">Remove(T)</a><a class="nav-link" href="#Remove">Remove(T, IComparer&lt;T&gt;)</a><a class="nav-link" href="#RemoveAll">RemoveAll(Predicate&lt;T&gt;)</a><a class="nav-link" href="#RemoveAt">RemoveAt(int)</a><a class="nav-link" href="#RemoveRange">RemoveRange(int, int)</a><a class="nav-link" href="#Reverse">Reverse()</a><a class="nav-link" href="#SetItem">SetItem(int, T)</a><a class="nav-link" href="#Skip">Skip(int)</a><a class="nav-link" href="#Subtract">Subtract(Lst&lt;T&gt;)</a></div><div class="content-panel"><h1 >Lst&lt;T&gt; Class</h1><p ><span >Immutable list </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyList</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyCollection</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IMultiplicable</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IDivisible</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Fields</h2><div class="member-title"><a name="Empty"></a>Empty</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Empty list </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Empty</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="Count"></a>Count</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Number of items in the list </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">Count</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="this"></a>this</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Index accessor </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">T</span> <span class="keyword">this</span> [<span class="keyword">int</span> index] { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Add"></a>Add(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Add__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add an item to the end of the list </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Add</span>(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Add__T__value_"><div class="section_title">SOURCE</div><div class="code">
            new Lst&lt;T&gt;(ListModule.Insert(Root, value, Rev ? 0 : Root.Count), Rev)</div></div></div><div class="member-title"><a name="AddRange"></a>AddRange(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddRange__IEnumerable_T_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add a range of items to the end of the list </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">AddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AddRange__IEnumerable_T_items_"><div class="section_title">SOURCE</div><div class="code">
            if (items == null) return this;
            var lst = new List&lt;T&gt;(Rev ? items.Reverse() : items);
            var tree = ListModule.FromList(lst, 0, lst.Count);
            return new Lst&lt;T&gt;(ListModule.Insert(Root, tree, Rev ? 0 : Root.Count), Rev);
        </div></div></div><div class="member-title"><a name="Append"></a>Append(Lst&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Append__Lst_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Append</span>(<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Append__Lst_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            AddRange(rhs)</div></div></div><div class="member-title"><a name="Clear"></a>Clear()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Clear__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Clear the list </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Clear</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Clear__"><div class="section_title">SOURCE</div><div class="code">
            Empty</div></div></div><div class="member-title"><a name="Divide"></a>Divide(Lst&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Divide__Lst_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Divide</span>(<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Divide__Lst_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            (from y in rhs.AsEnumerable()
             from x in this.AsEnumerable()
             select TypeDesc.Divide(x, y, TypeDesc&lt;T&gt;.Default)).Freeze()</div></div></div><div class="member-title"><a name="Equals"></a>Equals(object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__object__obj_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">obj</div><div class="arg-type"><span class="keyword">object</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="keyword">object</span> obj)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Equals__object__obj_"><div class="section_title">SOURCE</div><div class="code">
            !ReferenceEquals(obj,null) &amp;&amp; 
            obj is Lst&lt;T&gt; &amp;&amp; 
            Equals((Lst&lt;T&gt;)obj)</div></div></div><div class="member-title"><a name="Equals"></a>Equals(Lst&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__Lst_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Equals__Lst_T_other_"><div class="section_title">SOURCE</div><div class="code">
            if (ReferenceEquals(this, other)) return true;
            if (ReferenceEquals(other, null)) return false;
            var comparer = EqualityComparer&lt;T&gt;.Default;
            return Count == other.Count &amp;&amp; this.Zip(other, (x, y) =&gt; comparer.Equals(x, y)).ForAll(x =&gt; x);
        </div></div></div><div class="member-title"><a name="Filter"></a>Filter(Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Filter</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Filter__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            var filtered = new List&lt;T&gt;();
            foreach (var item in this)
            {
                if (pred(item))
                {
                    filtered.Add(item);
                }
            }
            var root = ListModule.FromList(filtered, 0, filtered.Count);
            return new Lst&lt;T&gt;(root, Rev);
        </div></div></div><div class="member-title"><a name="Fold&lt;S>"></a>Fold&lt;S&gt;(S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_S_S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">S</span> <span class="ident">Fold</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Fold_S_S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in this)
            {
                state = folder(state, item);
            }
            return state;
        </div></div></div><div class="member-title"><a name="GetEnumerator"></a>GetEnumerator()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetEnumerator__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get enumerator </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerator</span>&lt;<span class="ident">T</span>&gt; <span class="ident">GetEnumerator</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerator</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-GetEnumerator__"><div class="section_title">SOURCE</div><div class="code">
            new ListModule.ListEnumerator&lt;T&gt;(Root,Rev,0)</div></div></div><div class="member-title"><a name="GetHashCode"></a>GetHashCode()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetHashCode__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the hash code Lazily (and once only) calculates the hash from the elements in the list Empty list hash == 0 </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="ident">GetHashCode</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-GetHashCode__"><div class="section_title">SOURCE</div><div class="code">
            if (Count == 0)
            {
                return 0;
            }
            else
            {
                if (HashCode == 0)
                {
                    unchecked
                    {
                        HashCode = Fold(7, (s, x) =&gt; s + x.GetHashCode() * 13);
                    }
                }
                return HashCode;
            }
        </div></div></div><div class="member-title"><a name="IndexOf"></a>IndexOf(T, int, int, IEqualityComparer&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IndexOf__T__item__int__index__int__count__IEqualityComparer_T_equalityComparer_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the index of an item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">count</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">equalityComparer</div><div class="arg-type"><span class="ident">IEqualityComparer</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">IndexOf</span>(<span class="ident">T</span> item, <span class="keyword">int</span> index = 0, <span class="keyword">int</span> count = -1, <span class="ident">IEqualityComparer</span>&lt;<span class="ident">T</span>&gt; equalityComparer = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-IndexOf__T__item__int__index__int__count__IEqualityComparer_T_equalityComparer_"><div class="section_title">SOURCE</div><div class="code">
            count = count == -1
                ? Count
                : count;

            equalityComparer = equalityComparer ?? EqualityComparer&lt;T&gt;.Default;

            if (count == 0) return -1;
            if (index &lt; 0 || index &gt;= Root.Count) throw new IndexOutOfRangeException();

            foreach (var x in Skip(index))
            {
                if (equalityComparer.Equals(x, item))
                {
                    return index;
                }
                index++;
                count--;
                if (count == 0) return -1;
            }
            return -1;
        </div></div></div><div class="member-title"><a name="Insert"></a>Insert(int, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Insert__int__index__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Insert value at specified index </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Insert</span>(<span class="keyword">int</span> index, <span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Insert__int__index__T__value_"><div class="section_title">SOURCE</div><div class="code">
            if (index &lt; 0 || index &gt; Root.Count) throw new IndexOutOfRangeException();
            return new Lst&lt;T&gt;(ListModule.Insert(Root, value, Rev ? Count - index - 1 : index), Rev);
        </div></div></div><div class="member-title"><a name="InsertRange"></a>InsertRange(int, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-InsertRange__int__index__IEnumerable_T_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Insert range of values at specified index </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">InsertRange</span>(<span class="keyword">int</span> index, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-InsertRange__int__index__IEnumerable_T_items_"><div class="section_title">SOURCE</div><div class="code">
            if (items == null) return this;
            if (index &lt; 0 || index &gt; Root.Count) throw new IndexOutOfRangeException();

            var lst = new List&lt;T&gt;(Rev ? items.Reverse() : items);
            var tree = ListModule.FromList(lst, 0, lst.Count);
            return new Lst&lt;T&gt;(ListModule.Insert(Root, tree, Rev ? Count - index - 1 : index), Rev);
        </div></div></div><div class="member-title"><a name="LastIndexOf"></a>LastIndexOf(T, int, int, IEqualityComparer&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-LastIndexOf__T__item__int__index__int__count__IEqualityComparer_T_equalityComparer_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the last index of an item in the list </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">count</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">equalityComparer</div><div class="arg-type"><span class="ident">IEqualityComparer</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">LastIndexOf</span>(<span class="ident">T</span> item, <span class="keyword">int</span> index = 0, <span class="keyword">int</span> count = -1, <span class="ident">IEqualityComparer</span>&lt;<span class="ident">T</span>&gt; equalityComparer = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-LastIndexOf__T__item__int__index__int__count__IEqualityComparer_T_equalityComparer_"><div class="section_title">SOURCE</div><div class="code">
            Count - Reverse().IndexOf(item, index, count, equalityComparer) - 1</div></div></div><div class="member-title"><a name="Map&lt;U>"></a>Map&lt;U&gt;(Func&lt;T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_U_Func_T_U_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">U</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">U</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">U</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Map_U_Func_T_U_map_"><div class="section_title">SOURCE</div><div class="code">
            new Lst&lt;U&gt;(ListModule.Map(Root,map),Rev)</div></div></div><div class="member-title"><a name="Multiply"></a>Multiply(Lst&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Multiply__Lst_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Multiply</span>(<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Multiply__Lst_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            (from x in this.AsEnumerable()
             from y in rhs.AsEnumerable()
             select TypeDesc.Multiply(x, y, TypeDesc&lt;T&gt;.Default)).Freeze()</div></div></div><div class="member-title"><a name="Remove"></a>Remove(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Remove__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Remove an item from the list </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Remove</span>(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Remove__T__value_"><div class="section_title">SOURCE</div><div class="code"> 
            Remove(value, Comparer&lt;T&gt;.Default)</div></div></div><div class="member-title"><a name="Remove"></a>Remove(T, IComparer&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Remove__T__value__IComparer_T_equalityComparer_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Remove an item from the list </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">equalityComparer</div><div class="arg-type"><span class="ident">IComparer</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Remove</span>(<span class="ident">T</span> value, <span class="ident">IComparer</span>&lt;<span class="ident">T</span>&gt; equalityComparer)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Remove__T__value__IComparer_T_equalityComparer_"><div class="section_title">SOURCE</div><div class="code">
            var index = ListModule.Find(Root, value, 0, Count, equalityComparer);
            return index &gt;= 0 &amp;&amp; index &lt; Count
                ? new Lst&lt;T&gt;(ListModule.Remove(Root, index), Rev)
                : this;
        </div></div></div><div class="member-title"><a name="RemoveAll"></a>RemoveAll(Predicate&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-RemoveAll__Predicate_T_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Remove all items that match a predicate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Predicate</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">RemoveAll</span>(<span class="ident">Predicate</span>&lt;<span class="ident">T</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-RemoveAll__Predicate_T_pred_"><div class="section_title">SOURCE</div><div class="code">
            var self = this;
            int index = 0;
            foreach (var item in this)
            {
                if (pred(item))
                {
                    self = self.RemoveAt(index);
                }
                else
                {
                    index++;
                }
            }
            return self;
        </div></div></div><div class="member-title"><a name="RemoveAt"></a>RemoveAt(int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-RemoveAt__int__index_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Remove item at location </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc"></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">RemoveAt</span>(<span class="keyword">int</span> index)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span ></span></div></div></div><div style="display:none" id="code-RemoveAt__int__index_"><div class="section_title">SOURCE</div><div class="code">
            if (index &lt; 0 || index &gt;= Root.Count) throw new IndexOutOfRangeException();
            return new Lst&lt;T&gt;(ListModule.Remove(Root, Rev ? Count - index - 1 : index), Rev);
        </div></div></div><div class="member-title"><a name="RemoveRange"></a>RemoveRange(int, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-RemoveRange__int__index__int__count_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Remove a range of items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">count</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">RemoveRange</span>(<span class="keyword">int</span> index, <span class="keyword">int</span> count)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-RemoveRange__int__index__int__count_"><div class="section_title">SOURCE</div><div class="code">
            if (index &lt; 0 || index &gt;= Root.Count) throw new IndexOutOfRangeException();
            if (index + count &gt;= Root.Count) throw new IndexOutOfRangeException();

            var self = this;
            for (; count &gt; 0; count--)
            {
                self = self.RemoveAt(index);
            }
            return self;
        </div></div></div><div class="member-title"><a name="Reverse"></a>Reverse()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Reverse__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reverse the order of the items in the list </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Reverse</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Reverse__"><div class="section_title">SOURCE</div><div class="code">
            // This is currenty buggy, so going the safe (and less efficient) route for now
            // return new Lst&lt;T&gt;(Root, !Rev);
            return new Lst&lt;T&gt;(this.AsEnumerable().Reverse());
        </div></div></div><div class="member-title"><a name="SetItem"></a>SetItem(int, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SetItem__int__index__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Set an item at the specified index </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">SetItem</span>(<span class="keyword">int</span> index, <span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SetItem__int__index__T__value_"><div class="section_title">SOURCE</div><div class="code">
            if (isnull(value)) throw new ArgumentNullException(nameof(value));
            if (index &lt; 0 || index &gt;= Root.Count) throw new IndexOutOfRangeException();
            return new Lst&lt;T&gt;(ListModule.SetItem(Root,value,index),Rev);
        </div></div></div><div class="member-title"><a name="Skip"></a>Skip(int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Skip__int__amount_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">amount</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Skip</span>(<span class="keyword">int</span> amount)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Skip__int__amount_"><div class="section_title">SOURCE</div><div class="code">
            var iter = new ListModule.ListEnumerator&lt;T&gt;(Root, Rev, amount);
            while (iter.MoveNext())
            {
                yield return iter.Current;
            }
        </div></div></div><div class="member-title"><a name="Subtract"></a>Subtract(Lst&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subtract__Lst_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Subtract</span>(<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Subtract__Lst_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            var self = this;
            foreach (var item in rhs)
            {
                self = self.Remove(item);
            }
            return self;
        </div></div></div></div></body></html>