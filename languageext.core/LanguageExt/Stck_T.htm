<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="https://louthy.github.io/">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Stck_T.htm">Stck&lt;T&gt;</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#Empty">Empty</a><h3 >PROPERTIES</h3><a class="nav-link" href="#Count">Count</a><a class="nav-link" href="#IsEmpty">IsEmpty</a><h3 >METHODS</h3><a class="nav-link" href="#Append">Append(Stck&lt;T&gt;)</a><a class="nav-link" href="#AsEnumerable">AsEnumerable()</a><a class="nav-link" href="#Clear">Clear()</a><a class="nav-link" href="#GetEnumerator">GetEnumerator()</a><a class="nav-link" href="#Peek">Peek()</a><a class="nav-link" href="#Peek">Peek(Action&lt;T&gt;, Action)</a><a class="nav-link" href="#Peek&lt;R>">Peek&lt;R&gt;(Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#Pop">Pop()</a><a class="nav-link" href="#Pop">Pop(Action&lt;T&gt;, Action)</a><a class="nav-link" href="#Pop&lt;R>">Pop&lt;R&gt;(Func&lt;Stck&lt;T&gt;, T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#Push">Push(T)</a><a class="nav-link" href="#Reverse">Reverse()</a><a class="nav-link" href="#TryPeek">TryPeek()</a><a class="nav-link" href="#TryPop">TryPop()</a></div><div class="content-panel"><h1 >Stck&lt;T&gt; Class</h1><p ><span >Immutable stack </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Fields</h2><div class="member-title"><a name="Empty"></a>Empty</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Empty</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="Count"></a>Count</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Number of items in the stack </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">Count</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IsEmpty"></a>IsEmpty</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >True if the stack is empty </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsEmpty</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Append"></a>Append(Stck&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Append__Stck_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append another stack to the top of this stack The rhs will be reversed and pushed onto &#39;this&#39; stack.  That will maintain the order of the items in the resulting stack.  So the top of &#39;rhs&#39; will be the top of the newly created stack.  &#39;this&#39; stack will be under the &#39;rhs&#39; stack. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack to append</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Append</span>(<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Appended stacks</span></div></div></div><div style="display:none" id="code-Append__Stck_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            var self = this;
            foreach (var item in rhs.Rev())
            {
                self = self.Push(item);
            }
            return self;
        </div></div></div><div class="member-title"><a name="AsEnumerable"></a>AsEnumerable()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the stack as an IEnumerable.  The first item in the enumerable will be the item at the top of the stack. </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">AsEnumerable</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >IEnumerable of T</span></div></div></div><div style="display:none" id="code-AsEnumerable__"><div class="section_title">SOURCE</div><div class="code">
            var self = this;
            while (self.Count != 0)
            {
                yield return self.value;
                self = self.tail;
            }
        </div></div></div><div class="member-title"><a name="Clear"></a>Clear()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Clear__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Clear the stack (returns Empty) </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Clear</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Stck.Empty of T</span></div></div></div><div style="display:none" id="code-Clear__"><div class="section_title">SOURCE</div><div class="code">
            Empty</div></div></div><div class="member-title"><a name="GetEnumerator"></a>GetEnumerator()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetEnumerator__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get enumerator </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerator</span>&lt;<span class="ident">T</span>&gt; <span class="ident">GetEnumerator</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerator</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >IEnumerator of T</span></div></div></div><div style="display:none" id="code-GetEnumerator__"><div class="section_title">SOURCE</div><div class="code">
            AsEnumerable().GetEnumerator()</div></div></div><div class="member-title"><a name="Peek"></a>Peek()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Peek__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return the item on the top of the stack without affecting the stack itself NOTE: Will throw an InvalidOperationException if the stack is empty </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">T</span> <span class="ident">Peek</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Top item value</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">InvalidOperationException</div><div class="normal"><span >Stack is empty</span></div></div></div><div style="display:none" id="code-Peek__"><div class="section_title">SOURCE</div><div class="code">
            if (Count &gt; 0)
            {
                return value;
            }
            else
            {
                throw new InvalidOperationException(&quot;Stack is empty&quot;);
            }
        </div></div></div><div class="member-title"><a name="Peek"></a>Peek(Action&lt;T&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Peek__Action_T_Some__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Peek and match </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Handler if there is a value on the top of the stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc">Handler if the stack is empty</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Peek</span>(<span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Some, <span class="ident">Action</span> None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Untouched stack (this)</span></div></div></div><div style="display:none" id="code-Peek__Action_T_Some__Action__None_"><div class="section_title">SOURCE</div><div class="code">
            if (Count &gt; 0)
            {
                Some(value);
            }
            else
            {
                None();
            }
            return this;
        </div></div></div><div class="member-title"><a name="Peek&lt;R>"></a>Peek&lt;R&gt;(Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Peek_R_Func_T_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Peek and match </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Handler if there is a value on the top of the stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">Handler if the stack is empty</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">Peek</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Return value from Some or None</span></div></div></div><div style="display:none" id="code-Peek_R_Func_T_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            Count &gt; 0
                ? Some(value)
                : None()</div></div></div><div class="member-title"><a name="Pop"></a>Pop()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Pop__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pop an item off the top of the stack NOTE: Will throw an InvalidOperationException if the stack is empty </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Pop</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Stack with the top item popped</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">InvalidOperationException</div><div class="normal"><span >Stack is empty</span></div></div></div><div style="display:none" id="code-Pop__"><div class="section_title">SOURCE</div><div class="code">
            if (Count &gt; 0)
            {
                return tail;
            }
            else
            {
                throw new InvalidOperationException(&quot;Stack is empty&quot;);
            }
        </div></div></div><div class="member-title"><a name="Pop"></a>Pop(Action&lt;T&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Pop__Action_T_Some__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pop and match </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Handler if there is a value on the top of the stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc">Handler if the stack is empty</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Pop</span>(<span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Some, <span class="ident">Action</span> None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Popped stack</span></div></div></div><div style="display:none" id="code-Pop__Action_T_Some__Action__None_"><div class="section_title">SOURCE</div><div class="code">
            if (Count &gt; 0)
            {
                Some(value);
                return tail;
            }
            else
            {
                None();
                return this;
            }
        </div></div></div><div class="member-title"><a name="Pop&lt;R>"></a>Pop&lt;R&gt;(Func&lt;Stck&lt;T&gt;, T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Pop_R_Func_Stck&lt;T>_T_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pop and match </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Handler if there is a value on the top of the stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">Handler if the stack is empty</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">Pop</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Return value from Some or None</span></div></div></div><div style="display:none" id="code-Pop_R_Func_Stck&lt;T>_T_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            Count &gt; 0
                ? Some(tail, value)
                : None()</div></div></div><div class="member-title"><a name="Push"></a>Push(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Push__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Push an item onto the stack </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Item to push</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Push</span>(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >New stack with the pushed item on top</span></div></div></div><div style="display:none" id="code-Push__T__value_"><div class="section_title">SOURCE</div><div class="code">
            new Stck&lt;T&gt;(value, this)</div></div></div><div class="member-title"><a name="Reverse"></a>Reverse()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Reverse__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reverses the order of the items in the stack </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Reverse</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span ></span></div></div></div><div style="display:none" id="code-Reverse__"><div class="section_title">SOURCE</div><div class="code">
            var s = new Stck&lt;T&gt;();
            foreach (var item in this)
            {
                s = s.Push(item);
            }
            return s;
        </div></div></div><div class="member-title"><a name="TryPeek"></a>TryPeek()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryPeek__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Safely return the item on the top of the stack without affecting the stack itself </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">TryPeek</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Returns the top item value, or None</span></div></div></div><div style="display:none" id="code-TryPeek__"><div class="section_title">SOURCE</div><div class="code">
            Count &gt; 0
                ? Prelude.Some(value)
                : Prelude.None</div></div></div><div class="member-title"><a name="TryPop"></a>TryPop()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryPop__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Safe pop </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Tuple</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">TryPop</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >Tuple of popped stack and optional top-of-stack value</span></div></div></div><div style="display:none" id="code-TryPop__"><div class="section_title">SOURCE</div><div class="code">
            Count &gt; 0
                ? Tuple.Create(tail, Prelude.Some(value))
                : Tuple.Create&lt;Stck&lt;T&gt;, Option&lt;T&gt;&gt;(this, Prelude.None)</div></div></div></div></body></html>