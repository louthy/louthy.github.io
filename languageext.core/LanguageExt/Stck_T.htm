<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Stck_T.htm">Stck&lt;T&gt;</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#Empty">Empty</a><h3 >PROPERTIES</h3><a class="nav-link" href="#Count">Count</a><a class="nav-link" href="#IsEmpty">IsEmpty</a><h3 >METHODS</h3><a class="nav-link" href="#Append">Append(Stck&lt;T&gt;)</a><a class="nav-link" href="#AsEnumerable">AsEnumerable()</a><a class="nav-link" href="#Clear">Clear()</a><a class="nav-link" href="#GetEnumerator">GetEnumerator()</a><a class="nav-link" href="#Peek">Peek()</a><a class="nav-link" href="#Peek">Peek(Action&lt;T&gt;, Action)</a><a class="nav-link" href="#Peek&lt;R>">Peek&lt;R&gt;(Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#Pop">Pop()</a><a class="nav-link" href="#Pop">Pop(Action&lt;T&gt;, Action)</a><a class="nav-link" href="#Pop&lt;R>">Pop&lt;R&gt;(Func&lt;Stck&lt;T&gt;, T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#Push">Push(T)</a><a class="nav-link" href="#Reverse">Reverse()</a><a class="nav-link" href="#TryPeek">TryPeek()</a><a class="nav-link" href="#TryPop">TryPop()</a></div><div class="content-panel"><h1 >Stck&lt;T&gt; Class</h1><p >Immutable stack </p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Fields</h2><div class="member-title"><a name="Empty"></a>Empty</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Empty</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="Count"></a>Count</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Number of items in the stack </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">int</span> <span class="ident">Count</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IsEmpty"></a>IsEmpty</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >True if the stack is empty </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">IsEmpty</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Append"></a>Append(Stck&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Append another stack to the top of this stack The rhs will be reversed and pushed onto &#39;this&#39; stack.  That will maintain the order of the items in the resulting stack.  So the top of &#39;rhs&#39; will be the top of the newly created stack.  &#39;this&#39; stack will be under the &#39;rhs&#39; stack. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack to append</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Append</span>(<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">rhs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Appended stacks</div></div></div></div><div class="member-title"><a name="AsEnumerable"></a>AsEnumerable()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns the stack as an IEnumerable.  The first item in the enumerable will be the item at the top of the stack. </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">AsEnumerable</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">IEnumerable of T</div></div></div></div><div class="member-title"><a name="Clear"></a>Clear()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Clear the stack (returns Empty) </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Clear</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Stck.Empty of T</div></div></div></div><div class="member-title"><a name="GetEnumerator"></a>GetEnumerator()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Get enumerator </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerator</span>&lt;<span class="ident">T</span>&gt; <span class="ident">GetEnumerator</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerator</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">IEnumerator of T</div></div></div></div><div class="member-title"><a name="Peek"></a>Peek()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Return the item on the top of the stack without affecting the stack itself NOTE: Will throw an InvalidOperationException if the stack is empty </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">T</span> <span class="ident">Peek</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal">Top item value</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">InvalidOperationException</div><div class="normal">Stack is empty</div></div></div></div><div class="member-title"><a name="Peek"></a>Peek(Action&lt;T&gt;, Action)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Peek and match </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Handler if there is a value on the top of the stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc">Handler if the stack is empty</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Peek</span>(<span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Some</span>, <span class="ident">Action</span> <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Untouched stack (this)</div></div></div></div><div class="member-title"><a name="Peek&lt;R>"></a>Peek&lt;R&gt;(Func&lt;T, R&gt;, Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Peek and match </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Handler if there is a value on the top of the stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">Handler if the stack is empty</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">Peek</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal">Return value from Some or None</div></div></div></div><div class="member-title"><a name="Pop"></a>Pop()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Pop an item off the top of the stack NOTE: Will throw an InvalidOperationException if the stack is empty </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Pop</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Stack with the top item popped</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">InvalidOperationException</div><div class="normal">Stack is empty</div></div></div></div><div class="member-title"><a name="Pop"></a>Pop(Action&lt;T&gt;, Action)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Pop and match </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Handler if there is a value on the top of the stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc">Handler if the stack is empty</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Pop</span>(<span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Some</span>, <span class="ident">Action</span> <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Popped stack</div></div></div></div><div class="member-title"><a name="Pop&lt;R>"></a>Pop&lt;R&gt;(Func&lt;Stck&lt;T&gt;, T, R&gt;, Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Pop and match </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Handler if there is a value on the top of the stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">Handler if the stack is empty</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">Pop</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal">Return value from Some or None</div></div></div></div><div class="member-title"><a name="Push"></a>Push(T)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Push an item onto the stack </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Item to push</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Push</span>(<span class="ident">T</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">New stack with the pushed item on top</div></div></div></div><div class="member-title"><a name="Reverse"></a>Reverse()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Reverses the order of the items in the stack </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Reverse</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="TryPeek"></a>TryPeek()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Safely return the item on the top of the stack without affecting the stack itself </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">TryPeek</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Returns the top item value, or None</div></div></div></div><div class="member-title"><a name="TryPop"></a>TryPop()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Safe pop </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Tuple</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">TryPop</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal">Tuple of popped stack and optional top-of-stack value</div></div></div></div></div></body></html>