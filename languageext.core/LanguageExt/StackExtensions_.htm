<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="StackExtensions_.htm">StackExtensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Choose&lt;T>">Choose&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, Option&lt;T&gt;&gt;)</a><a class="nav-link" href="#Choose&lt;T>">Choose&lt;T&gt;(Stck&lt;T&gt;, Func&lt;int, T, Option&lt;T&gt;&gt;)</a><a class="nav-link" href="#Collect&lt;T, R>">Collect&lt;T, R&gt;(Stck&lt;T&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;)</a><a class="nav-link" href="#Distinct&lt;T>">Distinct&lt;T&gt;(Stck&lt;T&gt;)</a><a class="nav-link" href="#Distinct&lt;T>">Distinct&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, T, bool&gt;)</a><a class="nav-link" href="#Exists&lt;T>">Exists&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Filter&lt;T>">Filter&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Find&lt;T>">Find&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Fold&lt;S, T>">Fold&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#FoldBack&lt;S, T>">FoldBack&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#FoldBackWhile&lt;S, T>">FoldBackWhile&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#FoldBackWhile&lt;S, T>">FoldBackWhile&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</a><a class="nav-link" href="#FoldWhile&lt;S, T>">FoldWhile&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#FoldWhile&lt;S, T>">FoldWhile&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</a><a class="nav-link" href="#ForAll&lt;T>">ForAll&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Iter&lt;T>">Iter&lt;T&gt;(Stck&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#Iter&lt;T>">Iter&lt;T&gt;(Stck&lt;T&gt;, Action&lt;int, T&gt;)</a><a class="nav-link" href="#Length&lt;T>">Length&lt;T&gt;(Stck&lt;T&gt;)</a><a class="nav-link" href="#Map&lt;T, R>">Map&lt;T, R&gt;(Stck&lt;T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#Map&lt;T, R>">Map&lt;T, R&gt;(Stck&lt;T&gt;, Func&lt;int, T, R&gt;)</a><a class="nav-link" href="#Reduce&lt;T>">Reduce&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, T, T&gt;)</a><a class="nav-link" href="#ReduceBack&lt;T>">ReduceBack&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, T, T&gt;)</a><a class="nav-link" href="#Rev&lt;T>">Rev&lt;T&gt;(Stck&lt;T&gt;)</a><a class="nav-link" href="#Scan&lt;S, T>">Scan&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#ScanBack&lt;S, T>">ScanBack&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#Take&lt;T>">Take&lt;T&gt;(Stck&lt;T&gt;, int)</a><a class="nav-link" href="#TakeWhile&lt;T>">TakeWhile&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#TakeWhile&lt;T>">TakeWhile&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, int, bool&gt;)</a></div><div class="content-panel"><h1 >StackExtensions Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">StackExtensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="Choose&lt;T>"></a>Choose&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, Option&lt;T&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Applies the given function &#39;selector&#39; to each element of the stack. Returns an enumerable comprised of  the results for each element where the function returns Some(f(x)). </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div><div class="arg-desc">Selector function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Choose</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">selector</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Mapped and filtered enumerable</div></div></div></div><div class="member-title"><a name="Choose&lt;T>"></a>Choose&lt;T&gt;(Stck&lt;T&gt;, Func&lt;int, T, Option&lt;T&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Applies the given function &#39;selector&#39; to each element of the stack. Returns an enumerable comprised of  the results for each element where the function returns Some(f(x)). An index value is passed through to the selector function also. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">int</span>, <span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div><div class="arg-desc">Selector function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Choose</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Func</span>&lt;<span class="ident">int</span>, <span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">selector</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Mapped and filtered enumerable</div></div></div></div><div class="member-title"><a name="Collect&lt;T, R>"></a>Collect&lt;T, R&gt;(Stck&lt;T&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >For each element of the stack, applies the given function. Concatenates all the results and  returns the combined list. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack to map</div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Map function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Collect</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">map</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">Mapped enumerable</div></div></div></div><div class="member-title"><a name="Distinct&lt;T>"></a>Distinct&lt;T&gt;(Stck&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Return an enumerable with all duplicate values removed </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Distinct</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">An enumerable with all duplicate values removed</div></div></div></div><div class="member-title"><a name="Distinct&lt;T>"></a>Distinct&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, T, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Return an enumerable with all duplicate values removed </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">compare</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Distinct</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">compare</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">An enumerable with all duplicate values removed</div></div></div></div><div class="member-title"><a name="Exists&lt;T>"></a>Exists&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns true if any item in the stack matches the predicate provided </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">Exists</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if any item in the stack matches the predicate provided</div></div></div></div><div class="member-title"><a name="Filter&lt;T>"></a>Filter&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Removes items from the stack that do not match the given predicate (Where in LINQ) </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack to filter</div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Filter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">predicate</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Filtered stack</div></div></div></div><div class="member-title"><a name="Find&lt;T>"></a>Find&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns Some(x) for the first item in the stack that matches the predicate  provided, None otherwise. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Find</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Some(x) for the first item in the stack that matches the predicate  provided, None otherwise.</div></div></div></div><div class="member-title"><a name="Fold&lt;S, T>"></a>Fold&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Applies a function &#39;folder&#39; to each element of the collection, threading an accumulator  argument through the computation. The fold function takes the state argument, and  applies the function &#39;folder&#39; to it and the first element of the stack. Then, it feeds this  result into the function &#39;folder&#39; along with the second element, and so on. It returns the  final result. (Aggregate in LINQ) </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">Fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">S</span> <span class="ident">state</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; <span class="ident">folder</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal">Aggregate value</div></div></div></div><div class="member-title"><a name="FoldBack&lt;S, T>"></a>FoldBack&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Applies a function &#39;folder&#39; to each element of the collection (from last element to first),  threading an aggregate state through the computation. The fold function takes the state  argument, and applies the function &#39;folder&#39; to it and the first element of the stack. Then,  it feeds this result into the function &#39;folder&#39; along with the second element, and so on. It  returns the final result. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBack</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">S</span> <span class="ident">state</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; <span class="ident">folder</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal">Aggregate value</div></div></div></div><div class="member-title"><a name="FoldBackWhile&lt;S, T>"></a>FoldBackWhile&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Applies a function &#39;folder&#39; to each element of the collection (from last element to first) whilst the predicate function returns true for the item being processed, threading an  aggregate state through the computation. The fold function takes the state argument, and  applies the function &#39;folder&#39; to it and the first element of the stack. Then, it feeds this  result into the function &#39;folder&#39; along with the second element, and so on. It returns the  final result. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">S</span> <span class="ident">state</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; <span class="ident">folder</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal">Aggregate value</div></div></div></div><div class="member-title"><a name="FoldBackWhile&lt;S, T>"></a>FoldBackWhile&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Applies a function &#39;folder&#39; to each element of the collection (from last element to first),  threading an accumulator argument through the computation (and whilst the predicate function  returns true when passed the aggregate state). The fold function takes the state argument,  and applies the function &#39;folder&#39; to it and the first element of the stack. Then, it feeds  this result into the function &#39;folder&#39; along with the second element, and so on. It returns  the final result. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">S</span> <span class="ident">state</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; <span class="ident">folder</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal">Aggregate value</div></div></div></div><div class="member-title"><a name="FoldWhile&lt;S, T>"></a>FoldWhile&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Applies a function &#39;folder&#39; to each element of the collection whilst the predicate function  returns true for the item being processed, threading an aggregate state through the  computation. The fold function takes the state argument, and applies the function &#39;folder&#39;  to it and the first element of the stack. Then, it feeds this result into the function &#39;folder&#39;  along with the second element, and so on. It returns the final result. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">S</span> <span class="ident">state</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; <span class="ident">folder</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal">Aggregate value</div></div></div></div><div class="member-title"><a name="FoldWhile&lt;S, T>"></a>FoldWhile&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Applies a function &#39;folder&#39; to each element of the collection, threading an accumulator  argument through the computation (and whilst the predicate function returns true when passed  the aggregate state). The fold function takes the state argument, and applies the function  &#39;folder&#39; to it and the first element of the stack. Then, it feeds this result into the  function &#39;folder&#39; along with the second element, and so on. It returns the final result.  </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">S</span> <span class="ident">state</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; <span class="ident">folder</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal">Aggregate value</div></div></div></div><div class="member-title"><a name="ForAll&lt;T>"></a>ForAll&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Return an enumerable with all duplicate values removed </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">ForAll</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">An enumerable with all duplicate values removed</div></div></div></div><div class="member-title"><a name="Iter&lt;T>"></a>Iter&lt;T&gt;(Stck&lt;T&gt;, Action&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Invokes an action for each item in the stack in order </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack to iterate</div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Action to invoke with each item</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Iter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; <span class="ident">action</span>)</div></div></div><div class="member-title"><a name="Iter&lt;T>"></a>Iter&lt;T&gt;(Stck&lt;T&gt;, Action&lt;int, T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Invokes an action for each item in the stack in order and supplies a running index value. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack to iterate</div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">int</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc">Action to invoke with each item</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Iter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Action</span>&lt;<span class="ident">int</span>, <span class="ident">T</span>&gt; <span class="ident">action</span>)</div></div></div><div class="member-title"><a name="Length&lt;T>"></a>Length&lt;T&gt;(Stck&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns the number of items in the stack </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">int</span> <span class="ident">Length</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">int</span></div><div class="normal">The number of items in the enumerable</div></div></div></div><div class="member-title"><a name="Map&lt;T, R>"></a>Map&lt;T, R&gt;(Stck&lt;T&gt;, Func&lt;T, R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Projects the values in the stack using a map function into a new enumerable (Select in LINQ). </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack to map</div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Map function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">map</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">Mapped enumerable</div></div></div></div><div class="member-title"><a name="Map&lt;T, R>"></a>Map&lt;T, R&gt;(Stck&lt;T&gt;, Func&lt;int, T, R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Projects the values in the stack using a map function into a new enumerable (Select in LINQ). </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack to map</div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">int</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Map function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Func</span>&lt;<span class="ident">int</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">map</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">Mapped enumerable</div></div></div></div><div class="member-title"><a name="Reduce&lt;T>"></a>Reduce&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, T, T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Applies a function to each element of the collection (from last element to first), threading  an accumulator argument through the computation. This function first applies the function  to the first two elements of the stack. Then, it passes this result into the function along  with the third element and so on. Finally, it returns the final result. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">reducer</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc">Reduce function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">Reduce</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; <span class="ident">reducer</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal">Aggregate value</div></div></div></div><div class="member-title"><a name="ReduceBack&lt;T>"></a>ReduceBack&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, T, T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Applies a function to each element of the collection, threading an accumulator argument  through the computation. This function first applies the function to the first two  elements of the stack. Then, it passes this result into the function along with the third  element and so on. Finally, it returns the final result. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">reducer</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc">Reduce function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ReduceBack</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; <span class="ident">reducer</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal">Aggregate value</div></div></div></div><div class="member-title"><a name="Rev&lt;T>"></a>Rev&lt;T&gt;(Stck&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Reverses the order of the items in the stack </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Rev</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="Scan&lt;S, T>"></a>Scan&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Applies a function to each element of the collection, threading an accumulator argument  through the computation. This function takes the state argument, and applies the function  to it and the first element of the stack. Then, it passes this result into the function  along with the second element, and so on. Finally, it returns the list of intermediate  results and the final result. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Folding function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">S</span>&gt; <span class="ident">Scan</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">S</span> <span class="ident">state</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; <span class="ident">folder</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal">Aggregate state</div></div></div></div><div class="member-title"><a name="ScanBack&lt;S, T>"></a>ScanBack&lt;S, T&gt;(Stck&lt;T&gt;, S, Func&lt;S, T, S&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Applies a function to each element of the collection (from last element to first),  threading an accumulator argument through the computation. This function takes the state  argument, and applies the function to it and the first element of the stack. Then, it  passes this result into the function along with the second element, and so on. Finally,  it returns the list of intermediate results and the final result. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Folding function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">S</span>&gt; <span class="ident">ScanBack</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">S</span> <span class="ident">state</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; <span class="ident">folder</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal">Aggregate state</div></div></div></div><div class="member-title"><a name="Take&lt;T>"></a>Take&lt;T&gt;(Stck&lt;T&gt;, int)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns a new enumerable with the first &#39;count&#39; items from the stack </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">count</div><div class="arg-type"><span class="ident">int</span></div></div><div class="arg-desc">Number of items to take</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Take</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">int</span> <span class="ident">count</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">A new enumerable with the first &#39;count&#39; items from the enumerable provided</div></div></div></div><div class="member-title"><a name="TakeWhile&lt;T>"></a>TakeWhile&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Iterate the stack, yielding items if they match the predicate provided, and stopping  as soon as one doesn&#39;t </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">TakeWhile</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">A new enumerable with the first items that match the predicate</div></div></div></div><div class="member-title"><a name="TakeWhile&lt;T>"></a>TakeWhile&lt;T&gt;(Stck&lt;T&gt;, Func&lt;T, int, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Iterate the stack, yielding items if they match the predicate provided, and stopping  as soon as one doesn&#39;t  An index value is also provided to the predicate function. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">stack</div><div class="arg-type"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Stack</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">int</span>, <span class="ident">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">TakeWhile</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">int</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">A new enumerable with the first items that match the predicate</div></div></div></div></div></body></html>