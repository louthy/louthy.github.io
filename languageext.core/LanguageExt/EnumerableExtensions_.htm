<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="EnumerableExtensions_.htm">EnumerableExtensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Append&lt;T>">Append&lt;T&gt;(IEnumerable&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#Apply&lt;T, R>">Apply&lt;T, R&gt;(IEnumerable&lt;Func&lt;T, R&gt;&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#Apply&lt;T1, T2, R>">Apply&lt;T1, T2, R&gt;(IEnumerable&lt;Func&lt;T1, T2, R&gt;&gt;, IEnumerable&lt;T1&gt;)</a><a class="nav-link" href="#Apply&lt;T1, T2, R>">Apply&lt;T1, T2, R&gt;(IEnumerable&lt;Func&lt;T1, T2, R&gt;&gt;, IEnumerable&lt;T1&gt;, IEnumerable&lt;T2&gt;)</a><a class="nav-link" href="#Bind&lt;T, R>">Bind&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;)</a><a class="nav-link" href="#Bind&lt;T, R>">Bind&lt;T, R&gt;(Lst&lt;T&gt;, Func&lt;T, Lst&lt;R&gt;&gt;)</a><a class="nav-link" href="#BindEnumerable&lt;T, R>">BindEnumerable&lt;T, R&gt;(Lst&lt;T&gt;, Func&lt;T, Lst&lt;R&gt;&gt;)</a><a class="nav-link" href="#Choose&lt;T>">Choose&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, Option&lt;T&gt;&gt;)</a><a class="nav-link" href="#Choose&lt;T>">Choose&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;int, T, Option&lt;T&gt;&gt;)</a><a class="nav-link" href="#Collect&lt;T, R>">Collect&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;)</a><a class="nav-link" href="#Count&lt;T>">Count&lt;T&gt;(Lst&lt;T&gt;)</a><a class="nav-link" href="#Distinct&lt;T>">Distinct&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, T, bool&gt;)</a><a class="nav-link" href="#Exists&lt;T>">Exists&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Filter&lt;T>">Filter&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Find&lt;T>">Find&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#FindSeq&lt;T>">FindSeq&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Fold&lt;S, T>">Fold&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#FoldBack&lt;S, T>">FoldBack&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#FoldBackUntil&lt;S, T>">FoldBackUntil&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#FoldBackUntil&lt;S, T>">FoldBackUntil&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</a><a class="nav-link" href="#FoldBackWhile&lt;S, T>">FoldBackWhile&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#FoldBackWhile&lt;S, T>">FoldBackWhile&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</a><a class="nav-link" href="#FoldUntil&lt;S, T>">FoldUntil&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#FoldUntil&lt;S, T>">FoldUntil&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</a><a class="nav-link" href="#FoldWhile&lt;S, T>">FoldWhile&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#FoldWhile&lt;S, T>">FoldWhile&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</a><a class="nav-link" href="#ForAll&lt;T>">ForAll&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Freeze&lt;T>">Freeze&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#Head&lt;T>">Head&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#HeadOrNone&lt;T>">HeadOrNone&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#HeadSafe&lt;T>">HeadSafe&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#Iter&lt;T>">Iter&lt;T&gt;(IEnumerable&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#Iter&lt;T>">Iter&lt;T&gt;(IEnumerable&lt;T&gt;, Action&lt;int, T&gt;)</a><a class="nav-link" href="#Length&lt;T>">Length&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#Map&lt;T, R>">Map&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#Map&lt;T, R>">Map&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;int, T, R&gt;)</a><a class="nav-link" href="#Match&lt;T, R>">Match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, IEnumerable&lt;T&gt;, R&gt;)</a><a class="nav-link" href="#Match&lt;T, R>">Match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, IEnumerable&lt;T&gt;, R&gt;)</a><a class="nav-link" href="#Match&lt;T, R>">Match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, IEnumerable&lt;T&gt;, R&gt;)</a><a class="nav-link" href="#Match&lt;T, R>">Match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, IEnumerable&lt;T&gt;, R&gt;)</a><a class="nav-link" href="#Match&lt;T, R>">Match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, T, R&gt;, Func&lt;T, T, T, T, IEnumerable&lt;T&gt;, R&gt;)</a><a class="nav-link" href="#Match&lt;T, R>">Match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, IEnumerable&lt;T&gt;, R&gt;)</a><a class="nav-link" href="#Match&lt;T, R>">Match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, T, IEnumerable&lt;T&gt;, R&gt;)</a><a class="nav-link" href="#ParMap&lt;T1, T2, R>">ParMap&lt;T1, T2, R&gt;(IEnumerable&lt;T1&gt;, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#ParMap&lt;T1, T2, T3, R>">ParMap&lt;T1, T2, T3, R&gt;(IEnumerable&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#Reduce&lt;T>">Reduce&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, T, T&gt;)</a><a class="nav-link" href="#ReduceBack&lt;T>">ReduceBack&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, T, T&gt;)</a><a class="nav-link" href="#Rev&lt;T>">Rev&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#Rev&lt;T>">Rev&lt;T&gt;(Lst&lt;T&gt;)</a><a class="nav-link" href="#Scan&lt;S, T>">Scan&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#ScanBack&lt;S, T>">ScanBack&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#Select&lt;T, U>">Select&lt;T, U&gt;(Lst&lt;T&gt;, Func&lt;T, U&gt;)</a><a class="nav-link" href="#SelectMany&lt;T, U, V>">SelectMany&lt;T, U, V&gt;(Lst&lt;T&gt;, Func&lt;T, Lst&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#SelectMany&lt;T, U, V>">SelectMany&lt;T, U, V&gt;(Lst&lt;T&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#SelectMany&lt;T, U, V>">SelectMany&lt;T, U, V&gt;(IEnumerable&lt;T&gt;, Func&lt;T, Lst&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#Span&lt;T>">Span&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Tail&lt;T>">Tail&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#Tails&lt;T>">Tails&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#Zip&lt;T, U>">Zip&lt;T, U&gt;(IEnumerable&lt;T&gt;, IEnumerable&lt;U&gt;)</a></div><div class="content-panel"><h1 >EnumerableExtensions Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">EnumerableExtensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="Append&lt;T>"></a>Append&lt;T&gt;(IEnumerable&lt;T&gt;, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Append_T_IEnumerable_T_lhs__IEnumerable_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Concatenate two enumerables (Concat in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">First enumerable</div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Second enumerable</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Append</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Concatenated enumerable</span></div></div></div><div style="display:none" id="code-Append_T_IEnumerable_T_lhs__IEnumerable_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.append(lhs, rhs)</div></div></div><div class="member-title"><a name="Apply&lt;T, R>"></a>Apply&lt;T, R&gt;(IEnumerable&lt;Func&lt;T, R&gt;&gt;, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_T_R_IEnumerable_Func&lt;T, R>_self__IEnumerable_T_arg_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply an IEnumerable of values to an IEnumerable of functions </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">arg</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">IEnumerable of argument values</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; arg)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Returns the result of applying the IEnumerable argument values to the IEnumerable functions</span></div></div></div><div style="display:none" id="code-Apply_T_R_IEnumerable_Func&lt;T, R>_self__IEnumerable_T_arg_"><div class="section_title">SOURCE</div><div class="code">
            from f in self
            from x in arg
            select f(x)</div></div></div><div class="member-title"><a name="Apply&lt;T1, T2, R>"></a>Apply&lt;T1, T2, R&gt;(IEnumerable&lt;Func&lt;T1, T2, R&gt;&gt;, IEnumerable&lt;T1&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_T1_T2_R_IEnumerable_Func&lt;T1, T2, R>_self__IEnumerable_T1_arg_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply an IEnumerable of values to an IEnumerable of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">arg</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T1</span>&gt;</div></div><div class="arg-desc">IEnumerable argument values</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">IEnumerable</span>&lt;<span class="ident">T1</span>&gt; arg)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"><span >Returns the result of applying the IEnumerable of argument values to the  IEnumerable of functions: an IEnumerable of functions of arity 1</span></div></div></div><div style="display:none" id="code-Apply_T1_T2_R_IEnumerable_Func&lt;T1, T2, R>_self__IEnumerable_T1_arg_"><div class="section_title">SOURCE</div><div class="code">
            from f in self
            let c = curry(f)
            from x in arg
            select c(x)</div></div></div><div class="member-title"><a name="Apply&lt;T1, T2, R>"></a>Apply&lt;T1, T2, R&gt;(IEnumerable&lt;Func&lt;T1, T2, R&gt;&gt;, IEnumerable&lt;T1&gt;, IEnumerable&lt;T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_T1_T2_R_IEnumerable_Func&lt;T1, T2, R>_self__IEnumerable_T1_arg1__IEnumerable_T2_arg2_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply IEnumerable of values to an IEnumerable of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">arg1</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T1</span>&gt;</div></div><div class="arg-desc">IEnumerable of arguments</div></div><div class="arg"><div class="arg-header"><div class="arg-name">arg2</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T2</span>&gt;</div></div><div class="arg-desc">IEnumerable of arguments</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">IEnumerable</span>&lt;<span class="ident">T1</span>&gt; arg1, <span class="ident">IEnumerable</span>&lt;<span class="ident">T2</span>&gt; arg2)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Returns the result of applying the IEnumerables of arguments to the IEnumerable of functions</span></div></div></div><div style="display:none" id="code-Apply_T1_T2_R_IEnumerable_Func&lt;T1, T2, R>_self__IEnumerable_T1_arg1__IEnumerable_T2_arg2_"><div class="section_title">SOURCE</div><div class="code">
            self.Apply(arg1).Apply(arg2)</div></div></div><div class="member-title"><a name="Bind&lt;T, R>"></a>Bind&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_T_R_IEnumerable_T_self__Func_T_IEnumerable&lt;R>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind function for IEnumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Bind_T_R_IEnumerable_T_self__Func_T_IEnumerable&lt;R>_binder_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var t in self)
            {
                foreach (var u in binder(t))
                {
                    yield return u;
                }
            }
        </div></div></div><div class="member-title"><a name="Bind&lt;T, R>"></a>Bind&lt;T, R&gt;(Lst&lt;T&gt;, Func&lt;T, Lst&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_T_R_Lst_T_self__Func_T_Lst&lt;R>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Bind_T_R_Lst_T_self__Func_T_Lst&lt;R>_binder_"><div class="section_title">SOURCE</div><div class="code">
            new Lst&lt;R&gt;(self.BindEnumerable(binder))</div></div></div><div class="member-title"><a name="BindEnumerable&lt;T, R>"></a>BindEnumerable&lt;T, R&gt;(Lst&lt;T&gt;, Func&lt;T, Lst&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindEnumerable_T_R_Lst_T_self__Func_T_Lst&lt;R>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind function for Lst that returns an IEnumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">BindEnumerable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BindEnumerable_T_R_Lst_T_self__Func_T_Lst&lt;R>_binder_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var t in self)
            {
                foreach (var u in binder(t))
                {
                    yield return u;
                }
            }
        </div></div></div><div class="member-title"><a name="Choose&lt;T>"></a>Choose&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, Option&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Choose_T_IEnumerable_T_list__Func_T_Option&lt;T>_selector_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies the given function &#39;selector&#39; to each element of the list. Returns the list comprised of  the results for each element where the function returns Some(f(x)). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable</div></div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div><div class="arg-desc">Selector function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Choose</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; selector)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Mapped and filtered enumerable</span></div></div></div><div style="display:none" id="code-Choose_T_IEnumerable_T_list__Func_T_Option&lt;T>_selector_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.choose(list, selector)</div></div></div><div class="member-title"><a name="Choose&lt;T>"></a>Choose&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;int, T, Option&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Choose_T_IEnumerable_T_list__Func_int_T_Option&lt;T>_selector_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies the given function &#39;selector&#39; to each element of the list. Returns the list comprised of  the results for each element where the function returns Some(f(x)). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable</div></div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div><div class="arg-desc">Selector function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Choose</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; selector)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Mapped and filtered enumerable</span></div></div></div><div style="display:none" id="code-Choose_T_IEnumerable_T_list__Func_int_T_Option&lt;T>_selector_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.choose(list, selector)</div></div></div><div class="member-title"><a name="Collect&lt;T, R>"></a>Collect&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Collect_T_R_IEnumerable_T_list__Func_T_IEnumerable&lt;R>_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >For each element of the list, applies the given function. Concatenates all the results and  returns the combined list. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to map</div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Map function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Collect</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped enumerable</span></div></div></div><div style="display:none" id="code-Collect_T_R_IEnumerable_T_list__Func_T_IEnumerable&lt;R>_map_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.collect(list, map)</div></div></div><div class="member-title"><a name="Count&lt;T>"></a>Count&lt;T&gt;(Lst&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Count_T_Lst_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the number of items in the Lst T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">Count</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >The number of items in the list</span></div></div></div><div style="display:none" id="code-Count_T_Lst_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Count</div></div></div><div class="member-title"><a name="Distinct&lt;T>"></a>Distinct&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Distinct_T_IEnumerable_T_list__Func_T_T_bool_compare_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return a new enumerable with all duplicate values removed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable</div></div><div class="arg"><div class="arg-header"><div class="arg-name">compare</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Distinct</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="keyword">bool</span>&gt; compare)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A new enumerable with all duplicate values removed</span></div></div></div><div style="display:none" id="code-Distinct_T_IEnumerable_T_list__Func_T_T_bool_compare_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.distinct(list, compare)</div></div></div><div class="member-title"><a name="Exists&lt;T>"></a>Exists&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists_T_IEnumerable_T_list__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any item in the enumerable matches the predicate provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to test</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">Exists</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any item in the enumerable matches the predicate provided</span></div></div></div><div style="display:none" id="code-Exists_T_IEnumerable_T_list__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.exists(list, pred)</div></div></div><div class="member-title"><a name="Filter&lt;T>"></a>Filter&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter_T_IEnumerable_T_list__Func_T_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Removes items from the list that do not match the given predicate (Where in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to filter</div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Filter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Filtered enumerable</span></div></div></div><div style="display:none" id="code-Filter_T_IEnumerable_T_list__Func_T_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.filter(list, predicate)</div></div></div><div class="member-title"><a name="Find&lt;T>"></a>Find&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Find_T_IEnumerable_T_list__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns Some(x) for the first item in the list that matches the predicate  provided, None otherwise. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to search</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Find</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Some(x) for the first item in the list that matches the predicate  provided, None otherwise.</span></div></div></div><div style="display:none" id="code-Find_T_IEnumerable_T_list__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.find(list, pred)</div></div></div><div class="member-title"><a name="FindSeq&lt;T>"></a>FindSeq&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FindSeq_T_IEnumerable_T_list__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns [x] for the first item in the list that matches the predicate  provided, [] otherwise. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to search</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">FindSeq</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >[x] for the first item in the list that matches the predicate  provided, [] otherwise.</span></div></div></div><div style="display:none" id="code-FindSeq_T_IEnumerable_T_list__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.findSeq(list, pred)</div></div></div><div class="member-title"><a name="Fold&lt;S, T>"></a>Fold&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection, threading an accumulator  argument through the computation. The fold function takes the state argument, and  applies the function &#39;folder&#39; to it and the first element of the list. Then, it feeds this  result into the function &#39;folder&#39; along with the second element, and so on. It returns the  final result. (Aggregate in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">Fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-Fold_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.fold(list, state, folder)</div></div></div><div class="member-title"><a name="FoldBack&lt;S, T>"></a>FoldBack&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBack_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection (from last element to first),  threading an aggregate state through the computation. The fold function takes the state  argument, and applies the function &#39;folder&#39; to it and the first element of the list. Then,  it feeds this result into the function &#39;folder&#39; along with the second element, and so on. It  returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBack</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldBack_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.foldBack(list, state, folder)</div></div></div><div class="member-title"><a name="FoldBackUntil&lt;S, T>"></a>FoldBackUntil&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackUntil_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection (from last element to first) whilst the predicate function returns False for the item being processed, threading an  aggregate state through the computation. The fold function takes the state argument, and  applies the function &#39;folder&#39; to it and the first element of the list. Then, it feeds this  result into the function &#39;folder&#39; along with the second element, and so on. It returns the  final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackUntil</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldBackUntil_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.foldBackUntil(list, state, folder, pred)</div></div></div><div class="member-title"><a name="FoldBackUntil&lt;S, T>"></a>FoldBackUntil&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackUntil_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection (from last element to first),  threading an accumulator argument through the computation (and whilst the predicate function  returns False when passed the aggregate state). The fold function takes the state argument,  and applies the function &#39;folder&#39; to it and the first element of the list. Then, it feeds  this result into the function &#39;folder&#39; along with the second element, and so on. It returns  the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackUntil</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldBackUntil_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.foldBackUntil(list, state, folder, pred)</div></div></div><div class="member-title"><a name="FoldBackWhile&lt;S, T>"></a>FoldBackWhile&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackWhile_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection (from last element to first) whilst the predicate function returns True for the item being processed, threading an  aggregate state through the computation. The fold function takes the state argument, and  applies the function &#39;folder&#39; to it and the first element of the list. Then, it feeds this  result into the function &#39;folder&#39; along with the second element, and so on. It returns the  final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldBackWhile_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.foldBackWhile(list, state, folder, pred)</div></div></div><div class="member-title"><a name="FoldBackWhile&lt;S, T>"></a>FoldBackWhile&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackWhile_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection (from last element to first),  threading an accumulator argument through the computation (and whilst the predicate function  returns True when passed the aggregate state). The fold function takes the state argument,  and applies the function &#39;folder&#39; to it and the first element of the list. Then, it feeds  this result into the function &#39;folder&#39; along with the second element, and so on. It returns  the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldBackWhile_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.foldBackWhile(list, state, folder, pred)</div></div></div><div class="member-title"><a name="FoldUntil&lt;S, T>"></a>FoldUntil&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldUntil_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection whilst the predicate function  returns False for the item being processed, threading an aggregate state through the  computation. The fold function takes the state argument, and applies the function &#39;folder&#39;  to it and the first element of the list. Then, it feeds this result into the function &#39;folder&#39;  along with the second element, and so on. It returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldUntil</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldUntil_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.foldUntil&lt;S, T&gt;(list, state, folder, pred)</div></div></div><div class="member-title"><a name="FoldUntil&lt;S, T>"></a>FoldUntil&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldUntil_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection, threading an accumulator  argument through the computation (and whilst the predicate function returns False when passed  the aggregate state). The fold function takes the state argument, and applies the function  &#39;folder&#39; to it and the first element of the list. Then, it feeds this result into the  function &#39;folder&#39; along with the second element, and so on. It returns the final result.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldUntil</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldUntil_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.foldUntil(list, state, folder, pred)</div></div></div><div class="member-title"><a name="FoldWhile&lt;S, T>"></a>FoldWhile&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldWhile_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection whilst the predicate function  returns True for the item being processed, threading an aggregate state through the  computation. The fold function takes the state argument, and applies the function &#39;folder&#39;  to it and the first element of the list. Then, it feeds this result into the function &#39;folder&#39;  along with the second element, and so on. It returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldWhile_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.foldWhile(list, state, folder, pred)</div></div></div><div class="member-title"><a name="FoldWhile&lt;S, T>"></a>FoldWhile&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldWhile_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection, threading an accumulator  argument through the computation (and whilst the predicate function returns True when passed  the aggregate state). The fold function takes the state argument, and applies the function  &#39;folder&#39; to it and the first element of the list. Then, it feeds this result into the  function &#39;folder&#39; along with the second element, and so on. It returns the final result.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldWhile_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.foldWhile(list, state, folder, pred)</div></div></div><div class="member-title"><a name="ForAll&lt;T>"></a>ForAll&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll_T_IEnumerable_T_list__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all items in the enumerable match a predicate (Any in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to test</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAll</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the enumerable match the predicate</span></div></div></div><div style="display:none" id="code-ForAll_T_IEnumerable_T_list__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.forall(list, pred)</div></div></div><div class="member-title"><a name="Freeze&lt;T>"></a>Freeze&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Freeze_T_IEnumerable_T_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert any enumerable into an immutable Lst T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to convert</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Freeze</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Lst of T</span></div></div></div><div style="display:none" id="code-Freeze_T_IEnumerable_T_list_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.freeze(list)</div></div></div><div class="member-title"><a name="Head&lt;T>"></a>Head&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Head_T_IEnumerable_T_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the item at the head (first) of the list </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">List</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">Head</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Head item</span></div></div></div><div style="display:none" id="code-Head_T_IEnumerable_T_list_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.head(list)</div></div></div><div class="member-title"><a name="HeadOrNone&lt;T>"></a>HeadOrNone&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-HeadOrNone_T_IEnumerable_T_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the item at the head (first) of the list or None if the list is empty </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">List</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">HeadOrNone</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Optional head item</span></div></div></div><div style="display:none" id="code-HeadOrNone_T_IEnumerable_T_list_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.headOrNone(list)</div></div></div><div class="member-title"><a name="HeadSafe&lt;T>"></a>HeadSafe&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-HeadSafe_T_IEnumerable_T_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;HeadSafe has been deprecated, please use HeadOrNone&quot;)]</div><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">HeadSafe</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-HeadSafe_T_IEnumerable_T_list_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.headOrNone(list)</div></div></div><div class="member-title"><a name="Iter&lt;T>"></a>Iter&lt;T&gt;(IEnumerable&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter_T_IEnumerable_T_list__Action_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes an action for each item in the enumerable in order </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to iterate</div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Action to invoke with each item</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Iter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; action)</div></div><div style="display:none" id="code-Iter_T_IEnumerable_T_list__Action_T_action_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.iter(list, action)</div></div></div><div class="member-title"><a name="Iter&lt;T>"></a>Iter&lt;T&gt;(IEnumerable&lt;T&gt;, Action&lt;int, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter_T_IEnumerable_T_list__Action_int_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes an action for each item in the enumerable in order </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to iterate</div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc">Action to invoke with each item</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Iter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Action</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>&gt; action)</div></div><div style="display:none" id="code-Iter_T_IEnumerable_T_list__Action_int_T_action_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.iter(list, action)</div></div></div><div class="member-title"><a name="Length&lt;T>"></a>Length&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Length_T_IEnumerable_T_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the number of items in the Lst T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">List to count</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">Length</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >The number of items in the list</span></div></div></div><div style="display:none" id="code-Length_T_IEnumerable_T_list_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.length(list)</div></div></div><div class="member-title"><a name="Map&lt;T, R>"></a>Map&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_T_R_IEnumerable_T_list__Func_T_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projects the values in the enumerable using a map function into a new enumerable (Select in LINQ). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to map</div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Map function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped enumerable</span></div></div></div><div style="display:none" id="code-Map_T_R_IEnumerable_T_list__Func_T_R_map_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.map(list, map)</div></div></div><div class="member-title"><a name="Map&lt;T, R>"></a>Map&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;int, T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_T_R_IEnumerable_T_list__Func_int_T_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projects the values in the enumerable using a map function into a new enumerable (Select in LINQ). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to map</div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Map function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped enumerable</span></div></div></div><div style="display:none" id="code-Map_T_R_IEnumerable_T_list__Func_int_T_R_map_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.map(list, map)</div></div></div><div class="member-title"><a name="Match&lt;T, R>"></a>Match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, IEnumerable&lt;T&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_IEnumerable&lt;T>_R_More_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >List pattern matching </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Empty</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">More</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Empty, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt; More)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_IEnumerable&lt;T>_R_More_"><div class="section_title">SOURCE</div><div class="code">
            if (list == null)
            {
                return Empty();
            }
            else
            {
                list = list.Memo();
                var head = list.HeadOrNone();
                var tail = list.Skip(1);

                return head.IsNone
                    ? Empty()
                    : More(head.Value, tail);
            }
        </div></div></div><div class="member-title"><a name="Match&lt;T, R>"></a>Match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, IEnumerable&lt;T&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_IEnumerable&lt;T>_R_More_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >List pattern matching </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Empty</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">One</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">More</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Empty, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; One, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt; More)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_IEnumerable&lt;T>_R_More_"><div class="section_title">SOURCE</div><div class="code">
            if (list == null)
            {
                return Empty();
            }
            else
            {
                list = list.Memo();
                var head = list.HeadOrNone();
                var tail = list.Skip(1);
                if (head.IsNone)
                {
                    return Empty();
                }
                else
                {
                    var second = tail.HeadOrNone();
                    return second.IsNone
                        ? One(head.Value)
                        : More(head.Value, tail);
                }
            }
        </div></div></div><div class="member-title"><a name="Match&lt;T, R>"></a>Match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, IEnumerable&lt;T&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_IEnumerable&lt;T>_R_More_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >List pattern matching </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Empty</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">One</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Two</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">More</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Empty, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; One, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Two, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt; More)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_IEnumerable&lt;T>_R_More_"><div class="section_title">SOURCE</div><div class="code">
            if (list == null) return Empty();
            list = list.Memo();
            var items = new Lst&lt;T&gt;(list.Take(3));
            switch (items.Count)
            {
                case 0: return Empty();
                case 1: return One(items[0]);
                case 2: return Two(items[0], items[1]);
                default: return More(items[0], items[1], list.Skip(2));
            }
        </div></div></div><div class="member-title"><a name="Match&lt;T, R>"></a>Match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, IEnumerable&lt;T&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_IEnumerable&lt;T>_R_More_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >List pattern matching </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Empty</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">One</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Two</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Three</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">More</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Empty, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; One, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Two, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Three, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt; More)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_IEnumerable&lt;T>_R_More_"><div class="section_title">SOURCE</div><div class="code">
            if (list == null) return Empty();
            list = list.Memo();
            var items = new Lst&lt;T&gt;(list.Take(4));
            switch (items.Count)
            {
                case 0: return Empty();
                case 1: return One(items[0]);
                case 2: return Two(items[0], items[1]);
                case 3: return Three(items[0], items[1], items[2]);
                default: return More(items[0], items[1], items[2], list.Skip(3));
            }
        </div></div></div><div class="member-title"><a name="Match&lt;T, R>"></a>Match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, T, R&gt;, Func&lt;T, T, T, T, IEnumerable&lt;T&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_T_R_Four__Func_T_T_T_T_IEnumerable&lt;T>_R_More_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >List matching </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Empty</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">One</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Two</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Three</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Four</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">More</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Empty, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; One, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Two, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Three, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Four, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt; More)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_T_R_Four__Func_T_T_T_T_IEnumerable&lt;T>_R_More_"><div class="section_title">SOURCE</div><div class="code">
            if (list == null) return Empty();
            list = list.Memo();
            var items = new Lst&lt;T&gt;(list.Take(5));
            switch (items.Count)
            {
                case 0: return Empty();
                case 1: return One(items[0]);
                case 2: return Two(items[0], items[1]);
                case 3: return Three(items[0], items[1], items[2]);
                case 4: return Four(items[0], items[1], items[2], items[3]);
                default: return More(items[0], items[1], items[2], items[3], list.Skip(4));
            }
        </div></div></div><div class="member-title"><a name="Match&lt;T, R>"></a>Match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, IEnumerable&lt;T&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_T_R_Four__Func_T_T_T_T_T_R_Five__Func_T_T_T_T_T_IEnumerable&lt;T>_R_More_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >List matching </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Empty</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">One</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Two</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Three</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Four</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Five</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">More</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Empty, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; One, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Two, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Three, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Four, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Five, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt; More)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_T_R_Four__Func_T_T_T_T_T_R_Five__Func_T_T_T_T_T_IEnumerable&lt;T>_R_More_"><div class="section_title">SOURCE</div><div class="code">
            if (list == null) return Empty();
            list = list.Memo();
            var items = new Lst&lt;T&gt;(list.Take(6));
            switch (items.Count)
            {
                case 0: return Empty();
                case 1: return One(items[0]);
                case 2: return Two(items[0], items[1]);
                case 3: return Three(items[0], items[1], items[2]);
                case 4: return Four(items[0], items[1], items[2], items[3]);
                case 5: return Five(items[0], items[1], items[2], items[3], items[4]);
                default: return More(items[0], items[1], items[2], items[3], items[4], list.Skip(5));
            }
        </div></div></div><div class="member-title"><a name="Match&lt;T, R>"></a>Match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, T, IEnumerable&lt;T&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_T_R_Four__Func_T_T_T_T_T_R_Five__Func_T_T_T_T_T_T_R_Six__Func_T_T_T_T_T_T_IEnumerable&lt;T>_R_More_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >List matching </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Empty</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">One</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Two</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Three</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Four</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Five</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Six</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">More</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Empty, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; One, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Two, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Three, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Four, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Five, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Six, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt; More)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_T_R_Four__Func_T_T_T_T_T_R_Five__Func_T_T_T_T_T_T_R_Six__Func_T_T_T_T_T_T_IEnumerable&lt;T>_R_More_"><div class="section_title">SOURCE</div><div class="code">
            if (list == null) return Empty();
            list = list.Memo();
            var items = new Lst&lt;T&gt;(list.Take(7));
            switch (items.Count)
            {
                case 0: return Empty();
                case 1: return One(items[0]);
                case 2: return Two(items[0], items[1]);
                case 3: return Three(items[0], items[1], items[2]);
                case 4: return Four(items[0], items[1], items[2], items[3]);
                case 5: return Five(items[0], items[1], items[2], items[3], items[4]);
                case 6: return Six(items[0], items[1], items[2], items[3], items[4], items[5]);
                default: return More(items[0], items[1], items[2], items[3], items[4], items[5], list.Skip(6));
            }
        </div></div></div><div class="member-title"><a name="ParMap&lt;T1, T2, R>"></a>ParMap&lt;T1, T2, R&gt;(IEnumerable&lt;T1&gt;, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParMap_T1_T2_R_IEnumerable_T1_list__Func_T1_T2_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">ParMap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T1</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParMap_T1_T2_R_IEnumerable_T1_list__Func_T1_T2_R_func_"><div class="section_title">SOURCE</div><div class="code">
            list.Map(curry(func))</div></div></div><div class="member-title"><a name="ParMap&lt;T1, T2, T3, R>"></a>ParMap&lt;T1, T2, T3, R&gt;(IEnumerable&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParMap_T1_T2_T3_R_IEnumerable_T1_list__Func_T1_T2_T3_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">ParMap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T1</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParMap_T1_T2_T3_R_IEnumerable_T1_list__Func_T1_T2_T3_R_func_"><div class="section_title">SOURCE</div><div class="code">
            list.Map(curry(func))</div></div></div><div class="member-title"><a name="Reduce&lt;T>"></a>Reduce&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Reduce_T_IEnumerable_T_list__Func_T_T_T_reducer_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function to each element of the collection (from last element to first), threading  an accumulator argument through the computation. This function first applies the function  to the first two elements of the list. Then, it passes this result into the function along  with the third element and so on. Finally, it returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to reduce</div></div><div class="arg"><div class="arg-header"><div class="arg-name">reducer</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc">Reduce function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">Reduce</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; reducer)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-Reduce_T_IEnumerable_T_list__Func_T_T_T_reducer_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.reduce(list, reducer)</div></div></div><div class="member-title"><a name="ReduceBack&lt;T>"></a>ReduceBack&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ReduceBack_T_IEnumerable_T_list__Func_T_T_T_reducer_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function to each element of the collection, threading an accumulator argument  through the computation. This function first applies the function to the first two  elements of the list. Then, it passes this result into the function along with the third  element and so on. Finally, it returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to reduce</div></div><div class="arg"><div class="arg-header"><div class="arg-name">reducer</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc">Reduce function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ReduceBack</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; reducer)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-ReduceBack_T_IEnumerable_T_list__Func_T_T_T_reducer_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.reduceBack(list, reducer)</div></div></div><div class="member-title"><a name="Rev&lt;T>"></a>Rev&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Rev_T_IEnumerable_T_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reverses the enumerable (Reverse in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to reverse</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Rev</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Reversed enumerable</span></div></div></div><div style="display:none" id="code-Rev_T_IEnumerable_T_list_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.rev(list)</div></div></div><div class="member-title"><a name="Rev&lt;T>"></a>Rev&lt;T&gt;(Lst&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Rev_T_Lst_T_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reverses the list (Reverse in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Listto reverse</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Rev</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Reversed list</span></div></div></div><div style="display:none" id="code-Rev_T_Lst_T_list_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.rev(list)</div></div></div><div class="member-title"><a name="Scan&lt;S, T>"></a>Scan&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Scan_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function to each element of the collection, threading an accumulator argument  through the computation. This function takes the state argument, and applies the function  to it and the first element of the list. Then, it passes this result into the function  along with the second element, and so on. Finally, it returns the list of intermediate  results and the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Folding function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">S</span>&gt; <span class="ident">Scan</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Aggregate state</span></div></div></div><div style="display:none" id="code-Scan_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.scan(list, state, folder)</div></div></div><div class="member-title"><a name="ScanBack&lt;S, T>"></a>ScanBack&lt;S, T&gt;(IEnumerable&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ScanBack_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function to each element of the collection (from last element to first),  threading an accumulator argument through the computation. This function takes the state  argument, and applies the function to it and the first element of the list. Then, it  passes this result into the function along with the second element, and so on. Finally,  it returns the list of intermediate results and the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Folding function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">S</span>&gt; <span class="ident">ScanBack</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Aggregate state</span></div></div></div><div style="display:none" id="code-ScanBack_S_T_IEnumerable_T_list__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.scanBack(list, state, folder)</div></div></div><div class="member-title"><a name="Select&lt;T, U>"></a>Select&lt;T, U&gt;(Lst&lt;T&gt;, Func&lt;T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_T_U_Lst_T_self__Func_T_U_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >LINQ Select implementation for Lst </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">U</span>&gt; <span class="ident">Select</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">U</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Select_T_U_Lst_T_self__Func_T_U_map_"><div class="section_title">SOURCE</div><div class="code">
            new Lst&lt;U&gt;(self.AsEnumerable().Select(map))</div></div></div><div class="member-title"><a name="SelectMany&lt;T, U, V>"></a>SelectMany&lt;T, U, V&gt;(Lst&lt;T&gt;, Func&lt;T, Lst&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_T_U_V_Lst_T_self__Func_T_Lst&lt;U>_bind__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >LINQ bind implementation for Lst </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Lst</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">V</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Lst</span>&lt;<span class="ident">U</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_T_U_V_Lst_T_self__Func_T_Lst&lt;U>_bind__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            self.Bind(t =&gt; bind(t).Map(u =&gt; project(t, u)))</div></div></div><div class="member-title"><a name="SelectMany&lt;T, U, V>"></a>SelectMany&lt;T, U, V&gt;(Lst&lt;T&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_T_U_V_Lst_T_self__Func_T_IEnumerable&lt;U>_bind__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">V</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_T_U_V_Lst_T_self__Func_T_IEnumerable&lt;U>_bind__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            if (self.Count == 0) return Lst&lt;V&gt;.Empty;
            return self.Bind(t =&gt; bind(t).Map(u =&gt; project(t, u))).Freeze();
        </div></div></div><div class="member-title"><a name="SelectMany&lt;T, U, V>"></a>SelectMany&lt;T, U, V&gt;(IEnumerable&lt;T&gt;, Func&lt;T, Lst&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_T_U_V_IEnumerable_T_self__Func_T_Lst&lt;U>_bind__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Lst</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">V</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Lst</span>&lt;<span class="ident">U</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_T_U_V_IEnumerable_T_self__Func_T_Lst&lt;U>_bind__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            var ta = self.Take(1).ToArray();
            if (ta.Length == 0) return Lst&lt;V&gt;.Empty;
            return self.Bind(t =&gt; bind(t).Map(u =&gt; project(t, u))).Freeze();
        </div></div></div><div class="member-title"><a name="Span&lt;T>"></a>Span&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Span_T_IEnumerable_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Span, applied to a predicate &#39;pred&#39; and a list, returns a tuple where first element is  longest prefix (possibly empty) of elements that satisfy &#39;pred&#39; and second element is the  remainder of the list: </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">List</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">Span</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >Split list</span></div></div></div><div style="display:none" id="code-Span_T_IEnumerable_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.span(self, pred)</div></div></div><div class="member-title"><a name="Tail&lt;T>"></a>Tail&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tail_T_IEnumerable_T_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the tail of the list (skips the head item) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">List</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Tail</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Enumerable of T</span></div></div></div><div style="display:none" id="code-Tail_T_IEnumerable_T_list_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.tail(list)</div></div></div><div class="member-title"><a name="Tails&lt;T>"></a>Tails&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tails_T_IEnumerable_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The tails function returns all final segments of the argument, longest first. For example,  i.e. tails([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]) == [[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;], [&#39;b&#39;,&#39;c&#39;], [&#39;c&#39;],[]] </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">List</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">Tails</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >Enumerable of Enumerables of T</span></div></div></div><div style="display:none" id="code-Tails_T_IEnumerable_T_self_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.List.tails(self)</div></div></div><div class="member-title"><a name="Zip&lt;T, U>"></a>Zip&lt;T, U&gt;(IEnumerable&lt;T&gt;, IEnumerable&lt;U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Zip_T_U_IEnumerable_T_list__IEnumerable_U_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Joins two enumerables together either into a single enumerable of tuples </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">First list to join</div></div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;</div></div><div class="arg-desc">Second list to join</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;&gt; <span class="ident">Zip</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;&gt;</div><div class="normal"><span >Joined enumerable</span></div></div></div><div style="display:none" id="code-Zip_T_U_IEnumerable_T_list__IEnumerable_U_other_"><div class="section_title">SOURCE</div><div class="code">
            list.Zip(other, (t, u) =&gt; Tuple(t, u))</div></div></div></div></body></html>