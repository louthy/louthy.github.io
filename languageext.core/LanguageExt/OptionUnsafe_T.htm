<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="OptionUnsafe_T.htm">OptionUnsafe&lt;T&gt;</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#None">None</a><h3 >PROPERTIES</h3><a class="nav-link" href="#IsNone">IsNone</a><a class="nav-link" href="#IsSome">IsSome</a><h3 >METHODS</h3><a class="nav-link" href="#Append">Append(OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#AsEnumerable">AsEnumerable()</a><a class="nav-link" href="#CompareTo">CompareTo(OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#CompareTo">CompareTo(T)</a><a class="nav-link" href="#Divide">Divide(OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#Equals">Equals(object)</a><a class="nav-link" href="#Equals">Equals(T)</a><a class="nav-link" href="#Equals">Equals(OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#FailureUnsafe">FailureUnsafe(Func&lt;T&gt;)</a><a class="nav-link" href="#FailureUnsafe">FailureUnsafe(T)</a><a class="nav-link" href="#GetHashCode">GetHashCode()</a><a class="nav-link" href="#GetUnderlyingType">GetUnderlyingType()</a><a class="nav-link" href="#IfNoneUnsafe">IfNoneUnsafe(Func&lt;T&gt;)</a><a class="nav-link" href="#IfNoneUnsafe">IfNoneUnsafe(T)</a><a class="nav-link" href="#IfSomeUnsafe">IfSomeUnsafe(Func&lt;T, Unit&gt;)</a><a class="nav-link" href="#IfSomeUnsafe">IfSomeUnsafe(Action&lt;T&gt;)</a><a class="nav-link" href="#MatchAsyncUnsafe&lt;R>">MatchAsyncUnsafe&lt;R&gt;(Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchAsyncUnsafe&lt;R>">MatchAsyncUnsafe&lt;R&gt;(Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservableUnsafe&lt;R>">MatchObservableUnsafe&lt;R&gt;(Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchObservableUnsafe&lt;R>">MatchObservableUnsafe&lt;R&gt;(Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchUnsafe">MatchUnsafe(Action&lt;T&gt;, Action)</a><a class="nav-link" href="#MatchUnsafe&lt;R>">MatchUnsafe&lt;R&gt;(Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchUntyped&lt;R>">MatchUntyped&lt;R&gt;(Func&lt;object, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#Multiply">Multiply(OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#Some">Some(T)</a><a class="nav-link" href="#SomeUnsafe&lt;R>">SomeUnsafe&lt;R&gt;(Action&lt;T&gt;)</a><a class="nav-link" href="#SomeUnsafe&lt;R>">SomeUnsafe&lt;R&gt;(Func&lt;T, R&gt;)</a><a class="nav-link" href="#Subtract">Subtract(OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#ToArray">ToArray()</a><a class="nav-link" href="#ToEitherUnsafe&lt;L>">ToEitherUnsafe&lt;L&gt;(L)</a><a class="nav-link" href="#ToEitherUnsafe&lt;L>">ToEitherUnsafe&lt;L&gt;(Func&lt;L&gt;)</a><a class="nav-link" href="#ToList">ToList()</a><a class="nav-link" href="#ToString">ToString()</a></div><div class="content-panel"><h1 >OptionUnsafe&lt;T&gt; Struct</h1><p ><span >OptionUnsafe T can be in two states:     1. Some(x) -- which means there is a value stored inside     2. None    -- which means there&#39;s no value stored inside To extract the value you must use the &#39;matchUnsafe&#39; function. This differs from Option T  in that it allows Some(null) which is expressly forbidden for Option T.  That is what makes this type &#39;unsafe&#39;.   </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[TypeConverter(typeof(OptionalTypeConverter))]</div><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IOptional</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IMultiplicable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IDivisible</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Fields</h2><div class="member-title"><a name="None"></a>None</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; <span class="ident">None</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="IsNone"></a>IsNone</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsNone</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IsSome"></a>IsSome</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsSome</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Append"></a>Append(OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Append__OptionUnsafe_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append the Some(x) of one option to the Some(y) of another. For numeric values the behaviour is to sum the Somes (lhs + rhs) For string values the behaviour is to concatenate the strings For Lst/Stck/Que values the behaviour is to concatenate the lists For Map or Set values the behaviour is to merge the sets Otherwise if the T type derives from IAppendable then the behaviour is to call lhs.Append(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Append</span>(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div></div><div style="display:none" id="code-Append__OptionUnsafe_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            if (IsNone &amp;&amp; rhs.IsNone) return this;  // None  + None  = None
            if (rhs.IsNone) return this;            // Value + None  = Value
            if (this.IsNone) return rhs;            // None  + Value = Value
            return TypeDesc.Append(Value, rhs.Value, TypeDesc&lt;T&gt;.Default);
        </div></div></div><div class="member-title"><a name="AsEnumerable"></a>AsEnumerable()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">AsEnumerable</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsEnumerable__"><div class="section_title">SOURCE</div><div class="code">
            if (IsSome)
            {
                yield return Value;
            }
        </div></div></div><div class="member-title"><a name="CompareTo"></a>CompareTo(OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareTo__OptionUnsafe_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">CompareTo</span>(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-CompareTo__OptionUnsafe_T_other_"><div class="section_title">SOURCE</div><div class="code">
            IsNone &amp;&amp; other.IsNone
                ? 0
                : IsSome &amp;&amp; other.IsSome
                    ? Comparer&lt;T&gt;.Default.Compare(Value, other.Value)
                    : IsSome
                        ? -1
                        : 1</div></div></div><div class="member-title"><a name="CompareTo"></a>CompareTo(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareTo__T__other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">CompareTo</span>(<span class="ident">T</span> other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-CompareTo__T__other_"><div class="section_title">SOURCE</div><div class="code">
            IsNone
                ? -1
                : Comparer&lt;T&gt;.Default.Compare(Value, other)</div></div></div><div class="member-title"><a name="Divide"></a>Divide(OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Divide__OptionUnsafe_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide the Somes. For numeric values the behaviour is to divide the Somes (lhs / rhs) For Lst values the behaviour is to divide all combinations of values in both lists  to produce a new list Otherwise if the T type derives from IDivisible then the behaviour is to call lhs.Divide(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Divide</span>(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs / rhs</span></div></div></div><div style="display:none" id="code-Divide__OptionUnsafe_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            if (IsNone) return this;      // zero / rhs  = zero
            if (rhs.IsNone) return rhs;   // lhs  / zero = undefined: zero
            return TypeDesc.Divide(Value, rhs.Value, TypeDesc&lt;T&gt;.Default);
        </div></div></div><div class="member-title"><a name="Equals"></a>Equals(object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__object__obj_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">obj</div><div class="arg-type"><span class="keyword">object</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="keyword">object</span> obj)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Equals__object__obj_"><div class="section_title">SOURCE</div><div class="code">
            obj is OptionUnsafe&lt;T&gt;
                ? map(this, (OptionUnsafe&lt;T&gt;)obj, (lhs, rhs) =&gt;
                    lhs.IsNone &amp;&amp; rhs.IsNone
                        ? true
                        : lhs.IsNone || rhs.IsNone
                            ? false
                            : isnull(lhs.Value)
                                ? isnull(rhs.Value)
                                : lhs.Value.Equals(rhs.Value))
                : IsSome
                    ? Value.Equals(obj)
                    : false</div></div></div><div class="member-title"><a name="Equals"></a>Equals(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__T__other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="ident">T</span> other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Equals__T__other_"><div class="section_title">SOURCE</div><div class="code">
            IsNone
                ? false
                : EqualityComparer&lt;T&gt;.Default.Equals(Value, other)</div></div></div><div class="member-title"><a name="Equals"></a>Equals(OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__OptionUnsafe_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Equals__OptionUnsafe_T_other_"><div class="section_title">SOURCE</div><div class="code">
            IsNone &amp;&amp; other.IsNone
                ? true
                : IsSome &amp;&amp; other.IsSome
                    ? EqualityComparer&lt;T&gt;.Default.Equals(Value, other.Value)
                    : false</div></div></div><div class="member-title"><a name="FailureUnsafe"></a>FailureUnsafe(Func&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FailureUnsafe__Func_T_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;FailureUnsafe&#39; has been deprecated.  Please use &#39;IfNoneUnsafe&#39; instead&quot;)]</div><span class="keyword">public</span> <span class="ident">T</span> <span class="ident">FailureUnsafe</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div><div style="display:none" id="code-FailureUnsafe__Func_T_None_"><div class="section_title">SOURCE</div><div class="code">
            MatchUnsafe(identity, None)</div></div></div><div class="member-title"><a name="FailureUnsafe"></a>FailureUnsafe(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FailureUnsafe__T__noneValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;FailureUnsafe&#39; has been deprecated.  Please use &#39;IfNoneUnsafe&#39; instead&quot;)]</div><span class="keyword">public</span> <span class="ident">T</span> <span class="ident">FailureUnsafe</span>(<span class="ident">T</span> noneValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div><div style="display:none" id="code-FailureUnsafe__T__noneValue_"><div class="section_title">SOURCE</div><div class="code">
            MatchUnsafe(identity, () =&gt; noneValue)</div></div></div><div class="member-title"><a name="GetHashCode"></a>GetHashCode()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetHashCode__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="ident">GetHashCode</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-GetHashCode__"><div class="section_title">SOURCE</div><div class="code">
            IsSome &amp;&amp; notnull(Value)
                ? Value.GetHashCode()
                : 0</div></div></div><div class="member-title"><a name="GetUnderlyingType"></a>GetUnderlyingType()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetUnderlyingType__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Type</span> <span class="ident">GetUnderlyingType</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Type</span></div><div class="normal"></div></div></div><div style="display:none" id="code-GetUnderlyingType__"><div class="section_title">SOURCE</div><div class="code">
            typeof(T)</div></div></div><div class="member-title"><a name="IfNoneUnsafe"></a>IfNoneUnsafe(Func&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneUnsafe__Func_T_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">T</span> <span class="ident">IfNoneUnsafe</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div><div style="display:none" id="code-IfNoneUnsafe__Func_T_None_"><div class="section_title">SOURCE</div><div class="code">
            MatchUnsafe(identity, None)</div></div></div><div class="member-title"><a name="IfNoneUnsafe"></a>IfNoneUnsafe(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneUnsafe__T__noneValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">T</span> <span class="ident">IfNoneUnsafe</span>(<span class="ident">T</span> noneValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div><div style="display:none" id="code-IfNoneUnsafe__T__noneValue_"><div class="section_title">SOURCE</div><div class="code">
            MatchUnsafe(identity, () =&gt; noneValue)</div></div></div><div class="member-title"><a name="IfSomeUnsafe"></a>IfSomeUnsafe(Func&lt;T, Unit&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfSomeUnsafe__Func_T_Unit_someHandler_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the someHandler if OptionUnsafe is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Unit</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">IfSomeUnsafe</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Unit</span>&gt; someHandler)</div></div><div style="display:none" id="code-IfSomeUnsafe__Func_T_Unit_someHandler_"><div class="section_title">SOURCE</div><div class="code">
            if (IsSome)
            {
                someHandler(value);
            }
            return unit;
        </div></div></div><div class="member-title"><a name="IfSomeUnsafe"></a>IfSomeUnsafe(Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfSomeUnsafe__Action_T_someHandler_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the someHandler if OptionUnsafe is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">IfSomeUnsafe</span>(<span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; someHandler)</div></div><div style="display:none" id="code-IfSomeUnsafe__Action_T_someHandler_"><div class="section_title">SOURCE</div><div class="code">
            if (IsSome)
            {
                someHandler(value);
            }
            return unit;
        </div></div></div><div class="member-title"><a name="MatchAsyncUnsafe&lt;R>"></a>MatchAsyncUnsafe&lt;R&gt;(Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsyncUnsafe_R_Func_T_Task&lt;R>_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option The Some can return a Task R and the None an R.  The result is wrapped in a Task R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Some handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">None handler</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsyncUnsafe</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >A promise to return an R</span></div></div></div><div style="display:none" id="code-MatchAsyncUnsafe_R_Func_T_Task&lt;R>_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            IsSome
                ? await Some(Value)
                : None()</div></div></div><div class="member-title"><a name="MatchAsyncUnsafe&lt;R>"></a>MatchAsyncUnsafe&lt;R&gt;(Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsyncUnsafe_R_Func_T_Task&lt;R>_Some__Func_Task&lt;R>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option The Some and None can return a Task R and the None an R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Some handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">None handler</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsyncUnsafe</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >A promise to return an R</span></div></div></div><div style="display:none" id="code-MatchAsyncUnsafe_R_Func_T_Task&lt;R>_Some__Func_Task&lt;R>_None_"><div class="section_title">SOURCE</div><div class="code">
            await (IsSome
                ? Some(Value)
                : None())</div></div></div><div class="member-title"><a name="MatchObservableUnsafe&lt;R>"></a>MatchObservableUnsafe&lt;R&gt;(Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservableUnsafe_R_Func_T_IObservable&lt;R>_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option The Some can return an IObservable R and the None an R.  The result is wrapped in an IObservable R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Some handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">None handler</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservableUnsafe</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >A promise to return an stream of Rs</span></div></div></div><div style="display:none" id="code-MatchObservableUnsafe_R_Func_T_IObservable&lt;R>_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            IsSome
                ? Some(Value)
                : Observable.Return(None())</div></div></div><div class="member-title"><a name="MatchObservableUnsafe&lt;R>"></a>MatchObservableUnsafe&lt;R&gt;(Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservableUnsafe_R_Func_T_IObservable&lt;R>_Some__Func_IObservable&lt;R>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option The Some and None can return an IObservable R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Some handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">None handler</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservableUnsafe</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >A promise to return an stream of Rs</span></div></div></div><div style="display:none" id="code-MatchObservableUnsafe_R_Func_T_IObservable&lt;R>_Some__Func_IObservable&lt;R>_None_"><div class="section_title">SOURCE</div><div class="code">
            IsSome
                ? Some(Value)
                : None()</div></div></div><div class="member-title"><a name="MatchUnsafe"></a>MatchUnsafe(Action&lt;T&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUnsafe__Action_T_Some__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">MatchUnsafe</span>(<span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Some, <span class="ident">Action</span> None)</div></div><div style="display:none" id="code-MatchUnsafe__Action_T_Some__Action__None_"><div class="section_title">SOURCE</div><div class="code">
            if (IsSome)
            {
                Some(Value);
            }
            else
            {
                None();
            }
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="MatchUnsafe&lt;R>"></a>MatchUnsafe&lt;R&gt;(Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUnsafe_R_Func_T_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">MatchUnsafe</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-MatchUnsafe_R_Func_T_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            IsSome
                ? Some(Value)
                : None()</div></div></div><div class="member-title"><a name="MatchUntyped&lt;R>"></a>MatchUntyped&lt;R&gt;(Func&lt;object, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUntyped_R_Func_object_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">MatchUntyped</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-MatchUntyped_R_Func_object_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            IsSome
                ? Some(Value)
                : None()</div></div></div><div class="member-title"><a name="Multiply"></a>Multiply(OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Multiply__OptionUnsafe_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product of the Somes. For numeric values the behaviour is to multiply the Somes (lhs * rhs) For Lst values the behaviour is to multiply all combinations of values in both lists  to produce a new list Otherwise if the T type derives from IMultiplicable then the behaviour is to call lhs.Multiply(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Multiply</span>(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs * rhs</span></div></div></div><div style="display:none" id="code-Multiply__OptionUnsafe_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            if (IsNone) return this;      // zero * rhs = zero
            if (rhs.IsNone) return rhs;   // lhs * zero = zero
            return TypeDesc.Multiply(Value, rhs.Value, TypeDesc&lt;T&gt;.Default);
        </div></div></div><div class="member-title"><a name="Some"></a>Some(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Some__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Some</span>(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Some__T__value_"><div class="section_title">SOURCE</div><div class="code">
            new OptionUnsafe&lt;T&gt;(value, true)</div></div></div><div class="member-title"><a name="SomeUnsafe&lt;R>"></a>SomeUnsafe&lt;R&gt;(Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SomeUnsafe_R_Action_T_someHandler_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">SomeUnsafeUnitContext</span>&lt;<span class="ident">T</span>&gt; <span class="ident">SomeUnsafe</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; someHandler)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SomeUnsafeUnitContext</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SomeUnsafe_R_Action_T_someHandler_"><div class="section_title">SOURCE</div><div class="code">
            new SomeUnsafeUnitContext&lt;T&gt;(this, someHandler)</div></div></div><div class="member-title"><a name="SomeUnsafe&lt;R>"></a>SomeUnsafe&lt;R&gt;(Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SomeUnsafe_R_Func_T_R_someHandler_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">SomeUnsafeContext</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">SomeUnsafe</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; someHandler)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SomeUnsafeContext</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SomeUnsafe_R_Func_T_R_someHandler_"><div class="section_title">SOURCE</div><div class="code">
            new SomeUnsafeContext&lt;T, R&gt;(this, someHandler)</div></div></div><div class="member-title"><a name="Subtract"></a>Subtract(OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subtract__OptionUnsafe_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subtract the Some(x) of one option from the Some(y) of another. For numeric values the behaviour is to find the difference between the Somes (lhs - rhs) For Lst values the behaviour is to remove items in the rhs from the lhs For Map or Set values the behaviour is to remove items in the rhs from the lhs Otherwise if the T type derives from ISubtractable then the behaviour is to call lhs.Subtract(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Subtract</span>(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs - rhs</span></div></div></div><div style="display:none" id="code-Subtract__OptionUnsafe_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            var self = IsNone
                ? TypeDesc&lt;T&gt;.Default.HasZero
                    ? Some(TypeDesc&lt;T&gt;.Default.Zero&lt;T&gt;())
                    : this
                : this;
            if (self.IsNone) return this;  // zero - rhs = undefined (when HasZero == false)
            if (rhs.IsNone) return this;   // lhs + zero = lhs
            return TypeDesc.Subtract(self.Value, rhs.Value, TypeDesc&lt;T&gt;.Default);
        </div></div></div><div class="member-title"><a name="ToArray"></a>ToArray()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToArray__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">T</span>[] <span class="ident">ToArray</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>[]</div><div class="normal"></div></div></div><div style="display:none" id="code-ToArray__"><div class="section_title">SOURCE</div><div class="code">
            Prelude.toArray(AsEnumerable())</div></div></div><div class="member-title"><a name="ToEitherUnsafe&lt;L>"></a>ToEitherUnsafe&lt;L&gt;(L)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEitherUnsafe_L_L__defaultLeftValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; <span class="ident">ToEitherUnsafe</span>&lt;<span class="ident">L</span>&gt;(<span class="ident">L</span> defaultLeftValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToEitherUnsafe_L_L__defaultLeftValue_"><div class="section_title">SOURCE</div><div class="code">
            IsSome
                ? RightUnsafe&lt;L, T&gt;(Value)
                : LeftUnsafe&lt;L, T&gt;(defaultLeftValue)</div></div></div><div class="member-title"><a name="ToEitherUnsafe&lt;L>"></a>ToEitherUnsafe&lt;L&gt;(Func&lt;L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEitherUnsafe_L_Func_L_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; <span class="ident">ToEitherUnsafe</span>&lt;<span class="ident">L</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToEitherUnsafe_L_Func_L_Left_"><div class="section_title">SOURCE</div><div class="code">
            IsSome
                ? RightUnsafe&lt;L, T&gt;(Value)
                : LeftUnsafe&lt;L, T&gt;(Left())</div></div></div><div class="member-title"><a name="ToList"></a>ToList()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToList__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">ToList</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToList__"><div class="section_title">SOURCE</div><div class="code">
            Prelude.toList(AsEnumerable())</div></div></div><div class="member-title"><a name="ToString"></a>ToString()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToString__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="ident">ToString</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">string</span></div><div class="normal"></div></div></div><div style="display:none" id="code-ToString__"><div class="section_title">SOURCE</div><div class="code">
            IsSome
                ? isnull(Value)
                    ? &quot;Some(null)&quot;
                    : $&quot;Some({Value})&quot;
                : &quot;None&quot;</div></div></div></div></body></html>