<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="NullableExtensions_.htm">NullableExtensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Append&lt;T>">Append&lt;T&gt;(T?, T?)</a><a class="nav-link" href="#AsEnumerable&lt;T>">AsEnumerable&lt;T&gt;(T?)</a><a class="nav-link" href="#Bind&lt;T, R>">Bind&lt;T, R&gt;(T?, Func&lt;T, R?&gt;)</a><a class="nav-link" href="#Bind&lt;T, R>">Bind&lt;T, R&gt;(T?, Func&lt;T, R?&gt;, Func&lt;R?&gt;)</a><a class="nav-link" href="#Count&lt;T>">Count&lt;T&gt;(T?)</a><a class="nav-link" href="#Divide&lt;T>">Divide&lt;T&gt;(T?, T?)</a><a class="nav-link" href="#Exists&lt;T>">Exists&lt;T&gt;(T?, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Exists&lt;T>">Exists&lt;T&gt;(T?, Func&lt;T, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#Filter&lt;T>">Filter&lt;T&gt;(T?, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Filter&lt;T>">Filter&lt;T&gt;(T?, Func&lt;T, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#Fold&lt;S, T>">Fold&lt;S, T&gt;(T?, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#Fold&lt;S, T>">Fold&lt;S, T&gt;(T?, S, Func&lt;S, T, S&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#ForAll&lt;T>">ForAll&lt;T&gt;(T?, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#ForAll&lt;T>">ForAll&lt;T&gt;(T?, Func&lt;T, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#IfNone&lt;T>">IfNone&lt;T&gt;(T?, Func&lt;T&gt;)</a><a class="nav-link" href="#IfNone&lt;T>">IfNone&lt;T&gt;(T?, T)</a><a class="nav-link" href="#IfSome&lt;T>">IfSome&lt;T&gt;(T?, Action&lt;T&gt;)</a><a class="nav-link" href="#IfSome&lt;T>">IfSome&lt;T&gt;(T?, Func&lt;T, Unit&gt;)</a><a class="nav-link" href="#Iter&lt;T>">Iter&lt;T&gt;(T?, Action&lt;T&gt;)</a><a class="nav-link" href="#Map&lt;T, R>">Map&lt;T, R&gt;(T?, Func&lt;T, R&gt;)</a><a class="nav-link" href="#Map&lt;T, R>">Map&lt;T, R&gt;(T?, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#Match&lt;T, R>">Match&lt;T, R&gt;(T?, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#Match&lt;T>">Match&lt;T&gt;(T?, Action&lt;T&gt;, Action)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(T?, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(T?, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(T?, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(T?, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;T?&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#Multiply&lt;T>">Multiply&lt;T&gt;(T?, T?)</a><a class="nav-link" href="#Select&lt;T, U>">Select&lt;T, U&gt;(T?, Func&lt;T, U&gt;)</a><a class="nav-link" href="#SelectMany&lt;T, U, V>">SelectMany&lt;T, U, V&gt;(T?, Func&lt;T, U?&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#SelectMany&lt;T, U, V>">SelectMany&lt;T, U, V&gt;(T?, Func&lt;T, IEnumerable&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#SelectMany&lt;T, U, V>">SelectMany&lt;T, U, V&gt;(IEnumerable&lt;T&gt;, Func&lt;T, U?&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#Somes&lt;T>">Somes&lt;T&gt;(IEnumerable&lt;T?&gt;)</a><a class="nav-link" href="#Subtract&lt;T>">Subtract&lt;T&gt;(T?, T?)</a><a class="nav-link" href="#Sum">Sum(int?)</a><a class="nav-link" href="#ToArray&lt;T>">ToArray&lt;T&gt;(T?)</a><a class="nav-link" href="#ToEither&lt;L, T>">ToEither&lt;L, T&gt;(T?, L)</a><a class="nav-link" href="#ToEither&lt;L, T>">ToEither&lt;L, T&gt;(T?, Func&lt;L&gt;)</a><a class="nav-link" href="#ToEitherUnsafe&lt;L, T>">ToEitherUnsafe&lt;L, T&gt;(T?, L)</a><a class="nav-link" href="#ToEitherUnsafe&lt;L, T>">ToEitherUnsafe&lt;L, T&gt;(T?, Func&lt;L&gt;)</a><a class="nav-link" href="#ToList&lt;T>">ToList&lt;T&gt;(T?)</a><a class="nav-link" href="#ToOption&lt;T>">ToOption&lt;T&gt;(T?)</a><a class="nav-link" href="#ToTryOption&lt;L, T>">ToTryOption&lt;L, T&gt;(T?, L)</a><a class="nav-link" href="#Where&lt;T>">Where&lt;T&gt;(T?, Func&lt;T, bool&gt;)</a></div><div class="content-panel"><h1 >NullableExtensions Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">NullableExtensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="Append&lt;T>"></a>Append&lt;T&gt;(T?, T?)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Append the Some(x) of one option to the Some(y) of another. For numeric values the behaviour is to sum the Somes (lhs + rhs) For string values the behaviour is to concatenate the strings For Lst/Stck/Que values the behaviour is to concatenate the lists For Map or Set values the behaviour is to merge the sets Otherwise if the T type derives from IAppendable then the behaviour is to call lhs.Append(rhs); </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc">Left-hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span>? <span class="ident">Append</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">lhs</span>, <span class="ident">T</span>? <span class="ident">rhs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>?</div><div class="normal">lhs + rhs</div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="AsEnumerable&lt;T>"></a>AsEnumerable&lt;T&gt;(T?)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Convert NullableT to IEnumerableT (0..1 entries) </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc">Value to convert</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">AsEnumerable</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Zero or One enumerable values, depending on HasValue</div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Bind&lt;T, R>"></a>Bind&lt;T, R&gt;(T?, Func&lt;T, R?&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>?&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span>? <span class="ident">Bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>?&gt; <span class="ident">binder</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">R</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Bind&lt;T, R>"></a>Bind&lt;T, R&gt;(T?, Func&lt;T, R?&gt;, Func&lt;R?&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>?&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>?&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span>? <span class="ident">Bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>?&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>?&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">R</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Count&lt;T>"></a>Count&lt;T&gt;(T?)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns 1 if there is a value, 0 otherwise </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">int</span> <span class="ident">Count</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">int</span></div><div class="normal">1 if there is a value, 0 otherwise</div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Divide&lt;T>"></a>Divide&lt;T&gt;(T?, T?)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Divide the Somes. For numeric values the behaviour is to divide the Somes (lhs / rhs) For Lst values the behaviour is to divide all combinations of values in both lists  to produce a new list Otherwise if the T type derives from IDivisible then the behaviour is to call lhs.Divide(rhs); </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc">Left-hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span>? <span class="ident">Divide</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">lhs</span>, <span class="ident">T</span>? <span class="ident">rhs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>?</div><div class="normal">lhs / rhs</div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Exists&lt;T>"></a>Exists&lt;T&gt;(T?, Func&lt;T, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Exists Nullable.  Imagine the item has zero or one items depending on whether it&#39;s in a None state or not.  This function runs a predicate against the value if it exists, returns false if it doesn&#39;t. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">Exists</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Exists&lt;T>"></a>Exists&lt;T&gt;(T?, Func&lt;T, bool&gt;, Func&lt;bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Exists Nullable.  Imagine the item has zero or one items depending on whether it&#39;s in a None state or not.  This function runs a predicate against the value if it exists, returns false if it doesn&#39;t. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Some predicate</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">bool</span>&gt;</div></div><div class="arg-desc">None predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">Exists</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">bool</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Filter&lt;T>"></a>Filter&lt;T&gt;(T?, Func&lt;T, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span>? <span class="ident">Filter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Filter&lt;T>"></a>Filter&lt;T&gt;(T?, Func&lt;T, bool&gt;, Func&lt;bool&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span>? <span class="ident">Filter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">bool</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Fold&lt;S, T>"></a>Fold&lt;S, T&gt;(T?, S, Func&lt;S, T, S&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Folds Nullable into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">Fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">S</span> <span class="ident">state</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; <span class="ident">folder</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal">Folded state</div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Fold&lt;S, T>"></a>Fold&lt;S, T&gt;(T?, S, Func&lt;S, T, S&gt;, Func&lt;S, S&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Folds Nullable into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for Some</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for None</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">Fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">S</span> <span class="ident">state</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal">Folded state</div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="ForAll&lt;T>"></a>ForAll&lt;T&gt;(T?, Func&lt;T, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >ForAll Nullable.  Imagine the item has zero or one items depending on whether it&#39;s in a None state or not.  This function runs a predicate against the value if it exists, returns true if it doesn&#39;t (because the predicate holds &#39;for all&#39; items). </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">ForAll</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="ForAll&lt;T>"></a>ForAll&lt;T&gt;(T?, Func&lt;T, bool&gt;, Func&lt;bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >ForAll Nullable.  Imagine the item has zero or one items depending on whether it&#39;s in a None state or not.  This function runs a predicate against the value if it exists, returns true if it doesn&#39;t (because the predicate holds &#39;for all&#39; items). </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Some predicate</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">bool</span>&gt;</div></div><div class="arg-desc">None predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">ForAll</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">bool</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="IfNone&lt;T>"></a>IfNone&lt;T&gt;(T?, Func&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">IfNone</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="IfNone&lt;T>"></a>IfNone&lt;T&gt;(T?, T)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">IfNone</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">T</span> <span class="ident">noneValue</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="IfSome&lt;T>"></a>IfSome&lt;T&gt;(T?, Action&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Invokes the someHandler if Nullable is in the Some state, otherwise nothing happens. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IfSome</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; <span class="ident">someHandler</span>)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="IfSome&lt;T>"></a>IfSome&lt;T&gt;(T?, Func&lt;T, Unit&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Invokes the someHandler if Option is in the Some state, otherwise nothing happens. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Unit</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IfSome</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Unit</span>&gt; <span class="ident">someHandler</span>)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Iter&lt;T>"></a>Iter&lt;T&gt;(T?, Action&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Iterate Nullable.  Imagine the item has zero or one items depending on whether it&#39;s in a None state or not. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Action to invoke with the value if not in None state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Iter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; <span class="ident">action</span>)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Map&lt;T, R>"></a>Map&lt;T, R&gt;(T?, Func&lt;T, R&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span>? <span class="ident">Map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">mapper</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">R</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Map&lt;T, R>"></a>Map&lt;T, R&gt;(T?, Func&lt;T, R&gt;, Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span>? <span class="ident">Map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">R</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Match&lt;T, R>"></a>Match&lt;T, R&gt;(T?, Func&lt;T, R&gt;, Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Nullable and return a non-null R. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Some handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">None handler</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal">A non-null R</div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Match&lt;T>"></a>Match&lt;T&gt;(T?, Action&lt;T&gt;, Action)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Nullable T </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Some match</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc">None match</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Match</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Some</span>, <span class="ident">Action</span> <span class="ident">None</span>)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(T?, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Nullable and return a promise for an R. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Some handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">None handler</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">A promise to return an R</div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(T?, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Nullable and return a promise for an R. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Some handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">None handler</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">A promise to return an R</div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(T?, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Nullable and return an observable stream of Rs. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Some handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">None handler</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">A stream of Rs</div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(T?, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Nullable and return an observable stream of Rs. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Some handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">None handler</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">A stream of Rs</div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;T?&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the IObservable&lt;Nullable&lt;T&gt;&gt; and return a stream of non-null Rs. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">T</span>?&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Some handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">None handler</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">T</span>?&gt; <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">A stream of Rs</div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Multiply&lt;T>"></a>Multiply&lt;T&gt;(T?, T?)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Find the product of the Somes. For numeric values the behaviour is to multiply the Somes (lhs * rhs) For Lst values the behaviour is to multiply all combinations of values in both lists  to produce a new list Otherwise if the T type derives from IMultiplicable then the behaviour is to call lhs.Multiply(rhs); </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc">Left-hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span>? <span class="ident">Multiply</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">lhs</span>, <span class="ident">T</span>? <span class="ident">rhs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>?</div><div class="normal">lhs * rhs</div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Select&lt;T, U>"></a>Select&lt;T, U&gt;(T?, Func&lt;T, U&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">U</span>? <span class="ident">Select</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; <span class="ident">map</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">U</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">U</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="SelectMany&lt;T, U, V>"></a>SelectMany&lt;T, U, V&gt;(T?, Func&lt;T, U?&gt;, Func&lt;T, U, V&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>?&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">V</span>? <span class="ident">SelectMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>?&gt; <span class="ident">bind</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; <span class="ident">project</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">V</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">U</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">V</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="SelectMany&lt;T, U, V>"></a>SelectMany&lt;T, U, V&gt;(T?, Func&lt;T, IEnumerable&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; <span class="ident">bind</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; <span class="ident">project</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">U</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">V</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="SelectMany&lt;T, U, V>"></a>SelectMany&lt;T, U, V&gt;(IEnumerable&lt;T&gt;, Func&lt;T, U?&gt;, Func&lt;T, U, V&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>?&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">V</span>? <span class="ident">SelectMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>?&gt; <span class="ident">bind</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; <span class="ident">project</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">V</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">U</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">V</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Somes&lt;T>"></a>Somes&lt;T&gt;(IEnumerable&lt;T?&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Extracts from a list of nullables all the HasValue elements. All the &#39;Some&#39; elements are extracted in order. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>?&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Somes</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>?&gt; <span class="ident">self</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Subtract&lt;T>"></a>Subtract&lt;T&gt;(T?, T?)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Subtract the Some(x) of one nullable from the Some(y) of another. For numeric values the behaviour is to find the difference between the Somes (lhs - rhs) For Lst values the behaviour is to remove items in the rhs from the lhs For Map or Set values the behaviour is to remove items in the rhs from the lhs Otherwise if the T type derives from ISubtractable then the behaviour is to call lhs.Subtract(rhs); </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc">Left-hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span>? <span class="ident">Subtract</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">lhs</span>, <span class="ident">T</span>? <span class="ident">rhs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>?</div><div class="normal">lhs - rhs</div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Sum"></a>Sum(int?)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">int</span>?</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">int</span> <span class="ident">Sum</span>(<span class="keyword">this</span> <span class="ident">int</span>? <span class="ident">self</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="ToArray&lt;T>"></a>ToArray&lt;T&gt;(T?)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span>[] <span class="ident">ToArray</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>[]</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="ToEither&lt;L, T>"></a>ToEither&lt;L, T&gt;(T?, L)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; <span class="ident">ToEither</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">L</span> <span class="ident">defaultLeftValue</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="ToEither&lt;L, T>"></a>ToEither&lt;L, T&gt;(T?, Func&lt;L&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; <span class="ident">ToEither</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; <span class="ident">Left</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="ToEitherUnsafe&lt;L, T>"></a>ToEitherUnsafe&lt;L, T&gt;(T?, L)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; <span class="ident">ToEitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">L</span> <span class="ident">defaultLeftValue</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="ToEitherUnsafe&lt;L, T>"></a>ToEitherUnsafe&lt;L, T&gt;(T?, Func&lt;L&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; <span class="ident">ToEitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; <span class="ident">Left</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="ToList&lt;T>"></a>ToList&lt;T&gt;(T?)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">ToList</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="ToOption&lt;T>"></a>ToOption&lt;T&gt;(T?)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Convert NullableT to OptionT </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc">Value to convert</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">ToOption</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">OptionT with Some or None, depending on HasValue</div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="ToTryOption&lt;L, T>"></a>ToTryOption&lt;L, T&gt;(T?, L)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">ToTryOption</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">L</span> <span class="ident">defaultLeftValue</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div><div class="member-title"><a name="Where&lt;T>"></a>Where&lt;T&gt;(T?, Func&lt;T, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span>? <span class="ident">Where</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span>? <span class="ident">self</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div></div></div></body></html>