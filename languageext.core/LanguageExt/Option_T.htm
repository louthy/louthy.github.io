<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Option_T.htm">Option&lt;T&gt;</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#None">None</a><h3 >PROPERTIES</h3><a class="nav-link" href="#IsNone">IsNone</a><a class="nav-link" href="#IsSome">IsSome</a><h3 >METHODS</h3><a class="nav-link" href="#Append">Append(Option&lt;T&gt;)</a><a class="nav-link" href="#AsEnumerable">AsEnumerable()</a><a class="nav-link" href="#CompareTo">CompareTo(Option&lt;T&gt;)</a><a class="nav-link" href="#CompareTo">CompareTo(T)</a><a class="nav-link" href="#Divide">Divide(Option&lt;T&gt;)</a><a class="nav-link" href="#Equals">Equals(object)</a><a class="nav-link" href="#Equals">Equals(T)</a><a class="nav-link" href="#Equals">Equals(Option&lt;T&gt;)</a><a class="nav-link" href="#Failure">Failure(Func&lt;T&gt;)</a><a class="nav-link" href="#Failure">Failure(T)</a><a class="nav-link" href="#GetHashCode">GetHashCode()</a><a class="nav-link" href="#GetUnderlyingType">GetUnderlyingType()</a><a class="nav-link" href="#IfNone">IfNone(Func&lt;T&gt;)</a><a class="nav-link" href="#IfNone">IfNone(T)</a><a class="nav-link" href="#IfNoneUnsafe">IfNoneUnsafe(Func&lt;T&gt;)</a><a class="nav-link" href="#IfNoneUnsafe">IfNoneUnsafe(T)</a><a class="nav-link" href="#IfSome">IfSome(Action&lt;T&gt;)</a><a class="nav-link" href="#IfSome">IfSome(Func&lt;T, Unit&gt;)</a><a class="nav-link" href="#Match">Match(Action&lt;T&gt;, Action)</a><a class="nav-link" href="#Match&lt;R>">Match&lt;R&gt;(Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;R>">MatchAsync&lt;R&gt;(Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;R>">MatchAsync&lt;R&gt;(Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;R>">MatchObservable&lt;R&gt;(Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;R>">MatchObservable&lt;R&gt;(Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchUnsafe&lt;R>">MatchUnsafe&lt;R&gt;(Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchUntyped&lt;R>">MatchUntyped&lt;R&gt;(Func&lt;object, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#Multiply">Multiply(Option&lt;T&gt;)</a><a class="nav-link" href="#Some">Some(T)</a><a class="nav-link" href="#Some">Some(Action&lt;T&gt;)</a><a class="nav-link" href="#Some&lt;R>">Some&lt;R&gt;(Func&lt;T, R&gt;)</a><a class="nav-link" href="#Subtract">Subtract(Option&lt;T&gt;)</a><a class="nav-link" href="#ToArray">ToArray()</a><a class="nav-link" href="#ToEither&lt;L>">ToEither&lt;L&gt;(L)</a><a class="nav-link" href="#ToEither&lt;L>">ToEither&lt;L&gt;(Func&lt;L&gt;)</a><a class="nav-link" href="#ToEitherUnsafe&lt;L>">ToEitherUnsafe&lt;L&gt;(L)</a><a class="nav-link" href="#ToEitherUnsafe&lt;L>">ToEitherUnsafe&lt;L&gt;(Func&lt;L&gt;)</a><a class="nav-link" href="#ToList">ToList()</a><a class="nav-link" href="#ToString">ToString()</a><a class="nav-link" href="#ToTryOption&lt;L>">ToTryOption&lt;L&gt;(L)</a></div><div class="content-panel"><h1 >Option&lt;T&gt; Struct</h1><p >Option T can be in two states:     1. Some(x) -- which means there is a value stored inside     2. None    -- which means there&#39;s no value stored inside To extract the value you must use the &#39;match&#39; function. </p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[TypeConverter(typeof(OptionalTypeConverter))]</div><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IOptional</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IMultiplicable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IDivisible</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Fields</h2><div class="member-title"><a name="None"></a>None</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Option None of T </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">None</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="IsNone"></a>IsNone</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >true if the Option is in a None state </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">IsNone</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IsSome"></a>IsSome</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >true if the Option is in a Some(x) state </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">IsSome</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Append"></a>Append(Option&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Append the Some(x) of one option to the Some(y) of another. For numeric values the behaviour is to sum the Somes (lhs + rhs) For string values the behaviour is to concatenate the strings For Lst/Stck/Que values the behaviour is to concatenate the lists For Map or Set values the behaviour is to merge the sets Otherwise if the T type derives from IAppendable then the behaviour is to call lhs.Append(rhs); </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Append</span>(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">rhs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">lhs + rhs</div></div></div></div><div class="member-title"><a name="AsEnumerable"></a>AsEnumerable()</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">AsEnumerable</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="CompareTo"></a>CompareTo(Option&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">int</span> <span class="ident">CompareTo</span>(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">other</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="CompareTo"></a>CompareTo(T)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">int</span> <span class="ident">CompareTo</span>(<span class="ident">T</span> <span class="ident">other</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Divide"></a>Divide(Option&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Divide the Somes. For numeric values the behaviour is to divide the Somes (lhs / rhs) For Lst values the behaviour is to divide all combinations of values in both lists  to produce a new list Otherwise if the T type derives from IDivisible then the behaviour is to call lhs.Divide(rhs); </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Divide</span>(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">rhs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">lhs / rhs</div></div></div></div><div class="member-title"><a name="Equals"></a>Equals(object)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">obj</div><div class="arg-type"><span class="ident">object</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="ident">bool</span> <span class="ident">Equals</span>(<span class="ident">object</span> <span class="ident">obj</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Equals"></a>Equals(T)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">Equals</span>(<span class="ident">T</span> <span class="ident">other</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Equals"></a>Equals(Option&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">Equals</span>(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">other</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Failure"></a>Failure(Func&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;Failure&#39; has been deprecated.  Please use &#39;IfNone&#39; instead&quot;)]</div><span class="keyword">public</span> <span class="ident">T</span> <span class="ident">Failure</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Failure"></a>Failure(T)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;Failure&#39; has been deprecated.  Please use &#39;IfNone&#39; instead&quot;)]</div><span class="keyword">public</span> <span class="ident">T</span> <span class="ident">Failure</span>(<span class="ident">T</span> <span class="ident">noneValue</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="GetHashCode"></a>GetHashCode()</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="ident">int</span> <span class="ident">GetHashCode</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="GetUnderlyingType"></a>GetUnderlyingType()</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Type</span> <span class="ident">GetUnderlyingType</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Type</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IfNone"></a>IfNone(Func&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">T</span> <span class="ident">IfNone</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IfNone"></a>IfNone(T)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">T</span> <span class="ident">IfNone</span>(<span class="ident">T</span> <span class="ident">noneValue</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IfNoneUnsafe"></a>IfNoneUnsafe(Func&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">T</span> <span class="ident">IfNoneUnsafe</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IfNoneUnsafe"></a>IfNoneUnsafe(T)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">T</span> <span class="ident">IfNoneUnsafe</span>(<span class="ident">T</span> <span class="ident">noneValue</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IfSome"></a>IfSome(Action&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Invokes the someHandler if Option is in the Some state, otherwise nothing happens. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">IfSome</span>(<span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; <span class="ident">someHandler</span>)</div></div></div><div class="member-title"><a name="IfSome"></a>IfSome(Func&lt;T, Unit&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Invokes the someHandler if Option is in the Some state, otherwise nothing happens. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Unit</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">IfSome</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Unit</span>&gt; <span class="ident">someHandler</span>)</div></div></div><div class="member-title"><a name="Match"></a>Match(Action&lt;T&gt;, Action)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Option T </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Some match</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc">None match</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">Match</span>(<span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Some</span>, <span class="ident">Action</span> <span class="ident">None</span>)</div></div></div><div class="member-title"><a name="Match&lt;R>"></a>Match&lt;R&gt;(Func&lt;T, R&gt;, Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Option and return a non-null R. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Some handler.  Must not return null.</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">None handler.  Must not return null.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal">A non-null R</div></div></div></div><div class="member-title"><a name="MatchAsync&lt;R>"></a>MatchAsync&lt;R&gt;(Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Option and return a promise for a non-null R. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Some handler.  Must not return null.</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">None handler.  Must not return null.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">A promise to return a non-null R</div></div></div></div><div class="member-title"><a name="MatchAsync&lt;R>"></a>MatchAsync&lt;R&gt;(Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Option and return a promise for a non-null R. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Some handler.  Must not return null.</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">None handler.  Must not return null.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">A promise to return a non-null R</div></div></div></div><div class="member-title"><a name="MatchObservable&lt;R>"></a>MatchObservable&lt;R&gt;(Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Option and return an observable stream of non-null Rs. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Some handler.  Must not return null.</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">None handler.  Must not return null.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">A stream of non-null Rs</div></div></div></div><div class="member-title"><a name="MatchObservable&lt;R>"></a>MatchObservable&lt;R&gt;(Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Option and return an observable stream of non-null Rs. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Some handler.  Must not return null.</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">None handler.  Must not return null.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">A stream of non-null Rs</div></div></div></div><div class="member-title"><a name="MatchUnsafe&lt;R>"></a>MatchUnsafe&lt;R&gt;(Func&lt;T, R&gt;, Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Option and return an R, which can be null. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Some handler.  May return null.</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">None handler.  May return null.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">MatchUnsafe</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal">R, or null</div></div></div></div><div class="member-title"><a name="MatchUntyped&lt;R>"></a>MatchUntyped&lt;R&gt;(Func&lt;object, R&gt;, Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Option and return an R, or null. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">object</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Some handler.  May return null.</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">None handler.  May return null.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">MatchUntyped</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">object</span>, <span class="ident">R</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal">An R, or null</div></div></div></div><div class="member-title"><a name="Multiply"></a>Multiply(Option&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Find the product of the Somes. For numeric values the behaviour is to multiply the Somes (lhs * rhs) For Lst values the behaviour is to multiply all combinations of values in both lists  to produce a new list Otherwise if the T type derives from IMultiplicable then the behaviour is to call lhs.Multiply(rhs); </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Multiply</span>(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">rhs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">lhs * rhs</div></div></div></div><div class="member-title"><a name="Some"></a>Some(T)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Option Some(x) constructor </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Value</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Some</span>(<span class="ident">T</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Some(value) as Option T</div></div></div></div><div class="member-title"><a name="Some"></a>Some(Action&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">SomeUnitContext</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Some</span>(<span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; <span class="ident">someHandler</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SomeUnitContext</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="Some&lt;R>"></a>Some&lt;R&gt;(Func&lt;T, R&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">SomeContext</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">Some</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">someHandler</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SomeContext</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="Subtract"></a>Subtract(Option&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Subtract the Some(x) of one option from the Some(y) of another. For numeric values the behaviour is to find the difference between the Somes (lhs - rhs) For Lst values the behaviour is to remove items in the rhs from the lhs For Map or Set values the behaviour is to remove items in the rhs from the lhs Otherwise if the T type derives from ISubtractable then the behaviour is to call lhs.Subtract(rhs); </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Subtract</span>(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">rhs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">lhs - rhs</div></div></div></div><div class="member-title"><a name="ToArray"></a>ToArray()</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">T</span>[] <span class="ident">ToArray</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>[]</div><div class="normal"></div></div></div></div><div class="member-title"><a name="ToEither&lt;L>"></a>ToEither&lt;L&gt;(L)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; <span class="ident">ToEither</span>&lt;<span class="ident">L</span>&gt;(<span class="ident">L</span> <span class="ident">defaultLeftValue</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="ToEither&lt;L>"></a>ToEither&lt;L&gt;(Func&lt;L&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; <span class="ident">ToEither</span>&lt;<span class="ident">L</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; <span class="ident">Left</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="ToEitherUnsafe&lt;L>"></a>ToEitherUnsafe&lt;L&gt;(L)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; <span class="ident">ToEitherUnsafe</span>&lt;<span class="ident">L</span>&gt;(<span class="ident">L</span> <span class="ident">defaultLeftValue</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="ToEitherUnsafe&lt;L>"></a>ToEitherUnsafe&lt;L&gt;(Func&lt;L&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; <span class="ident">ToEitherUnsafe</span>&lt;<span class="ident">L</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; <span class="ident">Left</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="ToList"></a>ToList()</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">ToList</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="ToString"></a>ToString()</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="ident">string</span> <span class="ident">ToString</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">string</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="ToTryOption&lt;L>"></a>ToTryOption&lt;L&gt;(L)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">ToTryOption</span>&lt;<span class="ident">L</span>&gt;(<span class="ident">L</span> <span class="ident">defaultLeftValue</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div></div></div></body></html>