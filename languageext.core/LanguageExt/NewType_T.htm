<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="NewType_T.htm">NewType&lt;T&gt;</span></div><div class="nav-panel"><h3 >CONSTRUCTORS</h3><a class="nav-link" href="#NewType">NewType(T)</a><h3 >FIELDS</h3><a class="nav-link" href="#Value">Value</a><h3 >METHODS</h3><a class="nav-link" href="#Append">Append(NewType&lt;T&gt;)</a><a class="nav-link" href="#As&lt;NT>">As&lt;NT&gt;()</a><a class="nav-link" href="#Bind">Bind(Func&lt;T, NewType&lt;T&gt;&gt;)</a><a class="nav-link" href="#CompareTo">CompareTo(NewType&lt;T&gt;)</a><a class="nav-link" href="#Count">Count()</a><a class="nav-link" href="#Divide">Divide(NewType&lt;T&gt;)</a><a class="nav-link" href="#Equals">Equals(NewType&lt;T&gt;)</a><a class="nav-link" href="#Equals">Equals(object)</a><a class="nav-link" href="#Exists">Exists(Func&lt;T, bool&gt;)</a><a class="nav-link" href="#ForAll">ForAll(Func&lt;T, bool&gt;)</a><a class="nav-link" href="#GetHashCode">GetHashCode()</a><a class="nav-link" href="#Iter">Iter(Action&lt;T&gt;)</a><a class="nav-link" href="#Map">Map(Func&lt;T, T&gt;)</a><a class="nav-link" href="#Multiply">Multiply(NewType&lt;T&gt;)</a><a class="nav-link" href="#Select">Select(Func&lt;T, T&gt;)</a><a class="nav-link" href="#SelectMany">SelectMany(Func&lt;T, NewType&lt;T&gt;&gt;, Func&lt;T, T, T&gt;)</a><a class="nav-link" href="#Subtract">Subtract(NewType&lt;T&gt;)</a><a class="nav-link" href="#ToString">ToString()</a></div><div class="content-panel"><h1 >NewType&lt;T&gt; Class</h1><p ><span >NewType - inspired by Haskell&#39;s &#39;newtype&#39; keyword. https://wiki.haskell.org/Newtype Derive type from this one to get: Equatable, Comparable, Appendable, Subtractable,  Multiplicable, Divisible, Foldable, Monadic, Functor, Interable: strongly typed values.  <br/><br/> For example:<br/><br/>     class Metres : NewType&lt;double&gt; { public class Metres(int x) : base(x) {} }     class Hours : NewType&lt;double&gt; { public class Hours(int x) : base(x) {} }<br/><br/> Will not accept null values<br/><br/> </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IMultiplicable</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IDivisible</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Constructors</h2><div class="member-title"><a name="NewType"></a>NewType(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-NewType__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">ctor</span> <span class="ident">NewType</span>(<span class="ident">T</span> value)</div></div><div style="display:none" id="code-NewType__T__value_"><div class="section_title">SOURCE</div><div class="code">
            if (isnull(value)) throw new ArgumentNullException(nameof(value));
            Value = value;
        </div></div></div><h2 >Fields</h2><div class="member-title"><a name="Value"></a>Value</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">T</span> <span class="ident">Value</span></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Append"></a>Append(NewType&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Append__NewType_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Append</span>(<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Append__NewType_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            GetType() == rhs.GetType()
                ? (NewType&lt;T&gt;)NewType.Construct(GetType(), TypeDesc.Append(Value, rhs.Value, TypeDesc&lt;T&gt;.Default))
                : failwith&lt;NewType&lt;T&gt;&gt;(&quot;Mismatched NewTypes in append/add&quot;)</div></div></div><div class="member-title"><a name="As&lt;NT>"></a>As&lt;NT&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-As_NT_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">NT</span> <span class="ident">As</span>&lt;<span class="ident">NT</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NT</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NT</span> : <span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-As_NT_"><div class="section_title">SOURCE</div><div class="code">
            GetType() == typeof(NT)
                ? (NT)this
                : failwith&lt;NT&gt;(&quot;Mismatched NewTypes cast&quot;)</div></div></div><div class="member-title"><a name="Bind"></a>Bind(Func&lt;T, NewType&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind__Func_T_NewType&lt;T>_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Bind</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Bind__Func_T_NewType&lt;T>_bind_"><div class="section_title">SOURCE</div><div class="code">
            var ures = bind(Value);
            if (GetType() != ures.GetType()) throw new Exception(&quot;LINQ statement with mismatched NewTypes&quot;);
            return ures;
        </div></div></div><div class="member-title"><a name="CompareTo"></a>CompareTo(NewType&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareTo__NewType_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">CompareTo</span>(<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-CompareTo__NewType_T_other_"><div class="section_title">SOURCE</div><div class="code">
            !ReferenceEquals(other, null) &amp;&amp;
            GetType() == other.GetType()
                ? Comparer&lt;T&gt;.Default.Compare(Value, other.Value)
                : failwith&lt;int&gt;(&quot;Mismatched NewTypes used in comparison&quot;)</div></div></div><div class="member-title"><a name="Count"></a>Count()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Count__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">Count</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Count__"><div class="section_title">SOURCE</div><div class="code"> 1</div></div></div><div class="member-title"><a name="Divide"></a>Divide(NewType&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Divide__NewType_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Divide</span>(<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Divide__NewType_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            GetType() == rhs.GetType()
                ? (NewType&lt;T&gt;)NewType.Construct(GetType(), TypeDesc.Divide(Value, rhs.Value, TypeDesc&lt;T&gt;.Default))
                : failwith&lt;NewType&lt;T&gt;&gt;(&quot;Mismatched NewTypes in divide&quot;)</div></div></div><div class="member-title"><a name="Equals"></a>Equals(NewType&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__NewType_T_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Equals__NewType_T_other_"><div class="section_title">SOURCE</div><div class="code">
            !ReferenceEquals(other, null) &amp;&amp;
            GetType() == other.GetType() &amp;&amp;
            Value.Equals(other.Value)</div></div></div><div class="member-title"><a name="Equals"></a>Equals(object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__object__obj_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">obj</div><div class="arg-type"><span class="keyword">object</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="keyword">object</span> obj)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Equals__object__obj_"><div class="section_title">SOURCE</div><div class="code">
            !ReferenceEquals(obj, null) &amp;&amp;
            obj is NewType&lt;T&gt; &amp;&amp;
            Equals((NewType&lt;T&gt;)obj)</div></div></div><div class="member-title"><a name="Exists"></a>Exists(Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists__Func_T_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Exists</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Exists__Func_T_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            predicate(Value)</div></div></div><div class="member-title"><a name="ForAll"></a>ForAll(Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll__Func_T_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">ForAll</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-ForAll__Func_T_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            predicate(Value)</div></div></div><div class="member-title"><a name="GetHashCode"></a>GetHashCode()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetHashCode__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="ident">GetHashCode</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-GetHashCode__"><div class="section_title">SOURCE</div><div class="code">
            Value == null ? 0 : Value.GetHashCode()</div></div></div><div class="member-title"><a name="Iter"></a>Iter(Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter__Action_T_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">Iter</span>(<span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; f)</div></div><div style="display:none" id="code-Iter__Action_T_f_"><div class="section_title">SOURCE</div><div class="code">
            f(Value);
            return unit;
        </div></div></div><div class="member-title"><a name="Map"></a>Map(Func&lt;T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map__Func_T_T_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Map</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Map__Func_T_T_map_"><div class="section_title">SOURCE</div><div class="code">
            Select(map)</div></div></div><div class="member-title"><a name="Multiply"></a>Multiply(NewType&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Multiply__NewType_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Multiply</span>(<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Multiply__NewType_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            GetType() == rhs.GetType()
                ? (NewType&lt;T&gt;)NewType.Construct(GetType(), TypeDesc.Multiply(Value, rhs.Value, TypeDesc&lt;T&gt;.Default))
                : failwith&lt;NewType&lt;T&gt;&gt;(&quot;Mismatched NewTypes in multiply&quot;)</div></div></div><div class="member-title"><a name="Select"></a>Select(Func&lt;T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select__Func_T_T_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Select</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Select__Func_T_T_map_"><div class="section_title">SOURCE</div><div class="code">
            (NewType&lt;T&gt;)NewType.Construct(GetType(), map(Value))</div></div></div><div class="member-title"><a name="SelectMany"></a>SelectMany(Func&lt;T, NewType&lt;T&gt;&gt;, Func&lt;T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany__Func_T_NewType&lt;T>_bind__Func_T_T_T_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; <span class="ident">SelectMany</span>(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany__Func_T_NewType&lt;T>_bind__Func_T_T_T_project_"><div class="section_title">SOURCE</div><div class="code">
            var ures = bind(Value);
            if (GetType() != ures.GetType()) throw new Exception(&quot;LINQ statement with mismatched NewTypes&quot;);
            return (NewType&lt;T&gt;)NewType.Construct(GetType(), project(Value, ures.Value));
        </div></div></div><div class="member-title"><a name="Subtract"></a>Subtract(NewType&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subtract__NewType_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Subtract</span>(<span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NewType</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Subtract__NewType_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            GetType() == rhs.GetType()
                ? (NewType&lt;T&gt;)NewType.Construct(GetType(), TypeDesc.Subtract(Value, rhs.Value, TypeDesc&lt;T&gt;.Default))
                : failwith&lt;NewType&lt;T&gt;&gt;(&quot;Mismatched NewTypes in subtract&quot;)</div></div></div><div class="member-title"><a name="ToString"></a>ToString()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToString__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="ident">ToString</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">string</span></div><div class="normal"></div></div></div><div style="display:none" id="code-ToString__"><div class="section_title">SOURCE</div><div class="code">
            $&quot;{GetType().Name}({Value})&quot;</div></div></div></div></body></html>