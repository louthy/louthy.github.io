<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="https://louthy.github.io/">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="StateExt_.htm">StateExt</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#AsEnumerable&lt;S, T>">AsEnumerable&lt;S, T&gt;(State&lt;S, T&gt;)</a><a class="nav-link" href="#AsEnumerable&lt;S, T>">AsEnumerable&lt;S, T&gt;(State&lt;S, T&gt;, S)</a><a class="nav-link" href="#Bind&lt;S, T, R>">Bind&lt;S, T, R&gt;(State&lt;S, T&gt;, Func&lt;T, State&lt;S, R&gt;&gt;)</a><a class="nav-link" href="#Count&lt;S, T>">Count&lt;S, T&gt;(State&lt;S, T&gt;)</a><a class="nav-link" href="#Exists&lt;S, T>">Exists&lt;S, T&gt;(State&lt;S, T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Filter&lt;S, T>">Filter&lt;S, T&gt;(State&lt;S, T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Fold&lt;S, T, FState>">Fold&lt;S, T, FState&gt;(State&lt;S, T&gt;, FState, Func&lt;FState, T, FState&gt;)</a><a class="nav-link" href="#Fold&lt;S, T>">Fold&lt;S, T&gt;(State&lt;S, T&gt;, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, Env, T, V>">foldT&lt;S, Env, T, V&gt;(State&lt;S, Reader&lt;Env, T&gt;&gt;, V, Func&lt;V, T, V&gt;)</a><a class="nav-link" href="#FoldT&lt;S, Env, T, V>">FoldT&lt;S, Env, T, V&gt;(State&lt;S, Reader&lt;Env, T&gt;&gt;, V, Func&lt;V, T, V&gt;)</a><a class="nav-link" href="#foldT&lt;S, Out, T, V>">foldT&lt;S, Out, T, V&gt;(State&lt;S, Writer&lt;Out, T&gt;&gt;, V, Func&lt;V, T, V&gt;)</a><a class="nav-link" href="#FoldT&lt;S, Out, T, V>">FoldT&lt;S, Out, T, V&gt;(State&lt;S, Writer&lt;Out, T&gt;&gt;, V, Func&lt;V, T, V&gt;)</a><a class="nav-link" href="#ForAll&lt;S, T>">ForAll&lt;S, T&gt;(State&lt;S, T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Iter&lt;S, T>">Iter&lt;S, T&gt;(State&lt;S, T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#Map&lt;S, T, R>">Map&lt;S, T, R&gt;(State&lt;S, T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#Modify&lt;S, T>">Modify&lt;S, T&gt;(State&lt;S, T&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#Select&lt;S, T, U>">Select&lt;S, T, U&gt;(State&lt;S, T&gt;, Func&lt;T, U&gt;)</a><a class="nav-link" href="#SelectMany&lt;S, E, T, U, V>">SelectMany&lt;S, E, T, U, V&gt;(State&lt;S, T&gt;, Func&lt;T, Reader&lt;E, U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#SelectMany&lt;S, Out, T, U, V>">SelectMany&lt;S, Out, T, U, V&gt;(State&lt;S, T&gt;, Func&lt;T, Writer&lt;Out, U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#SelectMany&lt;S, T, U, V>">SelectMany&lt;S, T, U, V&gt;(State&lt;S, T&gt;, Func&lt;T, State&lt;S, U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#Sum&lt;S>">Sum&lt;S&gt;(State&lt;S, int&gt;)</a><a class="nav-link" href="#Where&lt;S, T>">Where&lt;S, T&gt;(State&lt;S, T&gt;, Func&lt;T, bool&gt;)</a></div><div class="content-panel"><h1 >StateExt Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">StateExt</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="AsEnumerable&lt;S, T>"></a>AsEnumerable&lt;S, T&gt;(State&lt;S, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable_S_T_State_S_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">AsEnumerable</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsEnumerable_S_T_State_S_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Select(x =&gt; (new T[1] { x }).AsEnumerable())</div></div></div><div class="member-title"><a name="AsEnumerable&lt;S, T>"></a>AsEnumerable&lt;S, T&gt;(State&lt;S, T&gt;, S)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable_S_T_State_S_T_self__S__state_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">AsEnumerable</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self, <span class="ident">S</span> state)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsEnumerable_S_T_State_S_T_self__S__state_"><div class="section_title">SOURCE</div><div class="code">
            var res = self.Valid()(state);
            if (!res.IsBottom)
            {
                yield return self(state).Value;
            }
        </div></div></div><div class="member-title"><a name="Bind&lt;S, T, R>"></a>Bind&lt;S, T, R&gt;(State&lt;S, T&gt;, Func&lt;T, State&lt;S, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_S_T_R_State_S_T_self__Func_T_State&lt;S, R>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>&gt; <span class="ident">Bind</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Bind_S_T_R_State_S_T_self__Func_T_State&lt;S, R>_binder_"><div class="section_title">SOURCE</div><div class="code">
            return state =&gt;
            {
                var resT = self.Valid()(state);
                if( resT.IsBottom )
                {
                    return StateResult.Bottom&lt;S, R&gt;(state);
                }
                return binder(resT.Value).Valid()(resT.State);
            };
        </div></div></div><div class="member-title"><a name="Count&lt;S, T>"></a>Count&lt;S, T&gt;(State&lt;S, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Count_S_T_State_S_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="keyword">int</span>&gt; <span class="ident">Count</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Count_S_T_State_S_T_self_"><div class="section_title">SOURCE</div><div class="code">
            s =&gt;
            {
                var res = self.Valid()(s);
                return res.IsBottom
                  ? StateResult.Bottom&lt;S, int&gt;(s)
                  : StateResult.Return(res.State, 1);
            }</div></div></div><div class="member-title"><a name="Exists&lt;S, T>"></a>Exists&lt;S, T&gt;(State&lt;S, T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists_S_T_State_S_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt; <span class="ident">Exists</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Exists_S_T_State_S_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Select(pred)</div></div></div><div class="member-title"><a name="Filter&lt;S, T>"></a>Filter&lt;S, T&gt;(State&lt;S, T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter_S_T_State_S_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; <span class="ident">Filter</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Filter_S_T_State_S_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Where(pred)</div></div></div><div class="member-title"><a name="Fold&lt;S, T, FState>"></a>Fold&lt;S, T, FState&gt;(State&lt;S, T&gt;, FState, Func&lt;FState, T, FState&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_S_T_FState_State_S_T_self__FState__state__Func_FState_T_FState_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">FState</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">FState</span>, <span class="ident">T</span>, <span class="ident">FState</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">FState</span>&gt; <span class="ident">Fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">FState</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self, <span class="ident">FState</span> state, <span class="ident">Func</span>&lt;<span class="ident">FState</span>, <span class="ident">T</span>, <span class="ident">FState</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">FState</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Fold_S_T_FState_State_S_T_self__FState__state__Func_FState_T_FState_folder_"><div class="section_title">SOURCE</div><div class="code">
            s =&gt; bmap(self.Valid()(s), x =&gt; folder(state, x))</div></div></div><div class="member-title"><a name="Fold&lt;S, T>"></a>Fold&lt;S, T&gt;(State&lt;S, T&gt;, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_S_T_State_S_T_self__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; <span class="ident">Fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Fold_S_T_State_S_T_self__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            s =&gt; bmap(self.Valid()(s), x =&gt; folder(s, x))</div></div></div><div class="member-title"><a name="foldT&lt;S, Env, T, V>"></a>foldT&lt;S, Env, T, V&gt;(State&lt;S, Reader&lt;Env, T&gt;&gt;, V, Func&lt;V, T, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_Env_T_V_State_S_Reader&lt;Env, T>_self__V__state__Func_V_T_V_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">V</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">Env</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;(<span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">T</span>&gt;&gt; self, <span class="ident">V</span> state, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-foldT_S_Env_T_V_State_S_Reader&lt;Env, T>_self__V__state__Func_V_T_V_fold_"><div class="section_title">SOURCE</div><div class="code">
            self.FoldT(state, fold)</div></div></div><div class="member-title"><a name="FoldT&lt;S, Env, T, V>"></a>FoldT&lt;S, Env, T, V&gt;(State&lt;S, Reader&lt;Env, T&gt;&gt;, V, Func&lt;V, T, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_Env_T_V_State_S_Reader&lt;Env, T>_self__V__state__Func_V_T_V_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">V</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">Env</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">T</span>&gt;&gt; self, <span class="ident">V</span> state, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FoldT_S_Env_T_V_State_S_Reader&lt;Env, T>_self__V__state__Func_V_T_V_fold_"><div class="section_title">SOURCE</div><div class="code">
            return (S s) =&gt;
            {
                var inner = self.Valid()(s);
                if (inner.IsBottom) return StateResult.Bottom&lt;S, Reader&lt;Env, V&gt;&gt;(s);
                return StateResult.Return(inner.State, inner.Value.Fold(state, fold));
            };
        </div></div></div><div class="member-title"><a name="foldT&lt;S, Out, T, V>"></a>foldT&lt;S, Out, T, V&gt;(State&lt;S, Writer&lt;Out, T&gt;&gt;, V, Func&lt;V, T, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_Out_T_V_State_S_Writer&lt;Out, T>_self__V__state__Func_V_T_V_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">V</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">Out</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;(<span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;&gt; self, <span class="ident">V</span> state, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-foldT_S_Out_T_V_State_S_Writer&lt;Out, T>_self__V__state__Func_V_T_V_fold_"><div class="section_title">SOURCE</div><div class="code">
            self.FoldT(state, fold)</div></div></div><div class="member-title"><a name="FoldT&lt;S, Out, T, V>"></a>FoldT&lt;S, Out, T, V&gt;(State&lt;S, Writer&lt;Out, T&gt;&gt;, V, Func&lt;V, T, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_Out_T_V_State_S_Writer&lt;Out, T>_self__V__state__Func_V_T_V_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">V</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">Out</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">T</span>&gt;&gt; self, <span class="ident">V</span> state, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">T</span>, <span class="ident">V</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FoldT_S_Out_T_V_State_S_Writer&lt;Out, T>_self__V__state__Func_V_T_V_fold_"><div class="section_title">SOURCE</div><div class="code">
            return (S s) =&gt;
            {
                var inner = self.Valid()(s);
                if (inner.IsBottom) return StateResult.Bottom&lt;S, Writer&lt;Out, V&gt;&gt;(s);
                return StateResult.Return(inner.State, inner.Value.Fold(state, fold));
            };
        </div></div></div><div class="member-title"><a name="ForAll&lt;S, T>"></a>ForAll&lt;S, T&gt;(State&lt;S, T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll_S_T_State_S_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt; <span class="ident">ForAll</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ForAll_S_T_State_S_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Select(pred)</div></div></div><div class="member-title"><a name="Iter&lt;S, T>"></a>Iter&lt;S, T&gt;(State&lt;S, T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter_S_T_State_S_T_self__Action_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>&gt; <span class="ident">Iter</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; action)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Iter_S_T_State_S_T_self__Action_T_action_"><div class="section_title">SOURCE</div><div class="code">
            s =&gt; bmap(self.Valid()(s), action)</div></div></div><div class="member-title"><a name="Map&lt;S, T, R>"></a>Map&lt;S, T, R&gt;(State&lt;S, T&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_S_T_R_State_S_T_self__Func_T_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Map_S_T_R_State_S_T_self__Func_T_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
            self.Select(mapper)</div></div></div><div class="member-title"><a name="Modify&lt;S, T>"></a>Modify&lt;S, T&gt;(State&lt;S, T&gt;, Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Modify_S_T_State_S_T_self__Func_S_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; <span class="ident">Modify</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Modify_S_T_State_S_T_self__Func_S_S_f_"><div class="section_title">SOURCE</div><div class="code">
            if (f == null) throw new ArgumentNullException(nameof(map));
            return (S state) =&gt;
            {
                var resT = self.Valid()(state);
                return resT.IsBottom
                    ? StateResult.Bottom&lt;S, T&gt;(state)
                    : StateResult.Return(f(resT.State), resT.Value);
            };
        </div></div></div><div class="member-title"><a name="Select&lt;S, T, U>"></a>Select&lt;S, T, U&gt;(State&lt;S, T&gt;, Func&lt;T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_S_T_U_State_S_T_self__Func_T_U_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>&gt; <span class="ident">Select</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Select_S_T_U_State_S_T_self__Func_T_U_map_"><div class="section_title">SOURCE</div><div class="code">
            if (map == null) throw new ArgumentNullException(nameof(map));
            return (S state) =&gt;
            {
                var resT = self.Valid()(state);
                return resT.IsBottom
                    ? StateResult.Bottom&lt;S, U&gt;(state)
                    : StateResult.Return(resT.State, map(resT.Value));
            };
        </div></div></div><div class="member-title"><a name="SelectMany&lt;S, E, T, U, V>"></a>SelectMany&lt;S, E, T, U, V&gt;(State&lt;S, T&gt;, Func&lt;T, Reader&lt;E, U&gt;&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_S_E_T_U_V_State_S_T_self__Func_T_Reader&lt;E, U>_bind__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Select Many </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Reader</span>&lt;<span class="ident">E</span>, <span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Reader</span>&lt;<span class="ident">E</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Reader</span>&lt;<span class="ident">E</span>, <span class="ident">U</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Reader</span>&lt;<span class="ident">E</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_S_E_T_U_V_State_S_T_self__Func_T_Reader&lt;E, U>_bind__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            if (bind == null) throw new ArgumentNullException(nameof(bind));
            if (project == null) throw new ArgumentNullException(nameof(project));
            return (S s) =&gt;
            {
                var resT = self.Valid()(s);
                if (resT.IsBottom) return StateResult.Bottom&lt;S, Reader&lt;E, V&gt;&gt;(s);
                return StateResult.Return&lt;S, Reader&lt;E, V&gt;&gt;(resT.State, envInner =&gt;
                {
                    var resU = bind(resT.Value).Valid()(envInner);
                    if (resU.IsBottom) return new ReaderResult&lt;V&gt;(default(V), true);
                    return ReaderResult.Return(project(resT.Value, resU.Value));
                });
            };
        </div></div></div><div class="member-title"><a name="SelectMany&lt;S, Out, T, U, V>"></a>SelectMany&lt;S, Out, T, U, V&gt;(State&lt;S, T&gt;, Func&lt;T, Writer&lt;Out, U&gt;&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_S_Out_T_U_V_State_S_T_self__Func_T_Writer&lt;Out, U>_bind__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Select Many </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">S</span>, <span class="ident">Out</span>, <span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">U</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Writer</span>&lt;<span class="ident">Out</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_S_Out_T_U_V_State_S_T_self__Func_T_Writer&lt;Out, U>_bind__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            if (bind == null) throw new ArgumentNullException(nameof(bind));
            if (project == null) throw new ArgumentNullException(nameof(project));
            return (S s) =&gt;
            {
                var resT = self.Valid()(s);
                if (resT.IsBottom) return StateResult.Bottom&lt;S, Writer&lt;Out, V&gt;&gt;(s);
                return StateResult.Return&lt;S, Writer&lt;Out, V&gt;&gt;(resT.State, () =&gt;
                {
                    var resU = bind(resT.Value).Valid()();
                    if (resU.IsBottom) return new WriterResult&lt;Out, V&gt;(default(V), resU.Output, true);
                    return WriterResult.Return(project(resT.Value, resU.Value),resU.Output);
                });
            };
        </div></div></div><div class="member-title"><a name="SelectMany&lt;S, T, U, V>"></a>SelectMany&lt;S, T, U, V&gt;(State&lt;S, T&gt;, Func&lt;T, State&lt;S, U&gt;&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_S_T_U_V_State_S_T_self__Func_T_State&lt;S, U>_bind__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_S_T_U_V_State_S_T_self__Func_T_State&lt;S, U>_bind__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            if (bind == null) throw new ArgumentNullException(nameof(bind));
            if (project == null) throw new ArgumentNullException(nameof(project));

            return (S state) =&gt;
            {
                var resT = self.Valid()(state);
                if (resT.IsBottom) return StateResult.Bottom&lt;S, V&gt;(state);
                var resU = bind(resT.Value).Valid()(resT.State);
                if (resU.IsBottom) return StateResult.Bottom&lt;S, V&gt;(resT.State);
                var resV = project(resT.Value, resU.Value);
                return StateResult.Return(resU.State, resV);
            };
        </div></div></div><div class="member-title"><a name="Sum&lt;S>"></a>Sum&lt;S&gt;(State&lt;S, int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum_S_State_S_int_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="keyword">int</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="keyword">int</span>&gt; <span class="ident">Sum</span>&lt;<span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="keyword">int</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Sum_S_State_S_int_self_"><div class="section_title">SOURCE</div><div class="code">
            state =&gt; bmap(self.Valid()(state), x =&gt; x)</div></div></div><div class="member-title"><a name="Where&lt;S, T>"></a>Where&lt;S, T&gt;(State&lt;S, T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_S_T_State_S_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; <span class="ident">Where</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Where_S_T_State_S_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            return state =&gt;
            {
                var res = self.Valid()(state);
                if (res.IsBottom) return StateResult.Bottom&lt;S, T&gt;(state);
                return pred(res.Value)
                    ? StateResult.Return(res.State, res.Value)
                    : StateResult.Bottom&lt;S, T&gt;(state);
            };
        </div></div></div></div></body></html>