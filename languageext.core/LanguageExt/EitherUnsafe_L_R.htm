<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="EitherUnsafe_L_R.htm">EitherUnsafe&lt;L, R&gt;</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#State">State</a><h3 >PROPERTIES</h3><a class="nav-link" href="#IsBottom">IsBottom</a><a class="nav-link" href="#IsLeft">IsLeft</a><a class="nav-link" href="#IsRight">IsRight</a><h3 >METHODS</h3><a class="nav-link" href="#Append">Append(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#AsEnumerable">AsEnumerable()</a><a class="nav-link" href="#BindUnsafe&lt;Ret>">BindUnsafe&lt;Ret&gt;(Func&lt;R, EitherUnsafe&lt;L, Ret&gt;&gt;)</a><a class="nav-link" href="#CompareTo">CompareTo(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#CompareTo">CompareTo(R)</a><a class="nav-link" href="#CompareTo">CompareTo(L)</a><a class="nav-link" href="#Divide">Divide(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#Equals">Equals(object)</a><a class="nav-link" href="#Equals">Equals(R)</a><a class="nav-link" href="#Equals">Equals(L)</a><a class="nav-link" href="#Equals">Equals(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#FailureUnsafe">FailureUnsafe(Func&lt;R&gt;)</a><a class="nav-link" href="#FailureUnsafe">FailureUnsafe(R)</a><a class="nav-link" href="#GetHashCode">GetHashCode()</a><a class="nav-link" href="#GetUnderlyingLeftType">GetUnderlyingLeftType()</a><a class="nav-link" href="#GetUnderlyingRightType">GetUnderlyingRightType()</a><a class="nav-link" href="#IfLeftUnsafe">IfLeftUnsafe(Func&lt;R&gt;)</a><a class="nav-link" href="#IfLeftUnsafe">IfLeftUnsafe(Func&lt;L, R&gt;)</a><a class="nav-link" href="#IfLeftUnsafe">IfLeftUnsafe(R)</a><a class="nav-link" href="#IfLeftUnsafe">IfLeftUnsafe(Action&lt;L&gt;)</a><a class="nav-link" href="#IfRightUnsafe">IfRightUnsafe(Action&lt;R&gt;)</a><a class="nav-link" href="#IfRightUnsafe">IfRightUnsafe(L)</a><a class="nav-link" href="#IfRightUnsafe">IfRightUnsafe(Func&lt;L&gt;)</a><a class="nav-link" href="#IfRightUnsafe">IfRightUnsafe(Func&lt;R, L&gt;)</a><a class="nav-link" href="#LeftAsEnumerable">LeftAsEnumerable()</a><a class="nav-link" href="#LeftToArray">LeftToArray()</a><a class="nav-link" href="#LeftToList">LeftToList()</a><a class="nav-link" href="#MatchAsyncUnsafe&lt;R2>">MatchAsyncUnsafe&lt;R2&gt;(Func&lt;R, Task&lt;R2&gt;&gt;, Func&lt;L, R2&gt;)</a><a class="nav-link" href="#MatchAsyncUnsafe&lt;R2>">MatchAsyncUnsafe&lt;R2&gt;(Func&lt;R, Task&lt;R2&gt;&gt;, Func&lt;L, Task&lt;R2&gt;&gt;)</a><a class="nav-link" href="#MatchObservableUnsafe&lt;R2>">MatchObservableUnsafe&lt;R2&gt;(Func&lt;R, IObservable&lt;R2&gt;&gt;, Func&lt;L, R2&gt;)</a><a class="nav-link" href="#MatchObservableUnsafe&lt;R2>">MatchObservableUnsafe&lt;R2&gt;(Func&lt;R, IObservable&lt;R2&gt;&gt;, Func&lt;L, IObservable&lt;R2&gt;&gt;)</a><a class="nav-link" href="#MatchUnsafe">MatchUnsafe(Action&lt;R&gt;, Action&lt;L&gt;)</a><a class="nav-link" href="#MatchUnsafe&lt;Ret>">MatchUnsafe&lt;Ret&gt;(Func&lt;R, Ret&gt;, Func&lt;L, Ret&gt;)</a><a class="nav-link" href="#MatchUntyped&lt;TResult>">MatchUntyped&lt;TResult&gt;(Func&lt;object, TResult&gt;, Func&lt;object, TResult&gt;)</a><a class="nav-link" href="#Multiply">Multiply(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#Right">Right(Action&lt;R&gt;)</a><a class="nav-link" href="#Right&lt;Ret>">Right&lt;Ret&gt;(Func&lt;R, Ret&gt;)</a><a class="nav-link" href="#RightAsEnumerable">RightAsEnumerable()</a><a class="nav-link" href="#RightToArray">RightToArray()</a><a class="nav-link" href="#RightToList">RightToList()</a><a class="nav-link" href="#Subtract">Subtract(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#ToArray">ToArray()</a><a class="nav-link" href="#ToList">ToList()</a><a class="nav-link" href="#ToString">ToString()</a></div><div class="content-panel"><h1 >EitherUnsafe&lt;L, R&gt; Struct</h1><p >EitherUnsafe L R - This is &#39;unsafe&#39; because L or R can be null.  Holds one of two values &#39;Left&#39; or &#39;Right&#39;.  Usually &#39;Left&#39; is considered &#39;wrong&#39; or &#39;in error&#39;, and &#39;Right&#39; is, well, right.  So when the Either is in a Left state, it cancels computations like bind or map, etc.  So you can see Left as an &#39;early out, with a message&#39;.  Unlike Option that has None as its alternative value (i.e. it has an &#39;early out, but no message&#39;). </p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEither</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IAppendable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ISubtractable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IMultiplicable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IDivisible</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div><div class="section"><div class="section_title">REMARKS</div>NOTE: If you use Filter or Where (or &#39;where&#39; in a LINQ expression) with Either, then the Either  will be put into a &#39;Bottom&#39; state if the predicate returns false.  When it&#39;s in this state it is  neither Right nor Left.  And any usage could trigger a BottomException.  So be aware of the issue of filtering Either.  Also note, when the Either is in a Bottom state, some operations on it will continue to give valid results or return another Either in the Bottom state and not throw.  This is so a filtered Either  doesn&#39;t needlessly break expressions.  </div></div><h2 >Fields</h2><div class="member-title"><a name="State"></a>State</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >State of the Either You can also use:     IsRight     IsLeft     IsBottom </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">EitherState</span> <span class="ident">State</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="IsBottom"></a>IsBottom</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Is the Either in a Bottom state? When the Either is filtered, both Right and Left are meaningless.  If you use Filter or Where (or &#39;where&#39; in a LINQ expression) with Either, then the Either  will be put into a &#39;Bottom&#39; state if the predicate returns false.  When it&#39;s in this state it is  neither Right nor Left.  And any usage could trigger a BottomException.  So be aware of the issue of filtering Either.  Also note, when the Either is in a Bottom state, some operations on it will continue to give valid results or return another Either in the Bottom state and not throw.  This is so a filtered Either  doesn&#39;t needlessly break expressions.  </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">IsBottom</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IsLeft"></a>IsLeft</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Is the Either in a Left state? </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">IsLeft</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IsRight"></a>IsRight</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Is the Either in a Right state? </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">IsRight</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Append"></a>Append(EitherUnsafe&lt;L, R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Append the Right of one either to the Right of another For numeric values the behaviour is to sum the Rights (lhs + rhs) For string values the behaviour is to concatenate the strings For Lst/Stck/Que values the behaviour is to concatenate the lists For Map or Set values the behaviour is to merge the sets Otherwise if the R type derives from IAppendable then the behaviour is to call lhs.Append(rhs); </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">Append</span>(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">rhs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal">lhs + rhs</div></div></div></div><div class="member-title"><a name="AsEnumerable"></a>AsEnumerable()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Project the Either into a IEnumerable R </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;AsEnumerable has been deprecated.  Please use RightAsEnumerable.&quot;)]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">AsEnumerable</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">If the Either is in a Right state, an IEnumerable of R with one item.  A zero length IEnumerable R otherwise</div></div></div></div><div class="member-title"><a name="BindUnsafe&lt;Ret>"></a>BindUnsafe&lt;Ret&gt;(Func&lt;R, EitherUnsafe&lt;L, Ret&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt; <span class="ident">BindUnsafe</span>&lt;<span class="ident">Ret</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;&gt; <span class="ident">binder</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="CompareTo"></a>CompareTo(EitherUnsafe&lt;L, R&gt;)</div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">int</span> <span class="ident">CompareTo</span>(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">other</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="CompareTo"></a>CompareTo(R)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >CompareTo override </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">R</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">int</span> <span class="ident">CompareTo</span>(<span class="ident">R</span> <span class="ident">other</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="CompareTo"></a>CompareTo(L)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >CompareTo override </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">L</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">int</span> <span class="ident">CompareTo</span>(<span class="ident">L</span> <span class="ident">other</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Divide"></a>Divide(EitherUnsafe&lt;L, R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Divide the Rights  For numeric values the behaviour is to divide the Rights (lhs / rhs) For Lst values the behaviour is to divide all combinations of values in both lists  to produce a new list Otherwise if the R type derives from IDivisible then the behaviour is to call lhs.Divide(rhs); </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">Divide</span>(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">rhs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal">lhs / rhs</div></div></div></div><div class="member-title"><a name="Equals"></a>Equals(object)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Equality check </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">obj</div><div class="arg-type"><span class="ident">object</span></div></div><div class="arg-desc">Object to test for equality</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="ident">bool</span> <span class="ident">Equals</span>(<span class="ident">object</span> <span class="ident">obj</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if equal</div></div></div></div><div class="member-title"><a name="Equals"></a>Equals(R)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >CompareTo override </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">R</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">Equals</span>(<span class="ident">R</span> <span class="ident">other</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Equals"></a>Equals(L)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Equality override </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">L</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">Equals</span>(<span class="ident">L</span> <span class="ident">other</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Equals"></a>Equals(EitherUnsafe&lt;L, R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Equality override </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">bool</span> <span class="ident">Equals</span>(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">other</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="FailureUnsafe"></a>FailureUnsafe(Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Deprecated </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;FailureUnsafe&#39; has been deprecated.  Please use &#39;IfLeftUnsafe&#39; instead&quot;)]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">FailureUnsafe</span>(<span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="FailureUnsafe"></a>FailureUnsafe(R)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Deprecated </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">R</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;FailureUnsafe&#39; has been deprecated.  Please use &#39;IfLeftUnsafe&#39; instead&quot;)]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">FailureUnsafe</span>(<span class="ident">R</span> <span class="ident">noneValue</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="GetHashCode"></a>GetHashCode()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns a hash code of the wrapped value of the Either </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="ident">int</span> <span class="ident">GetHashCode</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">int</span></div><div class="normal">Hash code</div></div></div></div><div class="member-title"><a name="GetUnderlyingLeftType"></a>GetUnderlyingLeftType()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Find out the underlying Left type </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Type</span> <span class="ident">GetUnderlyingLeftType</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Type</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="GetUnderlyingRightType"></a>GetUnderlyingRightType()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Find out the underlying Right type </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Type</span> <span class="ident">GetUnderlyingRightType</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Type</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IfLeftUnsafe"></a>IfLeftUnsafe(Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Executes the Left function if the Either is in a Left state. Returns the Right value if the Either is in a Right state. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">Function to generate a Right value if in the Left state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">IfLeftUnsafe</span>(<span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Left</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal">Returns an unwrapped Right value</div></div></div></div><div class="member-title"><a name="IfLeftUnsafe"></a>IfLeftUnsafe(Func&lt;L, R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Executes the leftMap function if the Either is in a Left state. Returns the Right value if the Either is in a Right state. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">leftMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Function to generate a Right value if in the Left state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">IfLeftUnsafe</span>(<span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">leftMap</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal">Returns an unwrapped Right value</div></div></div></div><div class="member-title"><a name="IfLeftUnsafe"></a>IfLeftUnsafe(R)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns the rightValue if the Either is in a Left state. Returns the Right value if the Either is in a Right state. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rightValue</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc">Value to return if in the Left state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">IfLeftUnsafe</span>(<span class="ident">R</span> <span class="ident">rightValue</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal">Returns an unwrapped Right value</div></div></div></div><div class="member-title"><a name="IfLeftUnsafe"></a>IfLeftUnsafe(Action&lt;L&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Executes the Left action if the Either is in a Left state. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">L</span>&gt;</div></div><div class="arg-desc">Function to generate a Right value if in the Left state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">IfLeftUnsafe</span>(<span class="ident">Action</span>&lt;<span class="ident">L</span>&gt; <span class="ident">Left</span>)</div></div></div><div class="member-title"><a name="IfRightUnsafe"></a>IfRightUnsafe(Action&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Invokes the Right action if the Either is in a Right state, otherwise does nothing </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">Action to invoke</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">IfRightUnsafe</span>(<span class="ident">Action</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Right</span>)</div></div></div><div class="member-title"><a name="IfRightUnsafe"></a>IfRightUnsafe(L)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns the leftValue if the Either is in a Right state. Returns the Left value if the Either is in a Left state. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">leftValue</div><div class="arg-type"><span class="ident">L</span></div></div><div class="arg-desc">Value to return if in the Left state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">L</span> <span class="ident">IfRightUnsafe</span>(<span class="ident">L</span> <span class="ident">leftValue</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">L</span></div><div class="normal">Returns an unwrapped Left value</div></div></div></div><div class="member-title"><a name="IfRightUnsafe"></a>IfRightUnsafe(Func&lt;L&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns the result of Left() if the Either is in a Right state. Returns the Left value if the Either is in a Left state. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div><div class="arg-desc">Function to generate a Left value if in the Right state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">L</span> <span class="ident">IfRightUnsafe</span>(<span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; <span class="ident">Left</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">L</span></div><div class="normal">Returns an unwrapped Left value</div></div></div></div><div class="member-title"><a name="IfRightUnsafe"></a>IfRightUnsafe(Func&lt;R, L&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns the result of leftMap if the Either is in a Right state. Returns the Left value if the Either is in a Left state. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">leftMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">L</span>&gt;</div></div><div class="arg-desc">Function to generate a Left value if in the Right state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">L</span> <span class="ident">IfRightUnsafe</span>(<span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">L</span>&gt; <span class="ident">leftMap</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">L</span></div><div class="normal">Returns an unwrapped Left value</div></div></div></div><div class="member-title"><a name="LeftAsEnumerable"></a>LeftAsEnumerable()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Project the Either into a IEnumerable L </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">L</span>&gt; <span class="ident">LeftAsEnumerable</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">L</span>&gt;</div><div class="normal">If the Either is in a Left state, an IEnumerable of L with one item.  A zero length IEnumerable L otherwise</div></div></div></div><div class="member-title"><a name="LeftToArray"></a>LeftToArray()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Project the Either into an ImmutableArray R </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">L</span>[] <span class="ident">LeftToArray</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">L</span>[]</div><div class="normal">If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</div></div></div></div><div class="member-title"><a name="LeftToList"></a>LeftToList()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Project the Either into a Lst R </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">L</span>&gt; <span class="ident">LeftToList</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">L</span>&gt;</div><div class="normal">If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</div></div></div></div><div class="member-title"><a name="MatchAsyncUnsafe&lt;R2>"></a>MatchAsyncUnsafe&lt;R2&gt;(Func&lt;R, Task&lt;R2&gt;&gt;, Func&lt;L, R2&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Either and return a promise for a non-null R2. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt; <span class="ident">MatchAsyncUnsafe</span>&lt;<span class="ident">R2</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt;&gt; <span class="ident">Right</span>, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt; <span class="ident">Left</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt;</div><div class="normal">A promise to return a non-null R2</div></div></div></div><div class="member-title"><a name="MatchAsyncUnsafe&lt;R2>"></a>MatchAsyncUnsafe&lt;R2&gt;(Func&lt;R, Task&lt;R2&gt;&gt;, Func&lt;L, Task&lt;R2&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Either and return a promise for a non-null R2. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt; <span class="ident">MatchAsyncUnsafe</span>&lt;<span class="ident">R2</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt;&gt; <span class="ident">Right</span>, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt;&gt; <span class="ident">Left</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt;</div><div class="normal">A promise to return a non-null R2</div></div></div></div><div class="member-title"><a name="MatchObservableUnsafe&lt;R2>"></a>MatchObservableUnsafe&lt;R2&gt;(Func&lt;R, IObservable&lt;R2&gt;&gt;, Func&lt;L, R2&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Either and return an observable stream of non-null R2s. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R2</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IObservable</span>&lt;<span class="ident">R2</span>&gt; <span class="ident">MatchObservableUnsafe</span>&lt;<span class="ident">R2</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R2</span>&gt;&gt; <span class="ident">Right</span>, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt; <span class="ident">Left</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R2</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="MatchObservableUnsafe&lt;R2>"></a>MatchObservableUnsafe&lt;R2&gt;(Func&lt;R, IObservable&lt;R2&gt;&gt;, Func&lt;L, IObservable&lt;R2&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the two states of the Either and return an observable stream of non-null R2s. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R2</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R2</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IObservable</span>&lt;<span class="ident">R2</span>&gt; <span class="ident">MatchObservableUnsafe</span>&lt;<span class="ident">R2</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R2</span>&gt;&gt; <span class="ident">Right</span>, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R2</span>&gt;&gt; <span class="ident">Left</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R2</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="MatchUnsafe"></a>MatchUnsafe(Action&lt;R&gt;, Action&lt;L&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Invokes the Right or Left action depending on the state of the Either </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">Action to invoke if in a Right state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">L</span>&gt;</div></div><div class="arg-desc">Action to invoke if in a Left state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">MatchUnsafe</span>(<span class="ident">Action</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Right</span>, <span class="ident">Action</span>&lt;<span class="ident">L</span>&gt; <span class="ident">Left</span>)</div></div></div><div class="member-title"><a name="MatchUnsafe&lt;Ret>"></a>MatchUnsafe&lt;Ret&gt;(Func&lt;R, Ret&gt;, Func&lt;L, Ret&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Invokes the Right or Left function depending on the state of the Either </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc">Function to invoke if in a Right state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc">Function to invoke if in a Left state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Ret</span> <span class="ident">MatchUnsafe</span>&lt;<span class="ident">Ret</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt; <span class="ident">Right</span>, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt; <span class="ident">Left</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Ret</span></div><div class="normal">The return value of the invoked function</div></div></div></div><div class="member-title"><a name="MatchUntyped&lt;TResult>"></a>MatchUntyped&lt;TResult&gt;(Func&lt;object, TResult&gt;, Func&lt;object, TResult&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match the Right and Left values but as objects.  This can be useful to avoid reflection. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">object</span>, <span class="ident">TResult</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">object</span>, <span class="ident">TResult</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">TResult</span> <span class="ident">MatchUntyped</span>&lt;<span class="ident">TResult</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">object</span>, <span class="ident">TResult</span>&gt; <span class="ident">Right</span>, <span class="ident">Func</span>&lt;<span class="ident">object</span>, <span class="ident">TResult</span>&gt; <span class="ident">Left</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TResult</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Multiply"></a>Multiply(EitherUnsafe&lt;L, R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Find the product of the Rights  For numeric values the behaviour is to multiply the Rights (lhs * rhs) For Lst values the behaviour is to multiply all combinations of values in both lists  to produce a new list Otherwise if the R type derives from IMultiplicable then the behaviour is to call lhs.Multiply(rhs); </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">Multiply</span>(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">rhs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal">lhs * rhs</div></div></div></div><div class="member-title"><a name="Right"></a>Right(Action&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match Right and return a context.  You must follow this with .Left(...) to complete the match </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rightHandler</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">Action to invoke if the Either is in a Right state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">EitherUnsafeUnitContext</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">Right</span>(<span class="ident">Action</span>&lt;<span class="ident">R</span>&gt; <span class="ident">rightHandler</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafeUnitContext</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal">Context that must have Left() called upon it.</div></div></div></div><div class="member-title"><a name="Right&lt;Ret>"></a>Right&lt;Ret&gt;(Func&lt;R, Ret&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Match Right and return a context.  You must follow this with .Left(...) to complete the match </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rightHandler</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc">Action to invoke if the Either is in a Right state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">EitherUnsafeContext</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt; <span class="ident">Right</span>&lt;<span class="ident">Ret</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt; <span class="ident">rightHandler</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafeContext</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;</div><div class="normal">Context that must have Left() called upon it.</div></div></div></div><div class="member-title"><a name="RightAsEnumerable"></a>RightAsEnumerable()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Project the Either into a IEnumerable R </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">RightAsEnumerable</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">If the Either is in a Right state, an IEnumerable of R with one item.  A zero length IEnumerable R otherwise</div></div></div></div><div class="member-title"><a name="RightToArray"></a>RightToArray()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Project the Either into an ImmutableArray R </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span>[] <span class="ident">RightToArray</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span>[]</div><div class="normal">If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</div></div></div></div><div class="member-title"><a name="RightToList"></a>RightToList()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Project the Either into a Lst R </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt; <span class="ident">RightToList</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</div></div></div></div><div class="member-title"><a name="Subtract"></a>Subtract(EitherUnsafe&lt;L, R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Subtract the Right of one either from the Right of another For numeric values the behaviour is to find the difference between the Rights (lhs - rhs) For Lst values the behaviour is to remove items in the rhs from the lhs For Map or Set values the behaviour is to remove items in the rhs from the lhs Otherwise if the R type derives from ISubtractable then the behaviour is to call lhs.Subtract(rhs); </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">Subtract</span>(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">rhs</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal">lhs - rhs</div></div></div></div><div class="member-title"><a name="ToArray"></a>ToArray()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Project the Either into an ImmutableArray R </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;ToArray has been deprecated.  Please use RightToArray.&quot;)]</div><span class="keyword">public</span> <span class="ident">R</span>[] <span class="ident">ToArray</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span>[]</div><div class="normal">If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</div></div></div></div><div class="member-title"><a name="ToList"></a>ToList()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Project the Either into a Lst R </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;ToList has been deprecated.  Please use RightToList.&quot;)]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt; <span class="ident">ToList</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</div></div></div></div><div class="member-title"><a name="ToString"></a>ToString()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Return a string representation of the Either </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="ident">string</span> <span class="ident">ToString</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">string</span></div><div class="normal">String representation of the Either</div></div></div></div></div></body></html>