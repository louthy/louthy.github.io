<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Map_.htm">Map</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#add&lt;K, V>">add&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)</a><a class="nav-link" href="#addOrUpdate&lt;K, V>">addOrUpdate&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)</a><a class="nav-link" href="#addOrUpdate&lt;K, V>">addOrUpdate&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;, Func&lt;V&gt;)</a><a class="nav-link" href="#addOrUpdate&lt;K, V>">addOrUpdate&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;, V)</a><a class="nav-link" href="#addOrUpdateRange&lt;K, V>">addOrUpdateRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#addOrUpdateRange&lt;K, V>">addOrUpdateRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#addRange&lt;K, V>">addRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#addRange&lt;K, V>">addRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#choose&lt;K, T>">choose&lt;K, T&gt;(Map&lt;K, T&gt;, Func&lt;T, Option&lt;T&gt;&gt;)</a><a class="nav-link" href="#choose&lt;K, T>">choose&lt;K, T&gt;(Map&lt;K, T&gt;, Func&lt;K, T, Option&lt;T&gt;&gt;)</a><a class="nav-link" href="#clear&lt;K, V>">clear&lt;K, V&gt;(Map&lt;K, V&gt;)</a><a class="nav-link" href="#contains&lt;K, V>">contains&lt;K, V&gt;(Map&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)</a><a class="nav-link" href="#contains&lt;K, V>">contains&lt;K, V&gt;(Map&lt;K, V&gt;, Tuple&lt;K, V&gt;)</a><a class="nav-link" href="#containsKey&lt;K, V>">containsKey&lt;K, V&gt;(Map&lt;K, V&gt;, K)</a><a class="nav-link" href="#create&lt;K, V>">create&lt;K, V&gt;(Tuple&lt;K, V&gt;[])</a><a class="nav-link" href="#createRange&lt;K, V>">createRange&lt;K, V&gt;(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#createRange&lt;K, V>">createRange&lt;K, V&gt;(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#empty&lt;K, V>">empty&lt;K, V&gt;()</a><a class="nav-link" href="#exists&lt;K, V>">exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;K, V, bool&gt;)</a><a class="nav-link" href="#exists&lt;K, V>">exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;Tuple&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#exists&lt;K, V>">exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#exists&lt;K, V>">exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;V, bool&gt;)</a><a class="nav-link" href="#filter&lt;K, V>">filter&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;V, bool&gt;)</a><a class="nav-link" href="#filter&lt;K, V>">filter&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;K, V, bool&gt;)</a><a class="nav-link" href="#find&lt;K, V, R>">find&lt;K, V, R&gt;(Map&lt;K, V&gt;, K, Func&lt;V, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#find&lt;K, V>">find&lt;K, V&gt;(Map&lt;K, V&gt;, K)</a><a class="nav-link" href="#findRange&lt;K, V>">findRange&lt;K, V&gt;(Map&lt;K, V&gt;, K, K)</a><a class="nav-link" href="#findSeq&lt;K, V>">findSeq&lt;K, V&gt;(Map&lt;K, V&gt;, K)</a><a class="nav-link" href="#fold&lt;S, K, V>">fold&lt;S, K, V&gt;(Map&lt;K, V&gt;, S, Func&lt;S, K, V, S&gt;)</a><a class="nav-link" href="#fold&lt;S, K, V>">fold&lt;S, K, V&gt;(Map&lt;K, V&gt;, S, Func&lt;S, V, S&gt;)</a><a class="nav-link" href="#forall&lt;K, V>">forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;V, bool&gt;)</a><a class="nav-link" href="#forall&lt;K, V>">forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;K, V, bool&gt;)</a><a class="nav-link" href="#forall&lt;K, V>">forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;Tuple&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#forall&lt;K, V>">forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#freeze&lt;K, V>">freeze&lt;K, V&gt;(IDictionary&lt;K, V&gt;)</a><a class="nav-link" href="#Freeze&lt;K, V>">Freeze&lt;K, V&gt;(IDictionary&lt;K, V&gt;)</a><a class="nav-link" href="#iter&lt;K, V>">iter&lt;K, V&gt;(Map&lt;K, V&gt;, Action&lt;V&gt;)</a><a class="nav-link" href="#iter&lt;K, V>">iter&lt;K, V&gt;(Map&lt;K, V&gt;, Action&lt;K, V&gt;)</a><a class="nav-link" href="#length&lt;K, T>">length&lt;K, T&gt;(Map&lt;K, T&gt;)</a><a class="nav-link" href="#map&lt;K, T, U>">map&lt;K, T, U&gt;(Map&lt;K, T&gt;, Func&lt;T, U&gt;)</a><a class="nav-link" href="#map&lt;K, T, U>">map&lt;K, T, U&gt;(Map&lt;K, T&gt;, Func&lt;K, T, U&gt;)</a><a class="nav-link" href="#remove&lt;K, V>">remove&lt;K, V&gt;(Map&lt;K, V&gt;, K)</a><a class="nav-link" href="#setItem&lt;K, V>">setItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)</a><a class="nav-link" href="#setItem&lt;K, V>">setItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;)</a><a class="nav-link" href="#setItems&lt;K, V>">setItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#setItems&lt;K, V>">setItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#skip&lt;K, V>">skip&lt;K, V&gt;(Map&lt;K, V&gt;, int)</a><a class="nav-link" href="#tryAdd&lt;K, V>">tryAdd&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)</a><a class="nav-link" href="#tryAdd&lt;K, V>">tryAdd&lt;K, V&gt;(Map&lt;K, V&gt;, K, V, Func&lt;Map&lt;K, V&gt;, V, Map&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#tryAddRange&lt;K, V>">tryAddRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#tryAddRange&lt;K, V>">tryAddRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#trySetItem&lt;K, V>">trySetItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)</a><a class="nav-link" href="#trySetItem&lt;K, V>">trySetItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;)</a><a class="nav-link" href="#trySetItem&lt;K, V>">trySetItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;, Func&lt;Map&lt;K, V&gt;, Map&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#trySetItems&lt;K, V>">trySetItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#trySetItems&lt;K, V>">trySetItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#trySetItems&lt;K, V>">trySetItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;K&gt;, Func&lt;V, V&gt;)</a></div><div class="content-panel"><h1 >Map Class</h1><p >Immutable map module AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">Map</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="add&lt;K, V>"></a>add&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a new item to the map </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">add</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>, <span class="ident">V</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the item added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal">Throws ArgumentException if the key already exists</div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the key or value are null</div></div></div></div><div class="member-title"><a name="addOrUpdate&lt;K, V>"></a>addOrUpdate&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a new item to the map. If the key already exists, the new item replaces it. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdate</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>, <span class="ident">V</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the item added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the key or value are null</div></div></div></div><div class="member-title"><a name="addOrUpdate&lt;K, V>"></a>addOrUpdate&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;, Func&lt;V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Retrieve a value from the map by key, map it to a new value, put it back.  If it doesn&#39;t exist, add a new one based on None result. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdate</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the mapped value</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal">Throws Exception if None returns null</div></div><div class="code"><div class="member-title">Exception</div><div class="normal">Throws Exception if Some returns null</div></div></div></div><div class="member-title"><a name="addOrUpdate&lt;K, V>"></a>addOrUpdate&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;, V)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Retrieve a value from the map by key, map it to a new value, put it back.  If it doesn&#39;t exist, add a new one based on None result. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">V</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdate</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; <span class="ident">Some</span>, <span class="ident">V</span> <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the mapped value</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException if None is null</div></div><div class="code"><div class="member-title">Exception</div><div class="normal">Throws Exception if Some returns null</div></div></div></div><div class="member-title"><a name="addOrUpdateRange&lt;K, V>"></a>addOrUpdateRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re replaced. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Range of tuples to add</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdateRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">range</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the items added</div></div></div></div><div class="member-title"><a name="addOrUpdateRange&lt;K, V>"></a>addOrUpdateRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re replaced. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Range of KeyValuePairs to add</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdateRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">range</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the items added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the keys or values are null</div></div></div></div><div class="member-title"><a name="addRange&lt;K, V>"></a>addRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a range of items to the map. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">keyValues</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the items added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal">Throws ArgumentException if any of the keys already exist</div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the keys or values are null</div></div></div></div><div class="member-title"><a name="addRange&lt;K, V>"></a>addRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a range of items to the map. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">keyValues</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the items added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal">Throws ArgumentException if any of the keys already exist</div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the keys or values are null</div></div></div></div><div class="member-title"><a name="choose&lt;K, T>"></a>choose&lt;K, T&gt;(Map&lt;K, T&gt;, Func&lt;T, Option&lt;T&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Equivalent to map and filter but the filtering is done based on whether the returned Option is Some or None.  If the item is None then it&#39;s filtered out, if not the the mapped Some value is used. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt; <span class="ident">choose</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt; <span class="ident">map</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">selector</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;</div><div class="normal">Filtered map</div></div></div></div><div class="member-title"><a name="choose&lt;K, T>"></a>choose&lt;K, T&gt;(Map&lt;K, T&gt;, Func&lt;K, T, Option&lt;T&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Equivalent to map and filter but the filtering is done based on whether the returned Option is Some or None.  If the item is None then it&#39;s filtered out, if not the the mapped Some value is used. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt; <span class="ident">choose</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt; <span class="ident">map</span>, <span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">selector</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;</div><div class="normal">Filtered map</div></div></div></div><div class="member-title"><a name="clear&lt;K, V>"></a>clear&lt;K, V&gt;(Map&lt;K, V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Clears all items from the map </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">Map to clear</div></div><div class="section_title">REMARKS</div>Functionally equivalent to calling Map.empty as the original structure is untouched</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">clear</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">Empty map</div></div></div></div><div class="member-title"><a name="contains&lt;K, V>"></a>contains&lt;K, V&gt;(Map&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Checks for existence of a key in the map </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">kv</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">contains</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">kv</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if an item with the key supplied is in the map</div></div></div></div><div class="member-title"><a name="contains&lt;K, V>"></a>contains&lt;K, V&gt;(Map&lt;K, V&gt;, Tuple&lt;K, V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Checks for existence of a key in the map </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">kv</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">contains</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">kv</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if an item with the key supplied is in the map</div></div></div></div><div class="member-title"><a name="containsKey&lt;K, V>"></a>containsKey&lt;K, V&gt;(Map&lt;K, V&gt;, K)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Checks for existence of a key in the map </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to check</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">containsKey</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if an item with the key supplied is in the map</div></div></div></div><div class="member-title"><a name="create&lt;K, V>"></a>create&lt;K, V&gt;(Tuple&lt;K, V&gt;[])</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Creates a new Map seeded with the keyValues provided </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;[]</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">create</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;[] <span class="ident">keyValues</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="createRange&lt;K, V>"></a>createRange&lt;K, V&gt;(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Creates a new Map seeded with the keyValues provided </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">createRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">keyValues</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="createRange&lt;K, V>"></a>createRange&lt;K, V&gt;(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Creates a new Map seeded with the keyValues provided </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">createRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">keyValues</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="empty&lt;K, V>"></a>empty&lt;K, V&gt;()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Creates a new empty Map </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">empty</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="exists&lt;K, V>"></a>exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;K, V, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Return true if *any* items in the map return true when the predicate is applied </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">exists</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if all items in the map return true when the predicate is applied</div></div></div></div><div class="member-title"><a name="exists&lt;K, V>"></a>exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;Tuple&lt;K, V&gt;, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Return true if *any* items in the map return true when the predicate is applied </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">exists</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if all items in the map return true when the predicate is applied</div></div></div></div><div class="member-title"><a name="exists&lt;K, V>"></a>exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Return true if *any* items in the map return true when the predicate is applied </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">exists</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if all items in the map return true when the predicate is applied</div></div></div></div><div class="member-title"><a name="exists&lt;K, V>"></a>exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;V, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Return true if *any* items in the map return true when the predicate is applied </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">exists</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if all items in the map return true when the predicate is applied</div></div></div></div><div class="member-title"><a name="filter&lt;K, V>"></a>filter&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;V, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically filter out items that return false when a predicate is applied </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">bool</span>&gt; <span class="ident">predicate</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with items filtered</div></div></div></div><div class="member-title"><a name="filter&lt;K, V>"></a>filter&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;K, V, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically filter out items that return false when a predicate is applied </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">bool</span>&gt; <span class="ident">predicate</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with items filtered</div></div></div></div><div class="member-title"><a name="find&lt;K, V, R>"></a>find&lt;K, V, R&gt;(Map&lt;K, V&gt;, K, Func&lt;V, R&gt;, Func&lt;R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Retrieve a value from the map by key and pattern match the result. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">find</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">R</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal">Found value</div></div></div></div><div class="member-title"><a name="find&lt;K, V>"></a>find&lt;K, V&gt;(Map&lt;K, V&gt;, K)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Retrieve a value from the map by key </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">V</span>&gt; <span class="ident">find</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal">Found value</div></div></div></div><div class="member-title"><a name="findRange&lt;K, V>"></a>findRange&lt;K, V&gt;(Map&lt;K, V&gt;, K, K)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Retrieve a range of values  </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyFrom</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Range start (inclusive)</div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyTo</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Range to (inclusive)</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">findRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">keyFrom</span>, <span class="ident">K</span> <span class="ident">keyTo</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal">Range of values</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the keyFrom or keyTo are null</div></div></div></div><div class="member-title"><a name="findSeq&lt;K, V>"></a>findSeq&lt;K, V&gt;(Map&lt;K, V&gt;, K)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Retrieve a value from the map by key as an enumerable </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">findSeq</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal">Found value</div></div></div></div><div class="member-title"><a name="fold&lt;S, K, V>"></a>fold&lt;S, K, V&gt;(Map&lt;K, V&gt;, S, Func&lt;S, K, V, S&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically folds all items in the map (in order) using the folder function provided. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">S</span> <span class="ident">state</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt; <span class="ident">folder</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal">Folded state</div></div></div></div><div class="member-title"><a name="fold&lt;S, K, V>"></a>fold&lt;S, K, V&gt;(Map&lt;K, V&gt;, S, Func&lt;S, V, S&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically folds all items in the map (in order) using the folder function provided. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">S</span> <span class="ident">state</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt; <span class="ident">folder</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal">Folded state</div></div></div></div><div class="member-title"><a name="forall&lt;K, V>"></a>forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;V, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Return true if all items in the map return true when the predicate is applied </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">forall</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if all items in the map return true when the predicate is applied</div></div></div></div><div class="member-title"><a name="forall&lt;K, V>"></a>forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;K, V, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Return true if all items in the map return true when the predicate is applied </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">forall</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if all items in the map return true when the predicate is applied</div></div></div></div><div class="member-title"><a name="forall&lt;K, V>"></a>forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;Tuple&lt;K, V&gt;, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Return true if all items in the map return true when the predicate is applied </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">forall</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if all items in the map return true when the predicate is applied</div></div></div></div><div class="member-title"><a name="forall&lt;K, V>"></a>forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Return true if all items in the map return true when the predicate is applied </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">forall</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if all items in the map return true when the predicate is applied</div></div></div></div><div class="member-title"><a name="freeze&lt;K, V>"></a>freeze&lt;K, V&gt;(IDictionary&lt;K, V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Convert any IDictionary into an immutable Map K V </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">dict</div><div class="arg-type"><span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">freeze</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">dict</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="Freeze&lt;K, V>"></a>Freeze&lt;K, V&gt;(IDictionary&lt;K, V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Convert any IDictionary into an immutable Map K V </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">dict</div><div class="arg-type"><span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Freeze</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">dict</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="iter&lt;K, V>"></a>iter&lt;K, V&gt;(Map&lt;K, V&gt;, Action&lt;V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically iterate through all key/value pairs in the map (in order) and execute an action on each </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">V</span>&gt;</div></div><div class="arg-desc">Action to execute</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">Action</span>&lt;<span class="ident">V</span>&gt; <span class="ident">action</span>)</div></div></div><div class="member-title"><a name="iter&lt;K, V>"></a>iter&lt;K, V&gt;(Map&lt;K, V&gt;, Action&lt;K, V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically iterate through all key/value pairs in the map (in order) and execute an action on each </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">Action to execute</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">Action</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">action</span>)</div></div></div><div class="member-title"><a name="length&lt;K, T>"></a>length&lt;K, T&gt;(Map&lt;K, T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Number of items in the map </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">int</span> <span class="ident">length</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt; <span class="ident">map</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="map&lt;K, T, U>"></a>map&lt;K, T, U&gt;(Map&lt;K, T&gt;, Func&lt;T, U&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically maps the map to a new map </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt; <span class="ident">map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt; <span class="ident">map</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; <span class="ident">f</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt;</div><div class="normal">Mapped items in a new map</div></div></div></div><div class="member-title"><a name="map&lt;K, T, U>"></a>map&lt;K, T, U&gt;(Map&lt;K, T&gt;, Func&lt;K, T, U&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically maps the map to a new map </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt; <span class="ident">map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt; <span class="ident">map</span>, <span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt; <span class="ident">f</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt;</div><div class="normal">Mapped items in a new map</div></div></div></div><div class="member-title"><a name="remove&lt;K, V>"></a>remove&lt;K, V&gt;(Map&lt;K, V&gt;, K)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically removes an item from the map If the key doesn&#39;t exists, the request is ignored. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">remove</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the item removed</div></div></div></div><div class="member-title"><a name="setItem&lt;K, V>"></a>setItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically updates an existing item </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">setItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>, <span class="ident">V</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the item added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the key or value are null</div></div></div></div><div class="member-title"><a name="setItem&lt;K, V>"></a>setItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Retrieve a value from the map by key, map it to a new value, put it back. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to find</div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">setItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; <span class="ident">mapper</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the mapped value</div></div></div></div><div class="member-title"><a name="setItems&lt;K, V>"></a>setItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically sets a series of items using the Tuples provided </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Items to set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">setItems</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">items</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the items set</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal">Throws ArgumentException if any of the keys aren&#39;t in the map</div></div></div></div><div class="member-title"><a name="setItems&lt;K, V>"></a>setItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically sets a series of items using the KeyValuePairs provided </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Items to set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">setItems</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">items</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the items set</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal">Throws ArgumentException if any of the keys aren&#39;t in the map</div></div></div></div><div class="member-title"><a name="skip&lt;K, V>"></a>skip&lt;K, V&gt;(Map&lt;K, V&gt;, int)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Skips &#39;amount&#39; values and returns a new tree without the  skipped values. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">amount</div><div class="arg-type"><span class="ident">int</span></div></div><div class="arg-desc">Amount to skip</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">skip</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">int</span> <span class="ident">amount</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">IMapItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal">Enumerable of map items</div></div></div></div><div class="member-title"><a name="tryAdd&lt;K, V>"></a>tryAdd&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a new item to the map. If the key already exists, then the new item is ignored </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">tryAdd</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>, <span class="ident">V</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the item added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the key or value are null</div></div></div></div><div class="member-title"><a name="tryAdd&lt;K, V>"></a>tryAdd&lt;K, V&gt;(Map&lt;K, V&gt;, K, V, Func&lt;Map&lt;K, V&gt;, V, Map&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a new item to the map. If the key already exists then the Fail handler is called with the unaltered map  and the value already set for the key, it expects a new map returned. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">V</span>, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to handle failure, you&#39;re given the unaltered map  and the value already set for the key</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">tryAdd</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>, <span class="ident">V</span> <span class="ident">value</span>, <span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">V</span>, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">Fail</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the item added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the key or value are null</div></div></div></div><div class="member-title"><a name="tryAddRange&lt;K, V>"></a>tryAddRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re ignored. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">tryAddRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">keyValues</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the items added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the keys or values are null</div></div></div></div><div class="member-title"><a name="tryAddRange&lt;K, V>"></a>tryAddRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re ignored. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">tryAddRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">keyValues</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the items added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the keys or values are null</div></div></div></div><div class="member-title"><a name="trySetItem&lt;K, V>"></a>trySetItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically updates an existing item, unless it doesn&#39;t exist, in which case  it is ignored </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc">Value</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>, <span class="ident">V</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New Map with the item added</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal">Throws ArgumentNullException the value is null</div></div></div></div><div class="member-title"><a name="trySetItem&lt;K, V>"></a>trySetItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically sets an item by first retrieving it, applying a map (Some), and then putting  it back. Silently fails if the value doesn&#39;t exist. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key to set</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">delegate to map the existing value to a new one before setting</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; <span class="ident">Some</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the item set</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal">Throws Exception if Some returns null</div></div></div></div><div class="member-title"><a name="trySetItem&lt;K, V>"></a>trySetItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;, Func&lt;Map&lt;K, V&gt;, Map&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically sets an item by first retrieving it, applying a map, and then putting it back. Calls the None delegate to return a new map if the item can&#39;t be found </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc">Key</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">delegate to map the existing value to a new one before setting</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">delegate to return a new map if the item can&#39;t be found</div></div><div class="section_title">REMARKS</div>Null is not allowed for a Key or a Value</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">K</span> <span class="ident">key</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; <span class="ident">Some</span>, <span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">None</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the item set</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal">Throws Exception if Some returns null</div></div><div class="code"><div class="member-title">Exception</div><div class="normal">Throws Exception if None returns null</div></div></div></div><div class="member-title"><a name="trySetItems&lt;K, V>"></a>trySetItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically sets a series of items using the Tuples provided. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Items to set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItems</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">items</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the items set</div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal">Throws ArgumentException if any of the keys aren&#39;t in the map</div></div></div></div><div class="member-title"><a name="trySetItems&lt;K, V>"></a>trySetItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically sets a series of items using the KeyValuePairs provided.  If any of the  items don&#39;t exist then they&#39;re silently ignored. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc">Items to set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItems</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">items</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the items set</div></div></div></div><div class="member-title"><a name="trySetItems&lt;K, V>"></a>trySetItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;K&gt;, Func&lt;V, V&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Atomically sets a series of items using the keys provided to find the items and the Some delegate maps to a new value.  If the items don&#39;t exist then they&#39;re silently ignored. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keys</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt;</div></div><div class="arg-desc">Keys of items to set</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">Function map the existing item to a new one</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItems</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt; <span class="ident">keys</span>, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; <span class="ident">Some</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal">New map with the items set</div></div></div></div></div></body></html>