<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Set_.htm">Set</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#add&lt;T>">add&lt;T&gt;(Set&lt;T&gt;, T)</a><a class="nav-link" href="#addOrUpdate&lt;T>">addOrUpdate&lt;T&gt;(Set&lt;T&gt;, T)</a><a class="nav-link" href="#contains&lt;T>">contains&lt;T&gt;(Set&lt;T&gt;, T)</a><a class="nav-link" href="#create&lt;T>">create&lt;T&gt;()</a><a class="nav-link" href="#createRange&lt;T>">createRange&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#difference&lt;T>">difference&lt;T&gt;(Set&lt;T&gt;, Set&lt;T&gt;)</a><a class="nav-link" href="#empty&lt;T>">empty&lt;T&gt;()</a><a class="nav-link" href="#equals&lt;T>">equals&lt;T&gt;(Set&lt;T&gt;, Set&lt;T&gt;)</a><a class="nav-link" href="#except&lt;T>">except&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#exists&lt;T>">exists&lt;T&gt;(Set&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#filter&lt;T>">filter&lt;T&gt;(Set&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#find&lt;T>">find&lt;T&gt;(Set&lt;T&gt;, T)</a><a class="nav-link" href="#fold&lt;T, S>">fold&lt;T, S&gt;(Set&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#foldBack&lt;T, S>">foldBack&lt;T, S&gt;(Set&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#intersect&lt;T>">intersect&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#isEmpty&lt;T>">isEmpty&lt;T&gt;(Set&lt;T&gt;)</a><a class="nav-link" href="#isProperSubset&lt;T>">isProperSubset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#isProperSuperset&lt;T>">isProperSuperset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#isSubset&lt;T>">isSubset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#isSuperset&lt;T>">isSuperset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#length&lt;T>">length&lt;T&gt;(Set&lt;T&gt;)</a><a class="nav-link" href="#map&lt;T, R>">map&lt;T, R&gt;(Set&lt;T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#overlaps&lt;T>">overlaps&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#remove&lt;T>">remove&lt;T&gt;(Set&lt;T&gt;, T)</a><a class="nav-link" href="#symmetricExcept&lt;T>">symmetricExcept&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#tryAdd&lt;T>">tryAdd&lt;T&gt;(Set&lt;T&gt;, T)</a><a class="nav-link" href="#union&lt;T>">union&lt;T&gt;(Set&lt;T&gt;, Set&lt;T&gt;)</a></div><div class="content-panel"><h1 >Set Class</h1><p >Immutable set module AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Set</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="add&lt;T>"></a>add&lt;T&gt;(Set&lt;T&gt;, T)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Add an item to the set </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set to add item to</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Value to add to the set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">add</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>, <span class="ident">T</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">New set with the item added</div></div></div></div><div class="member-title"><a name="addOrUpdate&lt;T>"></a>addOrUpdate&lt;T&gt;(Set&lt;T&gt;, T)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Add an item to the set.  If an item already exists then replace it. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set to add item to</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Value to add to the set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">addOrUpdate</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>, <span class="ident">T</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">New set with the item maybe added</div></div></div></div><div class="member-title"><a name="contains&lt;T>"></a>contains&lt;T&gt;(Set&lt;T&gt;, T)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns True if the value is in the set </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Value to check</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">contains</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>, <span class="ident">T</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if the item &#39;value&#39; is in the Set &#39;set&#39;</div></div></div></div><div class="member-title"><a name="create&lt;T>"></a>create&lt;T&gt;()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Create a new empty set </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">create</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Empty set</div></div></div></div><div class="member-title"><a name="createRange&lt;T>"></a>createRange&lt;T&gt;(IEnumerable&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Create a new set pre-populated with the items in range </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Range of items</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">createRange</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">range</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Set</div></div></div></div><div class="member-title"><a name="difference&lt;T>"></a>difference&lt;T&gt;(Set&lt;T&gt;, Set&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns setA - setB.  Only the items in setA that are not in  setB will be returned. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">difference</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setA</span>, <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setB</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="empty&lt;T>"></a>empty&lt;T&gt;()</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Create a new empty set </p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">empty</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Empty set</div></div></div></div><div class="member-title"><a name="equals&lt;T>"></a>equals&lt;T&gt;(Set&lt;T&gt;, Set&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns true if both sets contain the same elements </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">equals</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setA</span>, <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setB</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="except&lt;T>"></a>except&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns the elements that are in both setA and setB </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">except</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setA</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setB</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="exists&lt;T>"></a>exists&lt;T&gt;(Set&lt;T&gt;, Func&lt;T, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Check the existence of an item in the set using a  predicate. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div><div class="section_title">REMARKS</div>Note this scans the entire set.</div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">exists</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if predicate returns true for any item</div></div></div></div><div class="member-title"><a name="filter&lt;T>"></a>filter&lt;T&gt;(Set&lt;T&gt;, Func&lt;T, bool&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Filters items from the set using the predicate.  If the predicate returns True for any item then it remains in the set, otherwise it&#39;s dropped. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">bool</span>&gt; <span class="ident">pred</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Filtered enumerable</div></div></div></div><div class="member-title"><a name="find&lt;T>"></a>find&lt;T&gt;(Set&lt;T&gt;, T)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Attempts to find an item in the set.   </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Value to find</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">find</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>, <span class="ident">T</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">Some(T) if found, None otherwise</div></div></div></div><div class="member-title"><a name="fold&lt;T, S>"></a>fold&lt;T, S&gt;(Set&lt;T&gt;, S, Func&lt;S, T, S&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Applies a function &#39;folder&#39; to each element of the collection, threading an accumulator  argument through the computation. The fold function takes the state argument, and  applies the function &#39;folder&#39; to it and the first element of the set. Then, it feeds this  result into the function &#39;folder&#39; along with the second element, and so on. It returns the  final result. (Aggregate in LINQ) </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">T</span>, <span class="ident">S</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>, <span class="ident">S</span> <span class="ident">state</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; <span class="ident">folder</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal">Aggregate value</div></div></div></div><div class="member-title"><a name="foldBack&lt;T, S>"></a>foldBack&lt;T, S&gt;(Set&lt;T&gt;, S, Func&lt;S, T, S&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Applies a function &#39;folder&#39; to each element of the collection (from last element to first),  threading an aggregate state through the computation. The fold function takes the state  argument, and applies the function &#39;folder&#39; to it and the first element of the set. Then,  it feeds this result into the function &#39;folder&#39; along with the second element, and so on. It  returns the final result. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBack</span>&lt;<span class="ident">T</span>, <span class="ident">S</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>, <span class="ident">S</span> <span class="ident">state</span>, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; <span class="ident">folder</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal">Aggregate value</div></div></div></div><div class="member-title"><a name="intersect&lt;T>"></a>intersect&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns the elements that are in both setA and setB </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">intersect</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setA</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setB</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="isEmpty&lt;T>"></a>isEmpty&lt;T&gt;(Set&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >True if the set has no elements </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">isEmpty</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if the set has no elements</div></div></div></div><div class="member-title"><a name="isProperSubset&lt;T>"></a>isProperSubset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns True if setB is a proper subset of setA </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set A</div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set B</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">isProperSubset</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setA</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setB</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True is setB is a proper subset of setA</div></div></div></div><div class="member-title"><a name="isProperSuperset&lt;T>"></a>isProperSuperset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns True if setB is a proper superset of setA </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set A</div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set B</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">isProperSuperset</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setA</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setB</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True is setB is a proper subset of setA</div></div></div></div><div class="member-title"><a name="isSubset&lt;T>"></a>isSubset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns True if setB is a subset of setA </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set A</div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set B</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">isSubset</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setA</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setB</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True is setB is a subset of setA</div></div></div></div><div class="member-title"><a name="isSuperset&lt;T>"></a>isSuperset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns True if setB is a superset of setA </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set A</div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set B</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">isSuperset</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setA</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setB</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True is setB is a superset of setA</div></div></div></div><div class="member-title"><a name="length&lt;T>"></a>length&lt;T&gt;(Set&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Get the number of elements in the set </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">int</span> <span class="ident">length</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">int</span></div><div class="normal">Number of elements</div></div></div></div><div class="member-title"><a name="map&lt;T, R>"></a>map&lt;T, R&gt;(Set&lt;T&gt;, Func&lt;T, R&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Maps the values of this set into a new set of values using the mapper function to tranform the source values. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set</div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Mapping function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">R</span>&gt; <span class="ident">map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">mapper</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal">Mapped enumerable</div></div></div></div><div class="member-title"><a name="overlaps&lt;T>"></a>overlaps&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Returns True if setA overlaps setB </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set A</div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set B</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">bool</span> <span class="ident">overlaps</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setA</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setB</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">bool</span></div><div class="normal">True if setA overlaps setB</div></div></div></div><div class="member-title"><a name="remove&lt;T>"></a>remove&lt;T&gt;(Set&lt;T&gt;, T)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Removes an item from the set (if it exists) </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Value to check</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">remove</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>, <span class="ident">T</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">New set with item removed</div></div></div></div><div class="member-title"><a name="symmetricExcept&lt;T>"></a>symmetricExcept&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Only items that are in one set or the other will be returned. If an item is in both, it is dropped. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">symmetricExcept</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setA</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setB</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="tryAdd&lt;T>"></a>tryAdd&lt;T&gt;(Set&lt;T&gt;, T)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Attempt to add an item to the set.  If an item already exists then return the Set as-is. </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set to add item to</div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Value to add to the set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">tryAdd</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>, <span class="ident">T</span> <span class="ident">value</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">New set with the item maybe added</div></div></div></div><div class="member-title"><a name="union&lt;T>"></a>union&lt;T&gt;(Set&lt;T&gt;, Set&lt;T&gt;)</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p >Finds the union of two sets and produces a new set with  the results </p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set A</div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Set A</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">union</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setA</span>, <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">setB</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal">A set which contains all items from both sets</div></div></div></div></div></body></html>