<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="OptionUnsafeExtensions_.htm">OptionUnsafeExtensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Apply&lt;T, R>">Apply&lt;T, R&gt;(OptionUnsafe&lt;Func&lt;T, R&gt;&gt;, OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#Apply&lt;T1, T2, R>">Apply&lt;T1, T2, R&gt;(OptionUnsafe&lt;Func&lt;T1, T2, R&gt;&gt;, OptionUnsafe&lt;T1&gt;)</a><a class="nav-link" href="#Apply&lt;T1, T2, R>">Apply&lt;T1, T2, R&gt;(OptionUnsafe&lt;Func&lt;T1, T2, R&gt;&gt;, OptionUnsafe&lt;T1&gt;, OptionUnsafe&lt;T2&gt;)</a><a class="nav-link" href="#Bind&lt;T, R>">Bind&lt;T, R&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, OptionUnsafe&lt;R&gt;&gt;)</a><a class="nav-link" href="#BindAsync&lt;T, R>">BindAsync&lt;T, R&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, Task&lt;OptionUnsafe&lt;R&gt;&gt;&gt;)</a><a class="nav-link" href="#BindAsync&lt;T, R>">BindAsync&lt;T, R&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, Task&lt;OptionUnsafe&lt;R&gt;&gt;&gt;)</a><a class="nav-link" href="#BindAsync&lt;T, R>">BindAsync&lt;T, R&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, OptionUnsafe&lt;R&gt;&gt;)</a><a class="nav-link" href="#BindAsync&lt;T, R>">BindAsync&lt;T, R&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Func&lt;T, OptionUnsafe&lt;R&gt;&gt;)</a><a class="nav-link" href="#BindAsync&lt;T, R>">BindAsync&lt;T, R&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Func&lt;T, Task&lt;OptionUnsafe&lt;R&gt;&gt;&gt;)</a><a class="nav-link" href="#Count&lt;T>">Count&lt;T&gt;(OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#CountAsync&lt;T>">CountAsync&lt;T&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;)</a><a class="nav-link" href="#Exists&lt;T>">Exists&lt;T&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#ExistsAsync&lt;T>">ExistsAsync&lt;T&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#ExistsAsync&lt;T>">ExistsAsync&lt;T&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Filter&lt;T>">Filter&lt;T&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Fold&lt;S, T>">Fold&lt;S, T&gt;(OptionUnsafe&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#FoldAsync&lt;T, S>">FoldAsync&lt;T, S&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#FoldAsync&lt;T, S>">FoldAsync&lt;T, S&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#ForAll&lt;T>">ForAll&lt;T&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#ForAllAsync&lt;T>">ForAllAsync&lt;T&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#ForAllAsync&lt;T>">ForAllAsync&lt;T&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Iter&lt;T>">Iter&lt;T&gt;(OptionUnsafe&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#IterAsync&lt;T>">IterAsync&lt;T&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#IterAsync&lt;T>">IterAsync&lt;T&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#Join&lt;L, T, U, K, V>">Join&lt;L, T, U, K, V&gt;(OptionUnsafe&lt;T&gt;, OptionUnsafe&lt;U&gt;, Func&lt;T, K&gt;, Func&lt;U, K&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#Map&lt;T, R>">Map&lt;T, R&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#MapAsync&lt;T, R>">MapAsync&lt;T, R&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MapAsync&lt;T, R>">MapAsync&lt;T, R&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MapAsync&lt;T, R>">MapAsync&lt;T, R&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#MapAsync&lt;T, R>">MapAsync&lt;T, R&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#MapAsync&lt;T, R>">MapAsync&lt;T, R&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(OptionUnsafe&lt;IObservable&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#ParMap&lt;T1, T2, R>">ParMap&lt;T1, T2, R&gt;(OptionUnsafe&lt;T1&gt;, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#ParMap&lt;T1, T2, T3, R>">ParMap&lt;T1, T2, T3, R&gt;(OptionUnsafe&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#Select&lt;T, U>">Select&lt;T, U&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, U&gt;)</a><a class="nav-link" href="#SelectMany&lt;T, U, V>">SelectMany&lt;T, U, V&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, OptionUnsafe&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#SelectMany&lt;T, U, V>">SelectMany&lt;T, U, V&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#SelectMany&lt;T, U, V>">SelectMany&lt;T, U, V&gt;(IEnumerable&lt;T&gt;, Func&lt;T, OptionUnsafe&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#Somes&lt;T>">Somes&lt;T&gt;(IEnumerable&lt;OptionUnsafe&lt;T&gt;&gt;)</a><a class="nav-link" href="#Sum">Sum(OptionUnsafe&lt;int&gt;)</a><a class="nav-link" href="#SumAsync">SumAsync(Task&lt;OptionUnsafe&lt;int&gt;&gt;)</a><a class="nav-link" href="#SumAsync">SumAsync(OptionUnsafe&lt;Task&lt;int&gt;&gt;)</a><a class="nav-link" href="#Where&lt;T>">Where&lt;T&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, bool&gt;)</a></div><div class="content-panel"><h1 >OptionUnsafeExtensions Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">OptionUnsafeExtensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="Apply&lt;T, R>"></a>Apply&lt;T, R&gt;(OptionUnsafe&lt;Func&lt;T, R&gt;&gt;, OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_T_R_OptionUnsafe_Func&lt;T, R>_opt__OptionUnsafe_T_arg_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply an Optional value to an Optional function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Optional function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">arg</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Optional argument</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;&gt; opt, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; arg)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Returns the result of applying the optional argument to the optional function</span></div></div></div><div style="display:none" id="code-Apply_T_R_OptionUnsafe_Func&lt;T, R>_opt__OptionUnsafe_T_arg_"><div class="section_title">SOURCE</div><div class="code">
            opt.IsSome &amp;&amp; arg.IsSome
                ? SomeUnsafe(opt.Value(arg.Value))
                : None</div></div></div><div class="member-title"><a name="Apply&lt;T1, T2, R>"></a>Apply&lt;T1, T2, R&gt;(OptionUnsafe&lt;Func&lt;T1, T2, R&gt;&gt;, OptionUnsafe&lt;T1&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_T1_T2_R_OptionUnsafe_Func&lt;T1, T2, R>_opt__OptionUnsafe_T1_arg_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply an Optional value to an Optional function of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Optional function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">arg</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T1</span>&gt;</div></div><div class="arg-desc">Optional argument</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; opt, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T1</span>&gt; arg)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"><span >Returns the result of applying the optional argument to the optional function: an optonal function of arity 1</span></div></div></div><div style="display:none" id="code-Apply_T1_T2_R_OptionUnsafe_Func&lt;T1, T2, R>_opt__OptionUnsafe_T1_arg_"><div class="section_title">SOURCE</div><div class="code">
            opt.IsSome &amp;&amp; arg.IsSome
                ? SomeUnsafe(par(opt.Value, arg.Value))
                : None</div></div></div><div class="member-title"><a name="Apply&lt;T1, T2, R>"></a>Apply&lt;T1, T2, R&gt;(OptionUnsafe&lt;Func&lt;T1, T2, R&gt;&gt;, OptionUnsafe&lt;T1&gt;, OptionUnsafe&lt;T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_T1_T2_R_OptionUnsafe_Func&lt;T1, T2, R>_opt__OptionUnsafe_T1_arg1__OptionUnsafe_T2_arg2_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply Optional values to an Optional function of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Optional function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">arg1</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T1</span>&gt;</div></div><div class="arg-desc">Optional argument</div></div><div class="arg"><div class="arg-header"><div class="arg-name">arg2</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T2</span>&gt;</div></div><div class="arg-desc">Optional argument</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; opt, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T1</span>&gt; arg1, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T2</span>&gt; arg2)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Returns the result of applying the optional arguments to the optional function</span></div></div></div><div style="display:none" id="code-Apply_T1_T2_R_OptionUnsafe_Func&lt;T1, T2, R>_opt__OptionUnsafe_T1_arg1__OptionUnsafe_T2_arg2_"><div class="section_title">SOURCE</div><div class="code">
            opt.IsSome &amp;&amp; arg1.IsSome &amp;&amp; arg2.IsSome
                ? SomeUnsafe(opt.Value(arg1.Value, arg2.Value))
                : None</div></div></div><div class="member-title"><a name="Bind&lt;T, R>"></a>Bind&lt;T, R&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, OptionUnsafe&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_T_R_OptionUnsafe_T_self__Func_T_OptionUnsafe&lt;R>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Bind_T_R_OptionUnsafe_T_self__Func_T_OptionUnsafe&lt;R>_binder_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? binder(self.Value)
                : None</div></div></div><div class="member-title"><a name="BindAsync&lt;T, R>"></a>BindAsync&lt;T, R&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, Task&lt;OptionUnsafe&lt;R&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindAsync_T_R_OptionUnsafe_T_self__Func_T_Task&lt;OptionUnsafe&lt;R>>_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">BindAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BindAsync_T_R_OptionUnsafe_T_self__Func_T_Task&lt;OptionUnsafe&lt;R>>_bind_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? await bind(self.Value)
                : None</div></div></div><div class="member-title"><a name="BindAsync&lt;T, R>"></a>BindAsync&lt;T, R&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, Task&lt;OptionUnsafe&lt;R&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindAsync_T_R_Task_OptionUnsafe&lt;T>_self__Func_T_Task&lt;OptionUnsafe&lt;R>>_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">BindAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BindAsync_T_R_Task_OptionUnsafe&lt;T>_self__Func_T_Task&lt;OptionUnsafe&lt;R>>_bind_"><div class="section_title">SOURCE</div><div class="code">
            var val = await self;
            return val.IsSome
                ? await bind(val.Value)
                : None;
        </div></div></div><div class="member-title"><a name="BindAsync&lt;T, R>"></a>BindAsync&lt;T, R&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, OptionUnsafe&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindAsync_T_R_Task_OptionUnsafe&lt;T>_self__Func_T_OptionUnsafe&lt;R>_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">BindAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BindAsync_T_R_Task_OptionUnsafe&lt;T>_self__Func_T_OptionUnsafe&lt;R>_bind_"><div class="section_title">SOURCE</div><div class="code">
            var val = await self;
            return val.IsSome
                ? bind(val.Value)
                : None;
        </div></div></div><div class="member-title"><a name="BindAsync&lt;T, R>"></a>BindAsync&lt;T, R&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Func&lt;T, OptionUnsafe&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindAsync_T_R_OptionUnsafe_Task&lt;T>_self__Func_T_OptionUnsafe&lt;R>_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">BindAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BindAsync_T_R_OptionUnsafe_Task&lt;T>_self__Func_T_OptionUnsafe&lt;R>_bind_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? bind(await self.Value)
                : None</div></div></div><div class="member-title"><a name="BindAsync&lt;T, R>"></a>BindAsync&lt;T, R&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Func&lt;T, Task&lt;OptionUnsafe&lt;R&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindAsync_T_R_OptionUnsafe_Task&lt;T>_self__Func_T_Task&lt;OptionUnsafe&lt;R>>_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">BindAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BindAsync_T_R_OptionUnsafe_Task&lt;T>_self__Func_T_Task&lt;OptionUnsafe&lt;R>>_bind_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? await bind(await self.Value)
                : None</div></div></div><div class="member-title"><a name="Count&lt;T>"></a>Count&lt;T&gt;(OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Count_T_OptionUnsafe_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">Count</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Count_T_OptionUnsafe_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? 1
                : 0</div></div></div><div class="member-title"><a name="CountAsync&lt;T>"></a>CountAsync&lt;T&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountAsync_T_Task_OptionUnsafe&lt;T>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">CountAsync</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-CountAsync_T_Task_OptionUnsafe&lt;T>_self_"><div class="section_title">SOURCE</div><div class="code">
            (await self).Count()</div></div></div><div class="member-title"><a name="Exists&lt;T>"></a>Exists&lt;T&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists_T_OptionUnsafe_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">Exists</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Exists_T_OptionUnsafe_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? pred(self.Value)
                : false</div></div></div><div class="member-title"><a name="ExistsAsync&lt;T>"></a>ExistsAsync&lt;T&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsAsync_T_Task_OptionUnsafe&lt;T>_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ExistsAsync</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ExistsAsync_T_Task_OptionUnsafe&lt;T>_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            (await self).Exists(pred)</div></div></div><div class="member-title"><a name="ExistsAsync&lt;T>"></a>ExistsAsync&lt;T&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsAsync_T_OptionUnsafe_Task&lt;T>_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ExistsAsync</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ExistsAsync_T_OptionUnsafe_Task&lt;T>_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? pred(await self.Value)
                : false</div></div></div><div class="member-title"><a name="Filter&lt;T>"></a>Filter&lt;T&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter_T_OptionUnsafe_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Filter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Filter_T_OptionUnsafe_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? pred(self.Value)
                    ? self
                    : None
                : self</div></div></div><div class="member-title"><a name="Fold&lt;S, T>"></a>Fold&lt;S, T&gt;(OptionUnsafe&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_S_T_OptionUnsafe_T_self__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">Fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Fold_S_T_OptionUnsafe_T_self__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? folder(state, self.Value)
                : state</div></div></div><div class="member-title"><a name="FoldAsync&lt;T, S>"></a>FoldAsync&lt;T, S&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldAsync_T_S_Task_OptionUnsafe&lt;T>_self__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">FoldAsync</span>&lt;<span class="ident">T</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FoldAsync_T_S_Task_OptionUnsafe&lt;T>_self__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            (await self).Fold(state, folder)</div></div></div><div class="member-title"><a name="FoldAsync&lt;T, S>"></a>FoldAsync&lt;T, S&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldAsync_T_S_OptionUnsafe_Task&lt;T>_self__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">FoldAsync</span>&lt;<span class="ident">T</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FoldAsync_T_S_OptionUnsafe_Task&lt;T>_self__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? folder(state, await self.Value)
                : state</div></div></div><div class="member-title"><a name="ForAll&lt;T>"></a>ForAll&lt;T&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll_T_OptionUnsafe_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAll</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-ForAll_T_OptionUnsafe_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? pred(self.Value)
                : true</div></div></div><div class="member-title"><a name="ForAllAsync&lt;T>"></a>ForAllAsync&lt;T&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllAsync_T_Task_OptionUnsafe&lt;T>_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ForAllAsync</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ForAllAsync_T_Task_OptionUnsafe&lt;T>_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            (await self).ForAll(pred)</div></div></div><div class="member-title"><a name="ForAllAsync&lt;T>"></a>ForAllAsync&lt;T&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllAsync_T_OptionUnsafe_Task&lt;T>_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ForAllAsync</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ForAllAsync_T_OptionUnsafe_Task&lt;T>_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? pred(await self.Value)
                : true</div></div></div><div class="member-title"><a name="Iter&lt;T>"></a>Iter&lt;T&gt;(OptionUnsafe&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter_T_OptionUnsafe_T_self__Action_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Iter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; action)</div></div><div style="display:none" id="code-Iter_T_OptionUnsafe_T_self__Action_T_action_"><div class="section_title">SOURCE</div><div class="code">
            self.IfSomeUnsafe(action)</div></div></div><div class="member-title"><a name="IterAsync&lt;T>"></a>IterAsync&lt;T&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterAsync_T_Task_OptionUnsafe&lt;T>_self__Action_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IterAsync</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; action)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IterAsync_T_Task_OptionUnsafe&lt;T>_self__Action_T_action_"><div class="section_title">SOURCE</div><div class="code">
            var val = await self;
            if (val.IsSome) action(val.Value);
            return unit;
        </div></div></div><div class="member-title"><a name="IterAsync&lt;T>"></a>IterAsync&lt;T&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterAsync_T_OptionUnsafe_Task&lt;T>_self__Action_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IterAsync</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; action)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IterAsync_T_OptionUnsafe_Task&lt;T>_self__Action_T_action_"><div class="section_title">SOURCE</div><div class="code">
            if (self.IsSome) action(await self.Value);
            return unit;
        </div></div></div><div class="member-title"><a name="Join&lt;L, T, U, K, V>"></a>Join&lt;L, T, U, K, V&gt;(OptionUnsafe&lt;T&gt;, OptionUnsafe&lt;U&gt;, Func&lt;T, K&gt;, Func&lt;U, K&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Join_L_T_U_K_V_OptionUnsafe_T_self__OptionUnsafe_U_inner__Func_T_K_outerKeyMap__Func_U_K_innerKeyMap__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">inner</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">outerKeyMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">K</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">innerKeyMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">U</span>, <span class="ident">K</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">V</span>&gt; <span class="ident">Join</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">U</span>&gt; inner, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">K</span>&gt; outerKeyMap, <span class="ident">Func</span>&lt;<span class="ident">U</span>, <span class="ident">K</span>&gt; innerKeyMap, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Join_L_T_U_K_V_OptionUnsafe_T_self__OptionUnsafe_U_inner__Func_T_K_outerKeyMap__Func_U_K_innerKeyMap__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            if (self.IsNone) return None;
            if (inner.IsNone) return None;
            return EqualityComparer&lt;K&gt;.Default.Equals(outerKeyMap(self.Value), innerKeyMap(inner.Value))
                ? SomeUnsafe(project(self.Value, inner.Value))
                : None;
        </div></div></div><div class="member-title"><a name="Map&lt;T, R>"></a>Map&lt;T, R&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_T_R_OptionUnsafe_T_self__Func_T_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Map_T_R_OptionUnsafe_T_self__Func_T_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? OptionUnsafeCast.Cast(mapper(self.Value))
                : None</div></div></div><div class="member-title"><a name="MapAsync&lt;T, R>"></a>MapAsync&lt;T, R&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapAsync_T_R_OptionUnsafe_T_self__Func_T_Task&lt;R>_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">MapAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MapAsync_T_R_OptionUnsafe_T_self__Func_T_Task&lt;R>_map_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? SomeUnsafe(await map(self.Value))
                : None</div></div></div><div class="member-title"><a name="MapAsync&lt;T, R>"></a>MapAsync&lt;T, R&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapAsync_T_R_Task_OptionUnsafe&lt;T>_self__Func_T_Task&lt;R>_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">MapAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MapAsync_T_R_Task_OptionUnsafe&lt;T>_self__Func_T_Task&lt;R>_map_"><div class="section_title">SOURCE</div><div class="code">
            var val = await self;
            return val.IsSome
                ? SomeUnsafe(await map(val.Value))
                : None;
        </div></div></div><div class="member-title"><a name="MapAsync&lt;T, R>"></a>MapAsync&lt;T, R&gt;(Task&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapAsync_T_R_Task_OptionUnsafe&lt;T>_self__Func_T_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">MapAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MapAsync_T_R_Task_OptionUnsafe&lt;T>_self__Func_T_R_map_"><div class="section_title">SOURCE</div><div class="code">
            var val = await self;
            return val.IsSome
                ? SomeUnsafe(map(val.Value))
                : None;
        </div></div></div><div class="member-title"><a name="MapAsync&lt;T, R>"></a>MapAsync&lt;T, R&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapAsync_T_R_OptionUnsafe_Task&lt;T>_self__Func_T_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">MapAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MapAsync_T_R_OptionUnsafe_Task&lt;T>_self__Func_T_R_map_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? SomeUnsafe(map(await self.Value))
                : None</div></div></div><div class="member-title"><a name="MapAsync&lt;T, R>"></a>MapAsync&lt;T, R&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapAsync_T_R_OptionUnsafe_Task&lt;T>_self__Func_T_Task&lt;R>_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">MapAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MapAsync_T_R_OptionUnsafe_Task&lt;T>_self__Func_T_Task&lt;R>_map_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? SomeUnsafe(await map(await self.Value))
                : None</div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(OptionUnsafe&lt;Task&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_OptionUnsafe_Task&lt;T>_self__Func_T_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the OptionUnsafe&lt;Task&lt;T&gt;&gt;<br/><br/>     If Some then the result of the Task is passed to Some and returned as a Task R.     If None then the result of None() is returned as a Task R<br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Some handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">None handler</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >A promise to return an R</span></div></div></div><div style="display:none" id="code-MatchAsync_T_R_OptionUnsafe_Task&lt;T>_self__Func_T_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? Some(await self.Value)
                : None()</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(OptionUnsafe&lt;IObservable&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_OptionUnsafe_IObservable&lt;T>_self__Func_T_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the OptionUnsafe&lt;IObservable&lt;T&gt;&gt;<br/><br/>     If Some then the observable stream is mapped with Some (until the subscription ends)     If None the a single value observable is returned with the None result in<br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Some handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">None handler</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >A stream of Rs</span></div></div></div><div style="display:none" id="code-MatchObservable_T_R_OptionUnsafe_IObservable&lt;T>_self__Func_T_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? self.Value.Select(Some)
                : Observable.Return(None())</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_OptionUnsafe&lt;T>_self__Func_T_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the IObservable&lt;OptionUnsafe&lt;T&gt;&gt;<br/><br/>     Matches a stream of options<br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Some handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">None handler</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >A stream of Rs</span></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_OptionUnsafe&lt;T>_self__Func_T_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            self.Select(opt =&gt; matchUnsafe(opt, Some, None))</div></div></div><div class="member-title"><a name="ParMap&lt;T1, T2, R>"></a>ParMap&lt;T1, T2, R&gt;(OptionUnsafe&lt;T1&gt;, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParMap_T1_T2_R_OptionUnsafe_T1_opt__Func_T1_T2_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">ParMap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T1</span>&gt; opt, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParMap_T1_T2_R_OptionUnsafe_T1_opt__Func_T1_T2_R_func_"><div class="section_title">SOURCE</div><div class="code">
            opt.Map(curry(func))</div></div></div><div class="member-title"><a name="ParMap&lt;T1, T2, T3, R>"></a>ParMap&lt;T1, T2, T3, R&gt;(OptionUnsafe&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParMap_T1_T2_T3_R_OptionUnsafe_T1_opt__Func_T1_T2_T3_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">ParMap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T1</span>&gt; opt, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParMap_T1_T2_T3_R_OptionUnsafe_T1_opt__Func_T1_T2_T3_R_func_"><div class="section_title">SOURCE</div><div class="code">
            opt.Map(curry(func))</div></div></div><div class="member-title"><a name="Select&lt;T, U>"></a>Select&lt;T, U&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_T_U_OptionUnsafe_T_self__Func_T_U_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">U</span>&gt; <span class="ident">Select</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">U</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Select_T_U_OptionUnsafe_T_self__Func_T_U_map_"><div class="section_title">SOURCE</div><div class="code">
            self.Map(map)</div></div></div><div class="member-title"><a name="SelectMany&lt;T, U, V>"></a>SelectMany&lt;T, U, V&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, OptionUnsafe&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_T_U_V_OptionUnsafe_T_self__Func_T_OptionUnsafe&lt;U>_bind__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">V</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">U</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_T_U_V_OptionUnsafe_T_self__Func_T_OptionUnsafe&lt;U>_bind__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            if (self.IsNone) return None;
            var resU = bind(self.Value);
            if (resU.IsNone) return None;
            return project(self.Value, resU.Value);
        </div></div></div><div class="member-title"><a name="SelectMany&lt;T, U, V>"></a>SelectMany&lt;T, U, V&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_T_U_V_OptionUnsafe_T_self__Func_T_IEnumerable&lt;U>_bind__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_T_U_V_OptionUnsafe_T_self__Func_T_IEnumerable&lt;U>_bind__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            if (self.IsNone) return new V[0];
            return bind(self.Value).Map(resU =&gt; project(self.Value, resU));
        </div></div></div><div class="member-title"><a name="SelectMany&lt;T, U, V>"></a>SelectMany&lt;T, U, V&gt;(IEnumerable&lt;T&gt;, Func&lt;T, OptionUnsafe&lt;U&gt;&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_T_U_V_IEnumerable_T_self__Func_T_OptionUnsafe&lt;U>_bind__Func_T_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">V</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">U</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_T_U_V_IEnumerable_T_self__Func_T_OptionUnsafe&lt;U>_bind__Func_T_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
            var ta = self.Take(1).ToArray();
            if (ta.Length == 0) return None;
            var resU = bind(ta[0]);
            if (resU.IsNone) return None;
            return project(ta[0], resU.Value);
        </div></div></div><div class="member-title"><a name="Somes&lt;T>"></a>Somes&lt;T&gt;(IEnumerable&lt;OptionUnsafe&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Somes_T_IEnumerable_OptionUnsafe&lt;T>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Extracts from a list of &#39;Option&#39; all the &#39;Some&#39; elements. All the &#39;Some&#39; elements are extracted in order. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Somes</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Somes_T_IEnumerable_OptionUnsafe&lt;T>_self_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in self)
            {
                if (item.IsSome)
                {
                    yield return item.Value;
                }
            }
        </div></div></div><div class="member-title"><a name="Sum"></a>Sum(OptionUnsafe&lt;int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum__OptionUnsafe_int_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="keyword">int</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">Sum</span>(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="keyword">int</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Sum__OptionUnsafe_int_self_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? self.Value
                : 0</div></div></div><div class="member-title"><a name="SumAsync"></a>SumAsync(Task&lt;OptionUnsafe&lt;int&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumAsync__Task_OptionUnsafe&lt;int>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="keyword">int</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">SumAsync</span>(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="keyword">int</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SumAsync__Task_OptionUnsafe&lt;int>_self_"><div class="section_title">SOURCE</div><div class="code">
            (await self).Sum()</div></div></div><div class="member-title"><a name="SumAsync"></a>SumAsync(OptionUnsafe&lt;Task&lt;int&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumAsync__OptionUnsafe_Task&lt;int>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">SumAsync</span>(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SumAsync__OptionUnsafe_Task&lt;int>_self_"><div class="section_title">SOURCE</div><div class="code">
            self.IsSome
                ? await self.Value
                : 0</div></div></div><div class="member-title"><a name="Where&lt;T>"></a>Where&lt;T&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_T_OptionUnsafe_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Where</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Where_T_OptionUnsafe_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Filter(pred)
                ? self
                : None</div></div></div></div></body></html>