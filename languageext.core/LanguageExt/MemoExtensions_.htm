<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="https://louthy.github.io/">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="MemoExtensions_.htm">MemoExtensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Memo&lt;T, R>">Memo&lt;T, R&gt;(Func&lt;T, R&gt;)</a><a class="nav-link" href="#Memo&lt;T>">Memo&lt;T&gt;(Func&lt;T&gt;)</a><a class="nav-link" href="#Memo&lt;T>">Memo&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#MemoUnsafe&lt;T, R>">MemoUnsafe&lt;T, R&gt;(Func&lt;T, R&gt;)</a></div><div class="content-panel"><h1 >MemoExtensions Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">MemoExtensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="Memo&lt;T, R>"></a>Memo&lt;T, R&gt;(Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Memo_T_R_Func_T_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns a Func&lt;T,R&gt; that wraps func.  Each time the resulting Func&lt;T,R&gt; is called with a new value, its result is memoized (cached). Subsequent calls use the memoized value.  <br/><br/> Remarks:      Thread-safe and memory-leak safe.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">Memo</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Memo_T_R_Func_T_R_func_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Prelude.memo(func)</div></div></div><div class="member-title"><a name="Memo&lt;T>"></a>Memo&lt;T&gt;(Func&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Memo_T_Func_T_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns a Func&lt;T&gt; that wraps func.  The first call to the resulting Func&lt;T&gt; will cache the result. Subsequent calls return the cached item. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Memo</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Memo_T_Func_T_func_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Prelude.memo(func)</div></div></div><div class="member-title"><a name="Memo&lt;T>"></a>Memo&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Memo_T_IEnumerable_T_seq_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Enumerable memoization.  As an enumerable is enumerated each item is retained in an internal list, so that future evalation of the enumerable isn&#39;t done.  Only items not seen before are evaluated.  <br/><br/> This minimises one of the major problems with the IEnumerable / yield return  pattern by causing at-most-once evaluation of each item.  <br/><br/> Use the IEnumerable extension method Memo for convenience. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">seq</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Enumerable to memoize</div></div><div class="section_title">REMARKS</div><span >Although this allows efficient lazy evaluation, it does come at a memory cost. Each item is cached internally, so this method doesn&#39;t allow for evaluation of infinite sequences. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Memo</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; seq)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >IEnumerable with caching properties</span></div></div></div><div style="display:none" id="code-Memo_T_IEnumerable_T_seq_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Prelude.memo(seq)</div></div></div><div class="member-title"><a name="MemoUnsafe&lt;T, R>"></a>MemoUnsafe&lt;T, R&gt;(Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MemoUnsafe_T_R_Func_T_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns a Func&lt;T,R&gt; that wraps func.  Each time the resulting Func&lt;T,R&gt; is called with a new value, its result is memoized (cached). Subsequent calls use the memoized value.  <br/><br/> Remarks:      No mechanism for freeing cached values and therefore can cause a     memory leak when holding onto the Func&lt;T,R&gt; reference.     Uses a ConcurrentDictionary for the cache and is thread-safe </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">MemoUnsafe</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MemoUnsafe_T_R_Func_T_R_func_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Prelude.memoUnsafe(func)</div></div></div></div></body></html>