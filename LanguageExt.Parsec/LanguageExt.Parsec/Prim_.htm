<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt.Parsec/index.htm">LanguageExt.Parsec</a> \ <span class="nav-bar-link" href="Prim_.htm">Prim</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#eof">eof</a><a class="nav-link" href="#getIndex">getIndex</a><a class="nav-link" href="#getPos">getPos</a><h3 >PROPERTIES</h3><a class="nav-link" href="#unitp">unitp</a><h3 >METHODS</h3><a class="nav-link" href="#asDouble">asDouble(Parser&lt;IEnumerable&lt;char&gt;&gt;)</a><a class="nav-link" href="#asFloat">asFloat(Parser&lt;IEnumerable&lt;char&gt;&gt;)</a><a class="nav-link" href="#asInteger">asInteger(Parser&lt;IEnumerable&lt;char&gt;&gt;)</a><a class="nav-link" href="#asInteger">asInteger(Parser&lt;IEnumerable&lt;char&gt;&gt;, int)</a><a class="nav-link" href="#asString">asString(Parser&lt;IEnumerable&lt;char&gt;&gt;)</a><a class="nav-link" href="#attempt&lt;T>">attempt&lt;T&gt;(Parser&lt;T&gt;)</a><a class="nav-link" href="#between&lt;L, R, T>">between&lt;L, R, T&gt;(Parser&lt;L&gt;, Parser&lt;R&gt;, Parser&lt;T&gt;)</a><a class="nav-link" href="#chain&lt;T>">chain&lt;T&gt;(Parser&lt;T&gt;[])</a><a class="nav-link" href="#chain&lt;T>">chain&lt;T&gt;(IEnumerable&lt;Parser&lt;T&gt;&gt;)</a><a class="nav-link" href="#chainl&lt;T>">chainl&lt;T&gt;(Parser&lt;T&gt;, Parser&lt;Func&lt;T, T, T&gt;&gt;, T)</a><a class="nav-link" href="#chainl1&lt;T>">chainl1&lt;T&gt;(Parser&lt;T&gt;, Parser&lt;Func&lt;T, T, T&gt;&gt;)</a><a class="nav-link" href="#chainr&lt;T>">chainr&lt;T&gt;(Parser&lt;T&gt;, Parser&lt;Func&lt;T, T, T&gt;&gt;, T)</a><a class="nav-link" href="#chainr1&lt;T>">chainr1&lt;T&gt;(Parser&lt;T&gt;, Parser&lt;Func&lt;T, T, T&gt;&gt;)</a><a class="nav-link" href="#choice&lt;T>">choice&lt;T&gt;(Parser&lt;T&gt;[])</a><a class="nav-link" href="#choice&lt;T>">choice&lt;T&gt;(IEnumerable&lt;Parser&lt;T&gt;&gt;)</a><a class="nav-link" href="#count&lt;S, T>">count&lt;S, T&gt;(int, Parser&lt;T&gt;)</a><a class="nav-link" href="#either&lt;T>">either&lt;T&gt;(Parser&lt;T&gt;, Parser&lt;T&gt;)</a><a class="nav-link" href="#endBy&lt;S, T>">endBy&lt;S, T&gt;(Parser&lt;T&gt;, Parser&lt;S&gt;)</a><a class="nav-link" href="#endBy1&lt;S, T>">endBy1&lt;S, T&gt;(Parser&lt;T&gt;, Parser&lt;S&gt;)</a><a class="nav-link" href="#failure&lt;T>">failure&lt;T&gt;(string)</a><a class="nav-link" href="#getState&lt;T>">getState&lt;T&gt;()</a><a class="nav-link" href="#lazyp&lt;T>">lazyp&lt;T&gt;(Func&lt;Parser&lt;T&gt;&gt;)</a><a class="nav-link" href="#lookAhead&lt;T>">lookAhead&lt;T&gt;(Parser&lt;T&gt;)</a><a class="nav-link" href="#many&lt;T>">many&lt;T&gt;(Parser&lt;T&gt;)</a><a class="nav-link" href="#many1&lt;T>">many1&lt;T&gt;(Parser&lt;T&gt;)</a><a class="nav-link" href="#manyUntil&lt;T, U>">manyUntil&lt;T, U&gt;(Parser&lt;T&gt;, Parser&lt;U&gt;)</a><a class="nav-link" href="#notFollowedBy&lt;T>">notFollowedBy&lt;T&gt;(Parser&lt;T&gt;)</a><a class="nav-link" href="#optional&lt;T>">optional&lt;T&gt;(Parser&lt;T&gt;)</a><a class="nav-link" href="#optionalArray&lt;T>">optionalArray&lt;T&gt;(Parser&lt;T&gt;)</a><a class="nav-link" href="#optionalList&lt;T>">optionalList&lt;T&gt;(Parser&lt;T&gt;)</a><a class="nav-link" href="#optionalSeq&lt;T>">optionalSeq&lt;T&gt;(Parser&lt;T&gt;)</a><a class="nav-link" href="#optionOrElse&lt;T>">optionOrElse&lt;T&gt;(T, Parser&lt;T&gt;)</a><a class="nav-link" href="#parse&lt;T>">parse&lt;T&gt;(Parser&lt;T&gt;, PString)</a><a class="nav-link" href="#parse&lt;T>">parse&lt;T&gt;(Parser&lt;T&gt;, string)</a><a class="nav-link" href="#result&lt;T>">result&lt;T&gt;(T)</a><a class="nav-link" href="#sepBy&lt;S, T>">sepBy&lt;S, T&gt;(Parser&lt;T&gt;, Parser&lt;S&gt;)</a><a class="nav-link" href="#sepBy1&lt;S, T>">sepBy1&lt;S, T&gt;(Parser&lt;T&gt;, Parser&lt;S&gt;)</a><a class="nav-link" href="#sepEndBy&lt;S, T>">sepEndBy&lt;S, T&gt;(Parser&lt;T&gt;, Parser&lt;S&gt;)</a><a class="nav-link" href="#sepEndBy1&lt;S, T>">sepEndBy1&lt;S, T&gt;(Parser&lt;T&gt;, Parser&lt;S&gt;)</a><a class="nav-link" href="#setState&lt;T>">setState&lt;T&gt;(T)</a><a class="nav-link" href="#skipMany&lt;T>">skipMany&lt;T&gt;(Parser&lt;T&gt;)</a><a class="nav-link" href="#skipMany1&lt;T>">skipMany1&lt;T&gt;(Parser&lt;T&gt;)</a><a class="nav-link" href="#unexpected&lt;T>">unexpected&lt;T&gt;(string)</a><a class="nav-link" href="#zero&lt;T>">zero&lt;T&gt;()</a></div><div class="content-panel"><h1 >Prim Class</h1><p ><span >The primitive parser combinators </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Prim</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt.Parsec</div></div><h2 >Fields</h2><div class="member-title"><a name="eof"></a>eof</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >This parser only succeeds at the end of the input. This is not a primitive parser but it is defined using &#39;notFollowedBy&#39;. </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">eof</span></div></div></div><div class="member-title"><a name="getIndex"></a>getIndex</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the current index into the source </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">getIndex</span></div></div></div><div class="member-title"><a name="getPos"></a>getPos</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the current position of the parser in the source as a line and column index (starting at 1 for both) </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="ident">Pos</span>&gt; <span class="ident">getPos</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="unitp"></a>unitp</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >This parser is useful to put at the top of LINQ expressions, it makes it easier to put breakpoints on the actual first parser in an expression.  It returns unit </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">unitp</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="asDouble"></a>asDouble(Parser&lt;IEnumerable&lt;char&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-asDouble__Parser_IEnumerable&lt;char>_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Parse a char list and convert into an double precision floating point value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">double</span>&gt;&gt; <span class="ident">asDouble</span>(<span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt;&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">double</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-asDouble__Parser_IEnumerable&lt;char>_p_"><div class="section_title">SOURCE</div><div class="code">
            p.Select(x =&gt; parseDouble(new string(x.ToArray())))</div></div></div><div class="member-title"><a name="asFloat"></a>asFloat(Parser&lt;IEnumerable&lt;char&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-asFloat__Parser_IEnumerable&lt;char>_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Parse a char list and convert into an double precision floating point value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">float</span>&gt;&gt; <span class="ident">asFloat</span>(<span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt;&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">float</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-asFloat__Parser_IEnumerable&lt;char>_p_"><div class="section_title">SOURCE</div><div class="code">
            p.Select(x =&gt; parseFloat(new string(x.ToArray())))</div></div></div><div class="member-title"><a name="asInteger"></a>asInteger(Parser&lt;IEnumerable&lt;char&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-asInteger__Parser_IEnumerable&lt;char>_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Parse a char list and convert into an integer </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="ident">asInteger</span>(<span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt;&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">int</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-asInteger__Parser_IEnumerable&lt;char>_p_"><div class="section_title">SOURCE</div><div class="code">
            p.Select(x =&gt; parseInt(new string(x.ToArray())))</div></div></div><div class="member-title"><a name="asInteger"></a>asInteger(Parser&lt;IEnumerable&lt;char&gt;&gt;, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-asInteger__Parser_IEnumerable&lt;char>_p__int__fromBase_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Parse a char list and convert into an integer </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fromBase</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="ident">asInteger</span>(<span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt;&gt; p, <span class="keyword">int</span> fromBase)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">int</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-asInteger__Parser_IEnumerable&lt;char>_p__int__fromBase_"><div class="section_title">SOURCE</div><div class="code">
            p.Select(x =&gt; parseInt(new string(x.ToArray()), fromBase))</div></div></div><div class="member-title"><a name="asString"></a>asString(Parser&lt;IEnumerable&lt;char&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-asString__Parser_IEnumerable&lt;char>_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Parse a char list and convert into a string </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="keyword">string</span>&gt; <span class="ident">asString</span>(<span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt;&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">string</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-asString__Parser_IEnumerable&lt;char>_p_"><div class="section_title">SOURCE</div><div class="code">
            p.Select(x =&gt; new string(x.ToArray()))</div></div></div><div class="member-title"><a name="attempt&lt;T>"></a>attempt&lt;T&gt;(Parser&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-attempt_T_Parser_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The parser attempt(p) behaves like parser p, except that it pretends that it hasn&#39;t consumed any input when an error occurs.<br/><br/> This combinator is used whenever arbitrary look ahead is needed. Since it pretends that it hasn&#39;t consumed any input when p fails, the either combinator will try its second alternative even when the first parser failed while consuming input.<br/><br/> See remarks. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >The attempt combinator can for example be used to distinguish identifiers and reserved words.  Both reserved words and identifiers are a sequence of letters.  Whenever we expect a certain reserved word where we can also expect an identifier we have to use the attempt combinator.  Suppose we write:<br/><br/>    var expr        = either(letExpr, identifier).label(&quot;expression&quot;);<br/><br/>    var letExpr     = from x in str(&quot;let&quot;)                      ...                      select ...;<br/><br/>    var identifier  = many1(letter);<br/><br/>  If the user writes &quot;lexical&quot;, the parser fails with: unexpected  &quot;x&quot;, expecting &quot;t&quot; in &quot;let&quot;.  Indeed, since the either combinator  only tries alternatives when the first alternative hasn&#39;t consumed  input, the identifier parser is never tried  (because the prefix  &quot;le&quot; of the str(&quot;let&quot;) parser is already consumed). The right behaviour   can be obtained by adding the attempt combinator:<br/><br/>    var expr        = either(letExpr, identifier).label(&quot;expression&quot;);<br/><br/>    var letExpr     = from x in attempt(str(&quot;let&quot;))                      ...                      select ...;<br/><br/>    var identifier  = many1(letter);<br/><br/>  </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">attempt</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-attempt_T_Parser_T_p_"><div class="section_title">SOURCE</div><div class="code">
            inp =&gt;
            {
                var res = p(inp);
                if (res.Tag == ResultTag.Consumed &amp;&amp; res.Reply.Tag == ReplyTag.Error)
                {
                    return EmptyError&lt;T&gt;(res.Reply.Error);
                }
                else
                {
                    return res;
                }
            }</div></div></div><div class="member-title"><a name="between&lt;L, R, T>"></a>between&lt;L, R, T&gt;(Parser&lt;L&gt;, Parser&lt;R&gt;, Parser&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-between_L_R_T_Parser_L_open__Parser_R_close__Parser_T_inner_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >between(open,close,p) parses open, followed by p and close. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">open</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">L</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">close</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">inner</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">between</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">L</span>&gt; open, <span class="ident">Parser</span>&lt;<span class="ident">R</span>&gt; close, <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; inner)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >The value returned by p. </span></div></div></div><div style="display:none" id="code-between_L_R_T_Parser_L_open__Parser_R_close__Parser_T_inner_"><div class="section_title">SOURCE</div><div class="code">
            from l in open
            from v in inner
            from r in close
            select v</div></div></div><div class="member-title"><a name="chain&lt;T>"></a>chain&lt;T&gt;(Parser&lt;T&gt;[])<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-chain_T_Parser_T_ps_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Runs a sequence of parsers, if any fail then the failure state is returned immediately and subsequence parsers are not run.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ps</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;[]</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">chain</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;[] ps)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >The result of each parser as an enumerable. </span></div></div></div><div style="display:none" id="code-chain_T_Parser_T_ps_"><div class="section_title">SOURCE</div><div class="code">
            chaini(ps).Map(x =&gt; x.Freeze().AsEnumerable())</div></div></div><div class="member-title"><a name="chain&lt;T>"></a>chain&lt;T&gt;(IEnumerable&lt;Parser&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-chain_T_IEnumerable_Parser&lt;T>_ps_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Runs a sequence of parsers, if any fail then the failure state is returned immediately and subsequence parsers are not run.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ps</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">chain</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;&gt; ps)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >The result of each parser as an enumerable. </span></div></div></div><div style="display:none" id="code-chain_T_IEnumerable_Parser&lt;T>_ps_"><div class="section_title">SOURCE</div><div class="code">
            chaini(ps.ToArray()).Map(x =&gt; x.Freeze().AsEnumerable())</div></div></div><div class="member-title"><a name="chainl&lt;T>"></a>chainl&lt;T&gt;(Parser&lt;T&gt;, Parser&lt;Func&lt;T, T, T&gt;&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-chainl_T_Parser_T_p__Parser_Func&lt;T, T, T>_op__T__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >chainl(p,op,x) parses zero or more occurrences of p, separated by op  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">op</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">chainl</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p, <span class="ident">Parser</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;&gt; op, <span class="ident">T</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >a value obtained by a left associative application of all functions  returned by op to the values returned by p. If there are no occurrences  of p, the value x is returned.</span></div></div></div><div style="display:none" id="code-chainl_T_Parser_T_p__Parser_Func&lt;T, T, T>_op__T__x_"><div class="section_title">SOURCE</div><div class="code">
            either(chainr1(p, op), result(x))</div></div></div><div class="member-title"><a name="chainl1&lt;T>"></a>chainl1&lt;T&gt;(Parser&lt;T&gt;, Parser&lt;Func&lt;T, T, T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-chainl1_T_Parser_T_p__Parser_Func&lt;T, T, T>_op_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >chainl1(p,op) parses one or more occurrences of p, separated by op.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">op</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">chainl1</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p, <span class="ident">Parser</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;&gt; op)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A value obtained by a left associative application of all functions  returned by op to the values returned by p </span></div></div></div><div style="display:none" id="code-chainl1_T_Parser_T_p__Parser_Func&lt;T, T, T>_op_"><div class="section_title">SOURCE</div><div class="code">
            Func&lt;T, Parser&lt;T&gt;&gt; rest = null;

            rest = fun((T x) =&gt; either(from f in op
                                       from y in p
                                       from r in rest(f(x, y))
                                       select r,
                                       result(x)));

            return from x in p
                   from y in rest(x)
                   select y;
        </div></div></div><div class="member-title"><a name="chainr&lt;T>"></a>chainr&lt;T&gt;(Parser&lt;T&gt;, Parser&lt;Func&lt;T, T, T&gt;&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-chainr_T_Parser_T_p__Parser_Func&lt;T, T, T>_op__T__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >chainr(p,op,x) parses zero or more occurrences of p, separated by op  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">op</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">chainr</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p, <span class="ident">Parser</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;&gt; op, <span class="ident">T</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >a value obtained by a right associative application of all functions  returned by op to the values returned by p. If there are no occurrences  of p, the value x is returned.</span></div></div></div><div style="display:none" id="code-chainr_T_Parser_T_p__Parser_Func&lt;T, T, T>_op__T__x_"><div class="section_title">SOURCE</div><div class="code">
            either(chainr1(p, op), result(x))</div></div></div><div class="member-title"><a name="chainr1&lt;T>"></a>chainr1&lt;T&gt;(Parser&lt;T&gt;, Parser&lt;Func&lt;T, T, T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-chainr1_T_Parser_T_p__Parser_Func&lt;T, T, T>_op_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >chainr1(p,op) parses one or more occurrences of p, separated by op.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">op</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">chainr1</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p, <span class="ident">Parser</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;&gt; op)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A value obtained by a right associative application of all functions  returned by op to the values returned by p </span></div></div></div><div style="display:none" id="code-chainr1_T_Parser_T_p__Parser_Func&lt;T, T, T>_op_"><div class="section_title">SOURCE</div><div class="code">
            Parser&lt;T&gt; scan = null;

            var rest = fun((T x) =&gt; either(from f in op
                                           from y in scan
                                           select f(x, y),
                                           result(x)));

            scan = from x in p
                   from y in rest(x)
                   select y;

            return scan;
        </div></div></div><div class="member-title"><a name="choice&lt;T>"></a>choice&lt;T&gt;(Parser&lt;T&gt;[])<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choice_T_Parser_T_ps_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >choice(ps) tries to apply the parsers in the list ps in order, until one  of them succeeds.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ps</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;[]</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">choice</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;[] ps)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >The value of the succeeding parser. </span></div></div></div><div style="display:none" id="code-choice_T_Parser_T_ps_"><div class="section_title">SOURCE</div><div class="code">
            choicei(ps)</div></div></div><div class="member-title"><a name="choice&lt;T>"></a>choice&lt;T&gt;(IEnumerable&lt;Parser&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choice_T_IEnumerable_Parser&lt;T>_ps_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >choice(ps) tries to apply the parsers in the list ps in order, until one  of them succeeds.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ps</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">choice</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;&gt; ps)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >The value of the succeeding parser. </span></div></div></div><div style="display:none" id="code-choice_T_IEnumerable_Parser&lt;T>_ps_"><div class="section_title">SOURCE</div><div class="code">
            choicei(ps.ToArray())</div></div></div><div class="member-title"><a name="count&lt;S, T>"></a>count&lt;S, T&gt;(int, Parser&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_S_T_int__n__Parser_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >count(n,p) parses n occurrences of p. If n is smaller or equal to zero, the parser equals to result([]).  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">n</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">count</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">int</span> n, <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >A list of values returned by p. </span></div></div></div><div style="display:none" id="code-count_S_T_int__n__Parser_T_p_"><div class="section_title">SOURCE</div><div class="code">
            counti(n, p)</div></div></div><div class="member-title"><a name="either&lt;T>"></a>either&lt;T&gt;(Parser&lt;T&gt;, Parser&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-either_T_Parser_T_p__Parser_T_q_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >This combinator implements choice. The parser either(p,q) first applies p.  If it succeeds, the value of p is returned.  If p fails /without consuming any input/, parser q is tried.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">q</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >This combinator is the mplus behaviour of the Parser monad.<br/><br/> The parser is called /predictive/ since q is only tried when parser p didn&#39;t consume any input (i.e.. the look ahead is 1).<br/><br/> This non-backtracking behaviour allows for both an efficient implementation of the parser combinators and the generation of good error messages. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">either</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p, <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; q)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-either_T_Parser_T_p__Parser_T_q_"><div class="section_title">SOURCE</div><div class="code">
            inp =&gt;
            {
                var m = p(inp);

                // meerr
                if (m.Tag == ResultTag.Empty &amp;&amp; m.Reply.Tag == ReplyTag.Error)
                {
                    var n = q(inp);

                    // neok
                    if (n.Tag == ResultTag.Empty &amp;&amp; n.Reply.Tag == ReplyTag.OK)
                    {
                        return EmptyOK(n.Reply.Result, n.Reply.State, mergeError(m.Reply.Error, n.Reply.Error));
                    }

                    // nerr
                    if (n.Tag == ResultTag.Empty &amp;&amp; n.Reply.Tag == ReplyTag.Error)
                    {
                        return EmptyError&lt;T&gt;(mergeError(m.Reply.Error, n.Reply.Error));
                    }

                    // cerr, cok
                    return n;
                }

                // cok, cerr, eok
                return m;
            }</div></div></div><div class="member-title"><a name="endBy&lt;S, T>"></a>endBy&lt;S, T&gt;(Parser&lt;T&gt;, Parser&lt;S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-endBy_S_T_Parser_T_p__Parser_S_sep_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >endBy(p,sep) parses zerp or more occurrences of p, separated and ended by sep. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sep</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">endBy</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p, <span class="ident">Parser</span>&lt;<span class="ident">S</span>&gt; sep)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >A list of values returned by p. </span></div></div></div><div style="display:none" id="code-endBy_S_T_Parser_T_p__Parser_S_sep_"><div class="section_title">SOURCE</div><div class="code">
            many(from x in p
                 from _ in sep
                 select x)</div></div></div><div class="member-title"><a name="endBy1&lt;S, T>"></a>endBy1&lt;S, T&gt;(Parser&lt;T&gt;, Parser&lt;S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-endBy1_S_T_Parser_T_p__Parser_S_sep_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >endBy1(p,sep) parses one or more occurrences of p, separated and ended by sep. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sep</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">endBy1</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p, <span class="ident">Parser</span>&lt;<span class="ident">S</span>&gt; sep)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >A list of values returned by p. </span></div></div></div><div style="display:none" id="code-endBy1_S_T_Parser_T_p__Parser_S_sep_"><div class="section_title">SOURCE</div><div class="code">
            many1(from x in p
                  from _ in sep
                  select x)</div></div></div><div class="member-title"><a name="failure&lt;T>"></a>failure&lt;T&gt;(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-failure_T_string__msg_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The parser failure(msg) always fails with a Message error without consuming any input.<br/><br/> The parsers &#39;failure&#39;, &#39;label&#39; and &#39;unexpected&#39; are the three parsers used to generate error messages.  Of these, only &#39;label&#39; is commonly used.  For an example of the use of unexpected, see the definition of &#39;Text.Parsec.Combinator.notFollowedBy&#39;. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">msg</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Error message to use when parsed</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">failure</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">string</span> msg)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-failure_T_string__msg_"><div class="section_title">SOURCE</div><div class="code">
            inp =&gt; EmptyError&lt;T&gt;(ParserError.Message(inp.Pos, msg))</div></div></div><div class="member-title"><a name="getState&lt;T>"></a>getState&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-getState_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Special parser for getting user-state that was previously set with setState </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">getState</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-getState_T_"><div class="section_title">SOURCE</div><div class="code">
            inp =&gt;
                match(inp.UserState,
                    Some: x =&gt; x is T
                        ? ConsumedOK((T)x, inp)
                        : EmptyError&lt;T&gt;(ParserError.Message(inp.Pos, &quot;User state type-mismatch&quot;)),
                    None: () =&gt; EmptyError&lt;T&gt;(ParserError.Message(inp.Pos, &quot;No user state set&quot;)))</div></div></div><div class="member-title"><a name="lazyp&lt;T>"></a>lazyp&lt;T&gt;(Func&lt;Parser&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-lazyp_T_Func_Parser&lt;T>_fn_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lazy parser - useful in recursive scenarios. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fn</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">lazyp</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;&gt; fn)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-lazyp_T_Func_Parser&lt;T>_fn_"><div class="section_title">SOURCE</div><div class="code">
            inp =&gt; fn()(inp)</div></div></div><div class="member-title"><a name="lookAhead&lt;T>"></a>lookAhead&lt;T&gt;(Parser&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-lookAhead_T_Parser_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >lookAhead(p) parses p without consuming any input.<br/><br/> If p fails and consumes some input, so does lookAhead(p). Combine with  &#39;attempt&#39; if this is undesirable. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">lookAhead</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-lookAhead_T_Parser_T_p_"><div class="section_title">SOURCE</div><div class="code">
            inp =&gt;
            {
                var res = p(inp);
                if (res.Reply.Tag == ReplyTag.OK)
                {
                    return EmptyOK(res.Reply.Result, inp);
                }
                else
                {
                    return res;
                }
            }</div></div></div><div class="member-title"><a name="many&lt;T>"></a>many&lt;T&gt;(Parser&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-many_T_Parser_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >many(p) applies the parser p zero or more times. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">many</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >Enumerable of the returned values of p. </span></div></div></div><div style="display:none" id="code-many_T_Parser_T_p_"><div class="section_title">SOURCE</div><div class="code">
            inp =&gt;
            {
                var current = inp;
                List&lt;T&gt; results = new List&lt;T&gt;();
                ParserError error = null;

                while(true)
                {
                    var t = p(current);

                    // cok
                    if (t.Tag == ResultTag.Consumed &amp;&amp; t.Reply.Tag == ReplyTag.OK)
                    {
                        results.Add(t.Reply.Result);
                        current = t.Reply.State;
                        error = t.Reply.Error;
                        continue;
                    }

                    // eok
                    if (t.Tag == ResultTag.Empty &amp;&amp; t.Reply.Tag == ReplyTag.OK)
                    {
                        // eok, eerr
                        return EmptyError&lt;IEnumerable&lt;T&gt;&gt;(new ParserError(ParserErrorTag.SysUnexpect, current.Pos, &quot;many: combinator &#39;many&#39; is applied to a parser that accepts an empty string.&quot;, List.empty&lt;string&gt;()));
                    }

                    // cerr
                    if (t.Tag == ResultTag.Consumed &amp;&amp; t.Reply.Tag == ReplyTag.Error)
                    {
                        return ConsumedError&lt;IEnumerable&lt;T&gt;&gt;(mergeError(error, t.Reply.Error));
                    }

                    // eerr
                    return EmptyOK&lt;IEnumerable&lt;T&gt;&gt;(results, current, mergeError(error, t.Reply.Error));
                }
            }</div></div></div><div class="member-title"><a name="many1&lt;T>"></a>many1&lt;T&gt;(Parser&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-many1_T_Parser_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >many1(p) applies the parser p one or more times. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">many1</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >Enumerable of the returned values of p. </span></div></div></div><div style="display:none" id="code-many1_T_Parser_T_p_"><div class="section_title">SOURCE</div><div class="code">
            from x in p
            from xs in many(p)
            select x.Cons(xs)</div></div></div><div class="member-title"><a name="manyUntil&lt;T, U>"></a>manyUntil&lt;T, U&gt;(Parser&lt;T&gt;, Parser&lt;U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-manyUntil_T_U_Parser_T_p__Parser_U_end_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">end</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">manyUntil</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p, <span class="ident">Parser</span>&lt;<span class="ident">U</span>&gt; end)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-manyUntil_T_U_Parser_T_p__Parser_U_end_"><div class="section_title">SOURCE</div><div class="code">
            Parser&lt;IEnumerable&lt;T&gt;&gt; scan = null;

            scan = either(
                from _ in end
                select new T[0].AsEnumerable(),
                from x  in p
                from xs in scan
                select x.Cons(xs));

            return scan;
        </div></div></div><div class="member-title"><a name="notFollowedBy&lt;T>"></a>notFollowedBy&lt;T&gt;(Parser&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-notFollowedBy_T_Parser_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >notFollowedBy(p) only succeeds when parser p fails. This parser does not consume any input.This parser can be used to implement the &#39;longest match&#39; rule.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">notFollowedBy</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-notFollowedBy_T_Parser_T_p_"><div class="section_title">SOURCE</div><div class="code">
            attempt(
                either(from c in attempt(p)
                       from u in unexpected&lt;Unit&gt;(c.ToString())
                       select u,
                       result(unit)))</div></div></div><div class="member-title"><a name="optional&lt;T>"></a>optional&lt;T&gt;(Parser&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-optional_T_Parser_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >optional(p) tries to apply parser p.  If p fails without consuming input, it return &#39;None&#39;, otherwise it returns &#39;Some&#39; the value returned by p. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">optional</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-optional_T_Parser_T_p_"><div class="section_title">SOURCE</div><div class="code">
            inp =&gt;
            {
                var r = p.Map(x =&gt; Option&lt;T&gt;.Some(x))(inp);
                return r.Reply.Tag == ReplyTag.OK
                    ? r
                    : EmptyOK(Option&lt;T&gt;.None, inp);
            }</div></div></div><div class="member-title"><a name="optionalArray&lt;T>"></a>optionalArray&lt;T&gt;(Parser&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-optionalArray_T_Parser_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >optionalArray(p) tries to apply parser p.  If p fails without consuming input, it return [], otherwise it returns a one  item array with the result of p. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>[]&gt; <span class="ident">optionalArray</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>[]&gt;</div><div class="normal"><span >A list of 0 or 1 parsed items</span></div></div></div><div style="display:none" id="code-optionalArray_T_Parser_T_p_"><div class="section_title">SOURCE</div><div class="code">
            inp =&gt;
            {
                var r = p.Map(x =&gt; new[] { x })(inp);
                return r.Reply.Tag == ReplyTag.OK
                    ? r
                    : EmptyOK(new T [0], inp);
            }</div></div></div><div class="member-title"><a name="optionalList&lt;T>"></a>optionalList&lt;T&gt;(Parser&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-optionalList_T_Parser_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >optionalList(p) tries to apply parser p.  If p fails without consuming input, it return [], otherwise it returns a one  item Lst with the result of p. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">optionalList</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >A list of 0 or 1 parsed items</span></div></div></div><div style="display:none" id="code-optionalList_T_Parser_T_p_"><div class="section_title">SOURCE</div><div class="code">
            inp =&gt;
            {
                var r = p.Map(x =&gt; List.create(x))(inp);
                return r.Reply.Tag == ReplyTag.OK
                    ? r
                    : EmptyOK(List.empty&lt;T&gt;(), inp);
            }</div></div></div><div class="member-title"><a name="optionalSeq&lt;T>"></a>optionalSeq&lt;T&gt;(Parser&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-optionalSeq_T_Parser_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >optionalSeq(p) tries to apply parser p.  If p fails without consuming input, it return an empty IEnumerable, otherwise it returns  a one item IEnumerable with the result of p. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">optionalSeq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >A list of 0 or 1 parsed items</span></div></div></div><div style="display:none" id="code-optionalSeq_T_Parser_T_p_"><div class="section_title">SOURCE</div><div class="code">
            optionalList(p).Map(x =&gt; x.AsEnumerable())</div></div></div><div class="member-title"><a name="optionOrElse&lt;T>"></a>optionOrElse&lt;T&gt;(T, Parser&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-optionOrElse_T_T__x__Parser_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >optionOrElse(x, p) tries to apply parser p. If p fails without consuming input, it returns the value x, otherwise the value returned by p. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">optionOrElse</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> x, <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-optionOrElse_T_T__x__Parser_T_p_"><div class="section_title">SOURCE</div><div class="code">
            either(p, result(x))</div></div></div><div class="member-title"><a name="parse&lt;T>"></a>parse&lt;T&gt;(Parser&lt;T&gt;, PString)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parse_T_Parser_T_p__PString__input_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Run the parser p with the input provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">input</div><div class="arg-type"><span class="ident">PString</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ParserResult</span>&lt;<span class="ident">T</span>&gt; <span class="ident">parse</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p, <span class="ident">PString</span> input)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ParserResult</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parse_T_Parser_T_p__PString__input_"><div class="section_title">SOURCE</div><div class="code">
            p.Parse(input)</div></div></div><div class="member-title"><a name="parse&lt;T>"></a>parse&lt;T&gt;(Parser&lt;T&gt;, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parse_T_Parser_T_p__string__input_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Run the parser p with the input provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">input</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ParserResult</span>&lt;<span class="ident">T</span>&gt; <span class="ident">parse</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p, <span class="keyword">string</span> input)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ParserResult</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parse_T_Parser_T_p__string__input_"><div class="section_title">SOURCE</div><div class="code">
            p.Parse(input)</div></div></div><div class="member-title"><a name="result&lt;T>"></a>result&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-result_T_T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Always success parser.  Returns the value provided.   This is monad return for the Parser monad </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">result</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-result_T_T__value_"><div class="section_title">SOURCE</div><div class="code">
            inp =&gt; EmptyOK(value, inp)</div></div></div><div class="member-title"><a name="sepBy&lt;S, T>"></a>sepBy&lt;S, T&gt;(Parser&lt;T&gt;, Parser&lt;S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sepBy_S_T_Parser_T_p__Parser_S_sep_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >sepBy(p,sep) parses zero or more occurrences of p, separated by sep.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sep</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">sepBy</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p, <span class="ident">Parser</span>&lt;<span class="ident">S</span>&gt; sep)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >A list of values returned by p. </span></div></div></div><div style="display:none" id="code-sepBy_S_T_Parser_T_p__Parser_S_sep_"><div class="section_title">SOURCE</div><div class="code">
            either(sepBy1(p, sep), result(new T[0].AsEnumerable()))</div></div></div><div class="member-title"><a name="sepBy1&lt;S, T>"></a>sepBy1&lt;S, T&gt;(Parser&lt;T&gt;, Parser&lt;S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sepBy1_S_T_Parser_T_p__Parser_S_sep_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >sepBy1(p,sep) parses one or more occurrences of p, separated by sep.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sep</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">sepBy1</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p, <span class="ident">Parser</span>&lt;<span class="ident">S</span>&gt; sep)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >A list of values returned by p. </span></div></div></div><div style="display:none" id="code-sepBy1_S_T_Parser_T_p__Parser_S_sep_"><div class="section_title">SOURCE</div><div class="code">
            from x in p
            from xs in many(from _ in sep
                            from y in p
                            select y)
            select x.Cons(xs)</div></div></div><div class="member-title"><a name="sepEndBy&lt;S, T>"></a>sepEndBy&lt;S, T&gt;(Parser&lt;T&gt;, Parser&lt;S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sepEndBy_S_T_Parser_T_p__Parser_S_sep_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >sepEndBy(p,sep) parses zero or more occurrences of p, separated and optionally ended by sep.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sep</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">sepEndBy</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p, <span class="ident">Parser</span>&lt;<span class="ident">S</span>&gt; sep)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >A list of values returned by p. </span></div></div></div><div style="display:none" id="code-sepEndBy_S_T_Parser_T_p__Parser_S_sep_"><div class="section_title">SOURCE</div><div class="code">
            either(sepEndBy1(p, sep), result(new T[0].AsEnumerable()))</div></div></div><div class="member-title"><a name="sepEndBy1&lt;S, T>"></a>sepEndBy1&lt;S, T&gt;(Parser&lt;T&gt;, Parser&lt;S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sepEndBy1_S_T_Parser_T_p__Parser_S_sep_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >sepEndBy1(p,sep) parses one or more occurrences of p, separated and optionally ended by sep.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sep</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">sepEndBy1</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p, <span class="ident">Parser</span>&lt;<span class="ident">S</span>&gt; sep)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >A list of values returned by p. </span></div></div></div><div style="display:none" id="code-sepEndBy1_S_T_Parser_T_p__Parser_S_sep_"><div class="section_title">SOURCE</div><div class="code">
            from x in p
            from xs in either(from _ in sep
                              from ys in sepEndBy(p, sep)
                              select ys,
                              result(new[] { x }.AsEnumerable()))
            select x.Cons(xs)</div></div></div><div class="member-title"><a name="setState&lt;T>"></a>setState&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-setState_T_T__state_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Special parser for setting user-state that propagates  through the computation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">setState</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> state)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-setState_T_T__state_"><div class="section_title">SOURCE</div><div class="code">
            inp =&gt; ConsumedOK(unit, inp.SetUserState(state))</div></div></div><div class="member-title"><a name="skipMany&lt;T>"></a>skipMany&lt;T&gt;(Parser&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-skipMany_T_Parser_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >skipMany(p) applies the parser p zero or more times, skipping its result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">skipMany</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-skipMany_T_Parser_T_p_"><div class="section_title">SOURCE</div><div class="code">
            either(skipMany1(p), result(unit))</div></div></div><div class="member-title"><a name="skipMany1&lt;T>"></a>skipMany1&lt;T&gt;(Parser&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-skipMany1_T_Parser_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >skipMany(p) applies the parser p one or more times, skipping its result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">skipMany1</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-skipMany1_T_Parser_T_p_"><div class="section_title">SOURCE</div><div class="code">
            from x  in p
            from xs in many(p)
            select unit</div></div></div><div class="member-title"><a name="unexpected&lt;T>"></a>unexpected&lt;T&gt;(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-unexpected_T_string__msg_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The parser unexpected(msg) always fails with an Unexpect error message msg without consuming any input. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">msg</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc">Error message to use when parsed</div></div><div class="section_title">REMARKS</div><span >The parsers &#39;failure&#39;, &#39;label&#39; and &#39;unexpected&#39; are the three parsers used to generate error messages.  Of these, only &#39;label&#39; is commonly used.  For an example of the use of unexpected, see the definition of &#39;Text.Parsec.Combinator.notFollowedBy&#39;. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">unexpected</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">string</span> msg)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-unexpected_T_string__msg_"><div class="section_title">SOURCE</div><div class="code">
            inp =&gt; EmptyError&lt;T&gt;(ParserError.Unexpect(inp.Pos, msg))</div></div></div><div class="member-title"><a name="zero&lt;T>"></a>zero&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-zero_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Always fails (with an Unknown error) without consuming any input </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt; <span class="ident">zero</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-zero_T_"><div class="section_title">SOURCE</div><div class="code">
            inp =&gt; EmptyError&lt;T&gt;(ParserError.Unknown(inp.Pos))</div></div></div></div></body></html>