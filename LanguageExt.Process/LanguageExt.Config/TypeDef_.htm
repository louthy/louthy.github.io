<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt.Config/index.htm">LanguageExt.Config</a> \ <span class="nav-bar-link" href="TypeDef_.htm">TypeDef</span></div><div class="nav-panel"><h3 >CONSTRUCTORS</h3><a class="nav-link" href="#TypeDef">TypeDef(Type, Func&lt;Option&lt;string&gt;, object, object&gt;, Types, int, string, string)</a><a class="nav-link" href="#TypeDef">TypeDef(string, Type, Func&lt;Option&lt;string&gt;, object, object&gt;, int, FuncSpec[])</a><a class="nav-link" href="#TypeDef">TypeDef(string, Func&lt;Option&lt;string&gt;, object, object&gt;, Type, string, int, FuncSpec[])</a><a class="nav-link" href="#TypeDef">TypeDef(string, Func&lt;Option&lt;string&gt;, object, object&gt;, Type, Func&lt;ProcessSystemConfigParser, Parser&lt;object&gt;&gt;, Map&lt;string, Func&lt;ValueToken, ValueToken, ValueToken&gt;&gt;, Map&lt;string, Func&lt;ValueToken, ValueToken&gt;&gt;, Map&lt;string, Func&lt;ValueToken, ValueToken&gt;&gt;, Map&lt;string, Func&lt;object, object&gt;&gt;, TypeDef, int)</a><h3 >FIELDS</h3><a class="nav-link" href="#BinaryOperators">BinaryOperators</a><a class="nav-link" href="#ConversionOperators">ConversionOperators</a><a class="nav-link" href="#Ctor">Ctor</a><a class="nav-link" href="#FuncSpecs">FuncSpecs</a><a class="nav-link" href="#GenericType">GenericType</a><a class="nav-link" href="#MapsTo">MapsTo</a><a class="nav-link" href="#Name">Name</a><a class="nav-link" href="#NodeName">NodeName</a><a class="nav-link" href="#Order">Order</a><a class="nav-link" href="#PostfixOperators">PostfixOperators</a><a class="nav-link" href="#PrefixOperators">PrefixOperators</a><a class="nav-link" href="#Unknown">Unknown</a><a class="nav-link" href="#ValueParser">ValueParser</a><h3 >METHODS</h3><a class="nav-link" href="#Array">Array(Func&lt;TypeDef&gt;)</a><a class="nav-link" href="#BinaryOperator">BinaryOperator(string, ValueToken, ValueToken)</a><a class="nav-link" href="#CompareTo">CompareTo(TypeDef)</a><a class="nav-link" href="#Convert">Convert(ValueToken)</a><a class="nav-link" href="#Equals">Equals(TypeDef)</a><a class="nav-link" href="#GetHashCode">GetHashCode()</a><a class="nav-link" href="#MakeTuple&lt;T>">MakeTuple&lt;T&gt;(string, T)</a><a class="nav-link" href="#Map">Map(Func&lt;TypeDef&gt;)</a><a class="nav-link" href="#PostfixOperator">PostfixOperator(string, ValueToken)</a><a class="nav-link" href="#PrefixOperator">PrefixOperator(string, ValueToken)</a><a class="nav-link" href="#ToString">ToString()</a></div><div class="content-panel"><h1 >TypeDef Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">TypeDef</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">TypeDef</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">TypeDef</span>&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt.Config</div></div><h2 >Constructors</h2><div class="member-title"><a name="TypeDef"></a>TypeDef(Type, Func&lt;Option&lt;string&gt;, object, object&gt;, Types, int, string, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TypeDef__Type__type__Func_Option&lt;string>_object_object_ctor__Types__assembly__int__order__string__name__string__nodeName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Automatically defined record-type constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">type</div><div class="arg-type"><span class="ident">Type</span></div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">ctor</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">string</span>&gt;, <span class="keyword">object</span>, <span class="keyword">object</span>&gt;</div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">assembly</div><div class="arg-type"><span class="ident">Types</span></div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">order</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">nodeName</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc"></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">ctor</span> <span class="ident">TypeDef</span>(<span class="ident">Type</span> type, <span class="ident">Func</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">string</span>&gt;, <span class="keyword">object</span>, <span class="keyword">object</span>&gt; ctor, <span class="ident">Types</span> assembly, <span class="keyword">int</span> order, <span class="keyword">string</span> name = &quot;null&quot;, <span class="keyword">string</span> nodeName = &quot;&quot;)</div></div><div style="display:none" id="code-TypeDef__Type__type__Func_Option&lt;string>_object_object_ctor__Types__assembly__int__order__string__name__string__nodeName_"><div class="section_title">SOURCE</div><div class="code">
            if (type == null) throw new ArgumentNullException(nameof(type));

            var info = type.GetTypeInfo();
            Order = order;
            Ctor = ctor ?? ((_,x) =&gt; x);
            MapsTo = type;
            Name = name ?? MakeName(info.Name);
            BinaryOperators = LanguageExt.Map.empty&lt;string, Func&lt;ValueToken, ValueToken, ValueToken&gt;&gt;();
            PrefixOperators = LanguageExt.Map.empty&lt;string, Func&lt;ValueToken, ValueToken&gt;&gt;();
            PostfixOperators = LanguageExt.Map.empty&lt;string, Func&lt;ValueToken, ValueToken&gt;&gt;();
            ConversionOperators = LanguageExt.Map.empty&lt;string, Func&lt;object, object&gt;&gt;();
            GenericType = null;
            NodeName = nodeName;

            var props = from p in type.GetRuntimeProperties()
                        where assembly.Exists(p.PropertyType)
                        select FuncSpec.Property(MakeName(p.Name), () =&gt; assembly.Get(p.PropertyType));

            var fields = from p in type.GetRuntimeFields()
                         where assembly.Exists(p.FieldType)
                         select FuncSpec.Property(MakeName(p.Name), () =&gt; assembly.Get(p.FieldType));

            var methods = from m in type.GetRuntimeMethods()
                          where m.IsStatic &amp;&amp;
                                assembly.Exists(m.ReturnType) &amp;&amp; 
                                m.GetParameters().Map(p =&gt; p.ParameterType).ForAll(assembly.Exists)
                          let ps = m.GetParameters().Map(p =&gt; new FieldSpec(p.Name, () =&gt; assembly.Get(p.ParameterType))).ToArray()
                          select FuncSpec.Attrs(MakeName(m.Name), () =&gt; assembly.Get(m.ReturnType), locals =&gt; m.Invoke(null, locals.Values.ToArray()), ps);

            FuncSpecs = List.append(props, fields, methods).ToArray();


            ValueParser = BuildObjectParser(FuncSpecs).Memo();
        </div></div></div><div class="member-title"><a name="TypeDef"></a>TypeDef(string, Type, Func&lt;Option&lt;string&gt;, object, object&gt;, int, FuncSpec[])<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TypeDef__string__name__Type__mapsTo__Func_Option&lt;string>_object_object_ctor__int__order__FuncSpec__funcSpecs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapsTo</div><div class="arg-type"><span class="ident">Type</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">ctor</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">string</span>&gt;, <span class="keyword">object</span>, <span class="keyword">object</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">order</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">funcSpecs</div><div class="arg-type"><span class="ident">FuncSpec</span>[]</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">ctor</span> <span class="ident">TypeDef</span>(<span class="keyword">string</span> name, <span class="ident">Type</span> mapsTo, <span class="ident">Func</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">string</span>&gt;, <span class="keyword">object</span>, <span class="keyword">object</span>&gt; ctor, <span class="keyword">int</span> order, <span class="ident">FuncSpec</span>[] funcSpecs)</div></div><div style="display:none" id="code-TypeDef__string__name__Type__mapsTo__Func_Option&lt;string>_object_object_ctor__int__order__FuncSpec__funcSpecs_"><div class="section_title">SOURCE</div><div class="code">
        </div></div></div><div class="member-title"><a name="TypeDef"></a>TypeDef(string, Func&lt;Option&lt;string&gt;, object, object&gt;, Type, string, int, FuncSpec[])<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TypeDef__string__name__Func_Option&lt;string>_object_object_ctor__Type__mapsTo__string__nodeName__int__order__FuncSpec__funcSpecs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Manually defined record-type constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">ctor</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">string</span>&gt;, <span class="keyword">object</span>, <span class="keyword">object</span>&gt;</div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapsTo</div><div class="arg-type"><span class="ident">Type</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">nodeName</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">order</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">funcSpecs</div><div class="arg-type"><span class="ident">FuncSpec</span>[]</div></div><div class="arg-desc"></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">ctor</span> <span class="ident">TypeDef</span>(<span class="keyword">string</span> name, <span class="ident">Func</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">string</span>&gt;, <span class="keyword">object</span>, <span class="keyword">object</span>&gt; ctor, <span class="ident">Type</span> mapsTo, <span class="keyword">string</span> nodeName, <span class="keyword">int</span> order, <span class="ident">FuncSpec</span>[] funcSpecs)</div></div><div style="display:none" id="code-TypeDef__string__name__Func_Option&lt;string>_object_object_ctor__Type__mapsTo__string__nodeName__int__order__FuncSpec__funcSpecs_"><div class="section_title">SOURCE</div><div class="code">
            MapsTo = mapsTo;
            Name = name;
            Order = order;
            Ctor = ctor ?? ((_,x) =&gt; x);
            BinaryOperators = LanguageExt.Map.empty&lt;string, Func&lt;ValueToken, ValueToken, ValueToken&gt;&gt;();
            PrefixOperators = LanguageExt.Map.empty&lt;string, Func&lt;ValueToken, ValueToken&gt;&gt;();
            PostfixOperators = LanguageExt.Map.empty&lt;string, Func&lt;ValueToken, ValueToken&gt;&gt;();
            ConversionOperators = LanguageExt.Map.empty&lt;string, Func&lt;object, object&gt;&gt;();
            GenericType = null;
            FuncSpecs = funcSpecs;
            NodeName = nodeName;

            ValueParser = BuildObjectParser(funcSpecs).Memo();
        </div></div></div><div class="member-title"><a name="TypeDef"></a>TypeDef(string, Func&lt;Option&lt;string&gt;, object, object&gt;, Type, Func&lt;ProcessSystemConfigParser, Parser&lt;object&gt;&gt;, Map&lt;string, Func&lt;ValueToken, ValueToken, ValueToken&gt;&gt;, Map&lt;string, Func&lt;ValueToken, ValueToken&gt;&gt;, Map&lt;string, Func&lt;ValueToken, ValueToken&gt;&gt;, Map&lt;string, Func&lt;object, object&gt;&gt;, TypeDef, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TypeDef__string__name__Func_Option&lt;string>_object_object_ctor__Type__mapsTo__Func_ProcessSystemConfigParser_Parser&lt;object>_valueParser__Map_string_Func&lt;ValueToken, ValueToken, ValueToken>_binaryOperators__Map_string_Func&lt;ValueToken, ValueToken>_prefixOperators__Map_string_Func&lt;ValueToken, ValueToken>_postfixOperators__Map_string_Func&lt;object, object>_conversionOperators__TypeDef__genericType__int__order_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Value type defintion constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">ctor</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">string</span>&gt;, <span class="keyword">object</span>, <span class="keyword">object</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapsTo</div><div class="arg-type"><span class="ident">Type</span></div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">valueParser</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ProcessSystemConfigParser</span>, <span class="ident">Parser</span>&lt;<span class="keyword">object</span>&gt;&gt;</div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binaryOperators</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt;</div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">prefixOperators</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt;</div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">postfixOperators</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt;</div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">conversionOperators</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="keyword">object</span>&gt;&gt;</div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">genericType</div><div class="arg-type"><span class="ident">TypeDef</span></div></div><div class="arg-desc"></div></div><div class="arg"><div class="arg-header"><div class="arg-name">order</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">ctor</span> <span class="ident">TypeDef</span>(<span class="keyword">string</span> name, <span class="ident">Func</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">string</span>&gt;, <span class="keyword">object</span>, <span class="keyword">object</span>&gt; ctor, <span class="ident">Type</span> mapsTo, <span class="ident">Func</span>&lt;<span class="ident">ProcessSystemConfigParser</span>, <span class="ident">Parser</span>&lt;<span class="keyword">object</span>&gt;&gt; valueParser, <span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt; binaryOperators, <span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt; prefixOperators, <span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt; postfixOperators, <span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="keyword">object</span>&gt;&gt; conversionOperators, <span class="ident">TypeDef</span> genericType, <span class="keyword">int</span> order)</div></div><div style="display:none" id="code-TypeDef__string__name__Func_Option&lt;string>_object_object_ctor__Type__mapsTo__Func_ProcessSystemConfigParser_Parser&lt;object>_valueParser__Map_string_Func&lt;ValueToken, ValueToken, ValueToken>_binaryOperators__Map_string_Func&lt;ValueToken, ValueToken>_prefixOperators__Map_string_Func&lt;ValueToken, ValueToken>_postfixOperators__Map_string_Func&lt;object, object>_conversionOperators__TypeDef__genericType__int__order_"><div class="section_title">SOURCE</div><div class="code">
            if (valueParser == null) throw new ArgumentNullException(nameof(valueParser));

            MapsTo = mapsTo;
            Name = name;
            Ctor = ctor ?? ((_,x) =&gt; x);
            ValueParser = valueParser.Memo();
            BinaryOperators = binaryOperators ?? LanguageExt.Map.empty&lt;string, Func&lt;ValueToken, ValueToken, ValueToken&gt;&gt;();
            PrefixOperators = prefixOperators ?? LanguageExt.Map.empty&lt;string, Func&lt;ValueToken, ValueToken&gt;&gt;();
            PostfixOperators = postfixOperators ?? LanguageExt.Map.empty&lt;string, Func&lt;ValueToken, ValueToken&gt;&gt;();
            ConversionOperators = conversionOperators ?? LanguageExt.Map.empty&lt;string, Func&lt;object, object&gt;&gt;();
            GenericType = genericType;
        </div></div></div><h2 >Fields</h2><div class="member-title"><a name="BinaryOperators"></a>BinaryOperators</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt; <span class="ident">BinaryOperators</span></div></div></div><div class="member-title"><a name="ConversionOperators"></a>ConversionOperators</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="keyword">object</span>&gt;&gt; <span class="ident">ConversionOperators</span></div></div></div><div class="member-title"><a name="Ctor"></a>Ctor</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Func</span>&lt;<span class="ident">Option</span>&lt;<span class="keyword">string</span>&gt;, <span class="keyword">object</span>, <span class="keyword">object</span>&gt; <span class="ident">Ctor</span></div></div></div><div class="member-title"><a name="FuncSpecs"></a>FuncSpecs</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">FuncSpec</span>[] <span class="ident">FuncSpecs</span></div></div></div><div class="member-title"><a name="GenericType"></a>GenericType</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">TypeDef</span> <span class="ident">GenericType</span></div></div></div><div class="member-title"><a name="MapsTo"></a>MapsTo</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Type</span> <span class="ident">MapsTo</span></div></div></div><div class="member-title"><a name="Name"></a>Name</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">string</span> <span class="ident">Name</span></div></div></div><div class="member-title"><a name="NodeName"></a>NodeName</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">string</span> <span class="ident">NodeName</span></div></div></div><div class="member-title"><a name="Order"></a>Order</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">int</span> <span class="ident">Order</span></div></div></div><div class="member-title"><a name="PostfixOperators"></a>PostfixOperators</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt; <span class="ident">PostfixOperators</span></div></div></div><div class="member-title"><a name="PrefixOperators"></a>PrefixOperators</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt; <span class="ident">PrefixOperators</span></div></div></div><div class="member-title"><a name="Unknown"></a>Unknown</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TypeDef</span> <span class="ident">Unknown</span></div></div></div><div class="member-title"><a name="ValueParser"></a>ValueParser</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Func</span>&lt;<span class="ident">ProcessSystemConfigParser</span>, <span class="ident">Parser</span>&lt;<span class="keyword">object</span>&gt;&gt; <span class="ident">ValueParser</span></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Array"></a>Array(Func&lt;TypeDef&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Array__Func_TypeDef_t_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">t</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TypeDef</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TypeDef</span> <span class="ident">Array</span>(<span class="ident">Func</span>&lt;<span class="ident">TypeDef</span>&gt; t)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TypeDef</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Array__Func_TypeDef_t_"><div class="section_title">SOURCE</div><div class="code">
            if (lists.ContainsKey(t())) return lists[t()];

            var def = new TypeDef(
                &quot;array&quot;,
                (_, xs) =&gt; xs,
                typeof(Lst&lt;object&gt;),
                (ProcessSystemConfigParser p) =&gt;
                    p.brackets(
                        from xs in p.commaSep(p.expr(None, t()))
                        select MakeTypedLst(xs.Map(x =&gt; x.Value), t().MapsTo))
                    .label(&quot;array&quot;),
                    LanguageExt.Map.create(
                        Types.OpT(&quot;+&quot;, () =&gt; maps[t()], (lhs, rhs) =&gt; (Lst&lt;object&gt;)lhs + (Lst&lt;object&gt;)lhs),
                        Types.OpT(&quot;*&quot;, () =&gt; maps[t()], (lhs, rhs) =&gt; (Lst&lt;object&gt;)lhs * (Lst&lt;object&gt;)lhs),
                        Types.OpT(&quot;-&quot;, () =&gt; maps[t()], (lhs, rhs) =&gt; (Lst&lt;object&gt;)lhs - (Lst&lt;object&gt;)lhs)
                    ),
                null, 
                null, 
                null,
                t(),
                1);

            lists = lists.AddOrUpdate(t(), def);
            return def;
        </div></div></div><div class="member-title"><a name="BinaryOperator"></a>BinaryOperator(string, ValueToken, ValueToken)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BinaryOperator__string__op__ValueToken__lhs__ValueToken__rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">op</div><div class="arg-type"><span class="keyword">string</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">ValueToken</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">ValueToken</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">ValueToken</span> <span class="ident">BinaryOperator</span>(<span class="keyword">string</span> op, <span class="ident">ValueToken</span> lhs, <span class="ident">ValueToken</span> rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueToken</span></div><div class="normal"></div></div></div><div style="display:none" id="code-BinaryOperator__string__op__ValueToken__lhs__ValueToken__rhs_"><div class="section_title">SOURCE</div><div class="code">
            Convert(rhs)
                .Map(rhsconv =&gt;
                    BinaryOperators.ContainsKey(op)
                        ? BinaryOperators[op](lhs, rhsconv)
                        : failwith&lt;ValueToken&gt;($&quot;binary operator &#39;{op}&#39; not supported for {Name}&quot;))
                .IfNone(() =&gt; failwith&lt;ValueToken&gt;($&quot;binary operator &#39;{op}&#39; used with incompatible types {lhs.Type} and {rhs.Type}&quot;))</div></div></div><div class="member-title"><a name="CompareTo"></a>CompareTo(TypeDef)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareTo__TypeDef__other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">TypeDef</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">CompareTo</span>(<span class="ident">TypeDef</span> other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-CompareTo__TypeDef__other_"><div class="section_title">SOURCE</div><div class="code">
            if (Object.ReferenceEquals(other, null)) return -1;
            var cmp = Name.CompareTo(other.Name);
            if (cmp != 0) return cmp;
            if (Object.ReferenceEquals(GenericType, null) &amp;&amp; Object.ReferenceEquals(other.GenericType, null)) return 0;
            return GenericType.CompareTo(other);
        </div></div></div><div class="member-title"><a name="Convert"></a>Convert(ValueToken)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Convert__ValueToken__token_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">token</div><div class="arg-type"><span class="ident">ValueToken</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Option</span>&lt;<span class="ident">ValueToken</span>&gt; <span class="ident">Convert</span>(<span class="ident">ValueToken</span> token)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">ValueToken</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Convert__ValueToken__token_"><div class="section_title">SOURCE</div><div class="code">
            token.Type == this
                ? token
                : ConversionOperators.ContainsKey(token.Type.Name)
                    ? Some(new ValueToken(this, ConversionOperators[token.Type.Name](token.Value)))
                    : None</div></div></div><div class="member-title"><a name="Equals"></a>Equals(TypeDef)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__TypeDef__other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">TypeDef</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="ident">TypeDef</span> other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Equals__TypeDef__other_"><div class="section_title">SOURCE</div><div class="code">
            if (Object.ReferenceEquals(other, null)) return false;
            if (Name != other.Name) return false;
            if (Object.ReferenceEquals(GenericType, null) &amp;&amp; Object.ReferenceEquals(other.GenericType, null)) return true;
            return GenericType == other.GenericType;
        </div></div></div><div class="member-title"><a name="GetHashCode"></a>GetHashCode()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetHashCode__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="ident">GetHashCode</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-GetHashCode__"><div class="section_title">SOURCE</div><div class="code">
            Tuple(Name, GenericType).GetHashCode()</div></div></div><div class="member-title"><a name="MakeTuple&lt;T>"></a>MakeTuple&lt;T&gt;(string, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MakeTuple_T_string__fst__T__snd_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fst</div><div class="arg-type"><span class="keyword">string</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">snd</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="keyword">string</span>, <span class="ident">T</span>&gt; <span class="ident">MakeTuple</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">string</span> fst, <span class="ident">T</span> snd)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="keyword">string</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MakeTuple_T_string__fst__T__snd_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(fst, snd)</div></div></div><div class="member-title"><a name="Map"></a>Map(Func&lt;TypeDef&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map__Func_TypeDef_t_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">t</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TypeDef</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TypeDef</span> <span class="ident">Map</span>(<span class="ident">Func</span>&lt;<span class="ident">TypeDef</span>&gt; t)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TypeDef</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Map__Func_TypeDef_t_"><div class="section_title">SOURCE</div><div class="code">
            if (maps.ContainsKey(t())) return maps[t()];

            var def = new TypeDef(
                &quot;map&quot;,
                (_,xs) =&gt; xs,
                typeof(Map&lt;string,object&gt;),
                (ProcessSystemConfigParser p) =&gt;
                    p.brackets(
                        from xs in p.commaSep(
                            from x in p.identifier
                            from _ in p.symbol(&quot;:&quot;)
                            from v in p.expr(None,t())
                            select Tuple(x, v.Value))
                        select MakeTypedMap(LanguageExt.Map.createRange(xs), t().MapsTo))
                    .label(&quot;map&quot;),
                    LanguageExt.Map.create(
                        Types.OpT(&quot;+&quot;, () =&gt; maps[t()], (lhs, rhs) =&gt; (Map&lt;string, object&gt;)lhs + (Map&lt;string, object&gt;)lhs),
                        Types.OpT(&quot;-&quot;, () =&gt; maps[t()], (lhs, rhs) =&gt; (Map&lt;string, object&gt;)lhs - (Map&lt;string, object&gt;)lhs)
                    ), 
                null, 
                null, 
                null,
                t(),
                1);

            maps = maps.AddOrUpdate(t(), def);
            return def;
        </div></div></div><div class="member-title"><a name="PostfixOperator"></a>PostfixOperator(string, ValueToken)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PostfixOperator__string__op__ValueToken__lhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">op</div><div class="arg-type"><span class="keyword">string</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">ValueToken</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">ValueToken</span> <span class="ident">PostfixOperator</span>(<span class="keyword">string</span> op, <span class="ident">ValueToken</span> lhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueToken</span></div><div class="normal"></div></div></div><div style="display:none" id="code-PostfixOperator__string__op__ValueToken__lhs_"><div class="section_title">SOURCE</div><div class="code">
            PostfixOperators.ContainsKey(op)
                ? PostfixOperators[op](lhs)
                : failwith&lt;ValueToken&gt;($&quot;postfix operator &#39;{op}&#39; not supported for {Name}&quot;)</div></div></div><div class="member-title"><a name="PrefixOperator"></a>PrefixOperator(string, ValueToken)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PrefixOperator__string__op__ValueToken__rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">op</div><div class="arg-type"><span class="keyword">string</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">ValueToken</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">ValueToken</span> <span class="ident">PrefixOperator</span>(<span class="keyword">string</span> op, <span class="ident">ValueToken</span> rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueToken</span></div><div class="normal"></div></div></div><div style="display:none" id="code-PrefixOperator__string__op__ValueToken__rhs_"><div class="section_title">SOURCE</div><div class="code">
            PrefixOperators.ContainsKey(op)
                ? PrefixOperators[op](rhs)
                : failwith&lt;ValueToken&gt;($&quot;prefix operator &#39;{op}&#39; not supported for {Name}&quot;)</div></div></div><div class="member-title"><a name="ToString"></a>ToString()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToString__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="ident">ToString</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">string</span></div><div class="normal"></div></div></div><div style="display:none" id="code-ToString__"><div class="section_title">SOURCE</div><div class="code">
            GenericType == null
                ? Name
                : $&quot;{Name}&lt;{GenericType}&gt;&quot;</div></div></div></div></body></html>