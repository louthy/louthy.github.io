<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt.Config/index.htm">LanguageExt.Config</a> \ <span class="nav-bar-link" href="Types_.htm">Types</span></div><div class="nav-panel"><h3 >CONSTRUCTORS</h3><a class="nav-link" href="#Types">Types()</a><h3 >FIELDS</h3><a class="nav-link" href="#Bool">Bool</a><a class="nav-link" href="#Directive">Directive</a><a class="nav-link" href="#DispatcherType">DispatcherType</a><a class="nav-link" href="#Double">Double</a><a class="nav-link" href="#Int">Int</a><a class="nav-link" href="#MessageDirective">MessageDirective</a><a class="nav-link" href="#Object">Object</a><a class="nav-link" href="#ProcessFlags">ProcessFlags</a><a class="nav-link" href="#ProcessId">ProcessId</a><a class="nav-link" href="#ProcessName">ProcessName</a><a class="nav-link" href="#String">String</a><a class="nav-link" href="#Time">Time</a><h3 >PROPERTIES</h3><a class="nav-link" href="#All">All</a><a class="nav-link" href="#AllInOrder">AllInOrder</a><a class="nav-link" href="#TypeMap">TypeMap</a><h3 >METHODS</h3><a class="nav-link" href="#Conv">Conv(string, Func&lt;object, object&gt;)</a><a class="nav-link" href="#Exists">Exists(Type)</a><a class="nav-link" href="#Get">Get(Type)</a><a class="nav-link" href="#Get">Get(string)</a><a class="nav-link" href="#MapTo">MapTo(TypeDef)</a><a class="nav-link" href="#Op">Op(string, Func&lt;ValueToken, ValueToken, ValueToken&gt;)</a><a class="nav-link" href="#Op">Op(string, Func&lt;ValueToken, ValueToken&gt;)</a><a class="nav-link" href="#OpT">OpT(string, Func&lt;TypeDef&gt;, Func&lt;object, object, object&gt;)</a><a class="nav-link" href="#OpT">OpT(string, Func&lt;TypeDef&gt;, Func&lt;object, object&gt;)</a><a class="nav-link" href="#Register">Register(TypeDef)</a></div><div class="content-panel"><h1 >Types Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Types</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt.Config</div></div><h2 >Constructors</h2><div class="member-title"><a name="Types"></a>Types()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Types__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">ctor</span> <span class="ident">Types</span>()</div></div><div style="display:none" id="code-Types__"><div class="section_title">SOURCE</div><div class="code">
            Int = new TypeDef(
                &quot;int&quot;,
                (_,x) =&gt; x,
                typeof(int),
                p =&gt; from x in p.integer
                     select (object)x,
                Map(
                    OpT(&quot;+&quot;, () =&gt; Int, (lhs, rhs) =&gt; (int)lhs + (int)rhs),
                    OpT(&quot;-&quot;, () =&gt; Int, (lhs, rhs) =&gt; (int)lhs - (int)rhs),
                    OpT(&quot;*&quot;, () =&gt; Int, (lhs, rhs) =&gt; (int)lhs * (int)rhs),
                    OpT(&quot;/&quot;, () =&gt; Int, (lhs, rhs) =&gt; (int)lhs / (int)rhs),
                    OpT(&quot;%&quot;, () =&gt; Int, (lhs, rhs) =&gt; (int)lhs % (int)rhs),
                    Op(&quot;!=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (int)lhs.Value != (int)rhs.Value)),
                    Op(&quot;==&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (int)lhs.Value == (int)rhs.Value)),
                    Op(&quot;&lt;&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (int)lhs.Value &lt; (int)rhs.Value)),
                    Op(&quot;&lt;=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (int)lhs.Value &lt;= (int)rhs.Value)),
                    Op(&quot;&gt;&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (int)lhs.Value &gt; (int)rhs.Value)),
                    Op(&quot;&gt;=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (int)lhs.Value &gt;= (int)rhs.Value)),
                    OpT(&quot;^&quot;, () =&gt; Int, (lhs, rhs) =&gt; Math.Pow((int)lhs, (int)rhs)),
                    OpT(&quot;&amp;&quot;, () =&gt; String, (lhs, rhs) =&gt; ((int)lhs &amp; (int)rhs)),
                    OpT(&quot;|&quot;, () =&gt; String, (lhs, rhs) =&gt; ((int)lhs | (int)rhs))

                ),
                Map(
                    OpT(&quot;+&quot;, () =&gt; Int, rhs =&gt; +(int)rhs),
                    OpT(&quot;-&quot;, () =&gt; Int, rhs =&gt; -(int)rhs)
                ),
                null,
                Map(
                    Conv(&quot;float&quot;, obj =&gt; (int)((double)obj)),
                    Conv(&quot;process-flags&quot;, obj =&gt; (int)((ProcessFlags)obj))
                ),
                null,
                2
            );

            Double = new TypeDef(
                &quot;float&quot;,
                (_, x) =&gt; x,
                typeof(double),
                p =&gt; from x in p.floating
                     select (object)x,
                Map(
                    OpT(&quot;+&quot;, () =&gt; Int, (lhs, rhs) =&gt; (double)lhs + (double)rhs),
                    OpT(&quot;-&quot;, () =&gt; Int, (lhs, rhs) =&gt; (double)lhs - (double)rhs),
                    OpT(&quot;*&quot;, () =&gt; Int, (lhs, rhs) =&gt; (double)lhs * (double)rhs),
                    OpT(&quot;/&quot;, () =&gt; Int, (lhs, rhs) =&gt; (double)lhs / (double)rhs),
                    Op(&quot;!=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (double)lhs.Value != (double)rhs.Value)),
                    Op(&quot;==&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (double)lhs.Value == (double)rhs.Value)),
                    Op(&quot;&lt;&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (double)lhs.Value &lt; (double)rhs.Value)),
                    Op(&quot;&lt;=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (double)lhs.Value &lt;= (double)rhs.Value)),
                    Op(&quot;&gt;&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (double)lhs.Value &gt; (double)rhs.Value)),
                    Op(&quot;&gt;=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (double)lhs.Value &gt;= (double)rhs.Value)),
                    OpT(&quot;^&quot;, () =&gt; Int, (lhs, rhs) =&gt; Math.Pow((double)lhs, (double)rhs))
                ),
                Map(
                    OpT(&quot;+&quot;, () =&gt; Int, rhs =&gt; +(double)rhs),
                    OpT(&quot;-&quot;, () =&gt; Int, rhs =&gt; -(double)rhs)
                ),
                null,
                Map(
                    Conv(&quot;int&quot;, obj =&gt; (double)((int)obj))
                ),
                null,
                1
            );

            Bool = new TypeDef(
                &quot;bool&quot;,
                (_, x) =&gt; x,
                typeof(bool),
                p =&gt; from v in choice(
                        p.reserved(&quot;true&quot;),
                        p.reserved(&quot;false&quot;),
                        p.reserved(&quot;yes&quot;),
                        p.reserved(&quot;no&quot;)
                        )
                     select (object)(v == &quot;true&quot; || v == &quot;yes&quot;),
                Map(
                    OpT(&quot;!=&quot;, () =&gt; Bool, (lhs, rhs) =&gt; (bool)lhs != (bool)rhs),
                    OpT(&quot;==&quot;, () =&gt; Bool, (lhs, rhs) =&gt; (bool)lhs == (bool)rhs),
                    OpT(&quot;&amp;&amp;&quot;, () =&gt; Bool, (lhs, rhs) =&gt; (bool)lhs &amp;&amp; (bool)rhs),
                    OpT(&quot;||&quot;, () =&gt; Bool, (lhs, rhs) =&gt; (bool)lhs || (bool)rhs)
                ),
                Map(
                    OpT(&quot;!&quot;, () =&gt; Int, rhs =&gt; !(bool)rhs)
                ),
                null,
                null,
                null,
                0
            );

            String = new TypeDef(
                &quot;string&quot;,
                (_, x) =&gt; x,
                typeof(string),
                p =&gt; from _ in unitp
                     from v in p.stringLiteral
                     select (object)v,
                Map(
                    OpT(&quot;+&quot;, () =&gt; String, (lhs, rhs) =&gt; (string)lhs + (string)rhs),
                    Op(&quot;==&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (string)lhs.Value == (string)rhs.Value)),
                    Op(&quot;!=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (string)lhs.Value != (string)rhs.Value)),
                    Op(&quot;&gt;=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((string)lhs.Value).CompareTo((string)rhs.Value) &gt;= 0)),
                    Op(&quot;&lt;=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((string)lhs.Value).CompareTo((string)rhs.Value) &lt;= 0)),
                    Op(&quot;&gt;&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((string)lhs.Value).CompareTo((string)rhs.Value) &gt; 0)),
                    Op(&quot;&lt;&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((string)lhs.Value).CompareTo((string)rhs.Value) &lt; 0))
                ),
                Map(
                    OpT(&quot;!&quot;, () =&gt; Int, rhs =&gt; !(bool)rhs)
                ),
                null,
                Map(
                    Conv(&quot;int&quot;, obj =&gt; obj.ToString()),
                    Conv(&quot;float&quot;, obj =&gt; obj.ToString()),
                    Conv(&quot;bool&quot;, obj =&gt; obj.ToString()),
                    Conv(&quot;process-id&quot;, obj =&gt; obj.ToString()),
                    Conv(&quot;process-name&quot;, obj =&gt; obj.ToString()),
                    Conv(&quot;process-flags&quot;, obj =&gt; obj.ToString()),
                    Conv(&quot;time&quot;, obj =&gt; obj.ToString()),
                    Conv(&quot;directive&quot;, obj =&gt; obj.ToString()),
                    Conv(&quot;message-directive&quot;, obj =&gt; obj.ToString()),
                    Conv(&quot;disp&quot;, obj =&gt; obj.ToString())
                ),
                null,
                0
            );

            ProcessId = new TypeDef(
                &quot;process-id&quot;,
                (_, x) =&gt; x,
                typeof(ProcessId),
                p =&gt; from v in p.processId
                     select (object)v,
                Map(
                    OpT(&quot;+&quot;, () =&gt; String, (lhs, rhs) =&gt; ((ProcessId)lhs).Append((ProcessId)rhs)),
                    Op(&quot;==&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (ProcessId)lhs.Value == (ProcessId)rhs.Value)),
                    Op(&quot;!=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (ProcessId)lhs.Value != (ProcessId)rhs.Value)),
                    Op(&quot;&gt;=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((ProcessId)lhs.Value).CompareTo((ProcessId)rhs.Value) &gt;= 0)),
                    Op(&quot;&lt;=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((ProcessId)lhs.Value).CompareTo((ProcessId)rhs.Value) &lt;= 0)),
                    Op(&quot;&gt;&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((ProcessId)lhs.Value).CompareTo((ProcessId)rhs.Value) &gt; 0)),
                    Op(&quot;&lt;&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((ProcessId)lhs.Value).CompareTo((ProcessId)rhs.Value) &lt; 0))
                ),
                null,
                null,
                Map(
                    Conv(&quot;process-name&quot;, obj =&gt; new ProcessId(&quot;/&quot;+((ProcessName)obj).Value)),
                    Conv(&quot;string&quot;, obj =&gt; new ProcessId((string)obj))
                ),
                null,
                10
            );

            ProcessName = new TypeDef(
                &quot;process-name&quot;,
                (_, x) =&gt; x,
                typeof(ProcessName),
                p =&gt; from _ in unitp
                     from v in p.processName
                     select (object)v,
                Map(
                    Op(&quot;==&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (ProcessName)lhs.Value == (ProcessName)rhs.Value)),
                    Op(&quot;!=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (ProcessName)lhs.Value != (ProcessName)rhs.Value)),
                    Op(&quot;&gt;=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((ProcessName)lhs.Value).CompareTo((ProcessName)rhs.Value) &gt;= 0)),
                    Op(&quot;&lt;=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((ProcessName)lhs.Value).CompareTo((ProcessName)rhs.Value) &lt;= 0)),
                    Op(&quot;&gt;&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((ProcessName)lhs.Value).CompareTo((ProcessName)rhs.Value) &gt; 0)),
                    Op(&quot;&lt;&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((ProcessName)lhs.Value).CompareTo((ProcessName)rhs.Value) &lt; 0))
                ),
                null,
                null,
                Map(
                    Conv(&quot;string&quot;, obj =&gt; new ProcessName((string)obj))
                ),
                null,
                10
            );

            Func&lt;ProcessSystemConfigParser, string, ProcessFlags, Parser&lt;ProcessFlags&gt;&gt; flagMap =
                (p, name, flags) =&gt;
                    attempt(
                    from x in p.reserved(name)
                    select flags);

            Func&lt;ProcessSystemConfigParser, Parser&lt;ProcessFlags&gt;&gt; flag =
                p =&gt;
                    choice(
                        flagMap(p, &quot;default&quot;, LanguageExt.ProcessFlags.Default),
                        flagMap(p, &quot;listen-remote-and-local&quot;, LanguageExt.ProcessFlags.ListenRemoteAndLocal),
                        flagMap(p, &quot;persist-all&quot;, LanguageExt.ProcessFlags.PersistAll),
                        flagMap(p, &quot;persist-inbox&quot;, LanguageExt.ProcessFlags.PersistInbox),
                        flagMap(p, &quot;persist-state&quot;, LanguageExt.ProcessFlags.PersistState),
                        flagMap(p, &quot;remote-publish&quot;, LanguageExt.ProcessFlags.RemotePublish),
                        flagMap(p, &quot;remote-state-publish&quot;, LanguageExt.ProcessFlags.RemoteStatePublish));

            Func&lt;ProcessSystemConfigParser, Parser&lt;ProcessFlags&gt;&gt; flagsValue =
                p =&gt;
                    from fs in p.brackets(p.commaSep(flag(p)))
                    select List.fold(fs, LanguageExt.ProcessFlags.Default, (s, x) =&gt; s | x);

            ProcessFlags = new TypeDef(
                &quot;process-flags&quot;,
                (_, x) =&gt; x,
                typeof(ProcessFlags),
                p =&gt; from v in flagsValue(p)
                     select (object)v,
                Map(
                    Op(&quot;==&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (ProcessFlags)lhs.Value == (ProcessFlags)rhs.Value)),
                    Op(&quot;!=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (ProcessFlags)lhs.Value != (ProcessFlags)rhs.Value)),
                    Op(&quot;&gt;=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((ProcessFlags)lhs.Value).CompareTo((ProcessFlags)rhs.Value) &gt;= 0)),
                    Op(&quot;&lt;=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((ProcessFlags)lhs.Value).CompareTo((ProcessFlags)rhs.Value) &lt;= 0)),
                    Op(&quot;&gt;&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((ProcessFlags)lhs.Value).CompareTo((ProcessFlags)rhs.Value) &gt; 0)),
                    Op(&quot;&lt;&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((ProcessFlags)lhs.Value).CompareTo((ProcessFlags)rhs.Value) &lt; 0)),
                    OpT(&quot;&amp;&quot;, () =&gt; String, (lhs, rhs) =&gt; ((ProcessFlags)lhs &amp; (ProcessFlags)rhs)),
                    OpT(&quot;|&quot;, () =&gt; String, (lhs, rhs) =&gt; ((ProcessFlags)lhs | (ProcessFlags)rhs))
                ),
                Map(
                    OpT(&quot;~&quot;, () =&gt; String, rhs =&gt; ~(ProcessFlags)rhs)
                ),
                null,
                Map(
                    Conv(&quot;int&quot;, obj =&gt; (ProcessFlags)((int)obj))
                ),
                null,
                10
            );

            Func&lt;ProcessSystemConfigParser, Parser&lt;string&gt;&gt; timeUnit =
                p =&gt;
                    choice(
                        attempt(p.reserved(&quot;seconds&quot;)),
                        attempt(p.reserved(&quot;second&quot;)),
                        attempt(p.reserved(&quot;secs&quot;)),
                        attempt(p.reserved(&quot;sec&quot;)),
                        attempt(p.reserved(&quot;s&quot;)),
                        attempt(p.reserved(&quot;minutes&quot;)),
                        attempt(p.reserved(&quot;minute&quot;)),
                        attempt(p.reserved(&quot;mins&quot;)),
                        attempt(p.reserved(&quot;min&quot;)),
                        attempt(p.reserved(&quot;milliseconds&quot;)),
                        attempt(p.reserved(&quot;millisecond&quot;)),
                        attempt(p.reserved(&quot;ms&quot;)),
                        attempt(p.reserved(&quot;hours&quot;)),
                        attempt(p.reserved(&quot;hour&quot;)),
                        p.reserved(&quot;hr&quot;))
                       .label(&quot;Unit of time (e.g. seconds, mins, hours, hr, sec, min...)&quot;);

            Func&lt;ProcessSystemConfigParser, Parser&lt;Time&gt;&gt; timeValue =
                p =&gt;
                    from v in p.floating
                    from u in timeUnit(p)
                    from r in TimeAttr.TryParse(v, u).Match(
                        Some: result,
                        None: () =&gt; failure&lt;Time&gt;(&quot;Invalid unit of time&quot;))
                    select r;

            Time = new TypeDef(
                &quot;time&quot;,
                (_, x) =&gt; x,
                typeof(Time),
                p =&gt; from v in p.token(timeValue(p))
                     select (object)v,
                Map(
                    OpT(&quot;+&quot;, () =&gt; String, (lhs, rhs) =&gt; ((Time)lhs + (Time)rhs)),
                    OpT(&quot;-&quot;, () =&gt; String, (lhs, rhs) =&gt; ((Time)lhs - (Time)rhs)),
                    Op(&quot;==&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (Time)lhs.Value == (Time)rhs.Value)),
                    Op(&quot;!=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (Time)lhs.Value != (Time)rhs.Value)),
                    Op(&quot;&gt;=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((Time)lhs.Value).CompareTo((Time)rhs.Value) &gt;= 0)),
                    Op(&quot;&lt;=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((Time)lhs.Value).CompareTo((Time)rhs.Value) &lt;= 0)),
                    Op(&quot;&gt;&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((Time)lhs.Value).CompareTo((Time)rhs.Value) &gt; 0)),
                    Op(&quot;&lt;&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, ((Time)lhs.Value).CompareTo((Time)rhs.Value) &lt; 0))
                ),
                Map(
                    OpT(&quot;+&quot;, () =&gt; Int, rhs =&gt; 0.Seconds() + (Time)rhs),
                    OpT(&quot;-&quot;, () =&gt; Int, rhs =&gt; 0.Seconds() - (Time)rhs)
                ),
                null,
                null,
                null,
                0
            );

            Func&lt;ProcessSystemConfigParser, Parser&lt;MessageDirective&gt;&gt; fwdToSelf =
                p =&gt;
                    from _ in p.reserved(&quot;forward-to-self&quot;)
                    select new ForwardToSelf() as MessageDirective;

            Func&lt;ProcessSystemConfigParser, Parser&lt;MessageDirective&gt;&gt; fwdToParent =
                p =&gt;
                    from _ in p.reserved(&quot;forward-to-parent&quot;)
                    select new ForwardToParent() as MessageDirective;

            Func&lt;ProcessSystemConfigParser, Parser&lt;MessageDirective&gt;&gt; fwdToDeadLetters =
                p =&gt;
                    from _ in p.reserved(&quot;forward-to-dead-letters&quot;)
                    select new ForwardToDeadLetters() as MessageDirective;

            Func&lt;ProcessSystemConfigParser, Parser&lt;MessageDirective&gt;&gt; stayInQueue =
                p =&gt;
                    from _ in p.reserved(&quot;stay-in-queue&quot;)
                    select new StayInQueue() as MessageDirective;

            Func&lt;ProcessSystemConfigParser, Parser&lt;MessageDirective&gt;&gt; fwdToProcess =
                p =&gt;
                    from _ in p.reserved(&quot;forward-to-process&quot;)
                    from pid in attempt(p.expr(None, ProcessId)).label(&quot;&#39;forward-to-process &lt;ProcessId&gt;&#39;&quot;)
                    select new ForwardToProcess((ProcessId)pid.Value) as MessageDirective;

            Func&lt;ProcessSystemConfigParser, Parser&lt;MessageDirective&gt;&gt; msgDirective =
                p =&gt;
                    choice(
                        fwdToDeadLetters(p),
                        fwdToSelf(p),
                        fwdToParent(p),
                        fwdToProcess(p),
                        stayInQueue(p));

            MessageDirective = new TypeDef(
                &quot;message-directive&quot;,
                (_, x) =&gt; x,
                typeof(MessageDirective),
                p =&gt; from v in p.token(msgDirective(p))
                     select (object)v,
                Map(
                    Op(&quot;==&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (MessageDirective)lhs.Value == (MessageDirective)rhs.Value)),
                    Op(&quot;!=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (MessageDirective)lhs.Value != (MessageDirective)rhs.Value))
                ),
                null,
                null,
                null,
                null,
                10
            );

            Func&lt;ProcessSystemConfigParser, Parser&lt;Directive&gt;&gt; directive =
                p =&gt;
                    choice(
                        p.reserved(&quot;resume&quot;).Map(_ =&gt; LanguageExt.Directive.Resume),
                        p.reserved(&quot;restart&quot;).Map(_ =&gt; LanguageExt.Directive.Restart),
                        p.reserved(&quot;stop&quot;).Map(_ =&gt; LanguageExt.Directive.Stop),
                        p.reserved(&quot;escalate&quot;).Map(_ =&gt; LanguageExt.Directive.Escalate));

            Directive = new TypeDef(
                &quot;directive&quot;,
                (_, x) =&gt; x,
                typeof(Directive),
                p =&gt; from v in p.token(directive(p))
                     select (object)v,
                Map(
                    Op(&quot;==&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (Directive)lhs.Value == (Directive)rhs.Value)),
                    Op(&quot;!=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (Directive)lhs.Value != (Directive)rhs.Value))
                ),
                null,
                null,
                null,
                null,
                10
            );

            Func&lt;ProcessSystemConfigParser, Parser&lt;string&gt;&gt; dispType =
                p =&gt;
                    choice(
                        p.reserved(&quot;broadcast&quot;),
                        attempt(p.reserved(&quot;least-busy&quot;)),
                        attempt(p.reserved(&quot;round-robin&quot;)),
                        p.reserved(&quot;random&quot;),
                        p.reserved(&quot;hash&quot;),
                        p.reserved(&quot;first&quot;),
                        p.reserved(&quot;second&quot;),
                        p.reserved(&quot;third&quot;),
                        p.reserved(&quot;last&quot;)
                    );

            DispatcherType = new TypeDef(
                &quot;disp&quot;,
                (_, x) =&gt; x,
                typeof(string),
                p =&gt; from v in p.token(dispType(p))
                     select (object)v,
                Map(
                    Op(&quot;==&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (string)lhs.Value == (string)rhs.Value)),
                    Op(&quot;!=&quot;, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(Bool, (string)lhs.Value != (string)rhs.Value))
                ),
                null,
                null,
                null,
                null,
                10
            );

            TypeMap = Map.create(
                Tuple(typeof(bool).FullName, Bool),
                Tuple(typeof(int).FullName, Int),
                Tuple(typeof(double).FullName, Double),
                Tuple(typeof(string).FullName, String),
                Tuple(typeof(ProcessId).FullName, ProcessId),
                //Tuple(typeof(ProcessName).FullName, ProcessName),
                Tuple(typeof(ProcessFlags).FullName, ProcessFlags),
                Tuple(typeof(Time).FullName, Time),
                Tuple(typeof(MessageDirective).FullName, MessageDirective),
                Tuple(typeof(Directive).FullName, Directive)
            );

            All = Map.create(
                Tuple(Bool.Name, Bool),
                Tuple(Int.Name, Int),
                Tuple(Double.Name, Double),
                Tuple(String.Name, String),
                Tuple(ProcessId.Name, ProcessId),
                //Tuple(ProcessName.Name, ProcessName),
                Tuple(ProcessFlags.Name, ProcessFlags),
                Tuple(Time.Name, Time),
                Tuple(MessageDirective.Name, MessageDirective),
                Tuple(Directive.Name, Directive),
                Tuple(DispatcherType.Name, DispatcherType)
                );
            AllInOrder = (from x in All.Values
                          orderby x.Order descending
                          select x)
                         .Freeze();
        </div></div></div><h2 >Fields</h2><div class="member-title"><a name="Bool"></a>Bool</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">TypeDef</span> <span class="ident">Bool</span></div></div></div><div class="member-title"><a name="Directive"></a>Directive</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">TypeDef</span> <span class="ident">Directive</span></div></div></div><div class="member-title"><a name="DispatcherType"></a>DispatcherType</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">TypeDef</span> <span class="ident">DispatcherType</span></div></div></div><div class="member-title"><a name="Double"></a>Double</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">TypeDef</span> <span class="ident">Double</span></div></div></div><div class="member-title"><a name="Int"></a>Int</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">TypeDef</span> <span class="ident">Int</span></div></div></div><div class="member-title"><a name="MessageDirective"></a>MessageDirective</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">TypeDef</span> <span class="ident">MessageDirective</span></div></div></div><div class="member-title"><a name="Object"></a>Object</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">TypeDef</span> <span class="ident">Object</span></div></div></div><div class="member-title"><a name="ProcessFlags"></a>ProcessFlags</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">TypeDef</span> <span class="ident">ProcessFlags</span></div></div></div><div class="member-title"><a name="ProcessId"></a>ProcessId</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">TypeDef</span> <span class="ident">ProcessId</span></div></div></div><div class="member-title"><a name="ProcessName"></a>ProcessName</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">TypeDef</span> <span class="ident">ProcessName</span></div></div></div><div class="member-title"><a name="String"></a>String</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">TypeDef</span> <span class="ident">String</span></div></div></div><div class="member-title"><a name="Time"></a>Time</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">TypeDef</span> <span class="ident">Time</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="All"></a>All</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">TypeDef</span>&gt; <span class="ident">All</span>  { <span class="keyword">get</span>; <span class="keyword">set</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">TypeDef</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="AllInOrder"></a>AllInOrder</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">TypeDef</span>&gt; <span class="ident">AllInOrder</span>  { <span class="keyword">get</span>; <span class="keyword">set</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">TypeDef</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="TypeMap"></a>TypeMap</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">TypeDef</span>&gt; <span class="ident">TypeMap</span>  { <span class="keyword">get</span>; <span class="keyword">set</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">TypeDef</span>&gt;</div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Conv"></a>Conv(string, Func&lt;object, object&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Conv__string__fromType__Func_object_object_conv_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fromType</div><div class="arg-type"><span class="keyword">string</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">conv</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="keyword">object</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="keyword">object</span>&gt;&gt; <span class="ident">Conv</span>(<span class="keyword">string</span> fromType, <span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="keyword">object</span>&gt; conv)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="keyword">object</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Conv__string__fromType__Func_object_object_conv_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(fromType, conv)</div></div></div><div class="member-title"><a name="Exists"></a>Exists(Type)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists__Type__type_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">type</div><div class="arg-type"><span class="ident">Type</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Exists</span>(<span class="ident">Type</span> type)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Exists__Type__type_"><div class="section_title">SOURCE</div><div class="code">
            TypeMap.ContainsKey(type.FullName)</div></div></div><div class="member-title"><a name="Get"></a>Get(Type)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Get__Type__type_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">type</div><div class="arg-type"><span class="ident">Type</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">TypeDef</span> <span class="ident">Get</span>(<span class="ident">Type</span> type)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TypeDef</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Get__Type__type_"><div class="section_title">SOURCE</div><div class="code">
            TypeMap[type.FullName]</div></div></div><div class="member-title"><a name="Get"></a>Get(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Get__string__name_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">TypeDef</span> <span class="ident">Get</span>(<span class="keyword">string</span> name)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TypeDef</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Get__string__name_"><div class="section_title">SOURCE</div><div class="code">
            All[name]</div></div></div><div class="member-title"><a name="MapTo"></a>MapTo(TypeDef)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapTo__TypeDef__def_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">def</div><div class="arg-type"><span class="ident">TypeDef</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">MapTo</span>(<span class="ident">TypeDef</span> def)</div></div><div style="display:none" id="code-MapTo__TypeDef__def_"><div class="section_title">SOURCE</div><div class="code">
            TypeMap = TypeMap.Add(def.MapsTo.FullName, def);
            return unit;
        </div></div></div><div class="member-title"><a name="Op"></a>Op(string, Func&lt;ValueToken, ValueToken, ValueToken&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Op__string__name__Func_ValueToken_ValueToken_ValueToken_op_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">op</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt; <span class="ident">Op</span>(<span class="keyword">string</span> name, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt; op)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Op__string__name__Func_ValueToken_ValueToken_ValueToken_op_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(name, op)</div></div></div><div class="member-title"><a name="Op"></a>Op(string, Func&lt;ValueToken, ValueToken&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Op__string__name__Func_ValueToken_ValueToken_op_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">op</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt; <span class="ident">Op</span>(<span class="keyword">string</span> name, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt; op)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Op__string__name__Func_ValueToken_ValueToken_op_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(name, op)</div></div></div><div class="member-title"><a name="OpT"></a>OpT(string, Func&lt;TypeDef&gt;, Func&lt;object, object, object&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-OpT__string__name__Func_TypeDef_type__Func_object_object_object_op_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">type</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TypeDef</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">op</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="keyword">object</span>, <span class="keyword">object</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt; <span class="ident">OpT</span>(<span class="keyword">string</span> name, <span class="ident">Func</span>&lt;<span class="ident">TypeDef</span>&gt; type, <span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="keyword">object</span>, <span class="keyword">object</span>&gt; op)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-OpT__string__name__Func_TypeDef_type__Func_object_object_object_op_"><div class="section_title">SOURCE</div><div class="code">
            Tuple&lt;string, Func&lt;ValueToken, ValueToken, ValueToken&gt;&gt;(name, (ValueToken lhs, ValueToken rhs) =&gt; new ValueToken(type(), op(lhs.Value,rhs.Value)))</div></div></div><div class="member-title"><a name="OpT"></a>OpT(string, Func&lt;TypeDef&gt;, Func&lt;object, object&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-OpT__string__name__Func_TypeDef_type__Func_object_object_op_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="keyword">string</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">type</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TypeDef</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">op</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="keyword">object</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt; <span class="ident">OpT</span>(<span class="keyword">string</span> name, <span class="ident">Func</span>&lt;<span class="ident">TypeDef</span>&gt; type, <span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="keyword">object</span>&gt; op)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="keyword">string</span>, <span class="ident">Func</span>&lt;<span class="ident">ValueToken</span>, <span class="ident">ValueToken</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-OpT__string__name__Func_TypeDef_type__Func_object_object_op_"><div class="section_title">SOURCE</div><div class="code">
            Tuple&lt;string, Func&lt;ValueToken, ValueToken&gt;&gt;(name, (ValueToken tok) =&gt; new ValueToken(type(), op(tok.Value)))</div></div></div><div class="member-title"><a name="Register"></a>Register(TypeDef)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Register__TypeDef__type_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">type</div><div class="arg-type"><span class="ident">TypeDef</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">TypeDef</span> <span class="ident">Register</span>(<span class="ident">TypeDef</span> type)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TypeDef</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Register__TypeDef__type_"><div class="section_title">SOURCE</div><div class="code">
            All = All.Add(type.Name, type);
            AllInOrder = (from x in All.Values
                          orderby x.Order descending
                          select x)
                         .Freeze();
            return type;
        </div></div></div></div></body></html>