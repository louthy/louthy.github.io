<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="https://louthy.github.io/">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt.Session/index.htm">LanguageExt.Session</a> \ <span class="nav-bar-link" href="ValueVector_.htm">ValueVector</span></div><div class="nav-panel"><h3 >CONSTRUCTORS</h3><a class="nav-link" href="#ValueVector">ValueVector(long, Lst&lt;object&gt;)</a><h3 >FIELDS</h3><a class="nav-link" href="#Time">Time</a><a class="nav-link" href="#Vector">Vector</a><h3 >METHODS</h3><a class="nav-link" href="#AddValue">AddValue(long, object, VectorConflictStrategy)</a></div><div class="content-panel"><h1 >ValueVector Class</h1><p ><span >Simple version vector.  There can be multiple values stored for the same event. The implementation will be replaced with Dotted Version  Vectors once I have implemented a general system for it in the Core. </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ValueVector</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt.Session</div></div><h2 >Constructors</h2><div class="member-title"><a name="ValueVector"></a>ValueVector(long, Lst&lt;object&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ValueVector__long__time__Lst_object_root_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">time</div><div class="arg-type"><span class="keyword">long</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">root</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="keyword">object</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">ctor</span> <span class="ident">ValueVector</span>(<span class="keyword">long</span> time, <span class="ident">Lst</span>&lt;<span class="keyword">object</span>&gt; root)</div></div><div style="display:none" id="code-ValueVector__long__time__Lst_object_root_"><div class="section_title">SOURCE</div><div class="code">
            Time = time;
            Vector = root;
        </div></div></div><h2 >Fields</h2><div class="member-title"><a name="Time"></a>Time</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">long</span> <span class="ident">Time</span></div></div></div><div class="member-title"><a name="Vector"></a>Vector</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Lst</span>&lt;<span class="keyword">object</span>&gt; <span class="ident">Vector</span></div></div></div><h2 >Methods</h2><div class="member-title"><a name="AddValue"></a>AddValue(long, object, VectorConflictStrategy)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddValue__long__time__object__value__VectorConflictStrategy__strategy_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">time</div><div class="arg-type"><span class="keyword">long</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">object</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">strategy</div><div class="arg-type"><span class="ident">VectorConflictStrategy</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">ValueVector</span> <span class="ident">AddValue</span>(<span class="keyword">long</span> time, <span class="keyword">object</span> value, <span class="ident">VectorConflictStrategy</span> strategy)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueVector</span></div><div class="normal"></div></div></div><div style="display:none" id="code-AddValue__long__time__object__value__VectorConflictStrategy__strategy_"><div class="section_title">SOURCE</div><div class="code">
            if(Vector.Count == 0 || time &gt; Time)
            {
                return new ValueVector(time, List(value));
            }

            if( time &lt; Time)
            {
                // A value from the past has arrived, we&#39;re going to drop it because
                // we&#39;ve already moved on.
                return this;
            }

            if (Vector.Exists(x =&gt; x.Equals(value)))
            {
                // There&#39;s already an entry at the same time with the
                // same value
                return this;
            }
            else
            {
                // Conflict!
                switch(strategy)
                {
                    case VectorConflictStrategy.First:  return this;
                    case VectorConflictStrategy.Last:   return new ValueVector(time, List(value));
                    case VectorConflictStrategy.Branch: return new ValueVector(Time, Vector.Add(value));
                    default: throw new ArgumentException(&quot;VectorConflictStrategy not supported: &quot; + strategy);
                }
            }
        </div></div></div></div></body></html>