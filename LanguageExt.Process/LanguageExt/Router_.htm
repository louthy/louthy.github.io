<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="https://louthy.github.io/">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Router_.htm">Router</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#broadcast&lt;S, T>">broadcast&lt;S, T&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#broadcast&lt;T>">broadcast&lt;T&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, RouterOption, ProcessFlags, int)</a><a class="nav-link" href="#broadcast&lt;T>">broadcast&lt;T&gt;(ProcessName, int, Action&lt;T&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#broadcastMap&lt;S, T, U>">broadcastMap&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#broadcastMap&lt;T, U>">broadcastMap&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, U&gt;, RouterOption, ProcessFlags, int)</a><a class="nav-link" href="#broadcastMap&lt;T, U>">broadcastMap&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#broadcastMapMany&lt;S, T, U>">broadcastMapMany&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#broadcastMapMany&lt;T, U>">broadcastMapMany&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, RouterOption, ProcessFlags, int)</a><a class="nav-link" href="#broadcastMapMany&lt;T, U>">broadcastMapMany&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#DefaultHashFunction&lt;TMsg>">DefaultHashFunction&lt;TMsg&gt;()</a><a class="nav-link" href="#fromConfig&lt;S, T>">fromConfig&lt;S, T&gt;(ProcessName, Func&lt;S&gt;, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#fromConfig&lt;T>">fromConfig&lt;T&gt;(ProcessName)</a><a class="nav-link" href="#fromConfig&lt;T>">fromConfig&lt;T&gt;(ProcessName, Func&lt;T, Unit&gt;)</a><a class="nav-link" href="#fromConfig&lt;T>">fromConfig&lt;T&gt;(ProcessName, Action&lt;T&gt;)</a><a class="nav-link" href="#hash&lt;S, T>">hash&lt;S, T&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, T, S&gt;, Func&lt;int, T, int&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#hash&lt;T>">hash&lt;T&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;int, T, int&gt;, RouterOption, ProcessFlags, int)</a><a class="nav-link" href="#hash&lt;T>">hash&lt;T&gt;(ProcessName, int, Action&lt;T&gt;, Func&lt;int, T, int&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#hashMap&lt;S, T, U>">hashMap&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, U&gt;, Func&lt;int, T, int&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#hashMap&lt;T, U>">hashMap&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, U&gt;, Func&lt;int, U, int&gt;, RouterOption, ProcessFlags, int)</a><a class="nav-link" href="#hashMap&lt;T, U>">hashMap&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, U&gt;, Func&lt;int, T, int&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#hashMapMany&lt;S, T, U>">hashMapMany&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, Func&lt;int, U, int&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#hashMapMany&lt;T, U>">hashMapMany&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, Func&lt;int, U, int&gt;, RouterOption, ProcessFlags, int)</a><a class="nav-link" href="#hashMapMany&lt;T, U>">hashMapMany&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, Func&lt;int, U, int&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#leastBusy&lt;S, T>">leastBusy&lt;S, T&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#leastBusy&lt;T>">leastBusy&lt;T&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, RouterOption, ProcessFlags, int)</a><a class="nav-link" href="#leastBusy&lt;T>">leastBusy&lt;T&gt;(ProcessName, int, Action&lt;T&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#leastBusyMap&lt;S, T, U>">leastBusyMap&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#leastBusyMap&lt;T, U>">leastBusyMap&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, U&gt;, RouterOption, ProcessFlags, int)</a><a class="nav-link" href="#leastBusyMap&lt;T, U>">leastBusyMap&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#random&lt;S, T>">random&lt;S, T&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#random&lt;T>">random&lt;T&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, RouterOption, ProcessFlags, int)</a><a class="nav-link" href="#random&lt;T>">random&lt;T&gt;(ProcessName, int, Action&lt;T&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#randomMap&lt;S, T, U>">randomMap&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#randomMap&lt;T, U>">randomMap&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, U&gt;, RouterOption, ProcessFlags, int)</a><a class="nav-link" href="#randomMap&lt;T, U>">randomMap&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#randomMapMany&lt;S, T, U>">randomMapMany&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#randomMapMany&lt;T, U>">randomMapMany&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, RouterOption, ProcessFlags, int)</a><a class="nav-link" href="#randomMapMany&lt;T, U>">randomMapMany&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#roundRobin&lt;S, T>">roundRobin&lt;S, T&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#roundRobin&lt;T>">roundRobin&lt;T&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, RouterOption, ProcessFlags, int)</a><a class="nav-link" href="#roundRobin&lt;T>">roundRobin&lt;T&gt;(ProcessName, int, Action&lt;T&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#roundRobinMap&lt;S, T, U>">roundRobinMap&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#roundRobinMap&lt;T, U>">roundRobinMap&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, U&gt;, RouterOption, ProcessFlags, int)</a><a class="nav-link" href="#roundRobinMap&lt;T, U>">roundRobinMap&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#roundRobinMapMany&lt;S, T, U>">roundRobinMapMany&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a><a class="nav-link" href="#roundRobinMapMany&lt;T, U>">roundRobinMapMany&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, RouterOption, ProcessFlags, int)</a><a class="nav-link" href="#roundRobinMapMany&lt;T, U>">roundRobinMapMany&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)</a></div><div class="content-panel"><h1 >Router Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">Router</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="broadcast&lt;S, T>"></a>broadcast&lt;S, T&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-broadcast_S_T_ProcessName__Name__int__Count__Func_S_Setup__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is sent to  all worker processes </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">broadcast</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-broadcast_S_T_ProcessName__Name__int__Count__Func_S_Setup__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            if (Inbox == null) throw new ArgumentNullException(nameof(Inbox));
            if (Setup == null) throw new ArgumentNullException(nameof(Setup));
            if (Count &lt; 1) throw new ArgumentException($&quot;{nameof(Count)} should be greater than 0&quot;);

            return spawn&lt;Unit, T&gt;(
                Name,
                () =&gt;
                {
                    spawnMany(Count, WorkerName, Setup, Inbox, Flags);
                    return unit;
                },
                (_, msg) =&gt; Children.Iter(pid =&gt; fwd(pid)),
                Flags, 
                Strategy, 
                MaxMailboxSize
            );
        </div></div></div><div class="member-title"><a name="broadcast&lt;T>"></a>broadcast&lt;T&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, RouterOption, ProcessFlags, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-broadcast_T_ProcessName__Name__IEnumerable_ProcessId_Workers__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with that routes each message to the Workers in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Workers</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Options</div><div class="arg-type"><span class="ident">RouterOption</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">broadcast</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; Workers, <span class="ident">RouterOption</span> Options = RouterOption.Default, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-broadcast_T_ProcessName__Name__IEnumerable_ProcessId_Workers__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            if (Workers == null) throw new ArgumentNullException(nameof(Workers));
            var workers = Set.createRange(Workers);
            if (workers.Count &lt; 1) throw new ArgumentException($&quot;{nameof(Workers)} should have a length of at least 1&quot;);

            var router = spawn&lt;T&gt;(
                Name,
                msg =&gt; workers.Iter(pid =&gt; fwd(pid)),
                Flags,
                DefaultStrategy,
                MaxMailboxSize,
                Terminated: pid =&gt; workers = workers.Remove(pid)
            );
            return WatchWorkers(router, workers, Options);
        </div></div></div><div class="member-title"><a name="broadcast&lt;T>"></a>broadcast&lt;T&gt;(ProcessName, int, Action&lt;T&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-broadcast_T_ProcessName__Name__int__Count__Action_T_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is sent to one worker process in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">broadcast</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-broadcast_T_ProcessName__Name__int__Count__Action_T_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            broadcast&lt;Unit, T&gt;(Name, Count, () =&gt; unit, (_, msg) =&gt; { Inbox(msg); return unit; }, Flags, Strategy, MaxMailboxSize, WorkerName)</div></div></div><div class="member-title"><a name="broadcastMap&lt;S, T, U>"></a>broadcastMap&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-broadcastMap_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is sent to  all worker processes </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div><div class="arg-desc">Message mapping function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">broadcastMap</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; Map, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-broadcastMap_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            if (Inbox == null) throw new ArgumentNullException(nameof(Inbox));
            if (Setup == null) throw new ArgumentNullException(nameof(Setup));
            if (Count &lt; 1) throw new ArgumentException($&quot;{nameof(Count)} should be greater than 0&quot;);

            return spawn&lt;Unit, T&gt;(
                Name,
                () =&gt;
                {
                    spawnMany(Count, WorkerName, Setup, Inbox, Flags);
                    return unit;
                },
                (_, msg) =&gt;
                {
                    var umsg = Map(msg);
                    return Children.Iter(pid =&gt; fwd(pid,umsg));
                },
                Flags,
                Strategy,
                MaxMailboxSize
            );
        </div></div></div><div class="member-title"><a name="broadcastMap&lt;T, U>"></a>broadcastMap&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, U&gt;, RouterOption, ProcessFlags, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-broadcastMap_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_U_Map__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with that routes each message to all workers Each message is mapped before being broadcast. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Workers</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div><div class="arg-desc">Message mapping function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Options</div><div class="arg-type"><span class="ident">RouterOption</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">broadcastMap</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; Workers, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; Map, <span class="ident">RouterOption</span> Options = RouterOption.Default, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-broadcastMap_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_U_Map__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            if (Workers == null) throw new ArgumentNullException(nameof(Workers));
            var workers = Set.createRange(Workers);
            if (workers.Count &lt; 1) throw new ArgumentException($&quot;{nameof(Workers)} should have a length of at least 1&quot;);
            var router = spawn&lt;T&gt;(
                Name,
                msg =&gt;
                {
                    var umsg = Map(msg);
                    workers.Iter(pid =&gt; fwd(pid, umsg));
                },
                Flags,
                DefaultStrategy,
                MaxMailboxSize,
                Terminated: pid =&gt; workers = workers.Remove(pid)
            );
            return WatchWorkers(router, workers, Options);
        </div></div></div><div class="member-title"><a name="broadcastMap&lt;T, U>"></a>broadcastMap&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-broadcastMap_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is mapped and sent to one worker process in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">U</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">broadcastMap</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Action</span>&lt;<span class="ident">U</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; Map, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-broadcastMap_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            broadcastMap(Name, Count, () =&gt; unit, (_, umsg) =&gt; { Inbox(umsg); return unit; }, Map, Flags, Strategy, MaxMailboxSize, WorkerName)</div></div></div><div class="member-title"><a name="broadcastMapMany&lt;S, T, U>"></a>broadcastMapMany&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-broadcastMapMany_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_IEnumerable&lt;U>_MapMany__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with N worker processes, each message is mapped  from T to IEnumerable U before each resulting Us are passed all of the  worker processes. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapMany</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">broadcastMapMany</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; MapMany, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-broadcastMapMany_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_IEnumerable&lt;U>_MapMany__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            if (Inbox == null) throw new ArgumentNullException(nameof(Inbox));
            if (WorkerName == null) throw new ArgumentNullException(nameof(WorkerName));
            if (Count &lt; 1) throw new ArgumentException($&quot;{nameof(Count)} should be greater than 0&quot;);

            return spawn&lt;Unit, T&gt;(
                Name,
                () =&gt;
                {
                    spawnMany(Count, WorkerName, Setup, Inbox, Flags);
                    return unit;
                },
                (_, msg) =&gt;
                {
                    MapMany(msg).Iter(umsg =&gt; Children.Iter(pid =&gt; fwd(pid, umsg)));
                    return unit;
                },
                Flags,
                Strategy,
                MaxMailboxSize
            );
        </div></div></div><div class="member-title"><a name="broadcastMapMany&lt;T, U>"></a>broadcastMapMany&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, RouterOption, ProcessFlags, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-broadcastMapMany_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_IEnumerable&lt;U>_MapMany__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with N worker processes, each message is mapped  from T to IEnumerable U before each resulting Us are passed all of the  worker processes. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Workers</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapMany</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Options</div><div class="arg-type"><span class="ident">RouterOption</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">broadcastMapMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; Workers, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; MapMany, <span class="ident">RouterOption</span> Options = RouterOption.Default, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-broadcastMapMany_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_IEnumerable&lt;U>_MapMany__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            if (Workers == null) throw new ArgumentNullException(nameof(Workers));
            var workers = Set.createRange(Workers);
            if (workers.Count &lt; 1) throw new ArgumentException($&quot;{nameof(Workers)} should have a length of at least 1&quot;);

            var router = spawn&lt;T&gt;(
                Name,
                msg =&gt; MapMany(msg).Iter(umsg =&gt; workers.Iter(pid =&gt; fwd(pid, umsg))),
                Flags,
                DefaultStrategy,
                MaxMailboxSize,
                Terminated: pid =&gt; workers = workers.Remove(pid)
            );
            return WatchWorkers(router, workers, Options);
        </div></div></div><div class="member-title"><a name="broadcastMapMany&lt;T, U>"></a>broadcastMapMany&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-broadcastMapMany_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_IEnumerable&lt;U>_MapMany__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with N worker processes, each message is mapped  from T to IEnumerable U before each resulting U is passed to the worker processes in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">U</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapMany</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">broadcastMapMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Action</span>&lt;<span class="ident">U</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; MapMany, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-broadcastMapMany_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_IEnumerable&lt;U>_MapMany__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            broadcastMapMany(Name, Count, () =&gt; unit, (_, umsg) =&gt; { Inbox(umsg); return unit; }, MapMany, Flags, Strategy, MaxMailboxSize, WorkerName)</div></div></div><div class="member-title"><a name="DefaultHashFunction&lt;TMsg>"></a>DefaultHashFunction&lt;TMsg&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DefaultHashFunction_TMsg_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Default hashing function, used by the hashing routers by default if no HashFunc parameter is provided.  The function turns a worker-count and  message into a worker index </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">TMsg</span>, <span class="keyword">int</span>&gt; <span class="ident">DefaultHashFunction</span>&lt;<span class="ident">TMsg</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">TMsg</span>, <span class="keyword">int</span>&gt;</div><div class="normal"><span >Function that turns a worker-count and message into a worker index</span></div></div></div><div style="display:none" id="code-DefaultHashFunction_TMsg_"><div class="section_title">SOURCE</div><div class="code">
            (workers, msg)  =&gt; 
                msg.GetHashCode() % workers</div></div></div><div class="member-title"><a name="fromConfig&lt;S, T>"></a>fromConfig&lt;S, T&gt;(ProcessName, Func&lt;S&gt;, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fromConfig_S_T_ProcessName__name__Func_S_Setup__Func_S_T_S_Inbox_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawn a router using the settings in the config </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of the child process that will be the router</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">fromConfig</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> name, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Inbox)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >ProcessId of the router</span></div></div></div><div style="display:none" id="code-fromConfig_S_T_ProcessName__name__Func_S_Setup__Func_S_T_S_Inbox_"><div class="section_title">SOURCE</div><div class="code">
            var id       = Self[name];
            var type     = ActorContext.System(id).Settings.GetRouterDispatch(id);
            var workers  = ActorContext.System(id).Settings.GetRouterWorkerCount(id);
            var flags    = ActorContext.System(id).Settings.GetProcessFlags(id);
            var mbs      = ActorContext.System(id).Settings.GetProcessMailboxSize(id);
            var strategy = ActorContext.System(id).Settings.GetProcessStrategy(id);
            var wrkrName = ActorContext.System(id).Settings.GetRouterWorkerName(id);

            return type.Map(t =&gt;
                {
                    // TODO: Consider the best approach to generalise this, so that bespoke router
                    //       types can make use of the config system too.
                    switch (t)
                    {
                        case &quot;broadcast&quot;:
                            return broadcast(name, workers.IfNone(2), Setup, Inbox, flags, strategy, mbs, wrkrName);
                        case &quot;hash&quot;:
                            return hash(name, workers.IfNone(2), Setup, Inbox, null, flags, strategy, mbs, wrkrName);
                        case &quot;least-busy&quot;:
                            return leastBusy(name, workers.IfNone(2), Setup, Inbox, flags, strategy, mbs, wrkrName);
                        case &quot;random&quot;:
                            return random(name, workers.IfNone(2), Setup, Inbox, flags, strategy, mbs, wrkrName);
                        case &quot;round-robin&quot;:
                            return roundRobin(name, workers.IfNone(2), Setup, Inbox, flags, strategy, mbs, wrkrName);
                        default:
                            throw new Exception($&quot;Unsupported router type (for config system setup): {t} &quot;);
                    }
                })
               .IfNone(() =&gt; failwith&lt;ProcessId&gt;($&quot;&#39;route&#39; not specified for {id}&quot;));
        </div></div></div><div class="member-title"><a name="fromConfig&lt;T>"></a>fromConfig&lt;T&gt;(ProcessName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fromConfig_T_ProcessName__name_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawn a router using the settings in the config </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of the child process that will be the router</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">fromConfig</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> name)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >ProcessId of the router</span></div></div></div><div style="display:none" id="code-fromConfig_T_ProcessName__name_"><div class="section_title">SOURCE</div><div class="code">
            var id       = Self[name];
            var type     = ActorContext.System(id).Settings.GetRouterDispatch(id);
            var workers  = ActorContext.System(id).Settings.GetRouterWorkers(id)
                                                 .Map(p =&gt; p.ProcessId.IfNone(ProcessId.None) )
                                                 .Filter(pid =&gt; pid != ProcessId.None);

            var flags    = ActorContext.System(id).Settings.GetProcessFlags(id);
            var mbs      = ActorContext.System(id).Settings.GetProcessMailboxSize(id);

            return type.Map(t =&gt;
                {
                    // TODO: Consider the best approach to generalise this, so that bespoke router
                    //       types can make use of the config system too.
                    switch (t)
                    {
                        case &quot;broadcast&quot;:
                            return broadcast&lt;T&gt;(name, workers, RouterOption.Default, flags, mbs);
                        case &quot;hash&quot;:
                            return hash&lt;T&gt;(name, workers, null, RouterOption.Default, flags, mbs);
                        case &quot;least-busy&quot;:
                            return leastBusy&lt;T&gt;(name, workers, RouterOption.Default, flags, mbs);
                        case &quot;random&quot;:
                            return random&lt;T&gt;(name, workers, RouterOption.Default, flags, mbs);
                        case &quot;round-robin&quot;:
                            return roundRobin&lt;T&gt;(name, workers, RouterOption.Default, flags, mbs);
                        default:
                            throw new Exception($&quot;Unsupported router type (for config system setup): {t} &quot;);
                    }
                })
               .IfNone(() =&gt; failwith&lt;ProcessId&gt;($&quot;&#39;route&#39; not specified for {id}&quot;));
        </div></div></div><div class="member-title"><a name="fromConfig&lt;T>"></a>fromConfig&lt;T&gt;(ProcessName, Func&lt;T, Unit&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fromConfig_T_ProcessName__name__Func_T_Unit_Inbox_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawn a router using the settings in the config </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of the child process that will be the router</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Unit</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">fromConfig</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> name, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Unit</span>&gt; Inbox)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >ProcessId of the router</span></div></div></div><div style="display:none" id="code-fromConfig_T_ProcessName__name__Func_T_Unit_Inbox_"><div class="section_title">SOURCE</div><div class="code">
            fromConfig&lt;Unit, T&gt;(name, () =&gt; unit, (_, m) =&gt; Inbox(m))</div></div></div><div class="member-title"><a name="fromConfig&lt;T>"></a>fromConfig&lt;T&gt;(ProcessName, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fromConfig_T_ProcessName__name__Action_T_Inbox_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawn a router using the settings in the config </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name of the child process that will be the router</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">fromConfig</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> name, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Inbox)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >ProcessId of the router</span></div></div></div><div style="display:none" id="code-fromConfig_T_ProcessName__name__Action_T_Inbox_"><div class="section_title">SOURCE</div><div class="code">
            fromConfig&lt;Unit, T&gt;(name, () =&gt; unit, (_, m) =&gt; { Inbox(m); return unit; })</div></div></div><div class="member-title"><a name="hash&lt;S, T>"></a>hash&lt;S, T&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, T, S&gt;, Func&lt;int, T, int&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-hash_S_T_ProcessName__Name__int__Count__Func_S_Setup__Func_S_T_S_Inbox__Func_int_T_int_HashFunc__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is sent to a worker process by calling GetHashCode on the message and modding by the number of workers, the result is used as the worker index to route to. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">HashFunc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>, <span class="keyword">int</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">hash</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>, <span class="keyword">int</span>&gt; HashFunc = null, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-hash_S_T_ProcessName__Name__int__Count__Func_S_Setup__Func_S_T_S_Inbox__Func_int_T_int_HashFunc__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            if (Inbox == null) throw new ArgumentNullException(nameof(Inbox));
            if (Setup == null) throw new ArgumentNullException(nameof(Setup));
            if (Count &lt; 1) throw new ArgumentException($&quot;{nameof(Count)} should be greater than 0&quot;);
            HashFunc = HashFunc ?? DefaultHashFunction&lt;T&gt;();

            return spawn&lt;Unit, T&gt;(
                Name,
                () =&gt;
                {
                    spawnMany(Count, WorkerName, Setup, Inbox, Flags);
                    return unit;
                },
                (_, msg) =&gt;
                {
                    var child = Children.Skip(HashFunc(Children.Count, msg)).Take(1).ToArray();
                    if (child.Length == 0)
                    {
                        throw new NoRouterWorkersException();
                    }
                    else
                    {
                        fwd(child[0].Value);
                    }
                    return unit;
                },
                Flags, 
                Strategy, 
                MaxMailboxSize
            );
        </div></div></div><div class="member-title"><a name="hash&lt;T>"></a>hash&lt;T&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;int, T, int&gt;, RouterOption, ProcessFlags, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-hash_T_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_int_T_int_HashFunc__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with that routes each message by calling GetHashCode on the  message and modding by the number of workers and using that as the worker index to route to. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Workers</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">HashFunc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>, <span class="keyword">int</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Options</div><div class="arg-type"><span class="ident">RouterOption</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">hash</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; Workers, <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>, <span class="keyword">int</span>&gt; HashFunc = null, <span class="ident">RouterOption</span> Options = RouterOption.Default, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-hash_T_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_int_T_int_HashFunc__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            if (Workers == null) throw new ArgumentNullException(nameof(Workers));
            var workers = Workers.ToArray();
            if (workers.Length &lt; 1) throw new ArgumentException($&quot;{nameof(Workers)} should have a length of at least 1&quot;);
            HashFunc = HashFunc ?? DefaultHashFunction&lt;T&gt;();
            var router = spawn&lt;T&gt;(
                Name,
                msg =&gt;
                {
                    fwd(workers[HashFunc(Children.Count, msg)]);
                },
                Flags,
                DefaultStrategy,
                MaxMailboxSize,
                Terminated: pid =&gt; { workers = workers.Where(x =&gt; x != pid).ToArray(); }
            );
            return WatchWorkers(router, workers, Options);
        </div></div></div><div class="member-title"><a name="hash&lt;T>"></a>hash&lt;T&gt;(ProcessName, int, Action&lt;T&gt;, Func&lt;int, T, int&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-hash_T_ProcessName__Name__int__Count__Action_T_Inbox__Func_int_T_int_HashFunc__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with that routes each message by calling GetHashCode on the  message and modding by the number of workers and using that as the worker index to route to. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">HashFunc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>, <span class="keyword">int</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">hash</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>, <span class="keyword">int</span>&gt; HashFunc = null, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-hash_T_ProcessName__Name__int__Count__Action_T_Inbox__Func_int_T_int_HashFunc__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            hash&lt;Unit, T&gt;(Name, Count, () =&gt; unit, (_, msg) =&gt; { Inbox(msg); return unit; }, HashFunc, Flags, Strategy, MaxMailboxSize, WorkerName)</div></div></div><div class="member-title"><a name="hashMap&lt;S, T, U>"></a>hashMap&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, U&gt;, Func&lt;int, T, int&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-hashMap_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_U_Map__Func_int_T_int_HashFunc__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is sent to a worker process by calling GetHashCode on the message and modding by the number of workers and using that to find the worker index to route to. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">HashFunc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>, <span class="keyword">int</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">hashMap</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; Map, <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>, <span class="keyword">int</span>&gt; HashFunc = null, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-hashMap_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_U_Map__Func_int_T_int_HashFunc__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            if (Inbox == null) throw new ArgumentNullException(nameof(Inbox));
            if (Setup == null) throw new ArgumentNullException(nameof(Setup));
            if (Count &lt; 1) throw new ArgumentException($&quot;{nameof(Count)} should be greater than 0&quot;);
            HashFunc = HashFunc ?? DefaultHashFunction&lt;T&gt;();

            return spawn&lt;Unit, T&gt;(
                Name,
                () =&gt;
                {
                    spawnMany(Count, WorkerName, Setup, Inbox, Flags);
                    return unit;
                },
                (_, msg) =&gt;
                {
                    var umsg = Map(msg);
                    var child = Children.Skip(HashFunc(Children.Count, msg)).Take(1).ToArray();
                    if (child.Length == 0)
                    {
                        throw new NoRouterWorkersException();
                    }
                    else
                    {
                        fwd(child[0].Value, umsg);
                    }
                    return unit;
                },
                Flags,
                Strategy,
                MaxMailboxSize
            );
        </div></div></div><div class="member-title"><a name="hashMap&lt;T, U>"></a>hashMap&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, U&gt;, Func&lt;int, U, int&gt;, RouterOption, ProcessFlags, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-hashMap_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_U_Map__Func_int_U_int_HashFunc__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process where each message is sent to a worker process by calling GetHashCode on the mapped message and  modding it by the number of workers to find the worker index  to route to. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Workers</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">HashFunc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">U</span>, <span class="keyword">int</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Options</div><div class="arg-type"><span class="ident">RouterOption</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">hashMap</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; Workers, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; Map, <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">U</span>, <span class="keyword">int</span>&gt; HashFunc = null, <span class="ident">RouterOption</span> Options = RouterOption.Default, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-hashMap_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_U_Map__Func_int_U_int_HashFunc__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            if (Workers == null) throw new ArgumentNullException(nameof(Workers));
            var workers = Workers.ToArray();
            if (workers.Length &lt; 1) throw new ArgumentException($&quot;{nameof(Workers)} should have a length of at least 1&quot;);
            HashFunc = HashFunc ?? DefaultHashFunction&lt;U&gt;();
            var router = spawn&lt;T&gt;(
                Name,
                msg =&gt;
                {
                    var umsg = Map(msg);
                    fwd(workers[HashFunc(Children.Count, umsg)], umsg);
                },
                Flags,
                DefaultStrategy,
                MaxMailboxSize,
                Terminated: pid =&gt; { workers = workers.Where(x =&gt; x != pid).ToArray(); }
            );
            return WatchWorkers(router, workers, Options);
        </div></div></div><div class="member-title"><a name="hashMap&lt;T, U>"></a>hashMap&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, U&gt;, Func&lt;int, T, int&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-hashMap_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_U_Map__Func_int_T_int_HashFunc__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process where each message is sent to a worker process by calling GetHashCode on the mapped message and  modding it by the number of workers to find the worker index  to route to. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">U</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">HashFunc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>, <span class="keyword">int</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">hashMap</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Action</span>&lt;<span class="ident">U</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; Map, <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>, <span class="keyword">int</span>&gt; HashFunc = null, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-hashMap_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_U_Map__Func_int_T_int_HashFunc__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            hashMap(Name, Count, () =&gt; unit, (_, umsg) =&gt; { Inbox(umsg); return unit; }, Map, HashFunc, Flags, Strategy, MaxMailboxSize, WorkerName)</div></div></div><div class="member-title"><a name="hashMapMany&lt;S, T, U>"></a>hashMapMany&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, Func&lt;int, U, int&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-hashMapMany_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_IEnumerable&lt;U>_MapMany__Func_int_U_int_HashFunc__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with N worker processes, each message is mapped  from T to IEnumerable U before each resulting U is passed to the worker processes by getting each mapped message and calling GetHashCode and modding  by the number of workers to find the worker index to route to. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapMany</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">HashFunc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">U</span>, <span class="keyword">int</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">hashMapMany</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; MapMany, <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">U</span>, <span class="keyword">int</span>&gt; HashFunc = null, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-hashMapMany_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_IEnumerable&lt;U>_MapMany__Func_int_U_int_HashFunc__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            if (Inbox == null) throw new ArgumentNullException(nameof(Inbox));
            if (WorkerName == null) throw new ArgumentNullException(nameof(WorkerName));
            if (Count &lt; 1) throw new ArgumentException($&quot;{nameof(Count)} should be greater than 0&quot;);
            HashFunc = HashFunc ?? DefaultHashFunction&lt;U&gt;();

            return spawn&lt;Unit, T&gt;(
                Name,
                () =&gt;
                {
                    spawnMany(Count, WorkerName, Setup, Inbox, Flags);
                    return unit;
                },
                (_, msg) =&gt;
                {
                    var us = MapMany(msg);

                    foreach (var u in us)
                    {
                        var index = HashFunc(Children.Count, u);
                        var kids = Children.Skip(index);

                        var child = kids.Take(1).ToArray();
                        if (child.Length == 0)
                        {
                            kids = Children;
                            child = kids.Take(1).ToArray();
                            if (child.Length == 0)
                            {
                                throw new NoRouterWorkersException();
                            }
                        }

                        fwd(child[0].Value, u);
                        kids = kids.Skip(1);
                    }
                    return unit;
                },
                Flags,
                Strategy,
                MaxMailboxSize
            );
        </div></div></div><div class="member-title"><a name="hashMapMany&lt;T, U>"></a>hashMapMany&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, Func&lt;int, U, int&gt;, RouterOption, ProcessFlags, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-hashMapMany_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_IEnumerable&lt;U>_MapMany__Func_int_U_int_HashFunc__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with N worker processes, each message is mapped  from T to IEnumerable U before each resulting U is passed to the worker processes by getting each mapped message and calling GetHashCode and modding  by the number of workers to find the worker index to route to. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Workers</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapMany</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">HashFunc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">U</span>, <span class="keyword">int</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Options</div><div class="arg-type"><span class="ident">RouterOption</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">hashMapMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; Workers, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; MapMany, <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">U</span>, <span class="keyword">int</span>&gt; HashFunc = null, <span class="ident">RouterOption</span> Options = RouterOption.Default, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-hashMapMany_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_IEnumerable&lt;U>_MapMany__Func_int_U_int_HashFunc__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            if (Workers == null) throw new ArgumentNullException(nameof(Workers));
            var workers = Workers.ToArray();
            if (workers.Length &lt; 1) throw new ArgumentException($&quot;{nameof(Workers)} should have a length of at least 1&quot;);
            HashFunc = HashFunc ?? DefaultHashFunction&lt;U&gt;();

            var router = spawn&lt;T&gt;(
                Name,
                msg =&gt;
                {
                    var us = MapMany(msg);

                    foreach (var u in us)
                    {
                        var index = HashFunc(Children.Count, u);

                        var worker = workers[index];
                        fwd(worker, u);
                    }
                },
                Flags,
                DefaultStrategy,
                MaxMailboxSize,
                Terminated: pid =&gt; { workers = workers.Where(x =&gt; x != pid).ToArray(); }
            );
            return WatchWorkers(router, workers, Options);
        </div></div></div><div class="member-title"><a name="hashMapMany&lt;T, U>"></a>hashMapMany&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, Func&lt;int, U, int&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-hashMapMany_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_IEnumerable&lt;U>_MapMany__Func_int_U_int_HashFunc__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with N worker processes, each message is mapped  from T to IEnumerable U before each resulting U is passed to the worker processes by getting each mapped message and calling GetHashCode and modding  by the number of workers to find the worker index to route to. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">U</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapMany</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">HashFunc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">U</span>, <span class="keyword">int</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">hashMapMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Action</span>&lt;<span class="ident">U</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; MapMany, <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">U</span>, <span class="keyword">int</span>&gt; HashFunc = null, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-hashMapMany_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_IEnumerable&lt;U>_MapMany__Func_int_U_int_HashFunc__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            hashMapMany(Name, Count, () =&gt; unit, (_, umsg) =&gt; { Inbox(umsg); return unit; }, MapMany, HashFunc, Flags, Strategy, MaxMailboxSize, WorkerName)</div></div></div><div class="member-title"><a name="leastBusy&lt;S, T>"></a>leastBusy&lt;S, T&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-leastBusy_S_T_ProcessName__Name__int__Count__Func_S_Setup__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is  sent to the least busy worker. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">leastBusy</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-leastBusy_S_T_ProcessName__Name__int__Count__Func_S_Setup__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            if (Inbox == null) throw new ArgumentNullException(nameof(Inbox));
            if (Setup == null) throw new ArgumentNullException(nameof(Setup));
            if (Count &lt; 1) throw new ArgumentException($&quot;{nameof(Count)} should be greater than 0&quot;);

            return spawn&lt;Unit, T&gt;(
                Name,
                () =&gt;
                {
                    spawnMany(Count, WorkerName, Setup, Inbox, Flags);
                    return unit;
                },
                (_, msg) =&gt;
                {
                    var disps = (from child in Children.Map(c =&gt; Tuple(c, ActorContext.System(c).GetDispatcher(c))).Values
                                 let count = child.Item2.GetInboxCount()
                                 where count &gt;= 0
                                 orderby count
                                 select child)
                                .ToList();

                    if (disps.Count == 0)
                    {
                        throw new NoRouterWorkersException();
                    }
                    else
                    {
                        fwd(disps.First().Item1, msg);
                    }
                    return unit;
                },
                Flags, 
                Strategy, 
                MaxMailboxSize
            );
        </div></div></div><div class="member-title"><a name="leastBusy&lt;T>"></a>leastBusy&lt;T&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, RouterOption, ProcessFlags, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-leastBusy_T_ProcessName__Name__IEnumerable_ProcessId_Workers__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with that routes each message to the  least busy worker. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Workers</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Options</div><div class="arg-type"><span class="ident">RouterOption</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">leastBusy</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; Workers, <span class="ident">RouterOption</span> Options = RouterOption.Default, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-leastBusy_T_ProcessName__Name__IEnumerable_ProcessId_Workers__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            if (Workers == null) throw new ArgumentNullException(nameof(Workers));
            var workers = Set.createRange(Workers);
            if (workers.Count &lt; 1) throw new ArgumentException($&quot;{nameof(Workers)} should have a length of at least 1&quot;);

            var router = spawn&lt;T&gt;(
                Name,
                msg =&gt;
                {
                    var disps = (from child in workers.Map(c =&gt; Tuple(c, ActorContext.System(c).GetDispatcher(c)))
                                 let count = child.Item2.GetInboxCount()
                                 where count &gt;= 0
                                 orderby count
                                 select child)
                                .ToList();

                    if (disps.Count == 0)
                    {
                        throw new NoRouterWorkersException();
                    }
                    else
                    {
                        fwd(disps.First().Item1, msg);
                    }
                },
                Flags,
                DefaultStrategy,
                MaxMailboxSize,
                Terminated: pid =&gt; workers = workers.Remove(pid)
            );
            return WatchWorkers(router, workers, Options);
        </div></div></div><div class="member-title"><a name="leastBusy&lt;T>"></a>leastBusy&lt;T&gt;(ProcessName, int, Action&lt;T&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-leastBusy_T_ProcessName__Name__int__Count__Action_T_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is  sent to the least busy worker. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">leastBusy</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-leastBusy_T_ProcessName__Name__int__Count__Action_T_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            leastBusy&lt;Unit, T&gt;(Name, Count, () =&gt; unit, (_, msg) =&gt; { Inbox(msg); return unit; }, Flags, Strategy, MaxMailboxSize, WorkerName)</div></div></div><div class="member-title"><a name="leastBusyMap&lt;S, T, U>"></a>leastBusyMap&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-leastBusyMap_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is mapped and sent to the least busy worker </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">leastBusyMap</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; Map, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-leastBusyMap_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            if (Inbox == null) throw new ArgumentNullException(nameof(Inbox));
            if (Setup == null) throw new ArgumentNullException(nameof(Setup));
            if (Count &lt; 1) throw new ArgumentException($&quot;{nameof(Count)} should be greater than 0&quot;);

            return spawn&lt;Unit, T&gt;(
                Name,
                () =&gt;
                {
                    spawnMany(Count, WorkerName, Setup, Inbox, Flags);
                    return unit;
                },
                (_, msg) =&gt;
                {
                    var umsg = Map(msg);

                    var disps = (from child in Children.Map(c =&gt; Tuple(c, ActorContext.System(c).GetDispatcher(c))).Values
                                 let count = child.Item2.GetInboxCount()
                                 where count &gt;= 0
                                 orderby count
                                 select child)
                                .ToList();

                    if (disps.Count == 0)
                    {
                        throw new NoRouterWorkersException();
                    }
                    else
                    {
                        fwd(disps.First().Item1, umsg);
                    }
                    return unit;
                },
                Flags,
                Strategy,
                MaxMailboxSize
            );
        </div></div></div><div class="member-title"><a name="leastBusyMap&lt;T, U>"></a>leastBusyMap&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, U&gt;, RouterOption, ProcessFlags, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-leastBusyMap_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_U_Map__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with that routes each message is mapped and  sent to the least busy worker </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Workers</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Options</div><div class="arg-type"><span class="ident">RouterOption</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">leastBusyMap</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; Workers, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; Map, <span class="ident">RouterOption</span> Options = RouterOption.Default, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-leastBusyMap_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_U_Map__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            if (Workers == null) throw new ArgumentNullException(nameof(Workers));
            var workers = Set.createRange(Workers);
            if (workers.Count &lt; 1) throw new ArgumentException($&quot;{nameof(Workers)} should have a length of at least 1&quot;);
            var router = spawn&lt;T&gt;(
                Name,
                msg =&gt;
                {
                    var umsg = Map(msg);
                    var disps = (from child in workers.Map(c =&gt; Tuple(c, ActorContext.System(c).GetDispatcher(c)))
                                 let count = child.Item2.GetInboxCount()
                                 where count &gt;= 0
                                 orderby count
                                 select child)
                                .ToList();

                    if (disps.Count == 0)
                    {
                        throw new NoRouterWorkersException();
                    }
                    else
                    {
                        fwd(disps.First().Item1, msg);
                    }
                },
                Flags,
                DefaultStrategy,
                MaxMailboxSize,
                Terminated: pid =&gt; workers = workers.Remove(pid)
            );
            return WatchWorkers(router, workers, Options);
        </div></div></div><div class="member-title"><a name="leastBusyMap&lt;T, U>"></a>leastBusyMap&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-leastBusyMap_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is mapped and sent to the least busy worker. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">U</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">leastBusyMap</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Action</span>&lt;<span class="ident">U</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; Map, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-leastBusyMap_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            leastBusyMap(Name, Count, () =&gt; unit, (_, umsg) =&gt; { Inbox(umsg); return unit; }, Map, Flags, Strategy, MaxMailboxSize, WorkerName)</div></div></div><div class="member-title"><a name="random&lt;S, T>"></a>random&lt;S, T&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-random_S_T_ProcessName__Name__int__Count__Func_S_Setup__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is sent to one worker process randomly. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">random</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-random_S_T_ProcessName__Name__int__Count__Func_S_Setup__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            if (Inbox == null) throw new ArgumentNullException(nameof(Inbox));
            if (Setup == null) throw new ArgumentNullException(nameof(Setup));
            if (Count &lt; 1) throw new ArgumentException($&quot;{nameof(Count)} should be greater than 0&quot;);

            return spawn&lt;Unit, T&gt;(
                Name,
                () =&gt;
                {
                    spawnMany(Count, WorkerName, Setup, Inbox, Flags);
                    return unit;
                },
                (_, msg) =&gt;
                {
                    var index = Prelude.random(Children.Count);
                    var child = Children.Skip(index).Take(1).ToArray();
                    if (child.Length == 0)
                    {
                        throw new NoRouterWorkersException();
                    }
                    else
                    {
                        fwd(child[0].Value);
                    }
                    return unit;
                },
                Flags, 
                Strategy, 
                MaxMailboxSize
            );
        </div></div></div><div class="member-title"><a name="random&lt;T>"></a>random&lt;T&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, RouterOption, ProcessFlags, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-random_T_ProcessName__Name__IEnumerable_ProcessId_Workers__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with that routes each message to the Workers randomly. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Workers</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Options</div><div class="arg-type"><span class="ident">RouterOption</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">random</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; Workers, <span class="ident">RouterOption</span> Options = RouterOption.Default, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-random_T_ProcessName__Name__IEnumerable_ProcessId_Workers__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            if (Workers == null) throw new ArgumentNullException(nameof(Workers));
            var workers = Workers.ToArray();
            if (workers.Length &lt; 1) throw new ArgumentException($&quot;{nameof(Workers)} should have a length of at least 1&quot;);
            var router = spawn&lt;T&gt;(
                Name,
                msg =&gt; fwd(workers[Prelude.random(workers.Length)]),
                Flags,
                DefaultStrategy,
                MaxMailboxSize,
                Terminated: pid =&gt; workers = workers.Where(x =&gt; x != pid).ToArray()
            );
            return WatchWorkers(router, workers, Options);
        </div></div></div><div class="member-title"><a name="random&lt;T>"></a>random&lt;T&gt;(ProcessName, int, Action&lt;T&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-random_T_ProcessName__Name__int__Count__Action_T_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is sent to one worker process in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">random</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-random_T_ProcessName__Name__int__Count__Action_T_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            random&lt;Unit, T&gt;(Name, Count, () =&gt; unit, (_, msg) =&gt; { Inbox(msg); return unit; }, Flags, Strategy, MaxMailboxSize, WorkerName)</div></div></div><div class="member-title"><a name="randomMap&lt;S, T, U>"></a>randomMap&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-randomMap_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is sent to one worker process randomly. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">randomMap</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; Map, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-randomMap_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            if (Inbox == null) throw new ArgumentNullException(nameof(Inbox));
            if (Setup == null) throw new ArgumentNullException(nameof(Setup));
            if (Count &lt; 1) throw new ArgumentException($&quot;{nameof(Count)} should be greater than 0&quot;);

            return spawn&lt;Unit, T&gt;(
                Name,
                () =&gt;
                {
                    spawnMany(Count, WorkerName, Setup, Inbox, Flags);
                    return unit;
                },
                (_, msg) =&gt;
                {
                    var umsg = Map(msg);
                    var index = Prelude.random(Children.Count);
                    var child = Children.Skip(index).Take(1).ToArray();
                    if (child.Length == 0)
                    {
                        throw new NoRouterWorkersException();
                    }
                    else
                    {
                        fwd(child[0].Value, umsg);
                    }
                    return unit;
                },
                Flags,
                Strategy,
                MaxMailboxSize
            );
        </div></div></div><div class="member-title"><a name="randomMap&lt;T, U>"></a>randomMap&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, U&gt;, RouterOption, ProcessFlags, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-randomMap_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_U_Map__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with that routes each message to the Workers randomly. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Workers</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Options</div><div class="arg-type"><span class="ident">RouterOption</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">randomMap</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; Workers, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; Map, <span class="ident">RouterOption</span> Options = RouterOption.Default, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-randomMap_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_U_Map__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            if (Workers == null) throw new ArgumentNullException(nameof(Workers));
            var workers = Workers.ToArray();
            if (workers.Length &lt; 1) throw new ArgumentException($&quot;{nameof(Workers)} should have a length of at least 1&quot;);
            var router = spawn&lt;T&gt;(
                Name,
                msg =&gt;
                {
                    var umsg = Map(msg);
                    fwd(workers[Prelude.random(workers.Length)], umsg);
                },
                Flags,
                DefaultStrategy,
                MaxMailboxSize,
                Terminated: pid =&gt; workers = workers.Where(x =&gt; x != pid).ToArray()
            );
            return WatchWorkers(router, workers, Options);
        </div></div></div><div class="member-title"><a name="randomMap&lt;T, U>"></a>randomMap&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-randomMap_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is mapped and sent to one worker process in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">U</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">randomMap</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Action</span>&lt;<span class="ident">U</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; Map, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-randomMap_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            randomMap(Name, Count, () =&gt; unit, (_, umsg) =&gt; { Inbox(umsg); return unit; }, Map, Flags, Strategy, MaxMailboxSize, WorkerName)</div></div></div><div class="member-title"><a name="randomMapMany&lt;S, T, U>"></a>randomMapMany&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-randomMapMany_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_IEnumerable&lt;U>_MapMany__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with N worker processes, each message is mapped  from T to IEnumerable U before each resulting U is passed to the worker processes randomly. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapMany</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">randomMapMany</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; MapMany, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-randomMapMany_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_IEnumerable&lt;U>_MapMany__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            if (Inbox == null) throw new ArgumentNullException(nameof(Inbox));
            if (WorkerName == null) throw new ArgumentNullException(nameof(WorkerName));
            if (Count &lt; 1) throw new ArgumentException($&quot;{nameof(Count)} should be greater than 0&quot;);

            return spawn&lt;Unit, T&gt;(
                Name,
                () =&gt;
                {
                    spawnMany(Count, WorkerName, Setup, Inbox, Flags);
                    return unit;
                },
                (_, msg) =&gt;
                {
                    var us = MapMany(msg);

                    foreach (var u in us)
                    {
                        var index = Prelude.random(Children.Count);
                        var child = Children.Skip(index).Take(1).ToArray();

                        if (child.Length == 0)
                        {
                            throw new NoRouterWorkersException();
                        }
                        else
                        {
                            fwd(child[0].Value, u);
                        }
                    }
                    return unit;
                },
                Flags,
                Strategy,
                MaxMailboxSize
            );
        </div></div></div><div class="member-title"><a name="randomMapMany&lt;T, U>"></a>randomMapMany&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, RouterOption, ProcessFlags, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-randomMapMany_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_IEnumerable&lt;U>_MapMany__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with N worker processes, each message is mapped  from T to IEnumerable U before each resulting U is passed to the worker processes randomly. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Workers</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapMany</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Options</div><div class="arg-type"><span class="ident">RouterOption</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">randomMapMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; Workers, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; MapMany, <span class="ident">RouterOption</span> Options = RouterOption.Default, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-randomMapMany_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_IEnumerable&lt;U>_MapMany__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            if (Workers == null) throw new ArgumentNullException(nameof(Workers));
            var workers = Workers.ToArray();
            if (workers.Length &lt; 1) throw new ArgumentException($&quot;{nameof(Workers)} should have a length of at least 1&quot;);

            var router = spawn&lt;T&gt;(
                Name,
                msg =&gt; MapMany(msg).Iter(u =&gt; fwd(workers[Prelude.random(workers.Length)], u)),
                Flags,
                DefaultStrategy,
                MaxMailboxSize,
                Terminated: pid =&gt; workers = workers.Where(x =&gt; x != pid).ToArray()
            );
            return WatchWorkers(router, workers, Options);
        </div></div></div><div class="member-title"><a name="randomMapMany&lt;T, U>"></a>randomMapMany&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-randomMapMany_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_IEnumerable&lt;U>_MapMany__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with N worker processes, each message is mapped  from T to IEnumerable U before each resulting U is passed to the worker processes in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">U</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapMany</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">randomMapMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Action</span>&lt;<span class="ident">U</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; MapMany, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-randomMapMany_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_IEnumerable&lt;U>_MapMany__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            randomMapMany(Name, Count, () =&gt; unit, (_, umsg) =&gt; { Inbox(umsg); return unit; }, MapMany, Flags, Strategy, MaxMailboxSize, WorkerName)</div></div></div><div class="member-title"><a name="roundRobin&lt;S, T>"></a>roundRobin&lt;S, T&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, T, S&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-roundRobin_S_T_ProcessName__Name__int__Count__Func_S_Setup__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is sent to one worker process in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">roundRobin</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-roundRobin_S_T_ProcessName__Name__int__Count__Func_S_Setup__Func_S_T_S_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            if (Inbox == null) throw new ArgumentNullException(nameof(Inbox));
            if (Setup == null) throw new ArgumentNullException(nameof(Setup));
            if (Count &lt; 1) throw new ArgumentException($&quot;{nameof(Count)} should be greater than 0&quot;);

            return spawn&lt;int, T&gt;(
                Name,
                () =&gt;
                {
                    spawnMany(Count, WorkerName, Setup, Inbox, Flags);
                    return 0;
                },
                (index, msg) =&gt;
                {
                    index = index % Children.Count;
                    var child = Children.Skip(index).Take(1).ToArray();
                    if (child.Length == 0)
                    {
                        throw new NoRouterWorkersException();
                    }
                    else
                    {
                        fwd(child[0].Value);
                    }
                    return index + 1;
                },
                Flags, 
                Strategy, 
                MaxMailboxSize
            );
        </div></div></div><div class="member-title"><a name="roundRobin&lt;T>"></a>roundRobin&lt;T&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, RouterOption, ProcessFlags, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-roundRobin_T_ProcessName__Name__IEnumerable_ProcessId_Workers__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with that routes each message to the Workers in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Workers</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Options</div><div class="arg-type"><span class="ident">RouterOption</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">roundRobin</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; Workers, <span class="ident">RouterOption</span> Options = RouterOption.Default, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-roundRobin_T_ProcessName__Name__IEnumerable_ProcessId_Workers__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            if (Workers == null) throw new ArgumentNullException(nameof(Workers));
            var workers = Workers.ToArray();
            if (workers.Length &lt; 1) throw new ArgumentException($&quot;{nameof(Workers)} should have a length of at least 1&quot;);
            var router = spawn&lt;int, T&gt;(
                Name,
                () =&gt; 0,
                (index, msg) =&gt;
                {
                    index = index % workers.Length;
                    fwd(workers[index]);
                    return index + 1;
                },
                Flags,
                DefaultStrategy,
                MaxMailboxSize,
                Terminated: (index, pid) =&gt; { workers = workers.Where(x =&gt; x != pid).ToArray(); return index; }
            );
            return WatchWorkers(router, workers, Options);
        </div></div></div><div class="member-title"><a name="roundRobin&lt;T>"></a>roundRobin&lt;T&gt;(ProcessName, int, Action&lt;T&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-roundRobin_T_ProcessName__Name__int__Count__Action_T_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is sent to one worker process in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">roundRobin</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Inbox, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-roundRobin_T_ProcessName__Name__int__Count__Action_T_Inbox__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            roundRobin&lt;Unit, T&gt;(Name, Count, () =&gt; unit, (_, msg) =&gt; { Inbox(msg); return unit; }, Flags, Strategy, MaxMailboxSize, WorkerName)</div></div></div><div class="member-title"><a name="roundRobinMap&lt;S, T, U>"></a>roundRobinMap&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-roundRobinMap_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is mapped and sent to one worker process in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">roundRobinMap</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; Map, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-roundRobinMap_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            if (Inbox == null) throw new ArgumentNullException(nameof(Inbox));
            if (Setup == null) throw new ArgumentNullException(nameof(Setup));
            if (Count &lt; 1) throw new ArgumentException($&quot;{nameof(Count)} should be greater than 0&quot;);

            return spawn&lt;int, T&gt;(
                Name,
                () =&gt;
                {
                    spawnMany(Count, WorkerName, Setup, Inbox, Flags);
                    return 0;
                },
                (index, msg) =&gt;
                {
                    var umsg = Map(msg);
                    index = index % Children.Count;
                    var child = Children.Skip(index).Take(1).ToArray();
                    if (child.Length == 0)
                    {
                        throw new NoRouterWorkersException();
                    }
                    else
                    {
                        fwd(child[0].Value, umsg);
                    }
                    return index + 1;
                },
                Flags,
                Strategy,
                MaxMailboxSize
            );
        </div></div></div><div class="member-title"><a name="roundRobinMap&lt;T, U>"></a>roundRobinMap&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, U&gt;, RouterOption, ProcessFlags, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-roundRobinMap_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_U_Map__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with that routes each message is mapped and  sent to the Workers in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Workers</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Options</div><div class="arg-type"><span class="ident">RouterOption</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">roundRobinMap</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; Workers, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; Map, <span class="ident">RouterOption</span> Options = RouterOption.Default, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-roundRobinMap_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_U_Map__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            if (Workers == null) throw new ArgumentNullException(nameof(Workers));
            var workers = Workers.ToArray();
            if (workers.Length &lt; 1) throw new ArgumentException($&quot;{nameof(Workers)} should have a length of at least 1&quot;);
            var router = spawn&lt;int, T&gt;(
                Name,
                () =&gt; 0,
                (index, msg) =&gt;
                {
                    var umsg = Map(msg);
                    index = index % workers.Length;
                    fwd(workers[index],umsg);
                    return index + 1;
                },
                Flags,
                DefaultStrategy,
                MaxMailboxSize,
                Terminated: (index, pid) =&gt; { workers = workers.Where(x =&gt; x != pid).ToArray(); return index; }
            );
            return WatchWorkers(router, workers, Options);
        </div></div></div><div class="member-title"><a name="roundRobinMap&lt;T, U>"></a>roundRobinMap&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, U&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-roundRobinMap_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with Count worker processes, each message is mapped and sent to one worker process in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">U</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">roundRobinMap</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Action</span>&lt;<span class="ident">U</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; Map, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-roundRobinMap_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_U_Map__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            roundRobinMap(Name, Count, () =&gt; unit, (_, umsg) =&gt; { Inbox(umsg); return unit; }, Map, Flags, Strategy, MaxMailboxSize, WorkerName)</div></div></div><div class="member-title"><a name="roundRobinMapMany&lt;S, T, U>"></a>roundRobinMapMany&lt;S, T, U&gt;(ProcessName, int, Func&lt;S&gt;, Func&lt;S, U, S&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-roundRobinMapMany_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_IEnumerable&lt;U>_MapMany__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with N worker processes, each message is mapped  from T to IEnumerable U before each resulting U is passed to the worker processes in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Setup</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapMany</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">roundRobinMapMany</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Func</span>&lt;<span class="ident">S</span>&gt; Setup, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">U</span>, <span class="ident">S</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; MapMany, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-roundRobinMapMany_S_T_U_ProcessName__Name__int__Count__Func_S_Setup__Func_S_U_S_Inbox__Func_T_IEnumerable&lt;U>_MapMany__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            if (Inbox == null) throw new ArgumentNullException(nameof(Inbox));
            if (WorkerName == null) throw new ArgumentNullException(nameof(WorkerName));
            if (Count &lt; 1) throw new ArgumentException($&quot;{nameof(Count)} should be greater than 0&quot;);

            return spawn&lt;int, T&gt;(
                Name,
                () =&gt;
                {
                    spawnMany(Count, WorkerName, Setup, Inbox, Flags);
                    return 0;
                },
                (index, msg) =&gt;
                {
                    var us = MapMany(msg);

                    index = index % Children.Count;
                    var kids = Children.Skip(index);

                    foreach (var u in us)
                    {
                        index = index % Children.Count;
                        var child = kids.Take(1).ToArray();
                        if (child.Length == 0)
                        {
                            kids = Children;
                            child = kids.Take(1).ToArray();
                            if (child.Length == 0)
                            {
                                throw new NoRouterWorkersException();
                            }
                        }

                        fwd(child[0].Value, u);
                        kids = kids.Skip(1);

                        index++;
                    }
                    return index;
                },
                Flags,
                Strategy,
                MaxMailboxSize
            );
        </div></div></div><div class="member-title"><a name="roundRobinMapMany&lt;T, U>"></a>roundRobinMapMany&lt;T, U&gt;(ProcessName, IEnumerable&lt;ProcessId&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, RouterOption, ProcessFlags, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-roundRobinMapMany_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_IEnumerable&lt;U>_MapMany__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with N worker processes, each message is mapped  from T to IEnumerable U before each resulting U is passed to the worker processes in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Workers</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapMany</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Options</div><div class="arg-type"><span class="ident">RouterOption</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">roundRobinMapMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="ident">IEnumerable</span>&lt;<span class="ident">ProcessId</span>&gt; Workers, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; MapMany, <span class="ident">RouterOption</span> Options = RouterOption.Default, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-roundRobinMapMany_T_U_ProcessName__Name__IEnumerable_ProcessId_Workers__Func_T_IEnumerable&lt;U>_MapMany__RouterOption__Options__ProcessFlags__Flags__int__MaxMailboxSize_"><div class="section_title">SOURCE</div><div class="code">
            if (Workers == null) throw new ArgumentNullException(nameof(Workers));
            var workers = Workers.ToArray();
            if (workers.Length &lt; 1) throw new ArgumentException($&quot;{nameof(Workers)} should have a length of at least 1&quot;);

            var router = spawn&lt;int, T&gt;(
                Name,
                () =&gt; 0,
                (index, msg) =&gt;
                {
                    var us = MapMany(msg);

                    foreach (var u in us)
                    {
                        index = index % workers.Length;
                        var worker = workers[index];
                        fwd(worker, u);
                        index++;
                    }
                    return index;
                },
                Flags,
                DefaultStrategy,
                MaxMailboxSize,
                Terminated: (index, pid) =&gt; { workers = workers.Where(x =&gt; x != pid).ToArray(); return index; }
            );
            return WatchWorkers(router, workers, Options);
        </div></div></div><div class="member-title"><a name="roundRobinMapMany&lt;T, U>"></a>roundRobinMapMany&lt;T, U&gt;(ProcessName, int, Action&lt;U&gt;, Func&lt;T, IEnumerable&lt;U&gt;&gt;, ProcessFlags, State&lt;StrategyContext, Unit&gt;, int, string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-roundRobinMapMany_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_IEnumerable&lt;U>_MapMany__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Spawns a new process with N worker processes, each message is mapped  from T to IEnumerable U before each resulting U is passed to the worker processes in a round robin fashion. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Delegator process name</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Number of worker processes</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Inbox</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">U</span>&gt;</div></div><div class="arg-desc">Worker message handler</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapMany</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Flags</div><div class="arg-type"><span class="ident">ProcessFlags</span></div></div><div class="arg-desc">Process flags</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Strategy</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc">Failure supervision strategy</div></div><div class="arg"><div class="arg-header"><div class="arg-name">MaxMailboxSize</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">WorkerName</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">roundRobinMapMany</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">ProcessName</span> Name, <span class="keyword">int</span> Count, <span class="ident">Action</span>&lt;<span class="ident">U</span>&gt; Inbox, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">U</span>&gt;&gt; MapMany, <span class="ident">ProcessFlags</span> Flags = ProcessFlags.Default, <span class="ident">State</span>&lt;<span class="ident">StrategyContext</span>, <span class="ident">Unit</span>&gt; Strategy = null, <span class="keyword">int</span> MaxMailboxSize = ProcessSetting.DefaultMailboxSize, <span class="keyword">string</span> WorkerName = &quot;worker&quot;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >Process ID of the delegator process</span></div></div></div><div style="display:none" id="code-roundRobinMapMany_T_U_ProcessName__Name__int__Count__Action_U_Inbox__Func_T_IEnumerable&lt;U>_MapMany__ProcessFlags__Flags__State_StrategyContext_Unit_Strategy__int__MaxMailboxSize__string__WorkerName_"><div class="section_title">SOURCE</div><div class="code">
            roundRobinMapMany(Name, Count, () =&gt; unit, (_, umsg) =&gt; { Inbox(umsg); return unit; }, MapMany, Flags, Strategy, MaxMailboxSize, WorkerName)</div></div></div></div></body></html>