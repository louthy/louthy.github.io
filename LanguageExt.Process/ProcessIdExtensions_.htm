<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="https://louthy.github.io/">API Reference</a> \ <a class="nav-bar-link" href="..//index.htm"></a> \ <span class="nav-bar-link" href="ProcessIdExtensions_.htm">ProcessIdExtensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Ask&lt;T>">Ask&lt;T&gt;(ProcessId, object)</a><a class="nav-link" href="#GetChild">GetChild(ProcessId, ProcessName)</a><a class="nav-link" href="#GetChild">GetChild(ProcessId, int)</a><a class="nav-link" href="#GetChildren">GetChildren(ProcessId)</a><a class="nav-link" href="#Kill">Kill(ProcessId)</a><a class="nav-link" href="#Observe&lt;T>">Observe&lt;T&gt;(ProcessId)</a><a class="nav-link" href="#ObserveState&lt;T>">ObserveState&lt;T&gt;(ProcessId)</a><a class="nav-link" href="#Register">Register(ProcessId)</a><a class="nav-link" href="#Register">Register(ProcessId, ProcessName)</a><a class="nav-link" href="#Shutdown">Shutdown(ProcessId)</a><a class="nav-link" href="#Subscribe">Subscribe(ProcessId)</a><a class="nav-link" href="#Subscribe&lt;T>">Subscribe&lt;T&gt;(ProcessId, IObserver&lt;T&gt;)</a><a class="nav-link" href="#Subscribe&lt;T>">Subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;, Action&lt;Exception&gt;, Action)</a><a class="nav-link" href="#Subscribe&lt;T>">Subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;, Action&lt;Exception&gt;)</a><a class="nav-link" href="#Subscribe&lt;T>">Subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;)</a><a class="nav-link" href="#Subscribe&lt;T>">Subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;, Action)</a><a class="nav-link" href="#SubscribeState&lt;T>">SubscribeState&lt;T&gt;(ProcessId)</a><a class="nav-link" href="#Tell&lt;T>">Tell&lt;T&gt;(ProcessId, T, ProcessId)</a><a class="nav-link" href="#Tell&lt;T>">Tell&lt;T&gt;(ProcessId, T, TimeSpan, ProcessId)</a><a class="nav-link" href="#Tell&lt;T>">Tell&lt;T&gt;(ProcessId, T, DateTime, ProcessId)</a><a class="nav-link" href="#Unsubscribe">Unsubscribe(ProcessId)</a></div><div class="content-panel"><h1 >ProcessIdExtensions Class</h1><p ><span >Extensions methods for ProcessId </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">ProcessIdExtensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div></div></div><h2 >Methods</h2><div class="member-title"><a name="Ask&lt;T>"></a>Ask&lt;T&gt;(ProcessId, object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Ask_T_ProcessId__pid__object__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ask a process for a reply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to ask</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc">Message to send</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">Ask</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">ProcessId</span> pid, <span class="keyword">object</span> message)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >The response to the request</span></div></div></div><div style="display:none" id="code-Ask_T_ProcessId__pid__object__message_"><div class="section_title">SOURCE</div><div class="code">
        ask&lt;T&gt;(pid, message)</div></div></div><div class="member-title"><a name="GetChild"></a>GetChild(ProcessId, ProcessName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetChild__ProcessId__self__ProcessName__name_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the child processes by name </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">GetChild</span>(<span class="keyword">this</span> <span class="ident">ProcessId</span> self, <span class="ident">ProcessName</span> name)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"></div></div></div><div style="display:none" id="code-GetChild__ProcessId__self__ProcessName__name_"><div class="section_title">SOURCE</div><div class="code">
        self.Child(name)</div></div></div><div class="member-title"><a name="GetChild"></a>GetChild(ProcessId, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetChild__ProcessId__self__int__index_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the child processes by index. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="section_title">REMARKS</div><span >Because of the potential changeable nature of child nodes, this will take the index and mod it by the number of children.  We expect this  call will mostly be used for load balancing, and round-robin type  behaviour, so feel that&#39;s acceptable.   </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">GetChild</span>(<span class="keyword">this</span> <span class="ident">ProcessId</span> self, <span class="keyword">int</span> index)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"></div></div></div><div style="display:none" id="code-GetChild__ProcessId__self__int__index_"><div class="section_title">SOURCE</div><div class="code">
        var kids = children(self);
        return kids.Values.Skip(index % kids.Count).Take(1).FirstOrDefault();
    </div></div></div><div class="member-title"><a name="GetChildren"></a>GetChildren(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetChildren__ProcessId__self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the child processes of this process </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">ProcessId</span>&gt; <span class="ident">GetChildren</span>(<span class="keyword">this</span> <span class="ident">ProcessId</span> self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="keyword">string</span>, <span class="ident">ProcessId</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-GetChildren__ProcessId__self_"><div class="section_title">SOURCE</div><div class="code">
        Process.children(self)</div></div></div><div class="member-title"><a name="Kill"></a>Kill(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Kill__ProcessId__self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Kill the process. Forces the process to shutdown.  The kill message  jumps ahead of any messages already in the process&#39;s queue. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Kill</span>(<span class="keyword">this</span> <span class="ident">ProcessId</span> self)</div></div><div style="display:none" id="code-Kill__ProcessId__self_"><div class="section_title">SOURCE</div><div class="code">
        self.Tell(SystemMessage.ShutdownProcess(false), Self)</div></div></div><div class="member-title"><a name="Observe&lt;T>"></a>Observe&lt;T&gt;(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Observe_T_ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get an IObservable for a process publish stream.  When a process calls &#39;publish&#39; it emits messages on the observable returned by this method. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored.<br/><br/> Because this call is asychronous it could allow access to the message loop, therefore you can&#39;t call it from within a process message loop. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Observe</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">ProcessId</span> pid)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >IObservable T</span></div></div></div><div style="display:none" id="code-Observe_T_ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
        observe&lt;T&gt;(pid)</div></div></div><div class="member-title"><a name="ObserveState&lt;T>"></a>ObserveState&lt;T&gt;(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ObserveState_T_ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get an IObservable for a process&#39;s state stream.  When a process state updates at the end of its message loop it announces it on the stream returned from this method.  You should use this for  notification only.  Never modify the state object belonging to a process.  Best practice is to make the state type immutable. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored.<br/><br/> Because this call is asychronous it could allow access to the message loop, therefore you can&#39;t call it from within a process message loop. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">ObserveState</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">ProcessId</span> pid)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >IObservable T</span></div></div></div><div style="display:none" id="code-ObserveState_T_ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
        observeState&lt;T&gt;(pid)</div></div></div><div class="member-title"><a name="Register"></a>Register(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Register__ProcessId__self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Register a named process (a kind of DNS for Processes).  <br/><br/> If the Process is visible to the cluster (PersistInbox) then the  registration becomes a permanent named look-up until Process.deregister  is called.<br/><br/> See remarks. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="section_title">REMARKS</div><span >Multiple Processes can register under the same name.  You may use  a dispatcher to work on them collectively (wherever they are in the  cluster).  i.e. <br/><br/>     var regd = pid.Register(name);     Dispatch.Broadcast[regd].Tell(&quot;Hello&quot;);     Dispatch.First[regd].Tell(&quot;Hello&quot;);     Dispatch.LeastBusy[regd].Tell(&quot;Hello&quot;);     Dispatch.Random[regd].Tell(&quot;Hello&quot;);     Dispatch.RoundRobin[regd].Tell(&quot;Hello&quot;);<br/><br/>     This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">Register</span>(<span class="keyword">this</span> <span class="ident">ProcessId</span> self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >A ProcessId that allows dispatching to the process via the name.  The result would look like /disp/reg/name</span></div></div></div><div style="display:none" id="code-Register__ProcessId__self_"><div class="section_title">SOURCE</div><div class="code">
        ActorContext.System(self).Register(self.Name, self)</div></div></div><div class="member-title"><a name="Register"></a>Register(ProcessId, ProcessName)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Register__ProcessId__self__ProcessName__name_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Register a named process (a kind of DNS for Processes).  <br/><br/> If the Process is visible to the cluster (PersistInbox) then the  registration becomes a permanent named look-up until Process.deregister  is called.<br/><br/> See remarks. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">name</div><div class="arg-type"><span class="ident">ProcessName</span></div></div><div class="arg-desc">Name to register under</div></div><div class="section_title">REMARKS</div><span >Multiple Processes can register under the same name.  You may use  a dispatcher to work on them collectively (wherever they are in the  cluster).  i.e. <br/><br/>     var regd = pid.Register(name);     Dispatch.Broadcast[regd].Tell(&quot;Hello&quot;);     Dispatch.First[regd].Tell(&quot;Hello&quot;);     Dispatch.LeastBusy[regd].Tell(&quot;Hello&quot;);     Dispatch.Random[regd].Tell(&quot;Hello&quot;);     Dispatch.RoundRobin[regd].Tell(&quot;Hello&quot;); </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ProcessId</span> <span class="ident">Register</span>(<span class="keyword">this</span> <span class="ident">ProcessId</span> self, <span class="ident">ProcessName</span> name)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ProcessId</span></div><div class="normal"><span >A ProcessId that allows dispatching to the process via the name.  The result would look like /disp/reg/name</span></div></div></div><div style="display:none" id="code-Register__ProcessId__self__ProcessName__name_"><div class="section_title">SOURCE</div><div class="code">
        ActorContext.System(self).Register(name, self)</div></div></div><div class="member-title"><a name="Shutdown"></a>Shutdown(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Shutdown__ProcessId__self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Kill the process. Forces the process to shutdown.  The kill message  jumps ahead of any messages already in the process&#39;s queue. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Shutdown</span>(<span class="keyword">this</span> <span class="ident">ProcessId</span> self)</div></div><div style="display:none" id="code-Shutdown__ProcessId__self_"><div class="section_title">SOURCE</div><div class="code">
        self.Tell(SystemMessage.ShutdownProcess(true), Self)</div></div></div><div class="member-title"><a name="Subscribe"></a>Subscribe(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subscribe__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subscribes our inbox to another process publish stream.  When it calls &#39;publish&#39; it will arrive in our inbox. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to subscribe to</div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored.<br/><br/> This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Subscribe</span>(<span class="keyword">this</span> <span class="ident">ProcessId</span> pid)</div></div><div style="display:none" id="code-Subscribe__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
        subscribe(pid)</div></div></div><div class="member-title"><a name="Subscribe&lt;T>"></a>Subscribe&lt;T&gt;(ProcessId, IObserver&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subscribe_T_ProcessId__pid__IObserver_T_observer_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subscribe to the process publish stream.  When a process calls &#39;publish&#39; it emits messages that can be consumed using this method. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">observer</div><div class="arg-type"><span class="ident">IObserver</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored.<br/><br/> Because this call is asychronous it could allow access to the message loop, therefore you can&#39;t call it from within a process message loop. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">Subscribe</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">ProcessId</span> pid, <span class="ident">IObserver</span>&lt;<span class="ident">T</span>&gt; observer)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable, call IDispose to end the subscription</span></div></div></div><div style="display:none" id="code-Subscribe_T_ProcessId__pid__IObserver_T_observer_"><div class="section_title">SOURCE</div><div class="code">
        subscribe(pid, observer)</div></div></div><div class="member-title"><a name="Subscribe&lt;T>"></a>Subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;, Action&lt;Exception&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subscribe_T_ProcessId__pid__Action_T_onNext__Action_Exception_onError__Action__onComplete_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subscribe to the process publish stream.  When a process calls &#39;publish&#39; it emits messages that can be consumed using this method. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onNext</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onError</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onComplete</div><div class="arg-type"><span class="ident">Action</span></div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored.<br/><br/> Because this call is asychronous it could allow access to the message loop, therefore you can&#39;t call it from within a process message loop. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">Subscribe</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">ProcessId</span> pid, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; onNext, <span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt; onError, <span class="ident">Action</span> onComplete)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable, call IDispose to end the subscription</span></div></div></div><div style="display:none" id="code-Subscribe_T_ProcessId__pid__Action_T_onNext__Action_Exception_onError__Action__onComplete_"><div class="section_title">SOURCE</div><div class="code">
        subscribe(pid, onNext, onError, onComplete)</div></div></div><div class="member-title"><a name="Subscribe&lt;T>"></a>Subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;, Action&lt;Exception&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subscribe_T_ProcessId__pid__Action_T_onNext__Action_Exception_onError_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subscribe to the process publish stream.  When a process calls &#39;publish&#39; it emits messages that can be consumed using this method. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onNext</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onError</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored.<br/><br/> Because this call is asychronous it could allow access to the message loop, therefore you can&#39;t call it from within a process message loop. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">Subscribe</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">ProcessId</span> pid, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; onNext, <span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt; onError)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Subscribe_T_ProcessId__pid__Action_T_onNext__Action_Exception_onError_"><div class="section_title">SOURCE</div><div class="code">
        subscribe(pid, onNext, onError)</div></div></div><div class="member-title"><a name="Subscribe&lt;T>"></a>Subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subscribe_T_ProcessId__pid__Action_T_onNext_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subscribe to the process publish stream.  When a process calls &#39;publish&#39; it emits messages that can be consumed using this method. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onNext</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored.<br/><br/> Because this call is asychronous it could allow access to the message loop, therefore you can&#39;t call it from within a process message loop. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">Subscribe</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">ProcessId</span> pid, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; onNext)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Subscribe_T_ProcessId__pid__Action_T_onNext_"><div class="section_title">SOURCE</div><div class="code">
        subscribe(pid, onNext)</div></div></div><div class="member-title"><a name="Subscribe&lt;T>"></a>Subscribe&lt;T&gt;(ProcessId, Action&lt;T&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subscribe_T_ProcessId__pid__Action_T_onNext__Action__onComplete_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subscribe to the process publish stream.  When a process calls &#39;publish&#39; it emits messages that can be consumed using this method. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onNext</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">onComplete</div><div class="arg-type"><span class="ident">Action</span></div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored.<br/><br/> Because this call is asychronous it could allow access to the message loop, therefore you can&#39;t call it from within a process message loop. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">Subscribe</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">ProcessId</span> pid, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; onNext, <span class="ident">Action</span> onComplete)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable, call IDispose to end the subscription</span></div></div></div><div style="display:none" id="code-Subscribe_T_ProcessId__pid__Action_T_onNext__Action__onComplete_"><div class="section_title">SOURCE</div><div class="code">
        subscribe(pid, onNext, onComplete)</div></div></div><div class="member-title"><a name="SubscribeState&lt;T>"></a>SubscribeState&lt;T&gt;(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubscribeState_T_ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subscribes our inbox to another process state publish stream.   When a process state updates at the end of its message loop it announces it arrives in our inbox. You should use this for notification only.  Never modify the state object belonging to a process.   Best practice is to make the state type immutable. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div></div><div class="section_title">REMARKS</div><span >The process can publish any number of types, any published messages not of type T will be ignored. This should be used from within a process&#39; message loop only </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">SubscribeState</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">ProcessId</span> pid)</div></div><div style="display:none" id="code-SubscribeState_T_ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
        subscribeState&lt;T&gt;(pid)</div></div></div><div class="member-title"><a name="Tell&lt;T>"></a>Tell&lt;T&gt;(ProcessId, T, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tell_T_ProcessId__pid__T__message__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Send a message to a process </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process ID to send to</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Tell</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">ProcessId</span> pid, <span class="ident">T</span> message, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div></div><div style="display:none" id="code-Tell_T_ProcessId__pid__T__message__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
        tell(pid, message, sender)</div></div></div><div class="member-title"><a name="Tell&lt;T>"></a>Tell&lt;T&gt;(ProcessId, T, TimeSpan, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tell_T_ProcessId__pid__T__message__TimeSpan__delayFor__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Send a message at a specified time in the future </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process ID to send to</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayFor</div><div class="arg-type"><span class="ident">TimeSpan</span></div></div><div class="arg-desc">How long to delay sending for</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">Tell</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">ProcessId</span> pid, <span class="ident">T</span> message, <span class="ident">TimeSpan</span> delayFor, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable that you can use to cancel the operation if necessary.  You do not need to call Dispose  for any other reason.</span></div></div></div><div style="display:none" id="code-Tell_T_ProcessId__pid__T__message__TimeSpan__delayFor__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
        tell(pid, message, delayFor, sender)</div></div></div><div class="member-title"><a name="Tell&lt;T>"></a>Tell&lt;T&gt;(ProcessId, T, DateTime, ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tell_T_ProcessId__pid__T__message__DateTime__delayUntil__ProcessId__sender_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Send a message at a specified time in the future </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process ID to send to</div></div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc">Message to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayUntil</div><div class="arg-type"><span class="ident">DateTime</span></div></div><div class="arg-desc">Date and time to send</div></div><div class="arg"><div class="arg-header"><div class="arg-name">sender</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Optional sender override.  The sender is handled automatically if you do not provide one.</div></div><div class="section_title">REMARKS</div><span >This will fail to be accurate across a Daylight Saving Time boundary </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IDisposable</span> <span class="ident">Tell</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">ProcessId</span> pid, <span class="ident">T</span> message, <span class="ident">DateTime</span> delayUntil, <span class="ident">ProcessId</span> sender = <span class="keyword">default</span><span class="ident">ProcessId</span>)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDisposable</span></div><div class="normal"><span >IDisposable that you can use to cancel the operation if necessary.  You do not need to call Dispose  for any other reason.</span></div></div></div><div style="display:none" id="code-Tell_T_ProcessId__pid__T__message__DateTime__delayUntil__ProcessId__sender_"><div class="section_title">SOURCE</div><div class="code">
        tell(pid, message, delayUntil, sender)</div></div></div><div class="member-title"><a name="Unsubscribe"></a>Unsubscribe(ProcessId)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Unsubscribe__ProcessId__pid_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Unsubscribe from a process&#39;s publications </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pid</div><div class="arg-type"><span class="ident">ProcessId</span></div></div><div class="arg-desc">Process to unsub from</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Unsubscribe</span>(<span class="keyword">this</span> <span class="ident">ProcessId</span> pid)</div></div><div style="display:none" id="code-Unsubscribe__ProcessId__pid_"><div class="section_title">SOURCE</div><div class="code">
        unsubscribe(pid)</div></div></div></div></body></html>