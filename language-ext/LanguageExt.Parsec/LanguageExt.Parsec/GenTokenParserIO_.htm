<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt.Parsec/index.htm">LanguageExt.Parsec</a> \ <span class="nav-bar-link" href="GenTokenParserIO_.htm">GenTokenParserIO</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#CharLiteral">CharLiteral</a><a class="nav-link" href="#Colon">Colon</a><a class="nav-link" href="#Comma">Comma</a><a class="nav-link" href="#Decimal">Decimal</a><a class="nav-link" href="#Dot">Dot</a><a class="nav-link" href="#Float">Float</a><a class="nav-link" href="#Hexadecimal">Hexadecimal</a><a class="nav-link" href="#Identifier">Identifier</a><a class="nav-link" href="#Integer">Integer</a><a class="nav-link" href="#Natural">Natural</a><a class="nav-link" href="#NaturalOrFloat">NaturalOrFloat</a><a class="nav-link" href="#Octal">Octal</a><a class="nav-link" href="#Operator">Operator</a><a class="nav-link" href="#Reserved">Reserved</a><a class="nav-link" href="#ReservedOp">ReservedOp</a><a class="nav-link" href="#Semi">Semi</a><a class="nav-link" href="#StringLiteral">StringLiteral</a><a class="nav-link" href="#Symbol">Symbol</a><a class="nav-link" href="#WhiteSpace">WhiteSpace</a><h3 >METHODS</h3><a class="nav-link" href="#Angles&lt;T>">Angles&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#AnglesCommaSep&lt;T>">AnglesCommaSep&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#AnglesCommaSep1&lt;T>">AnglesCommaSep1&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#AnglesSemiSep&lt;T>">AnglesSemiSep&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#AnglesSemiSep1&lt;T>">AnglesSemiSep1&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#Braces&lt;T>">Braces&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#BracesCommaSep&lt;T>">BracesCommaSep&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#BracesCommaSep1&lt;T>">BracesCommaSep1&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#BracesSemiSep&lt;T>">BracesSemiSep&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#BracesSemiSep1&lt;T>">BracesSemiSep1&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#Brackets&lt;T>">Brackets&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#BracketsCommaSep&lt;T>">BracketsCommaSep&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#BracketsCommaSep1&lt;T>">BracketsCommaSep1&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#BracketsSemiSep&lt;T>">BracketsSemiSep&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#BracketsSemiSep1&lt;T>">BracketsSemiSep1&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#CommaSep&lt;T>">CommaSep&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#CommaSep1&lt;T>">CommaSep1&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#Lexeme&lt;T>">Lexeme&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#Parens&lt;T>">Parens&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#ParensCommaSep&lt;T>">ParensCommaSep&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#ParensCommaSep1&lt;T>">ParensCommaSep1&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#ParensSemiSep&lt;T>">ParensSemiSep&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#ParensSemiSep1&lt;T>">ParensSemiSep1&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#SemiSep&lt;T>">SemiSep&lt;T&gt;(Parser&lt;char, T&gt;)</a><a class="nav-link" href="#SemiSep1&lt;T>">SemiSep1&lt;T&gt;(Parser&lt;char, T&gt;)</a></div><div class="content-panel"><h1 >GenTokenParserIO Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">GenTokenParserIO</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt.Parsec</div></div><h2 >Fields</h2><div class="member-title"><a name="CharLiteral"></a>CharLiteral</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >This lexeme parser parses a single literal character. Returns the literal character value. This parsers deals correctly with escape sequences. The literal character is parsed according to the grammar rules defined in the Haskell report (which matches most programming languages quite closely).  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; <span class="ident">CharLiteral</span></div></div></div><div class="member-title"><a name="Colon"></a>Colon</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lexeme parser colon parses the character : and skips any trailing white space. Returns the string &quot;:&quot;.  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">string</span>&gt; <span class="ident">Colon</span></div></div></div><div class="member-title"><a name="Comma"></a>Comma</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lexeme parser comma parses the character , and skips any trailing white space. Returns the string &quot;,&quot;.  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">string</span>&gt; <span class="ident">Comma</span></div></div></div><div class="member-title"><a name="Decimal"></a>Decimal</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Parses a positive whole number in the decimal system. Returns the value of the number.  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; <span class="ident">Decimal</span></div></div></div><div class="member-title"><a name="Dot"></a>Dot</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lexeme parser dot parses the character . and skips any trailing white space. Returns the string &quot;.&quot;.  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">string</span>&gt; <span class="ident">Dot</span></div></div></div><div class="member-title"><a name="Float"></a>Float</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >This lexeme parser parses a floating point value. Returns the value of the number. The number is parsed according to the grammar rules defined in the Haskell report.  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; <span class="ident">Float</span></div></div></div><div class="member-title"><a name="Hexadecimal"></a>Hexadecimal</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Parses a positive whole number in the hexadecimal system. The number should be prefixed with &quot;0x&quot; or &quot;0X&quot;. Returns the value of the number. </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; <span class="ident">Hexadecimal</span></div></div></div><div class="member-title"><a name="Identifier"></a>Identifier</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >This lexeme parser parses a legal identifier. Returns the identifier string. This parser will fail on identifiers that are reserved words. Legal identifier (start) characters and reserved words are defined in the &#39;LanguageDef&#39; that is passed to &#39;makeTokenParser&#39;. An identifier is treated as a single token using &#39;try&#39;. </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">string</span>&gt; <span class="ident">Identifier</span></div></div></div><div class="member-title"><a name="Integer"></a>Integer</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >This lexeme parser parses an integer (a whole number). This parser is like &#39;natural&#39; except that it can be prefixed with sign (i.e. \&#39;-\&#39; or \&#39;+\&#39;). Returns the value of the number. The number can be specified in &#39;decimal&#39;, &#39;hexadecimal&#39; or &#39;octal&#39;. The number is parsed according to the grammar rules in the Haskell report.  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; <span class="ident">Integer</span></div></div></div><div class="member-title"><a name="Natural"></a>Natural</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >This lexeme parser parses a natural number (a positive whole number). Returns the value of the number. The number can be specified in &#39;decimal&#39;, &#39;hexadecimal&#39; or &#39;octal&#39;. The number is parsed according to the grammar rules in the Haskell report.  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; <span class="ident">Natural</span></div></div></div><div class="member-title"><a name="NaturalOrFloat"></a>NaturalOrFloat</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >This lexeme parser parses either &#39;natural&#39; or a &#39;float&#39;. Returns the value of the number. This parsers deals with any overlap in the grammar rules for naturals and floats. The number is parsed according to the grammar rules defined in the Haskell report.  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Either</span>&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt;&gt; <span class="ident">NaturalOrFloat</span></div></div></div><div class="member-title"><a name="Octal"></a>Octal</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Parses a positive whole number in the octal system. The number should be prefixed with &quot;0o&quot; or &quot;0O&quot;. Returns the value of the number.  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; <span class="ident">Octal</span></div></div></div><div class="member-title"><a name="Operator"></a>Operator</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >This lexeme parser parses a legal operator. Returns the name of the operator. This parser will fail on any operators that are reserved operators. Legal operator (start) characters and reserved operators are defined in the &#39;LanguageDef&#39; that is passed to &#39;makeTokenParser&#39;. An operator is treated as a single token using &#39;try&#39;.  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">string</span>&gt; <span class="ident">Operator</span></div></div></div><div class="member-title"><a name="Reserved"></a>Reserved</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The lexeme parser reserved(name) parses a symbol  name, but it also checks that the name is not a prefix of a valid identifier. A reserved word is treated as a single token using &#39;try&#39;.  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Func</span>&lt;<span class="keyword">string</span>, <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">string</span>&gt;&gt; <span class="ident">Reserved</span></div></div></div><div class="member-title"><a name="ReservedOp"></a>ReservedOp</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The lexeme parser reservedOp name parses symbol name, but it also checks that the name is not a prefix of a valid operator. A reservedOp is treated as a single token using &#39;try&#39;.  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Func</span>&lt;<span class="keyword">string</span>, <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Unit</span>&gt;&gt; <span class="ident">ReservedOp</span></div></div></div><div class="member-title"><a name="Semi"></a>Semi</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lexeme parser semi parses the character ; and skips any trailing white space. Returns the string &quot;;&quot;.  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">string</span>&gt; <span class="ident">Semi</span></div></div></div><div class="member-title"><a name="StringLiteral"></a>StringLiteral</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >This lexeme parser parses a literal string. Returns the literal string value. This parsers deals correctly with escape sequences and gaps. The literal string is parsed according to the grammar rules defined in the Haskell report (which matches most programming languages quite closely).  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">string</span>&gt; <span class="ident">StringLiteral</span></div></div></div><div class="member-title"><a name="Symbol"></a>Symbol</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lexeme parser symbol(s) parses &#39;string&#39; s and skips trailing white space.  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Func</span>&lt;<span class="keyword">string</span>, <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="keyword">string</span>&gt;&gt; <span class="ident">Symbol</span></div></div></div><div class="member-title"><a name="WhiteSpace"></a>WhiteSpace</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Parses any white space. White space consists of /zero/ or more occurrences of a &#39;space&#39;, a line comment or a block (multi line) comment. Block comments may be nested. How comments are started and ended is defined in the &#39;LanguageDef&#39; that is passed to &#39;makeTokenParser&#39;.  </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Unit</span>&gt; <span class="ident">WhiteSpace</span></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Angles&lt;T>"></a>Angles&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Angles_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lexeme parser angles(p) parses p enclosed in angle brackets &lt; and &gt;, returning the value of p.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; <span class="ident">Angles</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Angles_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            from o in Symbol(&quot;&lt;&quot;)
            from x in p
            from c in Symbol(&quot;&gt;&quot;)
            select x</div></div></div><div class="member-title"><a name="AnglesCommaSep&lt;T>"></a>AnglesCommaSep&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AnglesCommaSep_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">AnglesCommaSep</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AnglesCommaSep_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Angles(sepBy(p, Comma))</div></div></div><div class="member-title"><a name="AnglesCommaSep1&lt;T>"></a>AnglesCommaSep1&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AnglesCommaSep1_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">AnglesCommaSep1</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AnglesCommaSep1_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Angles(sepBy1(p, Comma))</div></div></div><div class="member-title"><a name="AnglesSemiSep&lt;T>"></a>AnglesSemiSep&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AnglesSemiSep_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">AnglesSemiSep</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AnglesSemiSep_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Angles(sepBy(p, Semi))</div></div></div><div class="member-title"><a name="AnglesSemiSep1&lt;T>"></a>AnglesSemiSep1&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AnglesSemiSep1_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">AnglesSemiSep1</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AnglesSemiSep1_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Angles(sepBy1(p, Semi))</div></div></div><div class="member-title"><a name="Braces&lt;T>"></a>Braces&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Braces_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lexeme parser braces(p) parses p enclosed in braces { and }, returning the value of p.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; <span class="ident">Braces</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Braces_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            from o in Symbol(&quot;{&quot;)
            from x in p
            from c in Symbol(&quot;}&quot;)
            select x</div></div></div><div class="member-title"><a name="BracesCommaSep&lt;T>"></a>BracesCommaSep&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BracesCommaSep_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">BracesCommaSep</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BracesCommaSep_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Braces(sepBy(p, Comma))</div></div></div><div class="member-title"><a name="BracesCommaSep1&lt;T>"></a>BracesCommaSep1&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BracesCommaSep1_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">BracesCommaSep1</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BracesCommaSep1_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Braces(sepBy1(p, Comma))</div></div></div><div class="member-title"><a name="BracesSemiSep&lt;T>"></a>BracesSemiSep&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BracesSemiSep_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">BracesSemiSep</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BracesSemiSep_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Braces(sepBy(p, Semi))</div></div></div><div class="member-title"><a name="BracesSemiSep1&lt;T>"></a>BracesSemiSep1&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BracesSemiSep1_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">BracesSemiSep1</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BracesSemiSep1_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Braces(sepBy1(p, Semi))</div></div></div><div class="member-title"><a name="Brackets&lt;T>"></a>Brackets&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Brackets_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lexeme parser brackets(p) parses p enclosed in brackets [ and ], returning the value of p.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; <span class="ident">Brackets</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Brackets_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            from o in Symbol(&quot;[&quot;)
            from x in p
            from c in Symbol(&quot;]&quot;)
            select x</div></div></div><div class="member-title"><a name="BracketsCommaSep&lt;T>"></a>BracketsCommaSep&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BracketsCommaSep_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">BracketsCommaSep</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BracketsCommaSep_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Brackets(sepBy(p, Comma))</div></div></div><div class="member-title"><a name="BracketsCommaSep1&lt;T>"></a>BracketsCommaSep1&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BracketsCommaSep1_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">BracketsCommaSep1</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BracketsCommaSep1_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Brackets(sepBy1(p, Comma))</div></div></div><div class="member-title"><a name="BracketsSemiSep&lt;T>"></a>BracketsSemiSep&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BracketsSemiSep_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">BracketsSemiSep</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BracketsSemiSep_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Brackets(sepBy(p, Semi))</div></div></div><div class="member-title"><a name="BracketsSemiSep1&lt;T>"></a>BracketsSemiSep1&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BracketsSemiSep1_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">BracketsSemiSep1</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BracketsSemiSep1_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Brackets(sepBy1(p, Semi))</div></div></div><div class="member-title"><a name="CommaSep&lt;T>"></a>CommaSep&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CommaSep_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lexeme parser commaSep(p) parses /zero/ or more occurrences of p separated by &#39;comma&#39;. Returns a list of values returned by p.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">CommaSep</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-CommaSep_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            sepBy(p, Comma)</div></div></div><div class="member-title"><a name="CommaSep1&lt;T>"></a>CommaSep1&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CommaSep1_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lexeme parser commaSep1(p) parses /one/ or more occurrences of p separated by &#39;comma&#39;. Returns a list of values returned by p.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">CommaSep1</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-CommaSep1_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            sepBy1(p, Comma)</div></div></div><div class="member-title"><a name="Lexeme&lt;T>"></a>Lexeme&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Lexeme_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >lexeme(p) first applies parser p and than the &#39;whiteSpace&#39; parser, returning the value of p. Every lexical token (lexeme) is defined using lexeme, this way every parse starts at a point without white space. Parsers that use lexeme are called lexeme parsers in this document.<br/><br/> The only point where the &#39;whiteSpace&#39; parser should be called explicitly is the start of the main parser in order to skip any leading white space. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; <span class="ident">Lexeme</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Lexeme_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            from x in p
            from _ in WhiteSpace
            select x</div></div></div><div class="member-title"><a name="Parens&lt;T>"></a>Parens&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Parens_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lexeme parser parens(p) parses p enclosed in parenthesis, returning the value of p. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; <span class="ident">Parens</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Parens_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            from o in Symbol(&quot;(&quot;)
            from x in p
            from c in Symbol(&quot;)&quot;)
            select x</div></div></div><div class="member-title"><a name="ParensCommaSep&lt;T>"></a>ParensCommaSep&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParensCommaSep_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">ParensCommaSep</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParensCommaSep_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Parens(sepBy(p, Comma))</div></div></div><div class="member-title"><a name="ParensCommaSep1&lt;T>"></a>ParensCommaSep1&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParensCommaSep1_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">ParensCommaSep1</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParensCommaSep1_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Parens(sepBy1(p, Comma))</div></div></div><div class="member-title"><a name="ParensSemiSep&lt;T>"></a>ParensSemiSep&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParensSemiSep_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">ParensSemiSep</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParensSemiSep_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Parens(sepBy(p, Semi))</div></div></div><div class="member-title"><a name="ParensSemiSep1&lt;T>"></a>ParensSemiSep1&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParensSemiSep1_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">ParensSemiSep1</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParensSemiSep1_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            Parens(sepBy1(p, Semi))</div></div></div><div class="member-title"><a name="SemiSep&lt;T>"></a>SemiSep&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SemiSep_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lexeme parser semiSep(p) parses /zero/ or more occurrences of p separated by semi. Returns a list of values returned by p. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">SemiSep</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SemiSep_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            sepBy(p, Semi)</div></div></div><div class="member-title"><a name="SemiSep1&lt;T>"></a>SemiSep1&lt;T&gt;(Parser&lt;char, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SemiSep1_T_Parser_char_T_p_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lexeme parser semiSep1(p) parses /one/ or more occurrences of p separated by &#39;semi&#39;. Returns a list of values returned by p.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">p</div><div class="arg-type"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">SemiSep1</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">T</span>&gt; p)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="keyword">char</span>, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SemiSep1_T_Parser_char_T_p_"><div class="section_title">SOURCE</div><div class="code">
            sepBy1(p, Semi)</div></div></div></div></body></html>