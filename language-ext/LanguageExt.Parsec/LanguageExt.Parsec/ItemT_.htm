<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt.Parsec/index.htm">LanguageExt.Parsec</a> \ <span class="nav-bar-link" href="ItemT_.htm">ItemT</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#anyItem&lt;T>">anyItem&lt;T&gt;()</a><a class="nav-link" href="#item&lt;T>">item&lt;T&gt;(T)</a><a class="nav-link" href="#noneOf&lt;T>">noneOf&lt;T&gt;(T)</a><a class="nav-link" href="#oneOf&lt;T>">oneOf&lt;T&gt;(T)</a><a class="nav-link" href="#satisfy&lt;T>">satisfy&lt;T&gt;(Func&lt;T, bool&gt;)</a><a class="nav-link" href="#str&lt;T>">str&lt;T&gt;(T)</a></div><div class="content-panel"><h1 >ItemT Class</h1><p ><span >Commonly used character parsers. </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">ItemT</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt.Parsec</div></div><h2 >Methods</h2><div class="member-title"><a name="anyItem&lt;T>"></a>anyItem&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-anyItem_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The parser anyChar accepts any kind of character. </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; <span class="ident">anyItem</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-anyItem_T_"><div class="section_title">SOURCE</div><div class="code">
            satisfy&lt;T&gt;(_ =&gt; true)</div></div></div><div class="member-title"><a name="item&lt;T>"></a>item&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-item_T_T__c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >item(c) parses a single I </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; <span class="ident">item</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >The parsed character</span></div></div></div><div style="display:none" id="code-item_T_T__c_"><div class="section_title">SOURCE</div><div class="code">
            satisfy&lt;T&gt;(x =&gt; EqualityComparer&lt;T&gt;.Default.Equals(x,c)).label($&quot;&#39;{c}&#39;&quot;)</div></div></div><div class="member-title"><a name="noneOf&lt;T>"></a>noneOf&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-noneOf_T_T__str_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >As the dual of &#39;oneOf&#39;, noneOf(str) succeeds if the current character not in the supplied list of characters str. <br/><br/>     var consonant = noneOf(&quot;aeiou&quot;) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">str</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; <span class="ident">noneOf</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> str)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >The parsed character.</span></div></div></div><div style="display:none" id="code-noneOf_T_T__str_"><div class="section_title">SOURCE</div><div class="code">
            satisfy&lt;T&gt;(c =&gt; !str.Contains(c))</div></div></div><div class="member-title"><a name="oneOf&lt;T>"></a>oneOf&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-oneOf_T_T__str_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >oneOf(str) succeeds if the current character is in the supplied list of  characters str. Returns the parsed character. See also satisfy </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">str</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; <span class="ident">oneOf</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> str)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-oneOf_T_T__str_"><div class="section_title">SOURCE</div><div class="code">
            satisfy&lt;T&gt;(c =&gt; str.Contains(c))</div></div></div><div class="member-title"><a name="satisfy&lt;T>"></a>satisfy&lt;T&gt;(Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-satisfy_T_Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The parser satisfy(pred) succeeds for any character for which the supplied function pred returns &#39;True&#39;.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; <span class="ident">satisfy</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >The character that is actually parsed.</span></div></div></div><div style="display:none" id="code-satisfy_T_Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            inp =&gt;
            {
                if (inp.Index &gt;= inp.EndIndex)
                {
                    return EmptyError&lt;T, T&gt;(ParserError.SysUnexpect(inp.Pos, &quot;end of stream&quot;));
                }
                else
                {
                    var ns = newstate(inp);

                    if (ns.Tag == ResultTag.Consumed)
                    {
                        if (pred(ns.Reply.Result))
                        {
                            return ns;
                        }
                        else
                        {
                            return EmptyError&lt;T, T&gt;(ParserError.SysUnexpect(inp.Pos, $&quot;\&quot;{ns.Reply.Result}\&quot;&quot;));
                        }
                    }
                    else
                    {
                        return EmptyError&lt;T, T&gt;(ParserError.SysUnexpect(inp.Pos, &quot;end of stream&quot;));
                    }
                }
            }</div></div></div><div class="member-title"><a name="str&lt;T>"></a>str&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-str_T_T__s_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Parse a string </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">s</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Parser</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; <span class="ident">str</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> s)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Parser</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-str_T_T__s_"><div class="section_title">SOURCE</div><div class="code">
            chain(s.Map(c =&gt; item(c))).Map(x =&gt; x.ToArray())</div></div></div></div></body></html>