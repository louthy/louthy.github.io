<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="..//index.htm"></a> \ <span class="nav-bar-link" href="TryOptionExtensionsAsync_.htm">TryOptionExtensionsAsync</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#AddAsync&lt;NUM, A>">AddAsync&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#AsEnumerableAsync&lt;A>">AsEnumerableAsync&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#AsStringAsync&lt;A>">AsStringAsync&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;A, S>">BiFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;A, S>">BiFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;A, S>">BiFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;A, S>">BiFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#BiMapAsync&lt;A, B>">BiMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#BiMapAsync&lt;A, B>">BiMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#BiMapAsync&lt;A, B>">BiMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#BiMapAsync&lt;A, B>">BiMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#CountAsync&lt;A>">CountAsync&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#DivideAsync&lt;NUM, A>">DivideAsync&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#ExistsAsync&lt;A>">ExistsAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ExistsAsync&lt;A>">ExistsAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)</a><a class="nav-link" href="#FilterAsync&lt;A>">FilterAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterAsync&lt;A>">FilterAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)</a><a class="nav-link" href="#FoldAsync&lt;A, S>">FoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldAsync&lt;A, S>">FoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#ForAllAsync&lt;A>">ForAllAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAllAsync&lt;A>">ForAllAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)</a><a class="nav-link" href="#IfFailAsync&lt;A>">IfFailAsync&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#IfFailThrowAsync&lt;A>">IfFailThrowAsync&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#IfNoneOrFailAsync&lt;A>">IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, Action)</a><a class="nav-link" href="#IfNoneOrFailAsync&lt;A>">IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, A)</a><a class="nav-link" href="#IfNoneOrFailAsync&lt;A>">IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A&gt;)</a><a class="nav-link" href="#IfNoneOrFailAsync&lt;A>">IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;Task&lt;A&gt;&gt;)</a><a class="nav-link" href="#IfNoneOrFailAsync&lt;A>">IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A&gt;, Func&lt;Exception, A&gt;)</a><a class="nav-link" href="#IfNoneOrFailAsync&lt;A>">IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;Task&lt;A&gt;&gt;, Func&lt;Exception, A&gt;)</a><a class="nav-link" href="#IfNoneOrFailAsync&lt;A>">IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A&gt;, Func&lt;Exception, Task&lt;A&gt;&gt;)</a><a class="nav-link" href="#IfNoneOrFailAsync&lt;A>">IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;Task&lt;A&gt;&gt;, Func&lt;Exception, Task&lt;A&gt;&gt;)</a><a class="nav-link" href="#IfSomeAsync&lt;A>">IfSomeAsync&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#IterAsync&lt;A>">IterAsync&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#MapAsync&lt;A, R>">MapAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;)</a><a class="nav-link" href="#MapAsync&lt;A, R>">MapAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, R>">MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, R>">MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, R>">MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, R)</a><a class="nav-link" href="#MatchAsync&lt;A, R>">MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, R>">MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, R>">MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, R>">MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, R>">MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A>">MatchAsync&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;, Action)</a><a class="nav-link" href="#MatchAsync&lt;A>">MatchAsync&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;, Action, Action&lt;Exception&gt;)</a><a class="nav-link" href="#ProductAsync&lt;NUM, A>">ProductAsync&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#Select&lt;A, U>">Select&lt;A, U&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;U&gt;&gt;)</a><a class="nav-link" href="#SubtractAsync&lt;NUM, A>">SubtractAsync&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#SumAsync">SumAsync(TryOption&lt;int&gt;)</a><a class="nav-link" href="#ToArrayAsync&lt;A>">ToArrayAsync&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ToAsync&lt;A>">ToAsync&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ToEitherAsync&lt;A>">ToEitherAsync&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ToEitherUnsafeAsync&lt;A>">ToEitherUnsafeAsync&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ToListAsync&lt;A>">ToListAsync&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ToNullableAsync&lt;A>">ToNullableAsync&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ToOptionAsync&lt;A>">ToOptionAsync&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ToOptionUnsafeAsync&lt;A>">ToOptionUnsafeAsync&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#TriFoldAsync&lt;A, S>">TriFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#TriFoldAsync&lt;A, S>">TriFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#TriFoldAsync&lt;A, S>">TriFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#TriFoldAsync&lt;A, S>">TriFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#TriFoldAsync&lt;A, S>">TriFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#TriFoldAsync&lt;A, S>">TriFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#TriFoldAsync&lt;A, S>">TriFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#TriMapAsync&lt;A, B>">TriMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#TriMapAsync&lt;A, B>">TriMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#TriMapAsync&lt;A, B>">TriMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#TriMapAsync&lt;A, B>">TriMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#TriMapAsync&lt;A, B>">TriMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#TriMapAsync&lt;A, B>">TriMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#TriMapAsync&lt;A, B>">TriMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#WhereAsync&lt;A>">WhereAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#WhereAsync&lt;A>">WhereAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)</a></div><div class="content-panel"><h1 >TryOptionExtensionsAsync Class</h1><p ><span >Extension methods for the Try monad </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">TryOptionExtensionsAsync</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div></div></div><h2 >Methods</h2><div class="member-title"><a name="AddAsync&lt;NUM, A>"></a>AddAsync&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddAsync_NUM_A_TryOption_A_lhs__TryOption_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound value of Try(x) to Try(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">AddAsync</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AddAsync_NUM_A_TryOption_A_lhs__TryOption_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
        lhs.ToAsync().Add&lt;NUM, A&gt;(rhs.ToAsync())</div></div></div><div class="member-title"><a name="AsEnumerableAsync&lt;A>"></a>AsEnumerableAsync&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerableAsync_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">AsEnumerableAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsEnumerableAsync_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().AsEnumerable()</div></div></div><div class="member-title"><a name="AsStringAsync&lt;A>"></a>AsStringAsync&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsStringAsync_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">string</span>&gt; <span class="ident">AsStringAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">string</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsStringAsync_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().AsString()</div></div></div><div class="member-title"><a name="BiFoldAsync&lt;A, S>"></a>BiFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_S_Succ__Func_S_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-BiFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_S_Succ__Func_S_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiFold(state, Succ, Fail)</div></div></div><div class="member-title"><a name="BiFoldAsync&lt;A, S>"></a>BiFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_Task&lt;S>_Succ__Func_S_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-BiFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_Task&lt;S>_Succ__Func_S_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiFold(state, Succ, Fail)</div></div></div><div class="member-title"><a name="BiFoldAsync&lt;A, S>"></a>BiFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_S_Succ__Func_S_Task&lt;S>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-BiFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_S_Succ__Func_S_Task&lt;S>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiFold(state, Succ, Fail)</div></div></div><div class="member-title"><a name="BiFoldAsync&lt;A, S>"></a>BiFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_Task&lt;S>_Succ__Func_S_Task&lt;S>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-BiFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_Task&lt;S>_Succ__Func_S_Task&lt;S>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiFold(state, Succ, Fail)</div></div></div><div class="member-title"><a name="BiMapAsync&lt;A, B>"></a>BiMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMapAsync_A_B_TryOption_A_self__Func_A_B_Succ__Func_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-BiMapAsync_A_B_TryOption_A_self__Func_A_B_Succ__Func_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiMap(Succ, Fail)</div></div></div><div class="member-title"><a name="BiMapAsync&lt;A, B>"></a>BiMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMapAsync_A_B_TryOption_A_self__Func_A_Task&lt;B>_Succ__Func_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-BiMapAsync_A_B_TryOption_A_self__Func_A_Task&lt;B>_Succ__Func_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiMap(Succ, Fail)</div></div></div><div class="member-title"><a name="BiMapAsync&lt;A, B>"></a>BiMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMapAsync_A_B_TryOption_A_self__Func_A_B_Succ__Func_Task&lt;B>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-BiMapAsync_A_B_TryOption_A_self__Func_A_B_Succ__Func_Task&lt;B>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiMap(Succ, Fail)</div></div></div><div class="member-title"><a name="BiMapAsync&lt;A, B>"></a>BiMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMapAsync_A_B_TryOption_A_self__Func_A_Task&lt;B>_Succ__Func_Task&lt;B>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-BiMapAsync_A_B_TryOption_A_self__Func_A_Task&lt;B>_Succ__Func_Task&lt;B>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiMap(Succ, Fail)</div></div></div><div class="member-title"><a name="CountAsync&lt;A>"></a>CountAsync&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountAsync_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Counts the number of bound values.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >TrTry computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">CountAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"><span >1 if the Try computation is successful, 0 otherwise.</span></div></div></div><div style="display:none" id="code-CountAsync_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Count()</div></div></div><div class="member-title"><a name="DivideAsync&lt;NUM, A>"></a>DivideAsync&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideAsync_NUM_A_TryOption_A_lhs__TryOption_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Multiply the bound value of Try(x) and Try(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">DivideAsync</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideAsync_NUM_A_TryOption_A_lhs__TryOption_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
        lhs.ToAsync().Divide&lt;NUM, A&gt;(rhs.ToAsync())</div></div></div><div class="member-title"><a name="ExistsAsync&lt;A>"></a>ExistsAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsAsync_A_TryOption_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for any value of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ExistsAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value.  False otherwise.</span></div></div></div><div style="display:none" id="code-ExistsAsync_A_TryOption_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Exists(pred)</div></div></div><div class="member-title"><a name="ExistsAsync&lt;A>"></a>ExistsAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsAsync_A_TryOption_A_self__Func_A_Task&lt;bool>_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for any value of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ExistsAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value.  False otherwise.</span></div></div></div><div style="display:none" id="code-ExistsAsync_A_TryOption_A_self__Func_A_Task&lt;bool>_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Exists(pred)</div></div></div><div class="member-title"><a name="FilterAsync&lt;A>"></a>FilterAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterAsync_A_TryOption_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">FilterAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FilterAsync_A_TryOption_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Filter(pred)</div></div></div><div class="member-title"><a name="FilterAsync&lt;A>"></a>FilterAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterAsync_A_TryOption_A_self__Func_A_Task&lt;bool>_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">FilterAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FilterAsync_A_TryOption_A_self__Func_A_Task&lt;bool>_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Filter(pred)</div></div></div><div class="member-title"><a name="FoldAsync&lt;A, S>"></a>FoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">FoldAsync</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-FoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_S_folder_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Fold(state, folder)</div></div></div><div class="member-title"><a name="FoldAsync&lt;A, S>"></a>FoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_Task&lt;S>_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">FoldAsync</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-FoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_Task&lt;S>_folder_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Fold(state, folder)</div></div></div><div class="member-title"><a name="ForAllAsync&lt;A>"></a>ForAllAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllAsync_A_TryOption_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for all values of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ForAllAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value, or if the Try computation fails.  False otherwise.</span></div></div></div><div style="display:none" id="code-ForAllAsync_A_TryOption_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().ForAll(pred)</div></div></div><div class="member-title"><a name="ForAllAsync&lt;A>"></a>ForAllAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllAsync_A_TryOption_A_self__Func_A_Task&lt;bool>_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for all values of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ForAllAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value, or if the Try computation fails.  False otherwise.</span></div></div></div><div style="display:none" id="code-ForAllAsync_A_TryOption_A_self__Func_A_Task&lt;bool>_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().ForAll(pred)</div></div></div><div class="member-title"><a name="IfFailAsync&lt;A>"></a>IfFailAsync&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfFailAsync_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Provides a fluent exception matching interface which is invoked when the Try fails. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ExceptionMatchOptionalAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfFailAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ExceptionMatchOptionalAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Fluent exception matcher</span></div></div></div><div style="display:none" id="code-IfFailAsync_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().IfFail()</div></div></div><div class="member-title"><a name="IfFailThrowAsync&lt;A>"></a>IfFailThrowAsync&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfFailThrowAsync_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfFailThrowAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfFailThrowAsync_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().IfFailThrow()</div></div></div><div class="member-title"><a name="IfNoneOrFailAsync&lt;A>"></a>IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFailAsync_A_TryOption_A_self__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the Try is in a Fail or None state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >Delegate to invoke if successful</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IfNoneOrFailAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span> None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfNoneOrFailAsync_A_TryOption_A_self__Action__None_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().IfNoneOrFail(None)</div></div></div><div class="member-title"><a name="IfNoneOrFailAsync&lt;A>"></a>IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFailAsync_A_TryOption_A_self__A__defaultValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return a default value if the Try fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultValue</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc"><span >Default value to use on failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFailAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">A</span> defaultValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >failValue on failure, the result of the Try otherwise</span></div></div></div><div style="display:none" id="code-IfNoneOrFailAsync_A_TryOption_A_self__A__defaultValue_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().IfNoneOrFail(defaultValue)</div></div></div><div class="member-title"><a name="IfNoneOrFailAsync&lt;A>"></a>IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFailAsync_A_TryOption_A_self__Func_A_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the Try fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke on failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFailAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Result of the invocation of Fail on failure, the result of the Try otherwise</span></div></div></div><div style="display:none" id="code-IfNoneOrFailAsync_A_TryOption_A_self__Func_A_None_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().IfNoneOrFail(None)</div></div></div><div class="member-title"><a name="IfNoneOrFailAsync&lt;A>"></a>IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;Task&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFailAsync_A_TryOption_A_self__Func_Task&lt;A>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the Try fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke on failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFailAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Result of the invocation of Fail on failure, the result of the Try otherwise</span></div></div></div><div style="display:none" id="code-IfNoneOrFailAsync_A_TryOption_A_self__Func_Task&lt;A>_None_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().IfNoneOrFail(None)</div></div></div><div class="member-title"><a name="IfNoneOrFailAsync&lt;A>"></a>IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A&gt;, Func&lt;Exception, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFailAsync_A_TryOption_A_self__Func_A_None__Func_Exception_A_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke delegates based on None or Failed stateds </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the result is None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the result is Fail</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFailAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">A</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Success value, or the result of the None or Failed delegate</span></div></div></div><div style="display:none" id="code-IfNoneOrFailAsync_A_TryOption_A_self__Func_A_None__Func_Exception_A_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.ToAsync().IfNoneOrFail(None, Fail)</div></div></div><div class="member-title"><a name="IfNoneOrFailAsync&lt;A>"></a>IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;Task&lt;A&gt;&gt;, Func&lt;Exception, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFailAsync_A_TryOption_A_self__Func_Task&lt;A>_None__Func_Exception_A_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke delegates based on None or Failed stateds </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the result is None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the result is Fail</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFailAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">A</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Success value, or the result of the None or Failed delegate</span></div></div></div><div style="display:none" id="code-IfNoneOrFailAsync_A_TryOption_A_self__Func_Task&lt;A>_None__Func_Exception_A_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.ToAsync().IfNoneOrFail(None, Fail)</div></div></div><div class="member-title"><a name="IfNoneOrFailAsync&lt;A>"></a>IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A&gt;, Func&lt;Exception, Task&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFailAsync_A_TryOption_A_self__Func_A_None__Func_Exception_Task&lt;A>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke delegates based on None or Failed stateds </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the result is None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the result is Fail</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFailAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Success value, or the result of the None or Failed delegate</span></div></div></div><div style="display:none" id="code-IfNoneOrFailAsync_A_TryOption_A_self__Func_A_None__Func_Exception_Task&lt;A>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.ToAsync().IfNoneOrFail(None, Fail)</div></div></div><div class="member-title"><a name="IfNoneOrFailAsync&lt;A>"></a>IfNoneOrFailAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;Task&lt;A&gt;&gt;, Func&lt;Exception, Task&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFailAsync_A_TryOption_A_self__Func_Task&lt;A>_None__Func_Exception_Task&lt;A>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke delegates based on None or Failed stateds </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the result is None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the result is Fail</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFailAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Success value, or the result of the None or Failed delegate</span></div></div></div><div style="display:none" id="code-IfNoneOrFailAsync_A_TryOption_A_self__Func_Task&lt;A>_None__Func_Exception_Task&lt;A>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.ToAsync().IfNoneOrFail(None, Fail)</div></div></div><div class="member-title"><a name="IfSomeAsync&lt;A>"></a>IfSomeAsync&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfSomeAsync_A_TryOption_A_self__Action_A_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the Try returns a value successfully </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if successful</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IfSomeAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfSomeAsync_A_TryOption_A_self__Action_A_Some_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().IfSome(Some)</div></div></div><div class="member-title"><a name="IterAsync&lt;A>"></a>IterAsync&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterAsync_A_TryOption_A_self__Action_A_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply Try values to a Try function of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IterAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; action)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"><span >Returns the result of applying the Try arguments to the Try function</span></div></div></div><div style="display:none" id="code-IterAsync_A_TryOption_A_self__Action_A_action_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Iter(action)</div></div></div><div class="member-title"><a name="MapAsync&lt;A, R>"></a>MapAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapAsync_A_R_TryOption_A_self__Func_A_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-MapAsync_A_R_TryOption_A_self__Func_A_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Map(mapper)</div></div></div><div class="member-title"><a name="MapAsync&lt;A, R>"></a>MapAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-MapAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_mapper_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Map(mapper)</div></div></div><div class="member-title"><a name="MatchAsync&lt;A, R>"></a>MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_R_TryOption_A_self__Func_A_R_Succ__Func_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ or Fail delegates</span></div></div></div><div style="display:none" id="code-MatchAsync_A_R_TryOption_A_self__Func_A_R_Succ__Func_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Succ, Fail)</div></div></div><div class="member-title"><a name="MatchAsync&lt;A, R>"></a>MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_R_TryOption_A_self__Func_A_R_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ or Fail delegates</span></div></div></div><div style="display:none" id="code-MatchAsync_A_R_TryOption_A_self__Func_A_R_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="MatchAsync&lt;A, R>"></a>MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_R_TryOption_A_self__Func_A_R_Succ__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Default value to use if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ delegate or the Fail value</span></div></div></div><div style="display:none" id="code-MatchAsync_A_R_TryOption_A_self__Func_A_R_Succ__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Succ, Fail)</div></div></div><div class="member-title"><a name="MatchAsync&lt;A, R>"></a>MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-MatchAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="MatchAsync&lt;A, R>"></a>MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_Succ__Func_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-MatchAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_Succ__Func_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Succ, Fail)</div></div></div><div class="member-title"><a name="MatchAsync&lt;A, R>"></a>MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Some, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-MatchAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="MatchAsync&lt;A, R>"></a>MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_R_TryOption_A_self__Func_A_R_Succ__Func_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, Fail delegate</span></div></div></div><div style="display:none" id="code-MatchAsync_A_R_TryOption_A_self__Func_A_R_Succ__Func_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Succ, Fail)</div></div></div><div class="member-title"><a name="MatchAsync&lt;A, R>"></a>MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_R_TryOption_A_self__Func_A_R_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Some, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-MatchAsync_A_R_TryOption_A_self__Func_A_R_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="MatchAsync&lt;A>"></a>MatchAsync&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_TryOption_A_self__Action_A_Succ__Action__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Succ, <span class="ident">Action</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_A_TryOption_A_self__Action_A_Succ__Action__Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Succ, Fail)</div></div></div><div class="member-title"><a name="MatchAsync&lt;A>"></a>MatchAsync&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;, Action, Action&lt;Exception&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_TryOption_A_self__Action_A_Some__Action__None__Action_Exception_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some, <span class="ident">Action</span> None, <span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_A_TryOption_A_self__Action_A_Some__Action__None__Action_Exception_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="ProductAsync&lt;NUM, A>"></a>ProductAsync&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductAsync_NUM_A_TryOption_A_lhs__TryOption_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Multiply the bound value of Try(x) and Try(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ProductAsync</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductAsync_NUM_A_TryOption_A_lhs__TryOption_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
        lhs.ToAsync().Product&lt;NUM, A&gt;(rhs.ToAsync())</div></div></div><div class="member-title"><a name="Select&lt;A, U>"></a>Select&lt;A, U&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;U&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_A_U_TryOption_A_self__Func_A_Task&lt;U>_select_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">select</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">U</span>&gt; <span class="ident">Select</span>&lt;<span class="ident">A</span>, <span class="ident">U</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">U</span>&gt;&gt; select)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">U</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Select_A_U_TryOption_A_self__Func_A_Task&lt;U>_select_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Select(select)</div></div></div><div class="member-title"><a name="SubtractAsync&lt;NUM, A>"></a>SubtractAsync&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractAsync_NUM_A_TryOption_A_lhs__TryOption_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the subtract of the bound value of Try(x) and Try(y).  If either of  the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">SubtractAsync</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractAsync_NUM_A_TryOption_A_lhs__TryOption_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
        lhs.ToAsync().Subtract&lt;NUM, A&gt;(rhs.ToAsync())</div></div></div><div class="member-title"><a name="SumAsync"></a>SumAsync(TryOption&lt;int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumAsync__TryOption_int_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="keyword">int</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">SumAsync</span>(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="keyword">int</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SumAsync__TryOption_int_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Sum()</div></div></div><div class="member-title"><a name="ToArrayAsync&lt;A>"></a>ToArrayAsync&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToArrayAsync_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToArrayAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToArrayAsync_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().ToArray()</div></div></div><div class="member-title"><a name="ToAsync&lt;A>"></a>ToAsync&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToAsync_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Converts this TryOption to a TryOptionAsync </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >This</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Asynchronous TryOption</span></div></div></div><div style="display:none" id="code-ToAsync_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
        Task.Run(() =&gt; self.Try())</div></div></div><div class="member-title"><a name="ToEitherAsync&lt;A>"></a>ToEitherAsync&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEitherAsync_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;&gt; <span class="ident">ToEitherAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToEitherAsync_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().ToEither()</div></div></div><div class="member-title"><a name="ToEitherUnsafeAsync&lt;A>"></a>ToEitherUnsafeAsync&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEitherUnsafeAsync_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;&gt; <span class="ident">ToEitherUnsafeAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToEitherUnsafeAsync_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().ToEitherUnsafe()</div></div></div><div class="member-title"><a name="ToListAsync&lt;A>"></a>ToListAsync&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToListAsync_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToListAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToListAsync_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().ToList()</div></div></div><div class="member-title"><a name="ToNullableAsync&lt;A>"></a>ToNullableAsync&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToNullableAsync_A_TryOption_A_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Try type to a Nullable of A </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to convert</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>?&gt; <span class="ident">ToNullableAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>?&gt;</div><div class="normal"><span >Nullable of A</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">A</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-ToNullableAsync_A_TryOption_A_ma_"><div class="section_title">SOURCE</div><div class="code">
        ma.ToAsync().ToNullable()</div></div></div><div class="member-title"><a name="ToOptionAsync&lt;A>"></a>ToOptionAsync&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToOptionAsync_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToOptionAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToOptionAsync_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().ToOption()</div></div></div><div class="member-title"><a name="ToOptionUnsafeAsync&lt;A>"></a>ToOptionUnsafeAsync&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToOptionUnsafeAsync_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToOptionUnsafeAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToOptionUnsafeAsync_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().ToOptionUnsafe()</div></div></div><div class="member-title"><a name="TriFoldAsync&lt;A, S>"></a>TriFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_S_Some__Func_S_S_None__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFoldAsync</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_S_Some__Func_S_S_None__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriFold(state, Some, None, Fail)</div></div></div><div class="member-title"><a name="TriFoldAsync&lt;A, S>"></a>TriFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_S_None__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFoldAsync</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_S_None__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriFold(state, Some, None, Fail)</div></div></div><div class="member-title"><a name="TriFoldAsync&lt;A, S>"></a>TriFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_S_Some__Func_S_Task&lt;S>_None__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFoldAsync</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_S_Some__Func_S_Task&lt;S>_None__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriFold(state, Some, None, Fail)</div></div></div><div class="member-title"><a name="TriFoldAsync&lt;A, S>"></a>TriFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_S_Some__Func_S_S_None__Func_S_Exception_Task&lt;S>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFoldAsync</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_S_Some__Func_S_S_None__Func_S_Exception_Task&lt;S>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriFold(state, Some, None, Fail)</div></div></div><div class="member-title"><a name="TriFoldAsync&lt;A, S>"></a>TriFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Task&lt;S>_None__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFoldAsync</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Task&lt;S>_None__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriFold(state, Some, None, Fail)</div></div></div><div class="member-title"><a name="TriFoldAsync&lt;A, S>"></a>TriFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_S_Some__Func_S_Task&lt;S>_None__Func_S_Exception_Task&lt;S>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFoldAsync</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_S_Some__Func_S_Task&lt;S>_None__Func_S_Exception_Task&lt;S>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriFold(state, Some, None, Fail)</div></div></div><div class="member-title"><a name="TriFoldAsync&lt;A, S>"></a>TriFoldAsync&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Task&lt;S>_None__Func_S_Exception_Task&lt;S>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFoldAsync</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFoldAsync_A_S_TryOption_A_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Task&lt;S>_None__Func_S_Exception_Task&lt;S>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriFold(state, Some, None, Fail)</div></div></div><div class="member-title"><a name="TriMapAsync&lt;A, B>"></a>TriMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMapAsync_A_B_TryOption_A_self__Func_A_B_Some__Func_B_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the None to the desired bound result type</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMapAsync_A_B_TryOption_A_self__Func_A_B_Some__Func_B_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriMap(Some, None, Fail)</div></div></div><div class="member-title"><a name="TriMapAsync&lt;A, B>"></a>TriMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMapAsync_A_B_TryOption_A_self__Func_A_Task&lt;B>_Some__Func_B_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the None to the desired bound result type</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMapAsync_A_B_TryOption_A_self__Func_A_Task&lt;B>_Some__Func_B_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriMap(Some, None, Fail)</div></div></div><div class="member-title"><a name="TriMapAsync&lt;A, B>"></a>TriMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMapAsync_A_B_TryOption_A_self__Func_A_B_Some__Func_Task&lt;B>_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the None to the desired bound result type</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMapAsync_A_B_TryOption_A_self__Func_A_B_Some__Func_Task&lt;B>_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriMap(Some, None, Fail)</div></div></div><div class="member-title"><a name="TriMapAsync&lt;A, B>"></a>TriMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMapAsync_A_B_TryOption_A_self__Func_A_B_Some__Func_B_None__Func_Exception_Task&lt;B>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the None to the desired bound result type</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMapAsync_A_B_TryOption_A_self__Func_A_B_Some__Func_B_None__Func_Exception_Task&lt;B>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriMap(Some, None, Fail)</div></div></div><div class="member-title"><a name="TriMapAsync&lt;A, B>"></a>TriMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMapAsync_A_B_TryOption_A_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the None to the desired bound result type</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMapAsync_A_B_TryOption_A_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriMap(Some, None, Fail)</div></div></div><div class="member-title"><a name="TriMapAsync&lt;A, B>"></a>TriMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMapAsync_A_B_TryOption_A_self__Func_A_B_Some__Func_Task&lt;B>_None__Func_Exception_Task&lt;B>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the None to the desired bound result type</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMapAsync_A_B_TryOption_A_self__Func_A_B_Some__Func_Task&lt;B>_None__Func_Exception_Task&lt;B>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriMap(Some, None, Fail)</div></div></div><div class="member-title"><a name="TriMapAsync&lt;A, B>"></a>TriMapAsync&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMapAsync_A_B_TryOption_A_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None__Func_Exception_Task&lt;B>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the None to the desired bound result type</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMapAsync_A_B_TryOption_A_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None__Func_Exception_Task&lt;B>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriMap(Some, None, Fail)</div></div></div><div class="member-title"><a name="WhereAsync&lt;A>"></a>WhereAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-WhereAsync_A_TryOption_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">WhereAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-WhereAsync_A_TryOption_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Where(pred)</div></div></div><div class="member-title"><a name="WhereAsync&lt;A>"></a>WhereAsync&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-WhereAsync_A_TryOption_A_self__Func_A_Task&lt;bool>_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">WhereAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-WhereAsync_A_TryOption_A_self__Func_A_Task&lt;bool>_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Where(pred)</div></div></div></div></body></html>