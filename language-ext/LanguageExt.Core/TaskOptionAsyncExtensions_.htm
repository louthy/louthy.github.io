<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="..//index.htm"></a> \ <span class="nav-bar-link" href="TaskOptionAsyncExtensions_.htm">TaskOptionAsyncExtensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#ActionAsync&lt;A, B>">ActionAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Option&lt;B&gt;)</a><a class="nav-link" href="#AddAsync&lt;NUM, A>">AddAsync&lt;NUM, A&gt;(Task&lt;Option&lt;A&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#ApplyAsync&lt;A, B, C>">ApplyAsync&lt;A, B, C&gt;(Option&lt;Func&lt;A, B, C&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;, Option&lt;B&gt;)</a><a class="nav-link" href="#ApplyAsync&lt;A, B, C>">ApplyAsync&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Task&lt;Option&lt;A&gt;&gt;, Option&lt;B&gt;)</a><a class="nav-link" href="#ApplyAsync&lt;A, B, C>">ApplyAsync&lt;A, B, C&gt;(Option&lt;Func&lt;A, B, C&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#ApplyAsync&lt;A, B, C>">ApplyAsync&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#ApplyAsync&lt;A, B, C>">ApplyAsync&lt;A, B, C&gt;(Option&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#ApplyAsync&lt;A, B, C>">ApplyAsync&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#ApplyAsync&lt;A, B>">ApplyAsync&lt;A, B&gt;(Option&lt;Func&lt;A, B&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#ApplyAsync&lt;A, B>">ApplyAsync&lt;A, B&gt;(Func&lt;A, B&gt;, Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#AsEnumerableAsync&lt;A>">AsEnumerableAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#BiExistsAsync&lt;A>">BiExistsAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)</a><a class="nav-link" href="#BiExistsAsync&lt;A>">BiExistsAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;S, A>">BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;S, A>">BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Unit, S&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;S, A>">BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;S, A>">BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Unit, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;S, A>">BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;S, A>">BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;S, A>">BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;S, A>">BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#BiForAllAsync&lt;A>">BiForAllAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)</a><a class="nav-link" href="#BiForAllAsync&lt;A>">BiForAllAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#BiIterAsync&lt;A>">BiIterAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Action&lt;A&gt;, Action&lt;Unit&gt;)</a><a class="nav-link" href="#BiIterAsync&lt;A>">BiIterAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Action&lt;A&gt;, Action)</a><a class="nav-link" href="#BiMapAsync&lt;A, B>">BiMapAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;Unit, B&gt;)</a><a class="nav-link" href="#BiMapAsync&lt;A, B>">BiMapAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#BindAsync&lt;A, B>">BindAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Option&lt;B&gt;&gt;)</a><a class="nav-link" href="#BindAsync&lt;A, B>">BindAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, OptionAsync&lt;B&gt;&gt;)</a><a class="nav-link" href="#CountAsync&lt;A>">CountAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#DivideAsync&lt;NUM, A>">DivideAsync&lt;NUM, A&gt;(Task&lt;Option&lt;A&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#ExistsAsync&lt;A>">ExistsAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterAsync&lt;A>">FilterAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FoldAsync&lt;S, A>">FoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldAsync&lt;S, A>">FoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#FoldBackAsync&lt;S, A>">FoldBackAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackAsync&lt;S, A>">FoldBackAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#ForAllAsync&lt;A>">ForAllAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#IfNoneAsync&lt;A>">IfNoneAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A&gt;)</a><a class="nav-link" href="#IfNoneAsync&lt;A>">IfNoneAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;Task&lt;A&gt;&gt;)</a><a class="nav-link" href="#IfNoneAsync&lt;A>">IfNoneAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, A)</a><a class="nav-link" href="#IfNoneUnsafeAsync&lt;A>">IfNoneUnsafeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A&gt;)</a><a class="nav-link" href="#IfNoneUnsafeAsync&lt;A>">IfNoneUnsafeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;Task&lt;A&gt;&gt;)</a><a class="nav-link" href="#IfNoneUnsafeAsync&lt;A>">IfNoneUnsafeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, A)</a><a class="nav-link" href="#IfSomeAsync&lt;A>">IfSomeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#IfSomeAsync&lt;A>">IfSomeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Task&lt;Unit&gt;&gt;)</a><a class="nav-link" href="#IfSomeAsync&lt;A>">IfSomeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Task&gt;)</a><a class="nav-link" href="#IfSomeAsync&lt;A>">IfSomeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Unit&gt;)</a><a class="nav-link" href="#IterAsync&lt;A>">IterAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#MapAsync&lt;A, B>">MapAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, B>">MatchAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, B>">MatchAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, B>">MatchAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, B>">MatchAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A>">MatchAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Action&lt;A&gt;, Action)</a><a class="nav-link" href="#MatchUnsafeAsync&lt;A, B>">MatchUnsafeAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#MatchUnsafeAsync&lt;A, B>">MatchUnsafeAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#MatchUnsafeAsync&lt;A, B>">MatchUnsafeAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#MatchUnsafeAsync&lt;A, B>">MatchUnsafeAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#MatchUntypedAsync&lt;A, R>">MatchUntypedAsync&lt;A, R&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;object, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchUntypedAsync&lt;A, R>">MatchUntypedAsync&lt;A, R&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;object, Task&lt;R&gt;&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchUntypedAsync&lt;A, R>">MatchUntypedAsync&lt;A, R&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;object, R&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchUntypedAsync&lt;A, R>">MatchUntypedAsync&lt;A, R&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;object, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#ProductAsync&lt;NUM, A>">ProductAsync&lt;NUM, A&gt;(Task&lt;Option&lt;A&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#SubtractAsync&lt;NUM, A>">SubtractAsync&lt;NUM, A&gt;(Task&lt;Option&lt;A&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#ToArrayAsync&lt;A>">ToArrayAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#ToAsync&lt;A>">ToAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#ToEitherAsync&lt;L, A>">ToEitherAsync&lt;L, A&gt;(Task&lt;Option&lt;A&gt;&gt;, L)</a><a class="nav-link" href="#ToEitherAsync&lt;L, A>">ToEitherAsync&lt;L, A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;L&gt;)</a><a class="nav-link" href="#ToEitherUnsafeAsync&lt;L, A>">ToEitherUnsafeAsync&lt;L, A&gt;(Task&lt;Option&lt;A&gt;&gt;, L)</a><a class="nav-link" href="#ToEitherUnsafeAsync&lt;L, A>">ToEitherUnsafeAsync&lt;L, A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;L&gt;)</a><a class="nav-link" href="#ToListAsync&lt;A>">ToListAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#ToOptionUnsafeAsync&lt;A>">ToOptionUnsafeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#ToSeqAsync&lt;A>">ToSeqAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#ToTryAsync&lt;A>">ToTryAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#ToTryOptionAsync&lt;A>">ToTryOptionAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)</a></div><div class="content-panel"><h1 >TaskOptionAsyncExtensions Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">TaskOptionAsyncExtensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div></div></div><h2 >Methods</h2><div class="member-title"><a name="ActionAsync&lt;A, B>"></a>ActionAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Option&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ActionAsync_A_B_Task_Option&lt;A>_fa__Option_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Evaluate fa, then fb, ignoring the result of fa </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate first</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate second and then return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">ActionAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; fa, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type OptionAsync&lt;B&gt;</span></div></div></div><div style="display:none" id="code-ActionAsync_A_B_Task_Option&lt;A>_fa__Option_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        ApplOptionAsync&lt;A, B&gt;.Inst.Action(fa.ToAsync(), fb.ToAsync())</div></div></div><div class="member-title"><a name="AddAsync&lt;NUM, A>"></a>AddAsync&lt;NUM, A&gt;(Task&lt;Option&lt;A&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddAsync_NUM_A_Task_Option&lt;A>_x__Task_Option&lt;A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound values of x and y, uses an Add type-class to provide the add operation for type A.  For example x.Add&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">AddAsync</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An option with y added to x</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AddAsync_NUM_A_Task_Option&lt;A>_x__Task_Option&lt;A>_y_"><div class="section_title">SOURCE</div><div class="code">
        x.ToAsync().Add&lt;NUM, A&gt;(y.ToAsync())</div></div></div><div class="member-title"><a name="ApplyAsync&lt;A, B, C>"></a>ApplyAsync&lt;A, B, C&gt;(Option&lt;Func&lt;A, B, C&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;, Option&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyAsync_A_B_C_Option_Func&lt;A, B, C>_fabc__Task_Option&lt;A>_fa__Option_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">C</span>&gt; <span class="ident">ApplyAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; fa, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-ApplyAsync_A_B_C_Option_Func&lt;A, B, C>_fabc__Task_Option&lt;A>_fa__Option_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        from x in fabc.ToAsync()
        from y in ApplOptionAsync&lt;A, B, C&gt;.Inst.Apply(curry(x), fa.ToAsync(), fb.ToAsync())
        select y</div></div></div><div class="member-title"><a name="ApplyAsync&lt;A, B, C>"></a>ApplyAsync&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Task&lt;Option&lt;A&gt;&gt;, Option&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyAsync_A_B_C_Func_A_B_C_fabc__Task_Option&lt;A>_fa__Option_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">C</span>&gt; <span class="ident">ApplyAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; fa, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-ApplyAsync_A_B_C_Func_A_B_C_fabc__Task_Option&lt;A>_fa__Option_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        ApplOptionAsync&lt;A, B, C&gt;.Inst.Apply(curry(fabc), fa.ToAsync(), fb.ToAsync())</div></div></div><div class="member-title"><a name="ApplyAsync&lt;A, B, C>"></a>ApplyAsync&lt;A, B, C&gt;(Option&lt;Func&lt;A, B, C&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyAsync_A_B_C_Option_Func&lt;A, B, C>_fabc__Task_Option&lt;A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-ApplyAsync_A_B_C_Option_Func&lt;A, B, C>_fabc__Task_Option&lt;A>_fa_"><div class="section_title">SOURCE</div><div class="code">
        from x in fabc.ToAsync()
        from y in ApplOptionAsync&lt;A, B, C&gt;.Inst.Apply(curry(x), fa.ToAsync())
        select y</div></div></div><div class="member-title"><a name="ApplyAsync&lt;A, B, C>"></a>ApplyAsync&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyAsync_A_B_C_Func_A_B_C_fabc__Task_Option&lt;A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-ApplyAsync_A_B_C_Func_A_B_C_fabc__Task_Option&lt;A>_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplOptionAsync&lt;A, B, C&gt;.Inst.Apply(curry(fabc), fa.ToAsync())</div></div></div><div class="member-title"><a name="ApplyAsync&lt;A, B, C>"></a>ApplyAsync&lt;A, B, C&gt;(Option&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyAsync_A_B_C_Option_Func&lt;A, Func&lt;B, C>>_fabc__Task_Option&lt;A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-ApplyAsync_A_B_C_Option_Func&lt;A, Func&lt;B, C>>_fabc__Task_Option&lt;A>_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplOptionAsync&lt;A, B, C&gt;.Inst.Apply(fabc.ToAsync(), fa.ToAsync())</div></div></div><div class="member-title"><a name="ApplyAsync&lt;A, B, C>"></a>ApplyAsync&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyAsync_A_B_C_Func_A_Func&lt;B, C>_fabc__Task_Option&lt;A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-ApplyAsync_A_B_C_Func_A_Func&lt;B, C>_fabc__Task_Option&lt;A>_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplOptionAsync&lt;A, B, C&gt;.Inst.Apply(fabc, fa.ToAsync())</div></div></div><div class="member-title"><a name="ApplyAsync&lt;A, B>"></a>ApplyAsync&lt;A, B&gt;(Option&lt;Func&lt;A, B&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyAsync_A_B_Option_Func&lt;A, B>_fab__Task_Option&lt;A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">ApplyAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; fab, <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-ApplyAsync_A_B_Option_Func&lt;A, B>_fab__Task_Option&lt;A>_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplOptionAsync&lt;A, B&gt;.Inst.Apply(fab.ToAsync(), fa.ToAsync())</div></div></div><div class="member-title"><a name="ApplyAsync&lt;A, B>"></a>ApplyAsync&lt;A, B&gt;(Func&lt;A, B&gt;, Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyAsync_A_B_Func_A_B_fab__Task_Option&lt;A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">ApplyAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-ApplyAsync_A_B_Func_A_B_fab__Task_Option&lt;A>_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplOptionAsync&lt;A, B&gt;.Inst.Apply(fab, fa.ToAsync())</div></div></div><div class="member-title"><a name="AsEnumerableAsync&lt;A>"></a>AsEnumerableAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerableAsync_A_Task_Option&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Option to an enumerable of zero or one items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">AsEnumerableAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >An enumerable of zero or one items</span></div></div></div><div style="display:none" id="code-AsEnumerableAsync_A_Task_Option&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        asEnumerableAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync())</div></div></div><div class="member-title"><a name="BiExistsAsync&lt;A>"></a>BiExistsAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiExistsAsync_A_Task_Option&lt;A>_self__Func_A_bool_Some__Func_Unit_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the Option is in a None state then True is returned if invoking None returns True. If the Option is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">BiExistsAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >If the Option is in a None state then True is returned if  invoking None returns True. If the Option is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-BiExistsAsync_A_Task_Option&lt;A>_self__Func_A_bool_Some__Func_Unit_bool_None_"><div class="section_title">SOURCE</div><div class="code">
        biExistsAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A, Unit&gt;(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="BiExistsAsync&lt;A>"></a>BiExistsAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, bool&gt;, Func&lt;bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiExistsAsync_A_Task_Option&lt;A>_self__Func_A_bool_Some__Func_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the Option is in a None state then True is returned if invoking None returns True. If the Option is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">BiExistsAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >If the Option is in a None state then True is returned if  invoking None returns True. If the Option is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-BiExistsAsync_A_Task_Option&lt;A>_self__Func_A_bool_Some__Func_bool_None_"><div class="section_title">SOURCE</div><div class="code">
        biExistsAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A, Unit&gt;(self.ToAsync(), Some, _ =&gt; None())</div></div></div><div class="member-title"><a name="BiFoldAsync&lt;S, A>"></a>BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_Unit_S_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Option types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/>  Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_Unit_S_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.BiFoldAsync(self.ToAsync(), state, Some, None)</div></div></div><div class="member-title"><a name="BiFoldAsync&lt;S, A>"></a>BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Unit, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Unit_S_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Option types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/>  Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Unit_S_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.BiFoldAsync(self.ToAsync(), state, Some, None)</div></div></div><div class="member-title"><a name="BiFoldAsync&lt;S, A>"></a>BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_Unit_Task&lt;S>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Option types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/>  Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_Unit_Task&lt;S>_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.BiFoldAsync(self.ToAsync(), state, Some, None)</div></div></div><div class="member-title"><a name="BiFoldAsync&lt;S, A>"></a>BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Unit, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Unit_Task&lt;S>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Option types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/>  Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Unit_Task&lt;S>_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.BiFoldAsync(self.ToAsync(), state, Some, None)</div></div></div><div class="member-title"><a name="BiFoldAsync&lt;S, A>"></a>BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_S_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Option types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/>  Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_S_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.BiFoldAsync(self.ToAsync(), state, Some, (s, _) =&gt; None(s))</div></div></div><div class="member-title"><a name="BiFoldAsync&lt;S, A>"></a>BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_S_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Option types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/>  Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_S_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.BiFoldAsync(self.ToAsync(), state, Some, (s, _) =&gt; None(s))</div></div></div><div class="member-title"><a name="BiFoldAsync&lt;S, A>"></a>BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_Task&lt;S>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Option types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/>  Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_Task&lt;S>_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.BiFoldAsync(self.ToAsync(), state, Some, (s, _) =&gt; None(s))</div></div></div><div class="member-title"><a name="BiFoldAsync&lt;S, A>"></a>BiFoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Task&lt;S>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Option types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/>  Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-BiFoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Task&lt;S>_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.BiFoldAsync(self.ToAsync(), state, Some, (s, _) =&gt; None(s))</div></div></div><div class="member-title"><a name="BiForAllAsync&lt;A>"></a>BiForAllAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiForAllAsync_A_Task_Option&lt;A>_self__Func_A_bool_Some__Func_Unit_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the Option is in a None state then True is returned if invoking None returns True. If the Option is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">BiForAllAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >If the Option is in a None state then True is returned if  invoking None returns True. If the Option is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-BiForAllAsync_A_Task_Option&lt;A>_self__Func_A_bool_Some__Func_Unit_bool_None_"><div class="section_title">SOURCE</div><div class="code">
        biForAllAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A, Unit&gt;(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="BiForAllAsync&lt;A>"></a>BiForAllAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, bool&gt;, Func&lt;bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiForAllAsync_A_Task_Option&lt;A>_self__Func_A_bool_Some__Func_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the Option is in a None state then True is returned if invoking None returns True. If the Option is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">BiForAllAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >If the Option is in a None state then True is returned if  invoking None returns True. If the Option is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-BiForAllAsync_A_Task_Option&lt;A>_self__Func_A_bool_Some__Func_bool_None_"><div class="section_title">SOURCE</div><div class="code">
        biForAllAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A, Unit&gt;(self.ToAsync(), Some, _ =&gt; None())</div></div></div><div class="member-title"><a name="BiIterAsync&lt;A>"></a>BiIterAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Action&lt;A&gt;, Action&lt;Unit&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiIterAsync_A_Task_Option&lt;A>_self__Action_A_Some__Action_Unit_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke an action depending on the state of the Option </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Unit</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">BiIterAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some, <span class="ident">Action</span>&lt;<span class="ident">Unit</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiIterAsync_A_Task_Option&lt;A>_self__Action_A_Some__Action_Unit_None_"><div class="section_title">SOURCE</div><div class="code">
        biIterAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A, Unit&gt;(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="BiIterAsync&lt;A>"></a>BiIterAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Action&lt;A&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiIterAsync_A_Task_Option&lt;A>_self__Action_A_Some__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke an action depending on the state of the Option </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >Action to invoke if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">BiIterAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some, <span class="ident">Action</span> None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiIterAsync_A_Task_Option&lt;A>_self__Action_A_Some__Action__None_"><div class="section_title">SOURCE</div><div class="code">
        biIterAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A, Unit&gt;(self.ToAsync(), Some, _ =&gt; None())</div></div></div><div class="member-title"><a name="BiMapAsync&lt;A, B>"></a>BiMapAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;Unit, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMapAsync_A_B_Task_Option&lt;A>_self__Func_A_B_Some__Func_Unit_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped functor</span></div></div></div><div style="display:none" id="code-BiMapAsync_A_B_Task_Option&lt;A>_self__Func_A_B_Some__Func_Unit_B_None_"><div class="section_title">SOURCE</div><div class="code">
        FOptionAsync&lt;A, B&gt;.Inst.BiMap(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="BiMapAsync&lt;A, B>"></a>BiMapAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMapAsync_A_B_Task_Option&lt;A>_self__Func_A_B_Some__Func_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped functor</span></div></div></div><div style="display:none" id="code-BiMapAsync_A_B_Task_Option&lt;A>_self__Func_A_B_Some__Func_B_None_"><div class="section_title">SOURCE</div><div class="code">
        FOptionAsync&lt;A, B&gt;.Inst.BiMap(self.ToAsync(), Some, _ =&gt; None())</div></div></div><div class="member-title"><a name="BindAsync&lt;A, B>"></a>BindAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Option&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindAsync_A_B_Task_Option&lt;A>_self__Func_A_Option&lt;B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monad bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BindAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BindAsync_A_B_Task_Option&lt;A>_self__Func_A_Option&lt;B>_f_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.Bind&lt;MOptionAsync&lt;B&gt;, OptionAsync&lt;B&gt;, B&gt;(self.ToAsync(), a =&gt; f(a).ToAsync())</div></div></div><div class="member-title"><a name="BindAsync&lt;A, B>"></a>BindAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, OptionAsync&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindAsync_A_B_Task_Option&lt;A>_self__Func_A_OptionAsync&lt;B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monad bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BindAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BindAsync_A_B_Task_Option&lt;A>_self__Func_A_OptionAsync&lt;B>_f_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.Bind&lt;MOptionAsync&lt;B&gt;, OptionAsync&lt;B&gt;, B&gt;(self.ToAsync(), f)</div></div></div><div class="member-title"><a name="CountAsync&lt;A>"></a>CountAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountAsync_A_Task_Option&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return the number of bound values in this structure: <br/><br/> <div class='code-line'>     None = 0</div> <br/><br/> <div class='code-line'>     Some = 1</div> <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">CountAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"><span ></span></div></div></div><div style="display:none" id="code-CountAsync_A_Task_Option&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.CountAsync(self.ToAsync())(unit)</div></div></div><div class="member-title"><a name="DivideAsync&lt;NUM, A>"></a>DivideAsync&lt;NUM, A&gt;(Task&lt;Option&lt;A&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideAsync_NUM_A_Task_Option&lt;A>_x__Task_Option&lt;A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide the two bound values of x and y, uses a Divide type-class to provide the divide operation for type A.  For example x.Divide&lt;TDouble,double&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">DivideAsync</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An option x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideAsync_NUM_A_Task_Option&lt;A>_x__Task_Option&lt;A>_y_"><div class="section_title">SOURCE</div><div class="code">
        x.ToAsync().Divide&lt;NUM, A&gt;(y.ToAsync())</div></div></div><div class="member-title"><a name="ExistsAsync&lt;A>"></a>ExistsAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsAsync_A_Task_Option&lt;A>_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the Option is in a None state then True is returned if invoking None returns True. If the Option is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span ></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ExistsAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >If the Option is in a None state then True is returned if  invoking None returns True. If the Option is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-ExistsAsync_A_Task_Option&lt;A>_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        existsAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync(), pred)</div></div></div><div class="member-title"><a name="FilterAsync&lt;A>"></a>FilterAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterAsync_A_Task_Option&lt;A>_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value (if in a Some state) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">FilterAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Some(x) if the Option is in a Some state and the predicate returns True.  None otherwise.</span></div></div></div><div style="display:none" id="code-FilterAsync_A_Task_Option&lt;A>_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        filter&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync(), pred)</div></div></div><div class="member-title"><a name="FoldAsync&lt;S, A>"></a>FoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Option types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/>  Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a Some state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">FoldAsync</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-FoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_S_folder_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.FoldAsync(self.ToAsync(), state, folder)(unit)</div></div></div><div class="member-title"><a name="FoldAsync&lt;S, A>"></a>FoldAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_Task&lt;S>_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Option types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/>  Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a Some state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">FoldAsync</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-FoldAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_Task&lt;S>_folder_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.FoldAsync(self.ToAsync(), state, folder)(unit)</div></div></div><div class="member-title"><a name="FoldBackAsync&lt;S, A>"></a>FoldBackAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Option types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/>  Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a Some state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">FoldBackAsync</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-FoldBackAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_S_folder_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.FoldBackAsync(self.ToAsync(), state, folder)(unit)</div></div></div><div class="member-title"><a name="FoldBackAsync&lt;S, A>"></a>FoldBackAsync&lt;S, A&gt;(Task&lt;Option&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_Task&lt;S>_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Option types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/>  Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a Some state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">FoldBackAsync</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-FoldBackAsync_S_A_Task_Option&lt;A>_self__S__state__Func_S_A_Task&lt;S>_folder_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.FoldBackAsync(self.ToAsync(), state, folder)(unit)</div></div></div><div class="member-title"><a name="ForAllAsync&lt;A>"></a>ForAllAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllAsync_A_Task_Option&lt;A>_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the Option is in a None state then True is returned (because the predicate applies for-all values). If the Option is in a Some state the value is the result of running  applying the bound value to the predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span ></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ForAllAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >If the Option is in a None state then True is returned (because  the predicate applies for-all values).  If the Option is in a Some state the value is the result of running applying the bound value to the  predicate supplied.</span></div></div></div><div style="display:none" id="code-ForAllAsync_A_Task_Option&lt;A>_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        forallAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync(), pred)</div></div></div><div class="member-title"><a name="IfNoneAsync&lt;A>"></a>IfNoneAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneAsync_A_Task_Option&lt;A>_self__Func_A_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Operation to invoke if the structure is in a None state</span></div></div><div class="section_title">REMARKS</div><span >Will not accept a null return value from the None operation</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Tesult of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned.</span></div></div></div><div style="display:none" id="code-IfNoneAsync_A_Task_Option&lt;A>_self__Func_A_None_"><div class="section_title">SOURCE</div><div class="code">
        ifNoneAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync(), None)</div></div></div><div class="member-title"><a name="IfNoneAsync&lt;A>"></a>IfNoneAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;Task&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneAsync_A_Task_Option&lt;A>_self__Func_Task&lt;A>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Operation to invoke if the structure is in a None state</span></div></div><div class="section_title">REMARKS</div><span >Will not accept a null return value from the None operation</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Tesult of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned.</span></div></div></div><div style="display:none" id="code-IfNoneAsync_A_Task_Option&lt;A>_self__Func_Task&lt;A>_None_"><div class="section_title">SOURCE</div><div class="code">
        ifNoneAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync(), None)</div></div></div><div class="member-title"><a name="IfNoneAsync&lt;A>"></a>IfNoneAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneAsync_A_Task_Option&lt;A>_self__A__noneValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc"><span >Value to return if in a None state</span></div></div><div class="section_title">REMARKS</div><span >Will not accept a null noneValue</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">A</span> noneValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned</span></div></div></div><div style="display:none" id="code-IfNoneAsync_A_Task_Option&lt;A>_self__A__noneValue_"><div class="section_title">SOURCE</div><div class="code">
        ifNoneAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync(), noneValue)</div></div></div><div class="member-title"><a name="IfNoneUnsafeAsync&lt;A>"></a>IfNoneUnsafeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneUnsafeAsync_A_Task_Option&lt;A>_self__Func_A_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Operation to invoke if the structure is in a None state</span></div></div><div class="section_title">REMARKS</div><span >Will allow null the be returned from the None operation</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneUnsafeAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Tesult of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned.</span></div></div></div><div style="display:none" id="code-IfNoneUnsafeAsync_A_Task_Option&lt;A>_self__Func_A_None_"><div class="section_title">SOURCE</div><div class="code">
        ifNoneUnsafeAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync(), None)</div></div></div><div class="member-title"><a name="IfNoneUnsafeAsync&lt;A>"></a>IfNoneUnsafeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;Task&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneUnsafeAsync_A_Task_Option&lt;A>_self__Func_Task&lt;A>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Operation to invoke if the structure is in a None state</span></div></div><div class="section_title">REMARKS</div><span >Will allow null the be returned from the None operation</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneUnsafeAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Tesult of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned.</span></div></div></div><div style="display:none" id="code-IfNoneUnsafeAsync_A_Task_Option&lt;A>_self__Func_Task&lt;A>_None_"><div class="section_title">SOURCE</div><div class="code">
        ifNoneUnsafeAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync(), None)</div></div></div><div class="member-title"><a name="IfNoneUnsafeAsync&lt;A>"></a>IfNoneUnsafeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneUnsafeAsync_A_Task_Option&lt;A>_self__A__noneValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc"><span >Value to return if in a None state</span></div></div><div class="section_title">REMARKS</div><span >Will allow noneValue to be null</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneUnsafeAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">A</span> noneValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned</span></div></div></div><div style="display:none" id="code-IfNoneUnsafeAsync_A_Task_Option&lt;A>_self__A__noneValue_"><div class="section_title">SOURCE</div><div class="code">
        ifNoneUnsafeAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync(), noneValue)</div></div></div><div class="member-title"><a name="IfSomeAsync&lt;A>"></a>IfSomeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfSomeAsync_A_Task_Option&lt;A>_self__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the action if Option is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke if Option is in the Some state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IfSomeAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfSomeAsync_A_Task_Option&lt;A>_self__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
        ifSomeAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync(), f)</div></div></div><div class="member-title"><a name="IfSomeAsync&lt;A>"></a>IfSomeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Task&lt;Unit&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfSomeAsync_A_Task_Option&lt;A>_self__Func_A_Task&lt;Unit>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the f function if Option is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to invoke if Option is in the Some state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IfSomeAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfSomeAsync_A_Task_Option&lt;A>_self__Func_A_Task&lt;Unit>_f_"><div class="section_title">SOURCE</div><div class="code">
        ifSomeAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync(), f)</div></div></div><div class="member-title"><a name="IfSomeAsync&lt;A>"></a>IfSomeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Task&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfSomeAsync_A_Task_Option&lt;A>_self__Func_A_Task_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the f function if Option is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&gt;</div></div><div class="arg-desc"><span >Function to invoke if Option is in the Some state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IfSomeAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfSomeAsync_A_Task_Option&lt;A>_self__Func_A_Task_f_"><div class="section_title">SOURCE</div><div class="code">
        ifSomeAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync(), f)</div></div></div><div class="member-title"><a name="IfSomeAsync&lt;A>"></a>IfSomeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Unit&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfSomeAsync_A_Task_Option&lt;A>_self__Func_A_Unit_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the f function if Option is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc"><span >Function to invoke if Option is in the Some state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IfSomeAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Unit</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfSomeAsync_A_Task_Option&lt;A>_self__Func_A_Unit_f_"><div class="section_title">SOURCE</div><div class="code">
        ifSomeAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync(), f)</div></div></div><div class="member-title"><a name="IterAsync&lt;A>"></a>IterAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterAsync_A_Task_Option&lt;A>_self__Action_A_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke an action for the bound value (if in a Some state) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IterAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IterAsync_A_Task_Option&lt;A>_self__Action_A_Some_"><div class="section_title">SOURCE</div><div class="code">
        iterAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync(), Some)</div></div></div><div class="member-title"><a name="MapAsync&lt;A, B>"></a>MapAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapAsync_A_B_Task_Option&lt;A>_self__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MapAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped functor</span></div></div></div><div style="display:none" id="code-MapAsync_A_B_Task_Option&lt;A>_self__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
        FOptionAsync&lt;A, B&gt;.Inst.Map(self.ToAsync(), f)</div></div></div><div class="member-title"><a name="MatchAsync&lt;A, B>"></a>MatchAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_B_Task_Option&lt;A>_self__Func_A_B_Some__Func_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option and return a non-null R. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Some match operation. Must not return null.</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >None match operation. Must not return null.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >A non-null B</span></div></div></div><div style="display:none" id="code-MatchAsync_A_B_Task_Option&lt;A>_self__Func_A_B_Some__Func_B_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.MatchAsync(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="MatchAsync&lt;A, B>"></a>MatchAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_B_Task_Option&lt;A>_self__Func_A_Task&lt;B>_Some__Func_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option and return a non-null R. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Some match operation. Must not return null.</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >None match operation. Must not return null.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >A non-null B</span></div></div></div><div style="display:none" id="code-MatchAsync_A_B_Task_Option&lt;A>_self__Func_A_Task&lt;B>_Some__Func_B_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.MatchAsync(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="MatchAsync&lt;A, B>"></a>MatchAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_B_Task_Option&lt;A>_self__Func_A_B_Some__Func_Task&lt;B>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option and return a non-null R. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Some match operation. Must not return null.</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >None match operation. Must not return null.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >A non-null B</span></div></div></div><div style="display:none" id="code-MatchAsync_A_B_Task_Option&lt;A>_self__Func_A_B_Some__Func_Task&lt;B>_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.MatchAsync(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="MatchAsync&lt;A, B>"></a>MatchAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_B_Task_Option&lt;A>_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option and return a non-null R. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Some match operation. Must not return null.</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >None match operation. Must not return null.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >A non-null B</span></div></div></div><div style="display:none" id="code-MatchAsync_A_B_Task_Option&lt;A>_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.MatchAsync(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="MatchAsync&lt;A>"></a>MatchAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;, Action&lt;A&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_Task_Option&lt;A>_self__Action_A_Some__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Some match operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >None match operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some, <span class="ident">Action</span> None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_A_Task_Option&lt;A>_self__Action_A_Some__Action__None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.MatchAsync(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="MatchUnsafeAsync&lt;A, B>"></a>MatchUnsafeAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUnsafeAsync_A_B_Task_Option&lt;A>_self__Func_A_B_Some__Func_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option and return a B, which can be null. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Some match operation. May return null.</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >None match operation. May return null.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchUnsafeAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >B, or null</span></div></div></div><div style="display:none" id="code-MatchUnsafeAsync_A_B_Task_Option&lt;A>_self__Func_A_B_Some__Func_B_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.MatchUnsafeAsync(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="MatchUnsafeAsync&lt;A, B>"></a>MatchUnsafeAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUnsafeAsync_A_B_Task_Option&lt;A>_self__Func_A_Task&lt;B>_Some__Func_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option and return a B, which can be null. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Some match operation. May return null.</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >None match operation. May return null.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchUnsafeAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >B, or null</span></div></div></div><div style="display:none" id="code-MatchUnsafeAsync_A_B_Task_Option&lt;A>_self__Func_A_Task&lt;B>_Some__Func_B_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.MatchUnsafeAsync(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="MatchUnsafeAsync&lt;A, B>"></a>MatchUnsafeAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUnsafeAsync_A_B_Task_Option&lt;A>_self__Func_A_B_Some__Func_Task&lt;B>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option and return a B, which can be null. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Some match operation. May return null.</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >None match operation. May return null.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchUnsafeAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >B, or null</span></div></div></div><div style="display:none" id="code-MatchUnsafeAsync_A_B_Task_Option&lt;A>_self__Func_A_B_Some__Func_Task&lt;B>_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.MatchUnsafeAsync(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="MatchUnsafeAsync&lt;A, B>"></a>MatchUnsafeAsync&lt;A, B&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUnsafeAsync_A_B_Task_Option&lt;A>_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option and return a B, which can be null. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Some match operation. May return null.</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >None match operation. May return null.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchUnsafeAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >B, or null</span></div></div></div><div style="display:none" id="code-MatchUnsafeAsync_A_B_Task_Option&lt;A>_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None_"><div class="section_title">SOURCE</div><div class="code">
        MOptionAsync&lt;A&gt;.Inst.MatchUnsafeAsync(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="MatchUntypedAsync&lt;A, R>"></a>MatchUntypedAsync&lt;A, R&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;object, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUntypedAsync_A_R_Task_Option&lt;A>_self__Func_object_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match operation with an untyped value for Some. This can be useful for serialisation and dealing with the IOptional interface </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Operation to perform if the option is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Operation to perform if the option is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchUntypedAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of the match operation</span></div></div></div><div style="display:none" id="code-MatchUntypedAsync_A_R_Task_Option&lt;A>_self__Func_object_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
        matchUntypedAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A, R&gt;(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="MatchUntypedAsync&lt;A, R>"></a>MatchUntypedAsync&lt;A, R&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;object, Task&lt;R&gt;&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUntypedAsync_A_R_Task_Option&lt;A>_self__Func_object_Task&lt;R>_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match operation with an untyped value for Some. This can be useful for serialisation and dealing with the IOptional interface </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Operation to perform if the option is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Operation to perform if the option is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchUntypedAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of the match operation</span></div></div></div><div style="display:none" id="code-MatchUntypedAsync_A_R_Task_Option&lt;A>_self__Func_object_Task&lt;R>_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
        matchUntypedAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A, R&gt;(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="MatchUntypedAsync&lt;A, R>"></a>MatchUntypedAsync&lt;A, R&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;object, R&gt;, Func&lt;Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUntypedAsync_A_R_Task_Option&lt;A>_self__Func_object_R_Some__Func_Task&lt;R>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match operation with an untyped value for Some. This can be useful for serialisation and dealing with the IOptional interface </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Operation to perform if the option is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Operation to perform if the option is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchUntypedAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of the match operation</span></div></div></div><div style="display:none" id="code-MatchUntypedAsync_A_R_Task_Option&lt;A>_self__Func_object_R_Some__Func_Task&lt;R>_None_"><div class="section_title">SOURCE</div><div class="code">
        matchUntypedAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A, R&gt;(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="MatchUntypedAsync&lt;A, R>"></a>MatchUntypedAsync&lt;A, R&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;object, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUntypedAsync_A_R_Task_Option&lt;A>_self__Func_object_Task&lt;R>_Some__Func_Task&lt;R>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match operation with an untyped value for Some. This can be useful for serialisation and dealing with the IOptional interface </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Operation to perform if the option is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Operation to perform if the option is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchUntypedAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of the match operation</span></div></div></div><div style="display:none" id="code-MatchUntypedAsync_A_R_Task_Option&lt;A>_self__Func_object_Task&lt;R>_Some__Func_Task&lt;R>_None_"><div class="section_title">SOURCE</div><div class="code">
        matchUntypedAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A, R&gt;(self.ToAsync(), Some, None)</div></div></div><div class="member-title"><a name="ProductAsync&lt;NUM, A>"></a>ProductAsync&lt;NUM, A&gt;(Task&lt;Option&lt;A&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductAsync_NUM_A_Task_Option&lt;A>_x__Task_Option&lt;A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product between the two bound values of x and y, uses a Product type-class  to provide the product operation for type A.  For example x.Product&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ProductAsync</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An option with the product of x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductAsync_NUM_A_Task_Option&lt;A>_x__Task_Option&lt;A>_y_"><div class="section_title">SOURCE</div><div class="code">
        x.ToAsync().Product&lt;NUM, A&gt;(y.ToAsync())</div></div></div><div class="member-title"><a name="SubtractAsync&lt;NUM, A>"></a>SubtractAsync&lt;NUM, A&gt;(Task&lt;Option&lt;A&gt;&gt;, Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractAsync_NUM_A_Task_Option&lt;A>_x__Task_Option&lt;A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the subtract between the two bound values of x and y, uses a Subtract type-class  to provide the subtract operation for type A.  For example x.Subtract&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">SubtractAsync</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An option with the subtract between x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractAsync_NUM_A_Task_Option&lt;A>_x__Task_Option&lt;A>_y_"><div class="section_title">SOURCE</div><div class="code">
        x.ToAsync().Subtract&lt;NUM, A&gt;(y.ToAsync())</div></div></div><div class="member-title"><a name="ToArrayAsync&lt;A>"></a>ToArrayAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToArrayAsync_A_Task_Option&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Option to an enumerable of zero or one items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToArrayAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >An enumerable of zero or one items</span></div></div></div><div style="display:none" id="code-ToArrayAsync_A_Task_Option&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        toArrayAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync())</div></div></div><div class="member-title"><a name="ToAsync&lt;A>"></a>ToAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToAsync_A_Task_Option&lt;A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToAsync_A_Task_Option&lt;A>_ma_"><div class="section_title">SOURCE</div><div class="code">
        new OptionAsync&lt;A&gt;(OptionDataAsync.Lazy(async () =&gt;
        {
            var a = await ma;
            return a.IsSome
                ? new Result&lt;A&gt;(a.Value)
                : Result&lt;A&gt;.None;
        }))</div></div></div><div class="member-title"><a name="ToEitherAsync&lt;L, A>"></a>ToEitherAsync&lt;L, A&gt;(Task&lt;Option&lt;A&gt;&gt;, L)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEitherAsync_L_A_Task_Option&lt;A>_self__L__defaultLeftValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to an Either </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div><div class="arg-desc"><span >Default value if the structure is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ToEitherAsync</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">L</span> defaultLeftValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >An Either representation of the structure</span></div></div></div><div style="display:none" id="code-ToEitherAsync_L_A_Task_Option&lt;A>_self__L__defaultLeftValue_"><div class="section_title">SOURCE</div><div class="code">
        toEitherAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, L, A&gt;(self.ToAsync(), defaultLeftValue)</div></div></div><div class="member-title"><a name="ToEitherAsync&lt;L, A>"></a>ToEitherAsync&lt;L, A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEitherAsync_L_A_Task_Option&lt;A>_self__Func_L_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to an Either </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ToEitherAsync</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >An Either representation of the structure</span></div></div></div><div style="display:none" id="code-ToEitherAsync_L_A_Task_Option&lt;A>_self__Func_L_Left_"><div class="section_title">SOURCE</div><div class="code">
        toEitherAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, L, A&gt;(self.ToAsync(), Left)</div></div></div><div class="member-title"><a name="ToEitherUnsafeAsync&lt;L, A>"></a>ToEitherUnsafeAsync&lt;L, A&gt;(Task&lt;Option&lt;A&gt;&gt;, L)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEitherUnsafeAsync_L_A_Task_Option&lt;A>_self__L__defaultLeftValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to an EitherUnsafe </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div><div class="arg-desc"><span >Default value if the structure is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ToEitherUnsafeAsync</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">L</span> defaultLeftValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >An EitherUnsafe representation of the structure</span></div></div></div><div style="display:none" id="code-ToEitherUnsafeAsync_L_A_Task_Option&lt;A>_self__L__defaultLeftValue_"><div class="section_title">SOURCE</div><div class="code">
        toEitherUnsafeAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, L, A&gt;(self.ToAsync(), defaultLeftValue)</div></div></div><div class="member-title"><a name="ToEitherUnsafeAsync&lt;L, A>"></a>ToEitherUnsafeAsync&lt;L, A&gt;(Task&lt;Option&lt;A&gt;&gt;, Func&lt;L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEitherUnsafeAsync_L_A_Task_Option&lt;A>_self__Func_L_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to an EitherUnsafe </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ToEitherUnsafeAsync</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >An EitherUnsafe representation of the structure</span></div></div></div><div style="display:none" id="code-ToEitherUnsafeAsync_L_A_Task_Option&lt;A>_self__Func_L_Left_"><div class="section_title">SOURCE</div><div class="code">
        toEitherUnsafeAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, L, A&gt;(self.ToAsync(), Left)</div></div></div><div class="member-title"><a name="ToListAsync&lt;A>"></a>ToListAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToListAsync_A_Task_Option&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Option to an immutable list of zero or one items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToListAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >An immutable list of zero or one items</span></div></div></div><div style="display:none" id="code-ToListAsync_A_Task_Option&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        toListAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync())</div></div></div><div class="member-title"><a name="ToOptionUnsafeAsync&lt;A>"></a>ToOptionUnsafeAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToOptionUnsafeAsync_A_Task_Option&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to a OptionUnsafe </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToOptionUnsafeAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >An OptionUnsafe representation of the structure</span></div></div></div><div style="display:none" id="code-ToOptionUnsafeAsync_A_Task_Option&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        toOptionUnsafeAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync())</div></div></div><div class="member-title"><a name="ToSeqAsync&lt;A>"></a>ToSeqAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToSeqAsync_A_Task_Option&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Option to an enumerable sequence of zero or one items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToSeqAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >An enumerable sequence of zero or one items</span></div></div></div><div style="display:none" id="code-ToSeqAsync_A_Task_Option&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        toSeqAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync())</div></div></div><div class="member-title"><a name="ToTryAsync&lt;A>"></a>ToTryAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToTryAsync_A_Task_Option&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to a TryAsync </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToTryAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >A TryAsync representation of the structure</span></div></div></div><div style="display:none" id="code-ToTryAsync_A_Task_Option&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        toTryAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync())</div></div></div><div class="member-title"><a name="ToTryOptionAsync&lt;A>"></a>ToTryOptionAsync&lt;A&gt;(Task&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToTryOptionAsync_A_Task_Option&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to a TryOptionAsync </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToTryOptionAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >A TryOptionAsync representation of the structure</span></div></div></div><div style="display:none" id="code-ToTryOptionAsync_A_Task_Option&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        toTryOptionAsync&lt;MOptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;, A&gt;(self.ToAsync())</div></div></div></div></body></html>