<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="..//index.htm"></a> \ <span class="nav-bar-link" href="TryOptionExtensions_.htm">TryOptionExtensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Action&lt;A, B>">Action&lt;A, B&gt;(TryOption&lt;A&gt;, TryOption&lt;B&gt;)</a><a class="nav-link" href="#Add&lt;NUM, A>">Add&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(TryOption&lt;Func&lt;A, B, C&gt;&gt;, TryOption&lt;A&gt;, TryOption&lt;B&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOption&lt;A&gt;, TryOption&lt;B&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(TryOption&lt;Func&lt;A, B, C&gt;&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(TryOption&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B>">Apply&lt;A, B&gt;(TryOption&lt;Func&lt;A, B&gt;&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B>">Apply&lt;A, B&gt;(Func&lt;A, B&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#AsEnumerable&lt;A>">AsEnumerable&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#AsString&lt;A>">AsString&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#BiBind&lt;A, R>">BiBind&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, TryOption&lt;R&gt;&gt;, Func&lt;TryOption&lt;R&gt;&gt;)</a><a class="nav-link" href="#BiFold&lt;A, S>">BiFold&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#BiMap&lt;A, R>">BiMap&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#Bind&lt;A, B>">Bind&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, TryOption&lt;B&gt;&gt;)</a><a class="nav-link" href="#Count&lt;A>">Count&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#Divide&lt;NUM, A>">Divide&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#Exists&lt;A>">Exists&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Filter&lt;A>">Filter&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Flatten&lt;T>">Flatten&lt;T&gt;(TryOption&lt;TryOption&lt;T&gt;&gt;)</a><a class="nav-link" href="#Flatten&lt;T>">Flatten&lt;T&gt;(TryOption&lt;TryOption&lt;TryOption&lt;T&gt;&gt;&gt;)</a><a class="nav-link" href="#Flatten&lt;T>">Flatten&lt;T&gt;(TryOption&lt;TryOption&lt;TryOption&lt;TryOption&lt;T&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#Fold&lt;A, S>">Fold&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#ForAll&lt;A>">ForAll&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#IfFail&lt;A>">IfFail&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#IfFailThrow&lt;A>">IfFailThrow&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(TryOption&lt;A&gt;, Action)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(TryOption&lt;A&gt;, A)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A&gt;)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A&gt;, Func&lt;Exception, A&gt;)</a><a class="nav-link" href="#IfSome&lt;A>">IfSome&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#Iter&lt;A>">Iter&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#Join&lt;A, U, K, V>">Join&lt;A, U, K, V&gt;(TryOption&lt;A&gt;, TryOption&lt;U&gt;, Func&lt;A, K&gt;, Func&lt;U, K&gt;, Func&lt;A, U, V&gt;)</a><a class="nav-link" href="#Map&lt;A, B>">Map&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, R)</a><a class="nav-link" href="#Match&lt;A>">Match&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;, Action)</a><a class="nav-link" href="#Match&lt;A>">Match&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;, Action, Action&lt;Exception&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, R>">MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, R>">MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, R>">MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, R>">MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, R>">MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;A, R>">MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;T, R>">MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;A, R>">MatchObservable&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;A, R>">MatchObservable&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;A, R>">MatchObservable&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;A, R>">MatchObservable&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;A, R>">MatchObservable&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;A, R>">MatchObservable&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;T, R>">MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#Memo&lt;A>">Memo&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ParMap&lt;A, B, C, R>">ParMap&lt;A, B, C, R&gt;(TryOption&lt;A&gt;, Func&lt;A, B, C, R&gt;)</a><a class="nav-link" href="#ParMap&lt;A, B, R>">ParMap&lt;A, B, R&gt;(TryOption&lt;A&gt;, Func&lt;A, B, R&gt;)</a><a class="nav-link" href="#Product&lt;NUM, A>">Product&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#Select&lt;A, B>">Select&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#SelectMany&lt;A, B, C>">SelectMany&lt;A, B, C&gt;(TryOption&lt;A&gt;, Func&lt;A, TryOption&lt;B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#Some&lt;A, R>">Some&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;)</a><a class="nav-link" href="#Some&lt;A>">Some&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#Subtract&lt;NUM, A>">Subtract&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#Sum">Sum(TryOption&lt;int&gt;)</a><a class="nav-link" href="#ToArray&lt;A>">ToArray&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ToEither&lt;A>">ToEither&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ToEitherUnsafe&lt;A>">ToEitherUnsafe&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ToList&lt;A>">ToList&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ToNullable&lt;A>">ToNullable&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ToOption&lt;A>">ToOption&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ToOptionUnsafe&lt;A>">ToOptionUnsafe&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ToSeq&lt;A>">ToSeq&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#ToTry&lt;A>">ToTry&lt;A&gt;(TryOption&lt;A&gt;)</a><a class="nav-link" href="#TriBind&lt;A, R>">TriBind&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, TryOption&lt;R&gt;&gt;, Func&lt;TryOption&lt;R&gt;&gt;, Func&lt;Exception, TryOption&lt;R&gt;&gt;)</a><a class="nav-link" href="#TriFold&lt;A, S>">TriFold&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#TriMap&lt;A, R>">TriMap&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#Try&lt;T>">Try&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#Use&lt;T, U>">Use&lt;T, U&gt;(TryOption&lt;T&gt;, Func&lt;T, U&gt;)</a><a class="nav-link" href="#Where&lt;A>">Where&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)</a></div><div class="content-panel"><h1 >TryOptionExtensions Class</h1><p ><span >Extension methods for the Try monad </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">TryOptionExtensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div></div></div><h2 >Methods</h2><div class="member-title"><a name="Action&lt;A, B>"></a>Action&lt;A, B&gt;(TryOption&lt;A&gt;, TryOption&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Action_A_B_TryOption_A_fa__TryOption_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Evaluate fa, then fb, ignoring the result of fa </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate first</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate second and then return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type Option&lt;B&gt;</span></div></div></div><div style="display:none" id="code-Action_A_B_TryOption_A_fa__TryOption_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        ApplTryOption&lt;A, B&gt;.Inst.Action(fa, fb)</div></div></div><div class="member-title"><a name="Add&lt;NUM, A>"></a>Add&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Add_NUM_A_TryOption_A_lhs__TryOption_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound value of Try(x) to Try(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Add</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Add_NUM_A_TryOption_A_lhs__TryOption_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
        from x in lhs
        from y in rhs
        select plus&lt;NUM, A&gt;(x, y)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(TryOption&lt;Func&lt;A, B, C&gt;&gt;, TryOption&lt;A&gt;, TryOption&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_TryOption_Func&lt;A, B, C>_fabc__TryOption_A_fa__TryOption_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">C</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_TryOption_Func&lt;A, B, C>_fabc__TryOption_A_fa__TryOption_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        fabc.Bind(f =&gt; ApplTryOption&lt;A, B, C&gt;.Inst.Apply(MTryOption&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(f)), fa, fb))</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOption&lt;A&gt;, TryOption&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Func_A_B_C_fabc__TryOption_A_fa__TryOption_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">C</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Func_A_B_C_fabc__TryOption_A_fa__TryOption_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        ApplTryOption&lt;A, B, C&gt;.Inst.Apply(MTryOption&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), fa, fb)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(TryOption&lt;Func&lt;A, B, C&gt;&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_TryOption_Func&lt;A, B, C>_fabc__TryOption_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_TryOption_Func&lt;A, B, C>_fabc__TryOption_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        fabc.Bind(f =&gt; ApplTryOption&lt;A, B, C&gt;.Inst.Apply(MTryOption&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(f)), fa))</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Func_A_B_C_fabc__TryOption_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Func_A_B_C_fabc__TryOption_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplTryOption&lt;A, B, C&gt;.Inst.Apply(MTryOption&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(TryOption&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_TryOption_Func&lt;A, Func&lt;B, C>>_fabc__TryOption_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_TryOption_Func&lt;A, Func&lt;B, C>>_fabc__TryOption_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplTryOption&lt;A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B>"></a>Apply&lt;A, B&gt;(TryOption&lt;Func&lt;A, B&gt;&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_TryOption_Func&lt;A, B>_fab__TryOption_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; fab, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-Apply_A_B_TryOption_Func&lt;A, B>_fab__TryOption_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplTryOption&lt;A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B>"></a>Apply&lt;A, B&gt;(Func&lt;A, B&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_Func_A_B_fab__TryOption_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-Apply_A_B_Func_A_B_fab__TryOption_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplTryOption&lt;A, B&gt;.Inst.Apply(TryOption(fab), fa)</div></div></div><div class="member-title"><a name="AsEnumerable&lt;A>"></a>AsEnumerable&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; <span class="ident">AsEnumerable</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsEnumerable_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToSeq()</div></div></div><div class="member-title"><a name="AsString&lt;A>"></a>AsString&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsString_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="ident">AsString</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">string</span></div><div class="normal"></div></div></div><div style="display:none" id="code-AsString_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        match(self,
            Some: v =&gt; isnull(v)
                      ? &quot;Some(null)&quot;
                      : $&quot;Some({v})&quot;,
            None: () =&gt; &quot;None&quot;,
            Fail: ex =&gt; $&quot;Fail({ex.Message})&quot;
        )</div></div></div><div class="member-title"><a name="BiBind&lt;A, R>"></a>BiBind&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, TryOption&lt;R&gt;&gt;, Func&lt;TryOption&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiBind_A_R_TryOption_A_self__Func_A_TryOption&lt;R>_Some__Func_TryOption&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">BiBind</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiBind_A_R_TryOption_A_self__Func_A_TryOption&lt;R>_Some__Func_TryOption&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        return Memo&lt;R&gt;(() =&gt;
        {
            var res = self().Value;
            return res.IsNone
                ? Fail()().Value
                : Some(res.Value)().Value;
        });
    </div></div></div><div class="member-title"><a name="BiFold&lt;A, S>"></a>BiFold&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFold_A_S_TryOption_A_self__S__state__Func_S_A_S_Some__Func_S_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">BiFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-BiFold_A_S_TryOption_A_self__S__state__Func_S_A_S_Some__Func_S_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted || res.Value.IsNone
            ? Fail(state)
            : Some(state, res.Value.Value);
    </div></div></div><div class="member-title"><a name="BiMap&lt;A, R>"></a>BiMap&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMap_A_R_TryOption_A_self__Func_A_R_Some__Func_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">BiMap</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-BiMap_A_R_TryOption_A_self__Func_A_R_Some__Func_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        Memo&lt;R&gt;(() =&gt;
        {
            var res = self.Try();
            return res.IsFaulted || res.Value.IsNone
                ? Fail()
                : Some(res.Value.Value);
        })</div></div></div><div class="member-title"><a name="Bind&lt;A, B>"></a>Bind&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, TryOption&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_A_B_TryOption_A_self__Func_A_TryOption&lt;B>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Bind</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Bind_A_B_TryOption_A_self__Func_A_TryOption&lt;B>_binder_"><div class="section_title">SOURCE</div><div class="code">
        MTryOption&lt;A&gt;.Inst.Bind&lt;MTryOption&lt;B&gt;, TryOption&lt;B&gt;, B&gt;(self, binder)</div></div></div><div class="member-title"><a name="Count&lt;A>"></a>Count&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Count_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Counts the number of bound values.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >TrTry computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">Count</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >1 if the Try computation is successful, 0 otherwise.</span></div></div></div><div style="display:none" id="code-Count_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted || res.Value.IsNone
            ? 0
            : 1;
    </div></div></div><div class="member-title"><a name="Divide&lt;NUM, A>"></a>Divide&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Divide_NUM_A_TryOption_A_lhs__TryOption_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Multiply the bound value of Try(x) and Try(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Divide</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Divide_NUM_A_TryOption_A_lhs__TryOption_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
        from x in lhs
        from y in rhs
        select divide&lt;NUM, A&gt;(x, y)</div></div></div><div class="member-title"><a name="Exists&lt;A>"></a>Exists&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists_A_TryOption_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for any value of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">Exists</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the predicate holds for the bound value.  False otherwise.</span></div></div></div><div style="display:none" id="code-Exists_A_TryOption_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted || res.Value.IsNone
            ? false
            : pred(res.Value.Value);
    </div></div></div><div class="member-title"><a name="Filter&lt;A>"></a>Filter&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter_A_TryOption_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Filter</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Filter_A_TryOption_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        return Memo&lt;A&gt;(() =&gt;
        {
            var res = self().Value;
            return res.IsSome &amp;&amp; pred(res.Value)
                ? res
                : Option&lt;A&gt;.None;
        });
    </div></div></div><div class="member-title"><a name="Flatten&lt;T>"></a>Flatten&lt;T&gt;(TryOption&lt;TryOption&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Flatten_T_TryOption_TryOption&lt;T>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Flatten_T_TryOption_TryOption&lt;T>_self_"><div class="section_title">SOURCE</div><div class="code">
        from x in self
        from y in x
        select y</div></div></div><div class="member-title"><a name="Flatten&lt;T>"></a>Flatten&lt;T&gt;(TryOption&lt;TryOption&lt;TryOption&lt;T&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Flatten_T_TryOption_TryOption&lt;TryOption&lt;T>>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Flatten_T_TryOption_TryOption&lt;TryOption&lt;T>>_self_"><div class="section_title">SOURCE</div><div class="code">
        from x in self
        from y in x
        from z in y
        select z</div></div></div><div class="member-title"><a name="Flatten&lt;T>"></a>Flatten&lt;T&gt;(TryOption&lt;TryOption&lt;TryOption&lt;TryOption&lt;T&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Flatten_T_TryOption_TryOption&lt;TryOption&lt;TryOption&lt;T>>>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Flatten_T_TryOption_TryOption&lt;TryOption&lt;TryOption&lt;T>>>_self_"><div class="section_title">SOURCE</div><div class="code">
        from x in self
        from y in x
        from z in y
        from w in z
        select w</div></div></div><div class="member-title"><a name="Fold&lt;A, S>"></a>Fold&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_A_S_TryOption_A_self__S__state__Func_S_A_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">Fold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-Fold_A_S_TryOption_A_self__S__state__Func_S_A_S_folder_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted || res.Value.IsNone
            ? state
            : folder(state, res.Value.Value);
    </div></div></div><div class="member-title"><a name="ForAll&lt;A>"></a>ForAll&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll_A_TryOption_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for all values of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAll</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the predicate holds for the bound value, or if the Try computation fails.  False otherwise.</span></div></div></div><div style="display:none" id="code-ForAll_A_TryOption_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted || res.Value.IsNone
            ? false
            : pred(res.Value.Value);
    </div></div></div><div class="member-title"><a name="IfFail&lt;A>"></a>IfFail&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfFail_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Provides a fluent exception matching interface which is invoked when the Try fails. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ExceptionMatch</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">IfFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ExceptionMatch</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Fluent exception matcher</span></div></div></div><div style="display:none" id="code-IfFail_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        if (res.IsFaulted)
            return res.Exception.Match&lt;Option&lt;A&gt;&gt;();
        else
            return new ExceptionMatch&lt;Option&lt;A&gt;&gt;(res.Value);
    </div></div></div><div class="member-title"><a name="IfFailThrow&lt;A>"></a>IfFailThrow&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfFailThrow_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">IfFailThrow</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-IfFailThrow_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        try
        {
            return self().Value.Value;
        }
        catch (Exception e)
        {
            TryConfig.ErrorLogger(e);
            throw;
        }
    </div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(TryOption&lt;A&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_TryOption_A_self__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the Try is in a Fail or None state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >Delegate to invoke if successful</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span> None)</div></div><div style="display:none" id="code-IfNoneOrFail_A_TryOption_A_self__Action__None_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        if (res.IsFaulted || res.Value.IsNone)
        {
            None();
        }
        return unit;
    </div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(TryOption&lt;A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_TryOption_A_self__A__defaultValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return a default value if the Try fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultValue</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc"><span >Default value to use on failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">A</span> defaultValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >failValue on failure, the result of the Try otherwise</span></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_TryOption_A_self__A__defaultValue_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(defaultValue)) throw new ArgumentNullException(nameof(defaultValue));

        var res = TryOptionExtensions.Try(self);
        if (res.IsFaulted || res.Value.IsNone)
            return defaultValue;
        else
            return res.Value.Value;
    </div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_TryOption_A_self__Func_A_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the Try fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke on failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Result of the invocation of Fail on failure, the result of the Try otherwise</span></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_TryOption_A_self__Func_A_None_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        if (res.IsFaulted || res.Value.IsNone)
            return None();
        else
            return res.Value.Value;
    </div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A&gt;, Func&lt;Exception, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_TryOption_A_self__Func_A_None__Func_Exception_A_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke delegates based on None or Failed stateds </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the result is None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the result is Fail</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">A</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Success value, or the result of the None or Failed delegate</span></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_TryOption_A_self__Func_A_None__Func_Exception_A_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        if (res.Value.IsNone)
            return None();
        else if (res.IsFaulted)
            return Fail(res.Exception);
        else
            return res.Value.Value;
    </div></div></div><div class="member-title"><a name="IfSome&lt;A>"></a>IfSome&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfSome_A_TryOption_A_self__Action_A_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the Try returns a value successfully </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if successful</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IfSome</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some)</div></div><div style="display:none" id="code-IfSome_A_TryOption_A_self__Action_A_Some_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        if (!res.IsFaulted &amp;&amp; res.Value.IsSome)
        {
            Some(res.Value.Value);
        }
        return unit;
    </div></div></div><div class="member-title"><a name="Iter&lt;A>"></a>Iter&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter_A_TryOption_A_self__Action_A_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply Try values to a Try function of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Iter</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; action)</div></div><div style="display:none" id="code-Iter_A_TryOption_A_self__Action_A_action_"><div class="section_title">SOURCE</div><div class="code">
        self.IfSome(action)</div></div></div><div class="member-title"><a name="Join&lt;A, U, K, V>"></a>Join&lt;A, U, K, V&gt;(TryOption&lt;A&gt;, TryOption&lt;U&gt;, Func&lt;A, K&gt;, Func&lt;U, K&gt;, Func&lt;A, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Join_A_U_K_V_TryOption_A_self__TryOption_U_inner__Func_A_K_outerKeyMap__Func_U_K_innerKeyMap__Func_A_U_V_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">inner</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">outerKeyMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">K</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">innerKeyMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">U</span>, <span class="ident">K</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">V</span>&gt; <span class="ident">Join</span>&lt;<span class="ident">A</span>, <span class="ident">U</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">TryOption</span>&lt;<span class="ident">U</span>&gt; inner, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">K</span>&gt; outerKeyMap, <span class="ident">Func</span>&lt;<span class="ident">U</span>, <span class="ident">K</span>&gt; innerKeyMap, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Join_A_U_K_V_TryOption_A_self__TryOption_U_inner__Func_A_K_outerKeyMap__Func_U_K_innerKeyMap__Func_A_U_V_project_"><div class="section_title">SOURCE</div><div class="code">
        return Memo&lt;V&gt;(() =&gt;
        {
            var selfRes = self().Value;
            var innerRes = inner().Value;
            return selfRes.IsSome &amp;&amp; innerRes.IsSome &amp;&amp; EqualityComparer&lt;K&gt;.Default.Equals(outerKeyMap(selfRes.Value), innerKeyMap(innerRes.Value))
                ? project(selfRes.Value, innerRes.Value)
                : raise&lt;V&gt;(new BottomException());
        });
    </div></div></div><div class="member-title"><a name="Map&lt;A, B>"></a>Map&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_A_B_TryOption_A_self__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-Map_A_B_TryOption_A_self__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
        Memo(() =&gt; self.Try().Map(f))</div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOption_A_self__Func_A_R_Some__Func_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >The result of either the Succ or Fail delegates</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOption_A_self__Func_A_R_Some__Func_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted || res.Value.IsNone
            ? Fail()
            : Some(res.Value.Value);
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOption_A_self__Func_A_R_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >The result of either the Succ or Fail delegates</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOption_A_self__Func_A_R_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted
            ? Fail(res.Exception)
            : res.Value.IsSome
                ? Some(res.Value.Value)
                : None();
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOption_A_self__Func_A_R_Some__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Default value to use if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >The result of either the Succ delegate or the Fail value</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOption_A_self__Func_A_R_Some__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted || res.Value.IsNone
            ? Fail
            : Some(res.Value.Value);
    </div></div></div><div class="member-title"><a name="Match&lt;A>"></a>Match&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_TryOption_A_self__Action_A_Some__Action__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Match</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some, <span class="ident">Action</span> Fail)</div></div><div style="display:none" id="code-Match_A_TryOption_A_self__Action_A_Some__Action__Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);

        if (res.IsFaulted || res.Value.IsNone)
            Fail();
        else
            Some(res.Value.Value);

        return Unit.Default;
    </div></div></div><div class="member-title"><a name="Match&lt;A>"></a>Match&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;, Action, Action&lt;Exception&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_TryOption_A_self__Action_A_Some__Action__None__Action_Exception_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Match</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some, <span class="ident">Action</span> None, <span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt; Fail)</div></div><div style="display:none" id="code-Match_A_TryOption_A_self__Action_A_Some__Action__None__Action_Exception_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);

        if (res.IsFaulted)
            Fail(res.Exception);
        else if (res.Value.IsNone)
            None();
        else
            Some(res.Value.Value);

        return Unit.Default;
    </div></div></div><div class="member-title"><a name="MatchAsync&lt;A, R>"></a>MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_Some__Func_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_Some__Func_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return await (res.IsFaulted || res.Value.IsNone
            ? Task.FromResult(Fail())
            : Some(res.Value.Value));
    </div></div></div><div class="member-title"><a name="MatchAsync&lt;A, R>"></a>MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return await (res.IsFaulted
            ? Task.FromResult(Fail(res.Exception))
            : res.Value.IsSome
                ? Some(res.Value.Value)
                : Task.FromResult(None()));
    </div></div></div><div class="member-title"><a name="MatchAsync&lt;A, R>"></a>MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return await (res.IsFaulted || res.Value.IsNone
            ? Fail()
            : Some(res.Value.Value));
    </div></div></div><div class="member-title"><a name="MatchAsync&lt;A, R>"></a>MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_A_R_TryOption_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return await (res.IsFaulted
            ? Fail(res.Exception)
            : res.Value.IsSome
                ? Some(res.Value.Value)
                : None());
    </div></div></div><div class="member-title"><a name="MatchAsync&lt;A, R>"></a>MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_R_TryOption_A_self__Func_A_R_Some__Func_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_A_R_TryOption_A_self__Func_A_R_Some__Func_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return await (res.IsFaulted || res.Value.IsNone
            ? Fail()
            : Task.FromResult(Some(res.Value.Value)));
    </div></div></div><div class="member-title"><a name="MatchAsync&lt;A, R>"></a>MatchAsync&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_A_R_TryOption_A_self__Func_A_R_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_A_R_TryOption_A_self__Func_A_R_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return await (res.IsFaulted
            ? Fail(res.Exception)
            : res.Value.IsSome
                ? Task.FromResult(Some(res.Value.Value))
                : None());
    </div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_R_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_R_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        await self.ContinueWith(trySelf =&gt;
        {
            var res = trySelf.Result.Try();
            return res.IsFaulted
            ? Fail(res.Exception)
            : res.Value.IsSome
                ? Some(res.Value.Value)
                : None();
        })</div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_R_Some__Func_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_R_Some__Func_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        await self.ContinueWith(trySelf =&gt;
        {
            var res = trySelf.Result.Try();
            return res.IsFaulted || res.Value.IsNone
            ? Fail()
            : Some(res.Value.Value);
        })</div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        await (from tt in self.ContinueWith(trySelf =&gt;
        {
            var res = trySelf.Result.Try();
            return res.IsFaulted
                ? Task.FromResult(Fail(res.Exception))
                : res.Value.IsSome
                    ? Some(res.Value.Value)
                    : Task.FromResult(None());
        })
        from t in tt
        select t)</div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Some__Func_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Some__Func_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        await (from tt in self.ContinueWith(trySelf =&gt;
        {
            var res = trySelf.Result.Try();
            return res.IsFaulted || res.Value.IsNone
                ? Task.FromResult(Fail())
                : Some(res.Value.Value);
        })
        from t in tt
        select t)</div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Some__Func_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Some__Func_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        await (from tt in self.ContinueWith(trySelf =&gt;
        {
            var res = trySelf.Result.Try();
            return res.IsFaulted || res.Value.IsNone
                ? Fail()
                : Some(res.Value.Value);
        })
        from t in tt
        select t)</div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        await (from tt in self.ContinueWith(trySelf =&gt;
        {
            var res = trySelf.Result.Try();
            return res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.IsSome 
                    ? Some(res.Value.Value)
                    : None();
        })
        from t in tt
        select t)</div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_R_Some__Func_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_R_Some__Func_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        await (from tt in self.ContinueWith(trySelf =&gt;
        {
            var res = trySelf.Result.Try();
            return res.IsFaulted || res.Value.IsNone
                ? Fail()
                : Task.FromResult(Some(res.Value.Value));
        })
        from t in tt
        select t)</div></div></div><div class="member-title"><a name="MatchAsync&lt;T, R>"></a>MatchAsync&lt;T, R&gt;(Task&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_R_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_T_R_Task_TryOption&lt;T>_self__Func_T_R_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        await (from tt in self.ContinueWith(trySelf =&gt;
        {
            var res = trySelf.Result.Try();
            return res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.IsSome
                    ? Task.FromResult(Some(res.Value.Value))
                    : None();
        })
        from t in tt
        select t)</div></div></div><div class="member-title"><a name="MatchObservable&lt;A, R>"></a>MatchObservable&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_A_R_TryOption_A_self__Func_A_IObservable&lt;R>_Some__Func_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_A_R_TryOption_A_self__Func_A_IObservable&lt;R>_Some__Func_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted || res.Value.IsNone
            ? Observable.Return(Fail())
            : Some(res.Value.Value);
    </div></div></div><div class="member-title"><a name="MatchObservable&lt;A, R>"></a>MatchObservable&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_A_R_TryOption_A_self__Func_A_IObservable&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_A_R_TryOption_A_self__Func_A_IObservable&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted
            ? Observable.Return(Fail(res.Exception))
            : res.Value.IsSome
                ? Some(res.Value.Value)
                : Observable.Return(None());
    </div></div></div><div class="member-title"><a name="MatchObservable&lt;A, R>"></a>MatchObservable&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_A_R_TryOption_A_self__Func_A_IObservable&lt;R>_Some__Func_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_A_R_TryOption_A_self__Func_A_IObservable&lt;R>_Some__Func_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted || res.Value.IsNone
            ? Fail()
            : Some(res.Value.Value);
    </div></div></div><div class="member-title"><a name="MatchObservable&lt;A, R>"></a>MatchObservable&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_A_R_TryOption_A_self__Func_A_IObservable&lt;R>_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_A_R_TryOption_A_self__Func_A_IObservable&lt;R>_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted
            ? Fail(res.Exception)
            : res.Value.IsSome
                ? Some(res.Value.Value)
                : None();
    </div></div></div><div class="member-title"><a name="MatchObservable&lt;A, R>"></a>MatchObservable&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_A_R_TryOption_A_self__Func_A_R_Some__Func_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_A_R_TryOption_A_self__Func_A_R_Some__Func_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted || res.Value.IsNone
            ? Fail()
            : Observable.Return(Some(res.Value.Value));
    </div></div></div><div class="member-title"><a name="MatchObservable&lt;A, R>"></a>MatchObservable&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_A_R_TryOption_A_self__Func_A_R_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_A_R_TryOption_A_self__Func_A_R_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted
            ? Fail(res.Exception)
            : res.Value.IsSome
                ? Observable.Return(Some(res.Value.Value))
                : None();
    </div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_R_Some__Func_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_R_Some__Func_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.Select(trySelf =&gt;
        {
            var res = trySelf.Try();
            return res.IsFaulted || res.Value.IsNone
                ? Fail()
                : Some(res.Value.Value);
        })</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Some__Func_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Some__Func_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        from tt in self.Select(trySelf =&gt;
        {
            var res = trySelf.Try();
            return res.IsFaulted || res.Value.IsNone
                ? Observable.Return(Fail())
                : Some(res.Value.Value);
        })
        from t in tt
        select t</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Some__Func_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Some__Func_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        from tt in self.Select(trySelf =&gt;
        {
            var res = trySelf.Try();
            return res.IsFaulted || res.Value.IsNone
                ? Fail()
                : Some(res.Value.Value);
        })
        from t in tt
        select t</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_R_Some__Func_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_R_Some__Func_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        from tt in self.Select(trySelf =&gt;
        {
            var res = trySelf.Try();
            return res.IsFaulted || res.Value.IsNone
                ? Fail()
                : Observable.Return(Some(res.Value.Value));
        })
        from t in tt
        select t</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_R_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_R_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.Select(trySelf =&gt;
        {
            var res = trySelf.Try();
            return res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.IsSome 
                    ? Some(res.Value.Value)
                    : None();
        })</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        from tt in self.Select(trySelf =&gt;
        {
            var res = trySelf.Try();
            return res.IsFaulted
                ? Observable.Return(Fail(res.Exception))
                : res.Value.IsSome 
                    ? Some(res.Value.Value)
                    : Observable.Return(None());
        })
        from t in tt
        select t</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_IObservable&lt;R>_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        from tt in self.Select(trySelf =&gt;
        {
            var res = trySelf.Try();
            return res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.IsSome 
                    ? Some(res.Value.Value)
                    : None();
        })
        from t in tt
        select t</div></div></div><div class="member-title"><a name="MatchObservable&lt;T, R>"></a>MatchObservable&lt;T, R&gt;(IObservable&lt;TryOption&lt;T&gt;&gt;, Func&lt;T, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_R_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_T_R_IObservable_TryOption&lt;T>_self__Func_T_R_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        from tt in self.Select(trySelf =&gt;
        {
            var res = trySelf.Try();
            return res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.IsSome 
                    ? Observable.Return(Some(res.Value.Value))
                    : None();
        })
        from t in tt
        select t</div></div></div><div class="member-title"><a name="Memo&lt;A>"></a>Memo&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Memo_A_TryOption_A_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Memoize the computation so that it&#39;s only run once </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Memo</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Memo_A_TryOption_A_ma_"><div class="section_title">SOURCE</div><div class="code">
        bool run = false;
        OptionalResult&lt;A&gt; result = new OptionalResult&lt;A&gt;();
        return (() =&gt;
        {
            if (run) return result;
            result = ma.Try();
            run = true;
            return result;
        });
    </div></div></div><div class="member-title"><a name="ParMap&lt;A, B, C, R>"></a>ParMap&lt;A, B, C, R&gt;(TryOption&lt;A&gt;, Func&lt;A, B, C, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParMap_A_B_C_R_TryOption_A_self__Func_A_B_C_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">ParMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParMap_A_B_C_R_TryOption_A_self__Func_A_B_C_R_func_"><div class="section_title">SOURCE</div><div class="code">
        self.Map(curry(func))</div></div></div><div class="member-title"><a name="ParMap&lt;A, B, R>"></a>ParMap&lt;A, B, R&gt;(TryOption&lt;A&gt;, Func&lt;A, B, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParMap_A_B_R_TryOption_A_self__Func_A_B_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">ParMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParMap_A_B_R_TryOption_A_self__Func_A_B_R_func_"><div class="section_title">SOURCE</div><div class="code">
        self.Map(curry(func))</div></div></div><div class="member-title"><a name="Product&lt;NUM, A>"></a>Product&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Product_NUM_A_TryOption_A_lhs__TryOption_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Multiply the bound value of Try(x) and Try(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Product_NUM_A_TryOption_A_lhs__TryOption_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
        from x in lhs
        from y in rhs
        select product&lt;NUM, A&gt;(x, y)</div></div></div><div class="member-title"><a name="Select&lt;A, B>"></a>Select&lt;A, B&gt;(TryOption&lt;A&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_A_B_TryOption_A_self__Func_A_B_select_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">select</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Select</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; select)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Select_A_B_TryOption_A_self__Func_A_B_select_"><div class="section_title">SOURCE</div><div class="code">
        Map(self, select)</div></div></div><div class="member-title"><a name="SelectMany&lt;A, B, C>"></a>SelectMany&lt;A, B, C&gt;(TryOption&lt;A&gt;, Func&lt;A, TryOption&lt;B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_A_B_C_TryOption_A_self__Func_A_TryOption&lt;B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">C</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_A_B_C_TryOption_A_self__Func_A_TryOption&lt;B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
            MTryOption&lt;A&gt;.Inst.Bind&lt;MTryOption&lt;C&gt;, TryOption&lt;C&gt;, C&gt;(self, a =&gt;
            MTryOption&lt;B&gt;.Inst.Bind&lt;MTryOption&lt;C&gt;, TryOption&lt;C&gt;, C&gt;(bind(a), b =&gt;
            MTryOption&lt;C&gt;.Inst.Return(project(a, b))))</div></div></div><div class="member-title"><a name="Some&lt;A, R>"></a>Some&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Some_A_R_TryOption_A_self__Func_A_R_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionSomeContext</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; <span class="ident">Some</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionSomeContext</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Some_A_R_TryOption_A_self__Func_A_R_Some_"><div class="section_title">SOURCE</div><div class="code">
        new TryOptionSomeContext&lt;A, R&gt;(self, Some)</div></div></div><div class="member-title"><a name="Some&lt;A>"></a>Some&lt;A&gt;(TryOption&lt;A&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Some_A_TryOption_A_self__Action_A_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionSomeUnitContext</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Some</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionSomeUnitContext</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Some_A_TryOption_A_self__Action_A_Some_"><div class="section_title">SOURCE</div><div class="code">
        new TryOptionSomeUnitContext&lt;A&gt;(self, Some)</div></div></div><div class="member-title"><a name="Subtract&lt;NUM, A>"></a>Subtract&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subtract_NUM_A_TryOption_A_lhs__TryOption_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the subtract of the bound value of Try(x) and Try(y).  If either of  the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Subtract</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Subtract_NUM_A_TryOption_A_lhs__TryOption_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
        from x in lhs
        from y in rhs
        select subtract&lt;NUM, A&gt;(x, y)</div></div></div><div class="member-title"><a name="Sum"></a>Sum(TryOption&lt;int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum__TryOption_int_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="keyword">int</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">Sum</span>(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="keyword">int</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Sum__TryOption_int_self_"><div class="section_title">SOURCE</div><div class="code">
        self.Try().Value.Sum()</div></div></div><div class="member-title"><a name="ToArray&lt;A>"></a>ToArray&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToArray_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToArray</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToArray_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        toArray(self.AsEnumerable())</div></div></div><div class="member-title"><a name="ToEither&lt;A>"></a>ToEither&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEither_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToEither</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToEither_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted
            ? Left&lt;Exception, Option&lt;A&gt;&gt;(res.Exception)
            : Right&lt;Exception, Option&lt;A&gt;&gt;(res.Value);
    </div></div></div><div class="member-title"><a name="ToEitherUnsafe&lt;A>"></a>ToEitherUnsafe&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEitherUnsafe_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToEitherUnsafe</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToEitherUnsafe_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted
            ? LeftUnsafe&lt;Exception, Option&lt;A&gt;&gt;(res.Exception)
            : RightUnsafe&lt;Exception, Option&lt;A&gt;&gt;(res.Value);
    </div></div></div><div class="member-title"><a name="ToList&lt;A>"></a>ToList&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToList_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToList</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToList_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        toList(self.AsEnumerable())</div></div></div><div class="member-title"><a name="ToNullable&lt;A>"></a>ToNullable&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToNullable_A_TryOption_A_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Try type to a Nullable of A </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to convert</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span>? <span class="ident">ToNullable</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span>?</div><div class="normal"><span >Nullable of A</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">A</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-ToNullable_A_TryOption_A_ma_"><div class="section_title">SOURCE</div><div class="code">
        var x = ma.Try();
        return x.IsFaulted || x.Value.IsNone
            ? (A?)null
            : x.Value.Value;
    </div></div></div><div class="member-title"><a name="ToOption&lt;A>"></a>ToOption&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToOption_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToOption</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToOption_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted
            ? None
            : res.Value;
    </div></div></div><div class="member-title"><a name="ToOptionUnsafe&lt;A>"></a>ToOptionUnsafe&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToOptionUnsafe_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToOptionUnsafe</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToOptionUnsafe_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted
            ? None
            : res.Value.ToOptionUnsafe();
    </div></div></div><div class="member-title"><a name="ToSeq&lt;A>"></a>ToSeq&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToSeq_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToSeq</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToSeq_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.Value.IsSome
            ? res.Value.Value.Cons(Empty)
            : Empty;
    </div></div></div><div class="member-title"><a name="ToTry&lt;A>"></a>ToTry&lt;A&gt;(TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToTry_A_TryOption_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToTry</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToTry_A_TryOption_A_self_"><div class="section_title">SOURCE</div><div class="code"> () =&gt; 
        self.IfFailThrow()</div></div></div><div class="member-title"><a name="TriBind&lt;A, R>"></a>TriBind&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, TryOption&lt;R&gt;&gt;, Func&lt;TryOption&lt;R&gt;&gt;, Func&lt;Exception, TryOption&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriBind_A_R_TryOption_A_self__Func_A_TryOption&lt;R>_Some__Func_TryOption&lt;R>_None__Func_Exception_TryOption&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">TriBind</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-TriBind_A_R_TryOption_A_self__Func_A_TryOption&lt;R>_Some__Func_TryOption&lt;R>_None__Func_Exception_TryOption&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        return Memo&lt;R&gt;(() =&gt;
        {
            var res = self().Value;
            return res.IsSome
                ? Some(res.Value)().Value 
                : None()().Value;
        });
    </div></div></div><div class="member-title"><a name="TriFold&lt;A, S>"></a>TriFold&lt;A, S&gt;(TryOption&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFold_A_S_TryOption_A_self__S__state__Func_S_A_S_Some__Func_S_S_None__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">TriFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFold_A_S_TryOption_A_self__S__state__Func_S_A_S_Some__Func_S_S_None__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        var res = TryOptionExtensions.Try(self);
        return res.IsFaulted
            ? Fail(state, res.Exception)
            : res.Value.IsSome
                ? Some(state, res.Value.Value)
                : None(state);
    </div></div></div><div class="member-title"><a name="TriMap&lt;A, R>"></a>TriMap&lt;A, R&gt;(TryOption&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMap_A_R_TryOption_A_self__Func_A_R_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">TriMap</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-TriMap_A_R_TryOption_A_self__Func_A_R_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        return Memo&lt;R&gt;(() =&gt;
        {
            var res = self.Try();
            return res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.IsSome
                    ? Some(res.Value.Value)
                    : None();
        });
    </div></div></div><div class="member-title"><a name="Try&lt;T>"></a>Try&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Try_T_TryOption_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Savely invokes the TryOption computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryOption to invoke</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionalResult</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionalResult</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >TryOptionResult</span></div></div></div><div style="display:none" id="code-Try_T_TryOption_T_self_"><div class="section_title">SOURCE</div><div class="code">
        try
        {
            if (self == null)
            {
                throw new ArgumentNullException(&quot;this is null&quot;);
            }
            return self();
        }
        catch (Exception e)
        {
            TryConfig.ErrorLogger(e);
            return new OptionalResult&lt;T&gt;(e);
        }
    </div></div></div><div class="member-title"><a name="Use&lt;T, U>"></a>Use&lt;T, U&gt;(TryOption&lt;T&gt;, Func&lt;T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Use_T_U_TryOption_T_self__Func_T_U_select_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">select</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">U</span>&gt; <span class="ident">Use</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; select)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">U</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="ident">IDisposable</span></div></div><div style="display:none" id="code-Use_T_U_TryOption_T_self__Func_T_U_select_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
        {
            T t = default(T);
            try
            {
                var opt = self().Value;
                if (opt.IsNone) return opt.Map(select);
                t = opt.Value;
                return select(t);
            }
            finally
            {
                t?.Dispose();
            }
        }</div></div></div><div class="member-title"><a name="Where&lt;A>"></a>Where&lt;A&gt;(TryOption&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_A_TryOption_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Where</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Where_A_TryOption_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.Filter(pred)</div></div></div></div></body></html>