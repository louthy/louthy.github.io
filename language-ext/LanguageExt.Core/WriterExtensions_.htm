<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="..//index.htm"></a> \ <span class="nav-bar-link" href="WriterExtensions_.htm">WriterExtensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#AsEnumerable&lt;MonoidW, W, A>">AsEnumerable&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;)</a><a class="nav-link" href="#Bind&lt;MonoidW, W, A, B>">Bind&lt;MonoidW, W, A, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, Writer&lt;MonoidW, W, B&gt;&gt;)</a><a class="nav-link" href="#Censor&lt;MonoidW, W, A>">Censor&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;W, W&gt;)</a><a class="nav-link" href="#Count&lt;MonoidW, W>">Count&lt;MonoidW, W&gt;(Writer&lt;MonoidW, W, int&gt;)</a><a class="nav-link" href="#Exists&lt;MonoidW, W, A>">Exists&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Filter&lt;MonoidW, W, A>">Filter&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Fold&lt;FState, MonoidW, W, A>">Fold&lt;FState, MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, FState, Func&lt;FState, A, FState&gt;)</a><a class="nav-link" href="#Fold&lt;MonoidW, W, A>">Fold&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;W, A, W&gt;)</a><a class="nav-link" href="#ForAll&lt;MonoidW, W, A>">ForAll&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Iter&lt;MonoidW, W, A>">Iter&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#Listen&lt;MonoidW, W, A, B>">Listen&lt;MonoidW, W, A, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;W, B&gt;)</a><a class="nav-link" href="#Map&lt;MonoidW, W, A, B>">Map&lt;MonoidW, W, A, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Pass&lt;MonoidW, W, A>">Pass&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, ValueTuple&lt;A, Func&lt;W, W&gt;&gt;&gt;)</a><a class="nav-link" href="#Run&lt;MonoidW, W, A>">Run&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;)</a><a class="nav-link" href="#Select&lt;MonoidW, W, A, B>">Select&lt;MonoidW, W, A, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#SelectMany&lt;MonoidW, W, A, B, C>">SelectMany&lt;MonoidW, W, A, B, C&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, Writer&lt;MonoidW, W, B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#Sum&lt;MonoidW, W>">Sum&lt;MonoidW, W&gt;(Writer&lt;MonoidW, W, int&gt;)</a><a class="nav-link" href="#ToSeq&lt;MonoidW, W, A>">ToSeq&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;)</a><a class="nav-link" href="#Where&lt;MonoidW, W, A>">Where&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, bool&gt;)</a></div><div class="content-panel"><h1 >WriterExtensions Class</h1><p ><span >Extension methods for Writer </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">WriterExtensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div></div></div><h2 >Methods</h2><div class="member-title"><a name="AsEnumerable&lt;MonoidW, W, A>"></a>AsEnumerable&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable_MonoidW_W_A_Writer_MonoidW_W_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">AsEnumerable</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-AsEnumerable_MonoidW_W_A_Writer_MonoidW_W_A_self_"><div class="section_title">SOURCE</div><div class="code">
            self.ToSeq()</div></div></div><div class="member-title"><a name="Bind&lt;MonoidW, W, A, B>"></a>Bind&lt;MonoidW, W, A, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, Writer&lt;MonoidW, W, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_MonoidW_W_A_B_Writer_MonoidW_W_A_self__Func_A_Writer&lt;MonoidW, W, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt; <span class="ident">Bind</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Bind_MonoidW_W_A_B_Writer_MonoidW_W_A_self__Func_A_Writer&lt;MonoidW, W, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            default(MWriter&lt;MonoidW, W, A&gt;)
                .Bind&lt;MWriter&lt;MonoidW, W, B&gt;, Writer&lt;MonoidW, W, B&gt;, B&gt;(self, f)</div></div></div><div class="member-title"><a name="Censor&lt;MonoidW, W, A>"></a>Censor&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;W, W&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Censor_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_W_W_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Censor is an action that executes the writer monad and applies the function f  to its output, leaving the return value, leaving the return value unchanged. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">W</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">Censor</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">W</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Censor_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_W_W_f_"><div class="section_title">SOURCE</div><div class="code">
            Pass(
                default(MWriter&lt;MonoidW, W, A&gt;)
                    .Bind&lt;MWriter&lt;MonoidW, W, (A, Func&lt;W, W&gt;)&gt;, Writer&lt;MonoidW, W, (A, Func&lt;W, W&gt;)&gt;, (A, Func&lt;W, W&gt;)&gt;(self, a =&gt;
                        default(MWriter&lt;MonoidW, W, (A, Func&lt;W, W&gt;)&gt;)
                            .Return(_ =&gt; (a, f))))</div></div></div><div class="member-title"><a name="Count&lt;MonoidW, W>"></a>Count&lt;MonoidW, W&gt;(Writer&lt;MonoidW, W, int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Count_MonoidW_W_Writer_MonoidW_W_int_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt; <span class="ident">Count</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Count_MonoidW_W_Writer_MonoidW_W_int_self_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt;
            {
                var (x, s, b) = self();
                return b
                    ? (0, default(MonoidW).Empty(), false)
                    : (1, s, false);
            }</div></div></div><div class="member-title"><a name="Exists&lt;MonoidW, W, A>"></a>Exists&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">bool</span>&gt; <span class="ident">Exists</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">bool</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Exists_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt;
            {
                var (x, s, b) = self();
                return b
                    ? (false, default(MonoidW).Empty(), false)
                    : (pred(x), s, false);
            }</div></div></div><div class="member-title"><a name="Filter&lt;MonoidW, W, A>"></a>Filter&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">Filter</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Filter_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Where(pred)</div></div></div><div class="member-title"><a name="Fold&lt;FState, MonoidW, W, A>"></a>Fold&lt;FState, MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, FState, Func&lt;FState, A, FState&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_FState_MonoidW_W_A_Writer_MonoidW_W_A_self__FState__initialState__Func_FState_A_FState_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">initialState</div><div class="arg-type"><span class="ident">FState</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">FState</span>, <span class="ident">A</span>, <span class="ident">FState</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">FState</span>&gt; <span class="ident">Fold</span>&lt;<span class="ident">FState</span>, <span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">FState</span> initialState, <span class="ident">Func</span>&lt;<span class="ident">FState</span>, <span class="ident">A</span>, <span class="ident">FState</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">FState</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Fold_FState_MonoidW_W_A_Writer_MonoidW_W_A_self__FState__initialState__Func_FState_A_FState_f_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt;
            {
                var (x, s, b) = self();
                return b
                    ? (default(FState), default(MonoidW).Empty(), true)
                    : (f(initialState, x), s, false);
            }</div></div></div><div class="member-title"><a name="Fold&lt;MonoidW, W, A>"></a>Fold&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;W, A, W&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_W_A_W_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">A</span>, <span class="ident">W</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">W</span>&gt; <span class="ident">Fold</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">A</span>, <span class="ident">W</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">W</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Fold_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_W_A_W_f_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt;
            {
                var (x, s, b) = self();
                if (b) return (default(MonoidW).Empty(), default(MonoidW).Empty(), true);
                return (f(s, x), s, false);
            }</div></div></div><div class="member-title"><a name="ForAll&lt;MonoidW, W, A>"></a>ForAll&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">bool</span>&gt; <span class="ident">ForAll</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">bool</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-ForAll_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt;
            {
                var (x, s, b) = self();
                return b
                    ? (false, default(MonoidW).Empty(), false)
                    : (pred(x), s, false);
            }</div></div></div><div class="member-title"><a name="Iter&lt;MonoidW, W, A>"></a>Iter&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter_MonoidW_W_A_Writer_MonoidW_W_A_self__Action_A_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">Unit</span>&gt; <span class="ident">Iter</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; action)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Iter_MonoidW_W_A_Writer_MonoidW_W_A_self__Action_A_action_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt; {
                var (x, s, b) = self();
                if (!b) action(x);
                return (unit, s, false);
            }</div></div></div><div class="member-title"><a name="Listen&lt;MonoidW, W, A, B>"></a>Listen&lt;MonoidW, W, A, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;W, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Listen_MonoidW_W_A_B_Writer_MonoidW_W_A_self__Func_W_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >listen is an action that executes the monad and adds its output to the value of the computation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Listen</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Listen_MonoidW_W_A_B_Writer_MonoidW_W_A_self__Func_W_B_f_"><div class="section_title">SOURCE</div><div class="code">
            default(MWriter&lt;MonoidW, W, A&gt;).Listen(self, f)</div></div></div><div class="member-title"><a name="Map&lt;MonoidW, W, A, B>"></a>Map&lt;MonoidW, W, A, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_MonoidW_W_A_B_Writer_MonoidW_W_A_self__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Map_MonoidW_W_A_B_Writer_MonoidW_W_A_self__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            self.Select(f)</div></div></div><div class="member-title"><a name="Pass&lt;MonoidW, W, A>"></a>Pass&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, ValueTuple&lt;A, Func&lt;W, W&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Pass_MonoidW_W_A_Writer_MonoidW_W_ValueTuple&lt;A, Func&lt;W, W>>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >pass is an action that executes the monad, which returns a value and a function, and returns the value, applying the function to the output. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">W</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">Pass</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">W</span>&gt;&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Pass_MonoidW_W_A_Writer_MonoidW_W_ValueTuple&lt;A, Func&lt;W, W>>_self_"><div class="section_title">SOURCE</div><div class="code">
        () =&gt;
        {
            var ((a, f), w, b) = self();
            if (b) return (default(A), default(MonoidW).Empty(), true);
            return (a, f(w), false);
        }</div></div></div><div class="member-title"><a name="Run&lt;MonoidW, W, A>"></a>Run&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Run_MonoidW_W_A_Writer_MonoidW_W_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Runs the Writer monad and memoizes the result in a TryOption monad.  Use Match, IfSucc, IfNone, etc to extract. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">W</span>&gt; <span class="ident">Run</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">W</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Run_MonoidW_W_A_Writer_MonoidW_W_A_self_"><div class="section_title">SOURCE</div><div class="code">
        try
        {
            if (self == null) return (() =&gt; Option&lt;A&gt;.None, default(MonoidW).Empty());
            var (a, output2, b) = self();
            if (b)
            {
                return (() =&gt; Option&lt;A&gt;.None, default(MonoidW).Empty());
            }
            else
            {
                return (() =&gt; Optional(a), output2);
            }
        }
        catch (Exception e)
        {
            return (() =&gt; new OptionalResult&lt;A&gt;(e), default(MonoidW).Empty());
        }
    </div></div></div><div class="member-title"><a name="Select&lt;MonoidW, W, A, B>"></a>Select&lt;MonoidW, W, A, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_MonoidW_W_A_B_Writer_MonoidW_W_A_self__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt; <span class="ident">Select</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Select_MonoidW_W_A_B_Writer_MonoidW_W_A_self__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            default(MWriter&lt;MonoidW, W, A&gt;).Bind&lt;MWriter&lt;MonoidW, W, B&gt;, Writer&lt;MonoidW, W, B&gt;, B&gt;(self, a =&gt;
            default(MWriter&lt;MonoidW, W, B&gt;).Return(_ =&gt; f(a)))</div></div></div><div class="member-title"><a name="SelectMany&lt;MonoidW, W, A, B, C>"></a>SelectMany&lt;MonoidW, W, A, B, C&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, Writer&lt;MonoidW, W, B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_MonoidW_W_A_B_C_Writer_MonoidW_W_A_self__Func_A_Writer&lt;MonoidW, W, B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">C</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">C</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-SelectMany_MonoidW_W_A_B_C_Writer_MonoidW_W_A_self__Func_A_Writer&lt;MonoidW, W, B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                default(MWriter&lt;MonoidW, W, A&gt;).Bind&lt;MWriter&lt;MonoidW, W, C&gt;, Writer&lt;MonoidW, W, C&gt;, C&gt;(self, a =&gt;
                default(MWriter&lt;MonoidW, W, B&gt;).Bind&lt;MWriter&lt;MonoidW, W, C&gt;, Writer&lt;MonoidW, W, C&gt;, C&gt;(bind(a), b =&gt;
                default(MWriter&lt;MonoidW, W, C&gt;).Return(_ =&gt; project(a, b))))</div></div></div><div class="member-title"><a name="Sum&lt;MonoidW, W>"></a>Sum&lt;MonoidW, W&gt;(Writer&lt;MonoidW, W, int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum_MonoidW_W_Writer_MonoidW_W_int_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt; <span class="ident">Sum</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Sum_MonoidW_W_Writer_MonoidW_W_int_self_"><div class="section_title">SOURCE</div><div class="code">
        self</div></div></div><div class="member-title"><a name="ToSeq&lt;MonoidW, W, A>"></a>ToSeq&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToSeq_MonoidW_W_A_Writer_MonoidW_W_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToSeq</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-ToSeq_MonoidW_W_A_Writer_MonoidW_W_A_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Select(x =&gt; x.Cons(Empty))</div></div></div><div class="member-title"><a name="Where&lt;MonoidW, W, A>"></a>Where&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">Where</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Where_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt; {
                var (x, s, b) = self();
                if (b) return (default(A), default(MonoidW).Empty(), true);
                if (!pred(x)) return (default(A), default(MonoidW).Empty(), true);
                return (x, s, b);
            }</div></div></div></div></body></html>