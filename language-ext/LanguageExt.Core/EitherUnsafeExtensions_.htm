<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="..//index.htm"></a> \ <span class="nav-bar-link" href="EitherUnsafeExtensions_.htm">EitherUnsafeExtensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Action&lt;L, A, B>">Action&lt;L, A, B&gt;(EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;)</a><a class="nav-link" href="#Apply&lt;L, A, B, C>">Apply&lt;L, A, B, C&gt;(EitherUnsafe&lt;L, Func&lt;A, B, C&gt;&gt;, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;)</a><a class="nav-link" href="#Apply&lt;L, A, B, C>">Apply&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;)</a><a class="nav-link" href="#Apply&lt;L, A, B, C>">Apply&lt;L, A, B, C&gt;(EitherUnsafe&lt;L, Func&lt;A, B, C&gt;&gt;, EitherUnsafe&lt;L, A&gt;)</a><a class="nav-link" href="#Apply&lt;L, A, B, C>">Apply&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, EitherUnsafe&lt;L, A&gt;)</a><a class="nav-link" href="#Apply&lt;L, A, B, C>">Apply&lt;L, A, B, C&gt;(EitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, EitherUnsafe&lt;L, A&gt;)</a><a class="nav-link" href="#Apply&lt;L, A, B>">Apply&lt;L, A, B&gt;(EitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;, EitherUnsafe&lt;L, A&gt;)</a><a class="nav-link" href="#Apply&lt;L, A, B>">Apply&lt;L, A, B&gt;(Func&lt;A, B&gt;, EitherUnsafe&lt;L, A&gt;)</a><a class="nav-link" href="#BindAsync&lt;L, R, R2>">BindAsync&lt;L, R, R2&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, Task&lt;EitherUnsafe&lt;L, R2&gt;&gt;&gt;)</a><a class="nav-link" href="#BindAsync&lt;L, R, R2>">BindAsync&lt;L, R, R2&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, Task&lt;EitherUnsafe&lt;L, R2&gt;&gt;&gt;)</a><a class="nav-link" href="#BindAsync&lt;L, R, R2>">BindAsync&lt;L, R, R2&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, EitherUnsafe&lt;L, R2&gt;&gt;)</a><a class="nav-link" href="#BindAsync&lt;L, R, R2>">BindAsync&lt;L, R, R2&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Func&lt;R, EitherUnsafe&lt;L, R2&gt;&gt;)</a><a class="nav-link" href="#BindAsync&lt;L, R, R2>">BindAsync&lt;L, R, R2&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Func&lt;R, Task&lt;EitherUnsafe&lt;L, R2&gt;&gt;&gt;)</a><a class="nav-link" href="#CountAsync&lt;L, R>">CountAsync&lt;L, R&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;)</a><a class="nav-link" href="#Divide&lt;NUM, L, R>">Divide&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#ExistsAsync&lt;L, R>">ExistsAsync&lt;L, R&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, bool&gt;)</a><a class="nav-link" href="#ExistsAsync&lt;L, R>">ExistsAsync&lt;L, R&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Func&lt;R, bool&gt;)</a><a class="nav-link" href="#FoldAsync&lt;L, R, S>">FoldAsync&lt;L, R, S&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, S, Func&lt;S, R, S&gt;)</a><a class="nav-link" href="#FoldAsync&lt;L, R, S>">FoldAsync&lt;L, R, S&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, S, Func&lt;S, R, S&gt;)</a><a class="nav-link" href="#ForAllAsync&lt;L, R>">ForAllAsync&lt;L, R&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, bool&gt;)</a><a class="nav-link" href="#ForAllAsync&lt;L, R>">ForAllAsync&lt;L, R&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Func&lt;R, bool&gt;)</a><a class="nav-link" href="#IterAsync&lt;L, R>">IterAsync&lt;L, R&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, Action&lt;R&gt;)</a><a class="nav-link" href="#IterAsync&lt;L, R>">IterAsync&lt;L, R&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Action&lt;R&gt;)</a><a class="nav-link" href="#Lefts&lt;L, R>">Lefts&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;)</a><a class="nav-link" href="#Lefts&lt;L, R>">Lefts&lt;L, R&gt;(Seq&lt;EitherUnsafe&lt;L, R&gt;&gt;)</a><a class="nav-link" href="#MapAsync&lt;L, R, R2>">MapAsync&lt;L, R, R2&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, Task&lt;R2&gt;&gt;)</a><a class="nav-link" href="#MapAsync&lt;L, R, R2>">MapAsync&lt;L, R, R2&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, Task&lt;R2&gt;&gt;)</a><a class="nav-link" href="#MapAsync&lt;L, R, R2>">MapAsync&lt;L, R, R2&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, R2&gt;)</a><a class="nav-link" href="#MapAsync&lt;L, R, R2>">MapAsync&lt;L, R, R2&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Func&lt;R, R2&gt;)</a><a class="nav-link" href="#MapAsync&lt;L, R, R2>">MapAsync&lt;L, R, R2&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Func&lt;R, Task&lt;R2&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;L, R, R2>">MatchAsync&lt;L, R, R2&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Func&lt;R, R2&gt;, Func&lt;L, R2&gt;)</a><a class="nav-link" href="#MatchObservable&lt;L, R, R2>">MatchObservable&lt;L, R, R2&gt;(EitherUnsafe&lt;L, IObservable&lt;R&gt;&gt;, Func&lt;R, R2&gt;, Func&lt;L, R2&gt;)</a><a class="nav-link" href="#MatchObservable&lt;L, R, R2>">MatchObservable&lt;L, R, R2&gt;(IObservable&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, R2&gt;, Func&lt;L, R2&gt;)</a><a class="nav-link" href="#ParMap&lt;L, T1, T2, R>">ParMap&lt;L, T1, T2, R&gt;(EitherUnsafe&lt;L, T1&gt;, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#ParMap&lt;L, T1, T2, T3, R>">ParMap&lt;L, T1, T2, T3, R&gt;(EitherUnsafe&lt;L, T1&gt;, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#Partition&lt;L, R>">Partition&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;)</a><a class="nav-link" href="#Partition&lt;L, R>">Partition&lt;L, R&gt;(Seq&lt;EitherUnsafe&lt;L, R&gt;&gt;)</a><a class="nav-link" href="#Plus&lt;NUM, L, R>">Plus&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#Product&lt;NUM, L, R>">Product&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#Rights&lt;L, R>">Rights&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;)</a><a class="nav-link" href="#Rights&lt;L, R>">Rights&lt;L, R&gt;(Seq&lt;EitherUnsafe&lt;L, R&gt;&gt;)</a><a class="nav-link" href="#Subtract&lt;NUM, L, R>">Subtract&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#Sum&lt;L>">Sum&lt;L&gt;(EitherUnsafe&lt;L, int&gt;)</a><a class="nav-link" href="#Sum&lt;NUM, L, R>">Sum&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#SumAsync&lt;L>">SumAsync&lt;L&gt;(Task&lt;EitherUnsafe&lt;L, int&gt;&gt;)</a><a class="nav-link" href="#SumAsync&lt;L>">SumAsync&lt;L&gt;(EitherUnsafe&lt;L, Task&lt;int&gt;&gt;)</a></div><div class="content-panel"><h1 >EitherUnsafeExtensions Class</h1><p ><span >Extension methods for Either </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">EitherUnsafeExtensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div></div></div><h2 >Methods</h2><div class="member-title"><a name="Action&lt;L, A, B>"></a>Action&lt;L, A, B&gt;(EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Action_L_A_B_EitherUnsafe_L_A_fa__EitherUnsafe_L_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Evaluate fa, then fb, ignoring the result of fa </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate first</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate second and then return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; <span class="ident">Action</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type Option&lt;B&gt;</span></div></div></div><div style="display:none" id="code-Action_L_A_B_EitherUnsafe_L_A_fa__EitherUnsafe_L_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Action(fa, fb)</div></div></div><div class="member-title"><a name="Apply&lt;L, A, B, C>"></a>Apply&lt;L, A, B, C&gt;(EitherUnsafe&lt;L, Func&lt;A, B, C&gt;&gt;, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_L_A_B_C_EitherUnsafe_L_Func&lt;A, B, C>_fabc__EitherUnsafe_L_A_fa__EitherUnsafe_L_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-Apply_L_A_B_C_EitherUnsafe_L_Func&lt;A, B, C>_fabc__EitherUnsafe_L_A_fa__EitherUnsafe_L_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        from x in fabc
        from y in ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(curry(x), fa, fb)
        select y</div></div></div><div class="member-title"><a name="Apply&lt;L, A, B, C>"></a>Apply&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_L_A_B_C_Func_A_B_C_fabc__EitherUnsafe_L_A_fa__EitherUnsafe_L_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-Apply_L_A_B_C_Func_A_B_C_fabc__EitherUnsafe_L_A_fa__EitherUnsafe_L_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(curry(fabc), fa, fb)</div></div></div><div class="member-title"><a name="Apply&lt;L, A, B, C>"></a>Apply&lt;L, A, B, C&gt;(EitherUnsafe&lt;L, Func&lt;A, B, C&gt;&gt;, EitherUnsafe&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_L_A_B_C_EitherUnsafe_L_Func&lt;A, B, C>_fabc__EitherUnsafe_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-Apply_L_A_B_C_EitherUnsafe_L_Func&lt;A, B, C>_fabc__EitherUnsafe_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        from x in fabc
        from y in ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(curry(x), fa)
        select y</div></div></div><div class="member-title"><a name="Apply&lt;L, A, B, C>"></a>Apply&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, EitherUnsafe&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_L_A_B_C_Func_A_B_C_fabc__EitherUnsafe_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-Apply_L_A_B_C_Func_A_B_C_fabc__EitherUnsafe_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(curry(fabc), fa)</div></div></div><div class="member-title"><a name="Apply&lt;L, A, B, C>"></a>Apply&lt;L, A, B, C&gt;(EitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, EitherUnsafe&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_L_A_B_C_EitherUnsafe_L_Func&lt;A, Func&lt;B, C>>_fabc__EitherUnsafe_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-Apply_L_A_B_C_EitherUnsafe_L_Func&lt;A, Func&lt;B, C>>_fabc__EitherUnsafe_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="Apply&lt;L, A, B>"></a>Apply&lt;L, A, B&gt;(EitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;, EitherUnsafe&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_L_A_B_EitherUnsafe_L_Func&lt;A, B>_fab__EitherUnsafe_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; fab, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-Apply_L_A_B_EitherUnsafe_L_Func&lt;A, B>_fab__EitherUnsafe_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="Apply&lt;L, A, B>"></a>Apply&lt;L, A, B&gt;(Func&lt;A, B&gt;, EitherUnsafe&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_L_A_B_Func_A_B_fab__EitherUnsafe_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-Apply_L_A_B_Func_A_B_fab__EitherUnsafe_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="BindAsync&lt;L, R, R2>"></a>BindAsync&lt;L, R, R2&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, Task&lt;EitherUnsafe&lt;L, R2&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindAsync_L_R_R2_EitherUnsafe_L_R_self__Func_R_Task&lt;EitherUnsafe&lt;L, R2>>_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt; <span class="ident">BindAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BindAsync_L_R_R2_EitherUnsafe_L_R_self__Func_R_Task&lt;EitherUnsafe&lt;L, R2>>_bind_"><div class="section_title">SOURCE</div><div class="code">
        self.IsRight
            ? await bind(self.RightValue)
            : LeftUnsafe&lt;L, R2&gt;(self.LeftValue)</div></div></div><div class="member-title"><a name="BindAsync&lt;L, R, R2>"></a>BindAsync&lt;L, R, R2&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, Task&lt;EitherUnsafe&lt;L, R2&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindAsync_L_R_R2_Task_EitherUnsafe&lt;L, R>_self__Func_R_Task&lt;EitherUnsafe&lt;L, R2>>_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt; <span class="ident">BindAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BindAsync_L_R_R2_Task_EitherUnsafe&lt;L, R>_self__Func_R_Task&lt;EitherUnsafe&lt;L, R2>>_bind_"><div class="section_title">SOURCE</div><div class="code">
        var val = await self;
        return val.IsRight
            ? await bind(val.RightValue)
            : LeftUnsafe&lt;L, R2&gt;(val.LeftValue);
    </div></div></div><div class="member-title"><a name="BindAsync&lt;L, R, R2>"></a>BindAsync&lt;L, R, R2&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, EitherUnsafe&lt;L, R2&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindAsync_L_R_R2_Task_EitherUnsafe&lt;L, R>_self__Func_R_EitherUnsafe&lt;L, R2>_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt; <span class="ident">BindAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BindAsync_L_R_R2_Task_EitherUnsafe&lt;L, R>_self__Func_R_EitherUnsafe&lt;L, R2>_bind_"><div class="section_title">SOURCE</div><div class="code">
        var val = await self;
        return val.IsRight
            ? bind(val.RightValue)
            : LeftUnsafe&lt;L, R2&gt;(val.LeftValue);
    </div></div></div><div class="member-title"><a name="BindAsync&lt;L, R, R2>"></a>BindAsync&lt;L, R, R2&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Func&lt;R, EitherUnsafe&lt;L, R2&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindAsync_L_R_R2_EitherUnsafe_L_Task&lt;R>_self__Func_R_EitherUnsafe&lt;L, R2>_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt; <span class="ident">BindAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BindAsync_L_R_R2_EitherUnsafe_L_Task&lt;R>_self__Func_R_EitherUnsafe&lt;L, R2>_bind_"><div class="section_title">SOURCE</div><div class="code">
        self.IsRight
            ? bind(await self.RightValue)
            : LeftUnsafe&lt;L, R2&gt;(self.LeftValue)</div></div></div><div class="member-title"><a name="BindAsync&lt;L, R, R2>"></a>BindAsync&lt;L, R, R2&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Func&lt;R, Task&lt;EitherUnsafe&lt;L, R2&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindAsync_L_R_R2_EitherUnsafe_L_Task&lt;R>_self__Func_R_Task&lt;EitherUnsafe&lt;L, R2>>_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt; <span class="ident">BindAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BindAsync_L_R_R2_EitherUnsafe_L_Task&lt;R>_self__Func_R_Task&lt;EitherUnsafe&lt;L, R2>>_bind_"><div class="section_title">SOURCE</div><div class="code">
        self.IsRight
            ? await bind(await self.RightValue)
            : LeftUnsafe&lt;L, R2&gt;(self.LeftValue)</div></div></div><div class="member-title"><a name="CountAsync&lt;L, R>"></a>CountAsync&lt;L, R&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountAsync_L_R_Task_EitherUnsafe&lt;L, R>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">CountAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-CountAsync_L_R_Task_EitherUnsafe&lt;L, R>_self_"><div class="section_title">SOURCE</div><div class="code">
        (await self).Count()</div></div></div><div class="member-title"><a name="Divide&lt;NUM, L, R>"></a>Divide&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Divide_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide the two bound values of x and y, uses a Divide type-class to provide the divide operation for type A.  For example x.Divide&lt;TDouble,double&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">Divide</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >An option x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-Divide_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_"><div class="section_title">SOURCE</div><div class="code">
        from a in x
        from b in y
        select default(NUM).Divide(a, b)</div></div></div><div class="member-title"><a name="ExistsAsync&lt;L, R>"></a>ExistsAsync&lt;L, R&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsAsync_L_R_Task_EitherUnsafe&lt;L, R>_self__Func_R_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ExistsAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ExistsAsync_L_R_Task_EitherUnsafe&lt;L, R>_self__Func_R_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        (await self).Exists(pred)</div></div></div><div class="member-title"><a name="ExistsAsync&lt;L, R>"></a>ExistsAsync&lt;L, R&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Func&lt;R, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsAsync_L_R_EitherUnsafe_L_Task&lt;R>_self__Func_R_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ExistsAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ExistsAsync_L_R_EitherUnsafe_L_Task&lt;R>_self__Func_R_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.IsRight
            ? pred(await self.RightValue)
            : false</div></div></div><div class="member-title"><a name="FoldAsync&lt;L, R, S>"></a>FoldAsync&lt;L, R, S&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, S, Func&lt;S, R, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldAsync_L_R_S_Task_EitherUnsafe&lt;L, R>_self__S__state__Func_S_R_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">FoldAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FoldAsync_L_R_S_Task_EitherUnsafe&lt;L, R>_self__S__state__Func_S_R_S_folder_"><div class="section_title">SOURCE</div><div class="code">
        (await self).Fold(state, folder)</div></div></div><div class="member-title"><a name="FoldAsync&lt;L, R, S>"></a>FoldAsync&lt;L, R, S&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, S, Func&lt;S, R, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldAsync_L_R_S_EitherUnsafe_L_Task&lt;R>_self__S__state__Func_S_R_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">FoldAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FoldAsync_L_R_S_EitherUnsafe_L_Task&lt;R>_self__S__state__Func_S_R_S_folder_"><div class="section_title">SOURCE</div><div class="code">
        self.IsRight
            ? folder(state, await self.RightValue)
            : state</div></div></div><div class="member-title"><a name="ForAllAsync&lt;L, R>"></a>ForAllAsync&lt;L, R&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllAsync_L_R_Task_EitherUnsafe&lt;L, R>_self__Func_R_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ForAllAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ForAllAsync_L_R_Task_EitherUnsafe&lt;L, R>_self__Func_R_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        (await self).ForAll(pred)</div></div></div><div class="member-title"><a name="ForAllAsync&lt;L, R>"></a>ForAllAsync&lt;L, R&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Func&lt;R, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllAsync_L_R_EitherUnsafe_L_Task&lt;R>_self__Func_R_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ForAllAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ForAllAsync_L_R_EitherUnsafe_L_Task&lt;R>_self__Func_R_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.IsRight
            ? pred(await self.RightValue)
            : true</div></div></div><div class="member-title"><a name="IterAsync&lt;L, R>"></a>IterAsync&lt;L, R&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, Action&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterAsync_L_R_Task_EitherUnsafe&lt;L, R>_self__Action_R_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IterAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Action</span>&lt;<span class="ident">R</span>&gt; action)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IterAsync_L_R_Task_EitherUnsafe&lt;L, R>_self__Action_R_action_"><div class="section_title">SOURCE</div><div class="code">
        var val = await self;
        if (val.IsRight) action(val.RightValue);
        return unit;
    </div></div></div><div class="member-title"><a name="IterAsync&lt;L, R>"></a>IterAsync&lt;L, R&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Action&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterAsync_L_R_EitherUnsafe_L_Task&lt;R>_self__Action_R_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IterAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; self, <span class="ident">Action</span>&lt;<span class="ident">R</span>&gt; action)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IterAsync_L_R_EitherUnsafe_L_Task&lt;R>_self__Action_R_action_"><div class="section_title">SOURCE</div><div class="code">
        if (self.IsRight) action(await self.RightValue);
        return unit;
    </div></div></div><div class="member-title"><a name="Lefts&lt;L, R>"></a>Lefts&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Lefts_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Extracts from a list of &#39;Either&#39; all the &#39;Left&#39; elements. All the &#39;Left&#39; elements are extracted in order. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Either list</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">L</span>&gt; <span class="ident">Lefts</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">L</span>&gt;</div><div class="normal"><span >An enumerable of L</span></div></div></div><div style="display:none" id="code-Lefts_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self_"><div class="section_title">SOURCE</div><div class="code">
        lefts&lt;MEitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;, L, R&gt;(self)</div></div></div><div class="member-title"><a name="Lefts&lt;L, R>"></a>Lefts&lt;L, R&gt;(Seq&lt;EitherUnsafe&lt;L, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Lefts_L_R_Seq_EitherUnsafe&lt;L, R>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Extracts from a list of &#39;Either&#39; all the &#39;Left&#39; elements. All the &#39;Left&#39; elements are extracted in order. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Either list</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">L</span>&gt; <span class="ident">Lefts</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">L</span>&gt;</div><div class="normal"><span >An enumerable of L</span></div></div></div><div style="display:none" id="code-Lefts_L_R_Seq_EitherUnsafe&lt;L, R>_self_"><div class="section_title">SOURCE</div><div class="code">
        lefts&lt;MEitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;, L, R&gt;(self)</div></div></div><div class="member-title"><a name="MapAsync&lt;L, R, R2>"></a>MapAsync&lt;L, R, R2&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, Task&lt;R2&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapAsync_L_R_R2_EitherUnsafe_L_R_self__Func_R_Task&lt;R2>_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt; <span class="ident">MapAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt;&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MapAsync_L_R_R2_EitherUnsafe_L_R_self__Func_R_Task&lt;R2>_map_"><div class="section_title">SOURCE</div><div class="code">
        self.IsRight
            ? await map(self.RightValue)
            : LeftUnsafe&lt;L, R2&gt;(self.LeftValue)</div></div></div><div class="member-title"><a name="MapAsync&lt;L, R, R2>"></a>MapAsync&lt;L, R, R2&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, Task&lt;R2&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapAsync_L_R_R2_Task_EitherUnsafe&lt;L, R>_self__Func_R_Task&lt;R2>_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt; <span class="ident">MapAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt;&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MapAsync_L_R_R2_Task_EitherUnsafe&lt;L, R>_self__Func_R_Task&lt;R2>_map_"><div class="section_title">SOURCE</div><div class="code">
        var val = await self;
        return val.IsRight
            ? await map(val.RightValue)
            : LeftUnsafe&lt;L, R2&gt;(val.LeftValue);
    </div></div></div><div class="member-title"><a name="MapAsync&lt;L, R, R2>"></a>MapAsync&lt;L, R, R2&gt;(Task&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapAsync_L_R_R2_Task_EitherUnsafe&lt;L, R>_self__Func_R_R2_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt; <span class="ident">MapAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">R2</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MapAsync_L_R_R2_Task_EitherUnsafe&lt;L, R>_self__Func_R_R2_map_"><div class="section_title">SOURCE</div><div class="code">
        var val = await self;
        return val.IsRight
            ? map(val.RightValue)
            : LeftUnsafe&lt;L, R2&gt;(val.LeftValue);
    </div></div></div><div class="member-title"><a name="MapAsync&lt;L, R, R2>"></a>MapAsync&lt;L, R, R2&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Func&lt;R, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapAsync_L_R_R2_EitherUnsafe_L_Task&lt;R>_self__Func_R_R2_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt; <span class="ident">MapAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">R2</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MapAsync_L_R_R2_EitherUnsafe_L_Task&lt;R>_self__Func_R_R2_map_"><div class="section_title">SOURCE</div><div class="code">
        self.IsRight
            ? map(await self.RightValue)
            : LeftUnsafe&lt;L, R2&gt;(self.LeftValue)</div></div></div><div class="member-title"><a name="MapAsync&lt;L, R, R2>"></a>MapAsync&lt;L, R, R2&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Func&lt;R, Task&lt;R2&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapAsync_L_R_R2_EitherUnsafe_L_Task&lt;R>_self__Func_R_Task&lt;R2>_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt; <span class="ident">MapAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt;&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MapAsync_L_R_R2_EitherUnsafe_L_Task&lt;R>_self__Func_R_Task&lt;R2>_map_"><div class="section_title">SOURCE</div><div class="code">
        self.IsRight
            ? await map(await self.RightValue)
            : LeftUnsafe&lt;L, R2&gt;(self.LeftValue)</div></div></div><div class="member-title"><a name="MatchAsync&lt;L, R, R2>"></a>MatchAsync&lt;L, R, R2&gt;(EitherUnsafe&lt;L, Task&lt;R&gt;&gt;, Func&lt;R, R2&gt;, Func&lt;L, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_L_R_R2_EitherUnsafe_L_Task&lt;R>_self__Func_R_R2_Right__Func_L_R2_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Either and return a promise of a non-null R2. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">R2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">R2</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R2</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_L_R_R2_EitherUnsafe_L_Task&lt;R>_self__Func_R_R2_Right__Func_L_R2_Left_"><div class="section_title">SOURCE</div><div class="code">
        Check.NullReturn(self.IsRight
            ? Right(await self.RightValue)
            : Left(self.LeftValue))</div></div></div><div class="member-title"><a name="MatchObservable&lt;L, R, R2>"></a>MatchObservable&lt;L, R, R2&gt;(EitherUnsafe&lt;L, IObservable&lt;R&gt;&gt;, Func&lt;R, R2&gt;, Func&lt;L, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_L_R_R2_EitherUnsafe_L_IObservable&lt;R>_self__Func_R_R2_Right__Func_L_R2_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Either and return a stream of non-null R2s. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">R2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R2</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">R2</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R2</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_L_R_R2_EitherUnsafe_L_IObservable&lt;R>_self__Func_R_R2_Right__Func_L_R2_Left_"><div class="section_title">SOURCE</div><div class="code">
        self.IsRight
            ? self.RightValue.Select(Right).Select(Check.NullReturn)
            : Observable.Return(Check.NullReturn(Left(self.LeftValue)))</div></div></div><div class="member-title"><a name="MatchObservable&lt;L, R, R2>"></a>MatchObservable&lt;L, R, R2&gt;(IObservable&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, R2&gt;, Func&lt;L, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_L_R_R2_IObservable_EitherUnsafe&lt;L, R>_self__Func_R_R2_Right__Func_L_R2_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the IObservable Either and return a stream of non-null R2s. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">R2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R2</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt;(<span class="keyword">this</span> <span class="ident">IObservable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">R2</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R2</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchObservable_L_R_R2_IObservable_EitherUnsafe&lt;L, R>_self__Func_R_R2_Right__Func_L_R2_Left_"><div class="section_title">SOURCE</div><div class="code">
        self.Select(either =&gt; matchUnsafe(either, Right, Left))</div></div></div><div class="member-title"><a name="ParMap&lt;L, T1, T2, R>"></a>ParMap&lt;L, T1, T2, R&gt;(EitherUnsafe&lt;L, T1&gt;, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParMap_L_T1_T2_R_EitherUnsafe_L_T1_self__Func_T1_T2_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">ParMap</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParMap_L_T1_T2_R_EitherUnsafe_L_T1_self__Func_T1_T2_R_func_"><div class="section_title">SOURCE</div><div class="code">
        self.Map(curry(func))</div></div></div><div class="member-title"><a name="ParMap&lt;L, T1, T2, T3, R>"></a>ParMap&lt;L, T1, T2, T3, R&gt;(EitherUnsafe&lt;L, T1&gt;, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParMap_L_T1_T2_T3_R_EitherUnsafe_L_T1_self__Func_T1_T2_T3_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">ParMap</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParMap_L_T1_T2_T3_R_EitherUnsafe_L_T1_self__Func_T1_T2_T3_R_func_"><div class="section_title">SOURCE</div><div class="code">
        self.Map(curry(func))</div></div></div><div class="member-title"><a name="Partition&lt;L, R>"></a>Partition&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Partition_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partitions a list of &#39;Either&#39; into two lists. All the &#39;Left&#39; elements are extracted, in order, to the first component of the output.  Similarly the &#39;Right&#39; elements are extracted to the second component of the output. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Either list</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">L</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">Partition</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">L</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"><span >A tuple containing the an enumerable of L and an enumerable of R</span></div></div></div><div style="display:none" id="code-Partition_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self_"><div class="section_title">SOURCE</div><div class="code">
        partition&lt;MEitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;, L, R&gt;(self)</div></div></div><div class="member-title"><a name="Partition&lt;L, R>"></a>Partition&lt;L, R&gt;(Seq&lt;EitherUnsafe&lt;L, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Partition_L_R_Seq_EitherUnsafe&lt;L, R>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partitions a list of &#39;Either&#39; into two lists. All the &#39;Left&#39; elements are extracted, in order, to the first component of the output.  Similarly the &#39;Right&#39; elements are extracted to the second component of the output. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Either list</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">L</span>&gt;, <span class="ident">Seq</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">Partition</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">L</span>&gt;, <span class="ident">Seq</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"><span >A tuple containing the an enumerable of L and an enumerable of R</span></div></div></div><div style="display:none" id="code-Partition_L_R_Seq_EitherUnsafe&lt;L, R>_self_"><div class="section_title">SOURCE</div><div class="code">
        partition&lt;MEitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;, L, R&gt;(self)</div></div></div><div class="member-title"><a name="Plus&lt;NUM, L, R>"></a>Plus&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Plus_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound values of x and y, uses an Add type-class to provide the add operation for type A.  For example x.Add&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">Plus</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >An option with y added to x</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-Plus_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_"><div class="section_title">SOURCE</div><div class="code">
        from a in x
        from b in y
        select default(NUM).Plus(a, b)</div></div></div><div class="member-title"><a name="Product&lt;NUM, L, R>"></a>Product&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Product_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product between the two bound values of x and y, uses a Product type-class  to provide the product operation for type A.  For example x.Product&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">Product</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >An option with the product of x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-Product_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_"><div class="section_title">SOURCE</div><div class="code">
        from a in x
        from b in y
        select default(NUM).Product(a, b)</div></div></div><div class="member-title"><a name="Rights&lt;L, R>"></a>Rights&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Rights_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Extracts from a list of &#39;Either&#39; all the &#39;Right&#39; elements. All the &#39;Right&#39; elements are extracted in order. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Either list</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Rights</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >An enumerable of L</span></div></div></div><div style="display:none" id="code-Rights_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self_"><div class="section_title">SOURCE</div><div class="code">
        rights&lt;MEitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;, L, R&gt;(self)</div></div></div><div class="member-title"><a name="Rights&lt;L, R>"></a>Rights&lt;L, R&gt;(Seq&lt;EitherUnsafe&lt;L, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Rights_L_R_Seq_EitherUnsafe&lt;L, R>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Extracts from a list of &#39;Either&#39; all the &#39;Right&#39; elements. All the &#39;Right&#39; elements are extracted in order. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Either list</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Rights</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >An enumerable of L</span></div></div></div><div style="display:none" id="code-Rights_L_R_Seq_EitherUnsafe&lt;L, R>_self_"><div class="section_title">SOURCE</div><div class="code">
        rights&lt;MEitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;, L, R&gt;(self)</div></div></div><div class="member-title"><a name="Subtract&lt;NUM, L, R>"></a>Subtract&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subtract_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the subtract between the two bound values of x and y, uses a Subtract type-class  to provide the subtract operation for type A.  For example x.Subtract&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">Subtract</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >An option with the subtract between x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-Subtract_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_"><div class="section_title">SOURCE</div><div class="code">
        from a in x
        from b in y
        select default(NUM).Subtract(a, b)</div></div></div><div class="member-title"><a name="Sum&lt;L>"></a>Sum&lt;L&gt;(EitherUnsafe&lt;L, int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum_L_EitherUnsafe_L_int_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the Either </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="keyword">int</span>&gt;</div></div><div class="arg-desc"><span >Either to count</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">Sum</span>&lt;<span class="ident">L</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="keyword">int</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >0 if Left, or value of Right</span></div></div></div><div style="display:none" id="code-Sum_L_EitherUnsafe_L_int_self_"><div class="section_title">SOURCE</div><div class="code">
        sum&lt;TInt, MEitherUnsafe&lt;L, int&gt;, EitherUnsafe&lt;L, int&gt;, int&gt;(self)</div></div></div><div class="member-title"><a name="Sum&lt;NUM, L, R>"></a>Sum&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum_NUM_L_R_EitherUnsafe_L_R_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the Either </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to count</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">Sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >0 if Left, or value of Right</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-Sum_NUM_L_R_EitherUnsafe_L_R_self_"><div class="section_title">SOURCE</div><div class="code">
        sum&lt;NUM, MEitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;, R&gt;(self)</div></div></div><div class="member-title"><a name="SumAsync&lt;L>"></a>SumAsync&lt;L&gt;(Task&lt;EitherUnsafe&lt;L, int&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumAsync_L_Task_EitherUnsafe&lt;L, int>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="keyword">int</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">SumAsync</span>&lt;<span class="ident">L</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="keyword">int</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SumAsync_L_Task_EitherUnsafe&lt;L, int>_self_"><div class="section_title">SOURCE</div><div class="code">
        (await self).Sum&lt;TInt, L, int&gt;()</div></div></div><div class="member-title"><a name="SumAsync&lt;L>"></a>SumAsync&lt;L&gt;(EitherUnsafe&lt;L, Task&lt;int&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumAsync_L_EitherUnsafe_L_Task&lt;int>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">SumAsync</span>&lt;<span class="ident">L</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SumAsync_L_EitherUnsafe_L_Task&lt;int>_self_"><div class="section_title">SOURCE</div><div class="code">
        self.IsRight
            ? await self.RightValue
            : 0</div></div></div></div></body></html>