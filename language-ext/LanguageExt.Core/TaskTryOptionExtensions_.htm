<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="..//index.htm"></a> \ <span class="nav-bar-link" href="TaskTryOptionExtensions_.htm">TaskTryOptionExtensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Add&lt;NUM, A>">Add&lt;NUM, A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Task&lt;TryOption&lt;A&gt;&gt;)</a><a class="nav-link" href="#AsEnumerable&lt;A>">AsEnumerable&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)</a><a class="nav-link" href="#AsString&lt;A>">AsString&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)</a><a class="nav-link" href="#BiFold&lt;A, S>">BiFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#BiFold&lt;A, S>">BiFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#BiFold&lt;A, S>">BiFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#BiFold&lt;A, S>">BiFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#BiMap&lt;A, B>">BiMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#BiMap&lt;A, B>">BiMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#BiMap&lt;A, B>">BiMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#BiMap&lt;A, B>">BiMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#Count&lt;A>">Count&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)</a><a class="nav-link" href="#Divide&lt;NUM, A>">Divide&lt;NUM, A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Task&lt;TryOption&lt;A&gt;&gt;)</a><a class="nav-link" href="#Exists&lt;A>">Exists&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Exists&lt;A>">Exists&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)</a><a class="nav-link" href="#Filter&lt;A>">Filter&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Filter&lt;A>">Filter&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)</a><a class="nav-link" href="#Fold&lt;A, S>">Fold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#Fold&lt;A, S>">Fold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#ForAll&lt;A>">ForAll&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAll&lt;A>">ForAll&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)</a><a class="nav-link" href="#IfFail&lt;A>">IfFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)</a><a class="nav-link" href="#IfFailThrow&lt;A>">IfFailThrow&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Action)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, A)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A&gt;)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;Task&lt;A&gt;&gt;)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A&gt;, Func&lt;Exception, A&gt;)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;Task&lt;A&gt;&gt;, Func&lt;Exception, A&gt;)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A&gt;, Func&lt;Exception, Task&lt;A&gt;&gt;)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;Task&lt;A&gt;&gt;, Func&lt;Exception, Task&lt;A&gt;&gt;)</a><a class="nav-link" href="#IfSome&lt;A>">IfSome&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#Iter&lt;A>">Iter&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#Map&lt;A, R>">Map&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, R&gt;)</a><a class="nav-link" href="#Map&lt;A, R>">Map&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, R&gt;, R)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#Match&lt;A>">Match&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Action&lt;A&gt;, Action)</a><a class="nav-link" href="#Match&lt;A>">Match&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Action&lt;A&gt;, Action, Action&lt;Exception&gt;)</a><a class="nav-link" href="#Product&lt;NUM, A>">Product&lt;NUM, A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Task&lt;TryOption&lt;A&gt;&gt;)</a><a class="nav-link" href="#Subtract&lt;NUM, A>">Subtract&lt;NUM, A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Task&lt;TryOption&lt;A&gt;&gt;)</a><a class="nav-link" href="#Sum">Sum(Task&lt;TryOption&lt;int&gt;&gt;)</a><a class="nav-link" href="#ToArray&lt;A>">ToArray&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)</a><a class="nav-link" href="#ToAsync&lt;A>">ToAsync&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)</a><a class="nav-link" href="#ToAsync&lt;A>">ToAsync&lt;A&gt;(TryOption&lt;Task&lt;A&gt;&gt;)</a><a class="nav-link" href="#ToList&lt;A>">ToList&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)</a><a class="nav-link" href="#ToNullable&lt;A>">ToNullable&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)</a><a class="nav-link" href="#ToOption&lt;A>">ToOption&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)</a><a class="nav-link" href="#TriFold&lt;A, S>">TriFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#TriFold&lt;A, S>">TriFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#TriFold&lt;A, S>">TriFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#TriFold&lt;A, S>">TriFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#TriFold&lt;A, S>">TriFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#TriFold&lt;A, S>">TriFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#TriFold&lt;A, S>">TriFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#TriMap&lt;A, B>">TriMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#TriMap&lt;A, B>">TriMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#TriMap&lt;A, B>">TriMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#TriMap&lt;A, B>">TriMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#TriMap&lt;A, B>">TriMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#TriMap&lt;A, B>">TriMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#TriMap&lt;A, B>">TriMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#Where&lt;A>">Where&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Where&lt;A>">Where&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)</a></div><div class="content-panel"><h1 >TaskTryOptionExtensions Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">TaskTryOptionExtensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div></div></div><h2 >Methods</h2><div class="member-title"><a name="Add&lt;NUM, A>"></a>Add&lt;NUM, A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Task&lt;TryOption&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Add_NUM_A_Task_TryOption&lt;A>_lhs__Task_TryOption&lt;A>_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound value of Try(x) to Try(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Left-hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Add</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; lhs, <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Add_NUM_A_Task_TryOption&lt;A>_lhs__Task_TryOption&lt;A>_rhs_"><div class="section_title">SOURCE</div><div class="code">
        lhs.ToAsync().Add&lt;NUM, A&gt;(rhs.ToAsync())</div></div></div><div class="member-title"><a name="AsEnumerable&lt;A>"></a>AsEnumerable&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable_A_Task_TryOption&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">AsEnumerable</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsEnumerable_A_Task_TryOption&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().AsEnumerable()</div></div></div><div class="member-title"><a name="AsString&lt;A>"></a>AsString&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsString_A_Task_TryOption&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">string</span>&gt; <span class="ident">AsString</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">string</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsString_A_Task_TryOption&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().AsString()</div></div></div><div class="member-title"><a name="BiFold&lt;A, S>"></a>BiFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_S_Succ__Func_S_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for Success</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for Failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-BiFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_S_Succ__Func_S_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiFold(state, Succ, Fail)</div></div></div><div class="member-title"><a name="BiFold&lt;A, S>"></a>BiFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Succ__Func_S_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Fold function for Success</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for Failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-BiFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Succ__Func_S_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiFold(state, Succ, Fail)</div></div></div><div class="member-title"><a name="BiFold&lt;A, S>"></a>BiFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_S_Succ__Func_S_Task&lt;S>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for Success</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Fold function for Failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-BiFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_S_Succ__Func_S_Task&lt;S>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiFold(state, Succ, Fail)</div></div></div><div class="member-title"><a name="BiFold&lt;A, S>"></a>BiFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Succ__Func_S_Task&lt;S>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Fold function for Success</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Fold function for Failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-BiFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Succ__Func_S_Task&lt;S>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiFold(state, Succ, Fail)</div></div></div><div class="member-title"><a name="BiMap&lt;A, B>"></a>BiMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMap_A_B_Task_TryOption&lt;A>_self__Func_A_B_Succ__Func_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Delegate to map the bound value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc">Delegate to map the exception to the desired bound result type</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-BiMap_A_B_Task_TryOption&lt;A>_self__Func_A_B_Succ__Func_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiMap(Succ, Fail)</div></div></div><div class="member-title"><a name="BiMap&lt;A, B>"></a>BiMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMap_A_B_Task_TryOption&lt;A>_self__Func_A_Task&lt;B>_Succ__Func_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to map the bound value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc">Delegate to map the exception to the desired bound result type</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-BiMap_A_B_Task_TryOption&lt;A>_self__Func_A_Task&lt;B>_Succ__Func_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiMap(Succ, Fail)</div></div></div><div class="member-title"><a name="BiMap&lt;A, B>"></a>BiMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMap_A_B_Task_TryOption&lt;A>_self__Func_A_B_Succ__Func_Task&lt;B>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Delegate to map the bound value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to map the exception to the desired bound result type</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-BiMap_A_B_Task_TryOption&lt;A>_self__Func_A_B_Succ__Func_Task&lt;B>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiMap(Succ, Fail)</div></div></div><div class="member-title"><a name="BiMap&lt;A, B>"></a>BiMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMap_A_B_Task_TryOption&lt;A>_self__Func_A_Task&lt;B>_Succ__Func_Task&lt;B>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to map the bound value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to map the exception to the desired bound result type</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-BiMap_A_B_Task_TryOption&lt;A>_self__Func_A_Task&lt;B>_Succ__Func_Task&lt;B>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().BiMap(Succ, Fail)</div></div></div><div class="member-title"><a name="Count&lt;A>"></a>Count&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Count_A_Task_TryOption&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Counts the number of bound values.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">TrTry computation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">Count</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"><span >1 if the Try computation is successful, 0 otherwise.</span></div></div></div><div style="display:none" id="code-Count_A_Task_TryOption&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Count()</div></div></div><div class="member-title"><a name="Divide&lt;NUM, A>"></a>Divide&lt;NUM, A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Task&lt;TryOption&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Divide_NUM_A_Task_TryOption&lt;A>_lhs__Task_TryOption&lt;A>_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Multiply the bound value of Try(x) and Try(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Left-hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Divide</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; lhs, <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Divide_NUM_A_Task_TryOption&lt;A>_lhs__Task_TryOption&lt;A>_rhs_"><div class="section_title">SOURCE</div><div class="code">
        lhs.ToAsync().Divide&lt;NUM, A&gt;(rhs.ToAsync())</div></div></div><div class="member-title"><a name="Exists&lt;A>"></a>Exists&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists_A_Task_TryOption&lt;A>_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for any value of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate to test the bound value against</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">Exists</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value.  False otherwise.</span></div></div></div><div style="display:none" id="code-Exists_A_Task_TryOption&lt;A>_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Exists(pred)</div></div></div><div class="member-title"><a name="Exists&lt;A>"></a>Exists&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists_A_Task_TryOption&lt;A>_self__Func_A_Task&lt;bool>_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for any value of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div><div class="arg-desc">Predicate to test the bound value against</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">Exists</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value.  False otherwise.</span></div></div></div><div style="display:none" id="code-Exists_A_Task_TryOption&lt;A>_self__Func_A_Task&lt;bool>_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Exists(pred)</div></div></div><div class="member-title"><a name="Filter&lt;A>"></a>Filter&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter_A_Task_TryOption&lt;A>_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Filter</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Filter_A_Task_TryOption&lt;A>_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Filter(pred)</div></div></div><div class="member-title"><a name="Filter&lt;A>"></a>Filter&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter_A_Task_TryOption&lt;A>_self__Func_A_Task&lt;bool>_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Filter</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Filter_A_Task_TryOption&lt;A>_self__Func_A_Task&lt;bool>_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Filter(pred)</div></div></div><div class="member-title"><a name="Fold&lt;A, S>"></a>Fold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">Fold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-Fold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_S_folder_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Fold(state, folder)</div></div></div><div class="member-title"><a name="Fold&lt;A, S>"></a>Fold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_Task&lt;S>_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">Fold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-Fold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_Task&lt;S>_folder_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Fold(state, folder)</div></div></div><div class="member-title"><a name="ForAll&lt;A>"></a>ForAll&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll_A_Task_TryOption&lt;A>_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for all values of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate to test the bound value against</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ForAll</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value, or if the Try computation fails.  False otherwise.</span></div></div></div><div style="display:none" id="code-ForAll_A_Task_TryOption&lt;A>_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().ForAll(pred)</div></div></div><div class="member-title"><a name="ForAll&lt;A>"></a>ForAll&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll_A_Task_TryOption&lt;A>_self__Func_A_Task&lt;bool>_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for all values of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div><div class="arg-desc">Predicate to test the bound value against</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ForAll</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value, or if the Try computation fails.  False otherwise.</span></div></div></div><div style="display:none" id="code-ForAll_A_Task_TryOption&lt;A>_self__Func_A_Task&lt;bool>_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().ForAll(pred)</div></div></div><div class="member-title"><a name="IfFail&lt;A>"></a>IfFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfFail_A_Task_TryOption&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Provides a fluent exception matching interface which is invoked when the Try fails. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ExceptionMatchOptionalAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ExceptionMatchOptionalAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Fluent exception matcher</span></div></div></div><div style="display:none" id="code-IfFail_A_Task_TryOption&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().IfFail()</div></div></div><div class="member-title"><a name="IfFailThrow&lt;A>"></a>IfFailThrow&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfFailThrow_A_Task_TryOption&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfFailThrow</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfFailThrow_A_Task_TryOption&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().IfFailThrow()</div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the Try is in a Fail or None state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc">Delegate to invoke if successful</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Action</span> None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__Action__None_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().IfNoneOrFail(None)</div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__A__defaultValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return a default value if the Try fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultValue</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Default value to use on failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">A</span> defaultValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >failValue on failure, the result of the Try otherwise</span></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__A__defaultValue_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().IfNoneOrFail(defaultValue)</div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__Func_A_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the Try fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Delegate to invoke on failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Result of the invocation of Fail on failure, the result of the Try otherwise</span></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__Func_A_None_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().IfNoneOrFail(None)</div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;Task&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__Func_Task&lt;A>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the Try fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to invoke on failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Result of the invocation of Fail on failure, the result of the Try otherwise</span></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__Func_Task&lt;A>_None_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().IfNoneOrFail(None)</div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A&gt;, Func&lt;Exception, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__Func_A_None__Func_Exception_A_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke delegates based on None or Failed stateds </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the result is None</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the result is Fail</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">A</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Success value, or the result of the None or Failed delegate</span></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__Func_A_None__Func_Exception_A_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.ToAsync().IfNoneOrFail(None, Fail)</div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;Task&lt;A&gt;&gt;, Func&lt;Exception, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__Func_Task&lt;A>_None__Func_Exception_A_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke delegates based on None or Failed stateds </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to invoke if the result is None</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the result is Fail</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">A</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Success value, or the result of the None or Failed delegate</span></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__Func_Task&lt;A>_None__Func_Exception_A_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.ToAsync().IfNoneOrFail(None, Fail)</div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A&gt;, Func&lt;Exception, Task&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__Func_A_None__Func_Exception_Task&lt;A>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke delegates based on None or Failed stateds </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the result is None</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to invoke if the result is Fail</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Success value, or the result of the None or Failed delegate</span></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__Func_A_None__Func_Exception_Task&lt;A>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.ToAsync().IfNoneOrFail(None, Fail)</div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;Task&lt;A&gt;&gt;, Func&lt;Exception, Task&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__Func_Task&lt;A>_None__Func_Exception_Task&lt;A>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke delegates based on None or Failed stateds </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to invoke if the result is None</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to invoke if the result is Fail</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Success value, or the result of the None or Failed delegate</span></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_Task_TryOption&lt;A>_self__Func_Task&lt;A>_None__Func_Exception_Task&lt;A>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.ToAsync().IfNoneOrFail(None, Fail)</div></div></div><div class="member-title"><a name="IfSome&lt;A>"></a>IfSome&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfSome_A_Task_TryOption&lt;A>_self__Action_A_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the Try returns a value successfully </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if successful</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IfSome</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfSome_A_Task_TryOption&lt;A>_self__Action_A_Some_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().IfSome(Some)</div></div></div><div class="member-title"><a name="Iter&lt;A>"></a>Iter&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter_A_Task_TryOption&lt;A>_self__Action_A_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply Try values to a Try function of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">Iter</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; action)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"><span >Returns the result of applying the Try arguments to the Try function</span></div></div></div><div style="display:none" id="code-Iter_A_Task_TryOption&lt;A>_self__Action_A_action_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Iter(action)</div></div></div><div class="member-title"><a name="Map&lt;A, R>"></a>Map&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_A_R_Task_TryOption&lt;A>_self__Func_A_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Delegate to map the bound value</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-Map_A_R_Task_TryOption&lt;A>_self__Func_A_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Map(mapper)</div></div></div><div class="member-title"><a name="Map&lt;A, R>"></a>Map&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_A_R_Task_TryOption&lt;A>_self__Func_A_Task&lt;R>_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to map the bound value</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-Map_A_R_Task_TryOption&lt;A>_self__Func_A_Task&lt;R>_mapper_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Map(mapper)</div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_R_Succ__Func_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the Try computation completes successfully</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the Try computation fails</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ or Fail delegates</span></div></div></div><div style="display:none" id="code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_R_Succ__Func_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Succ, Fail)</div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_R_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the Try computation completes successfully</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the Try computation fails</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ or Fail delegates</span></div></div></div><div style="display:none" id="code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_R_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, R&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_R_Succ__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the Try computation completes successfully</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc">Default value to use if the Try computation fails</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ delegate or the Fail value</span></div></div></div><div style="display:none" id="code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_R_Succ__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Succ, Fail)</div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_Task&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to invoke if the computation completes successfully</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the computation completes successfully but returns no value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the computation fails</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_Task&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_Task&lt;R>_Succ__Func_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to invoke if the computation completes successfully</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to invoke if the computation fails</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_Task&lt;R>_Succ__Func_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Succ, Fail)</div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to invoke if the computation completes successfully</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to invoke if the computation completes successfully but returns no value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to invoke if the computation fails</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Some, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_R_Succ__Func_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the computation completes successfully</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to invoke if the computation fails</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_R_Succ__Func_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Succ, Fail)</div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_R_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the computation completes successfully</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to invoke if the computation completes successfully but returns no value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to invoke if the computation fails</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Some, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_Task_TryOption&lt;A>_self__Func_A_R_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="Match&lt;A>"></a>Match&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Action&lt;A&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_Task_TryOption&lt;A>_self__Action_A_Succ__Action__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the Try computation completes successfully</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc">Delegate to invoke if the Try computation fails</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Succ, <span class="ident">Action</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Match_A_Task_TryOption&lt;A>_self__Action_A_Succ__Action__Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Succ, Fail)</div></div></div><div class="member-title"><a name="Match&lt;A>"></a>Match&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Action&lt;A&gt;, Action, Action&lt;Exception&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_Task_TryOption&lt;A>_self__Action_A_Some__Action__None__Action_Exception_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the Try computation completes successfully</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt;</div></div><div class="arg-desc">Delegate to invoke if the Try computation fails</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some, <span class="ident">Action</span> None, <span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Match_A_Task_TryOption&lt;A>_self__Action_A_Some__Action__None__Action_Exception_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="Product&lt;NUM, A>"></a>Product&lt;NUM, A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Task&lt;TryOption&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Product_NUM_A_Task_TryOption&lt;A>_lhs__Task_TryOption&lt;A>_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Multiply the bound value of Try(x) and Try(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Left-hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; lhs, <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Product_NUM_A_Task_TryOption&lt;A>_lhs__Task_TryOption&lt;A>_rhs_"><div class="section_title">SOURCE</div><div class="code">
        lhs.ToAsync().Product&lt;NUM, A&gt;(rhs.ToAsync())</div></div></div><div class="member-title"><a name="Subtract&lt;NUM, A>"></a>Subtract&lt;NUM, A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Task&lt;TryOption&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subtract_NUM_A_Task_TryOption&lt;A>_lhs__Task_TryOption&lt;A>_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the subtract of the bound value of Try(x) and Try(y).  If either of  the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Left-hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Subtract</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; lhs, <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Subtract_NUM_A_Task_TryOption&lt;A>_lhs__Task_TryOption&lt;A>_rhs_"><div class="section_title">SOURCE</div><div class="code">
        lhs.ToAsync().Subtract&lt;NUM, A&gt;(rhs.ToAsync())</div></div></div><div class="member-title"><a name="Sum"></a>Sum(Task&lt;TryOption&lt;int&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum__Task_TryOption&lt;int>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="keyword">int</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">Sum</span>(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="keyword">int</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Sum__Task_TryOption&lt;int>_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Sum()</div></div></div><div class="member-title"><a name="ToArray&lt;A>"></a>ToArray&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToArray_A_Task_TryOption&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToArray</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToArray_A_Task_TryOption&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().ToArray()</div></div></div><div class="member-title"><a name="ToAsync&lt;A>"></a>ToAsync&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToAsync_A_Task_TryOption&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a Task&lt;TryOption&lt;A&gt;&gt; to a TryOptionAsync&lt;A&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToAsync_A_Task_TryOption&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code"> 
        async () =&gt;
        {
            try
            {
                var resT = await self;
                return resT.Try();
            }
            catch (Exception e)
            {
                return new OptionalResult&lt;A&gt;(e);
            }
        }</div></div></div><div class="member-title"><a name="ToAsync&lt;A>"></a>ToAsync&lt;A&gt;(TryOption&lt;Task&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToAsync_A_TryOption_Task&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a Task&lt;TryOption&lt;A&gt;&gt; to a TryOptionAsync&lt;A&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToAsync_A_TryOption_Task&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        async () =&gt;
        {
            try
            {
                var task = self.Try();
                if (task.IsFaultedOrNone) return new OptionalResult&lt;A&gt;(task.Exception);
                return await task.Value.Value;
            }
            catch (Exception e)
            {
                return new OptionalResult&lt;A&gt;(e);
            }
        }</div></div></div><div class="member-title"><a name="ToList&lt;A>"></a>ToList&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToList_A_Task_TryOption&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToList</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToList_A_Task_TryOption&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().ToList()</div></div></div><div class="member-title"><a name="ToNullable&lt;A>"></a>ToNullable&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToNullable_A_Task_TryOption&lt;A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Try type to a Nullable of A </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try to convert</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>?&gt; <span class="ident">ToNullable</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>?&gt;</div><div class="normal"><span >Nullable of A</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">A</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-ToNullable_A_Task_TryOption&lt;A>_ma_"><div class="section_title">SOURCE</div><div class="code">
        ma.ToAsync().ToNullable()</div></div></div><div class="member-title"><a name="ToOption&lt;A>"></a>ToOption&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToOption_A_Task_TryOption&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToOption</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToOption_A_Task_TryOption&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().ToOption()</div></div></div><div class="member-title"><a name="TriFold&lt;A, S>"></a>TriFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_S_None__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for Success</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for None</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for Failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_S_None__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriFold(state, Some, None, Fail)</div></div></div><div class="member-title"><a name="TriFold&lt;A, S>"></a>TriFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_S_None__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Fold function for Success</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for None</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for Failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_S_None__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriFold(state, Some, None, Fail)</div></div></div><div class="member-title"><a name="TriFold&lt;A, S>"></a>TriFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_Task&lt;S>_None__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for Success</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Fold function for None</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for Failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_Task&lt;S>_None__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriFold(state, Some, None, Fail)</div></div></div><div class="member-title"><a name="TriFold&lt;A, S>"></a>TriFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_S_None__Func_S_Exception_Task&lt;S>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for Success</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for None</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Fold function for Failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_S_None__Func_S_Exception_Task&lt;S>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriFold(state, Some, None, Fail)</div></div></div><div class="member-title"><a name="TriFold&lt;A, S>"></a>TriFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Task&lt;S>_None__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Fold function for Success</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Fold function for None</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for Failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Task&lt;S>_None__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriFold(state, Some, None, Fail)</div></div></div><div class="member-title"><a name="TriFold&lt;A, S>"></a>TriFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_Task&lt;S>_None__Func_S_Exception_Task&lt;S>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function for Success</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Fold function for None</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Fold function for Failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_S_Some__Func_S_Task&lt;S>_None__Func_S_Exception_Task&lt;S>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriFold(state, Some, None, Fail)</div></div></div><div class="member-title"><a name="TriFold&lt;A, S>"></a>TriFold&lt;A, S&gt;(Task&lt;TryOption&lt;A&gt;&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Task&lt;S>_None__Func_S_Exception_Task&lt;S>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Try to fold</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Fold function for Success</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Fold function for None</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc">Fold function for Failure</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFold_A_S_Task_TryOption&lt;A>_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Task&lt;S>_None__Func_S_Exception_Task&lt;S>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriFold(state, Some, None, Fail)</div></div></div><div class="member-title"><a name="TriMap&lt;A, B>"></a>TriMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMap_A_B_Task_TryOption&lt;A>_self__Func_A_B_Some__Func_B_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Delegate to map the bound value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc">Delegate to map the None to the desired bound result type</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Delegate to map the exception to the desired bound result type</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMap_A_B_Task_TryOption&lt;A>_self__Func_A_B_Some__Func_B_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriMap(Some, None, Fail)</div></div></div><div class="member-title"><a name="TriMap&lt;A, B>"></a>TriMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMap_A_B_Task_TryOption&lt;A>_self__Func_A_Task&lt;B>_Some__Func_B_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to map the bound value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc">Delegate to map the None to the desired bound result type</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Delegate to map the exception to the desired bound result type</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMap_A_B_Task_TryOption&lt;A>_self__Func_A_Task&lt;B>_Some__Func_B_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriMap(Some, None, Fail)</div></div></div><div class="member-title"><a name="TriMap&lt;A, B>"></a>TriMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMap_A_B_Task_TryOption&lt;A>_self__Func_A_B_Some__Func_Task&lt;B>_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Delegate to map the bound value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to map the None to the desired bound result type</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Delegate to map the exception to the desired bound result type</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMap_A_B_Task_TryOption&lt;A>_self__Func_A_B_Some__Func_Task&lt;B>_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriMap(Some, None, Fail)</div></div></div><div class="member-title"><a name="TriMap&lt;A, B>"></a>TriMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMap_A_B_Task_TryOption&lt;A>_self__Func_A_B_Some__Func_B_None__Func_Exception_Task&lt;B>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Delegate to map the bound value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc">Delegate to map the None to the desired bound result type</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to map the exception to the desired bound result type</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMap_A_B_Task_TryOption&lt;A>_self__Func_A_B_Some__Func_B_None__Func_Exception_Task&lt;B>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriMap(Some, None, Fail)</div></div></div><div class="member-title"><a name="TriMap&lt;A, B>"></a>TriMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMap_A_B_Task_TryOption&lt;A>_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to map the bound value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to map the None to the desired bound result type</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Delegate to map the exception to the desired bound result type</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMap_A_B_Task_TryOption&lt;A>_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriMap(Some, None, Fail)</div></div></div><div class="member-title"><a name="TriMap&lt;A, B>"></a>TriMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMap_A_B_Task_TryOption&lt;A>_self__Func_A_B_Some__Func_Task&lt;B>_None__Func_Exception_Task&lt;B>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Delegate to map the bound value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to map the None to the desired bound result type</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to map the exception to the desired bound result type</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMap_A_B_Task_TryOption&lt;A>_self__Func_A_B_Some__Func_Task&lt;B>_None__Func_Exception_Task&lt;B>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriMap(Some, None, Fail)</div></div></div><div class="member-title"><a name="TriMap&lt;A, B>"></a>TriMap&lt;A, B&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMap_A_B_Task_TryOption&lt;A>_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None__Func_Exception_Task&lt;B>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">computation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to map the bound value</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to map the None to the desired bound result type</div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Delegate to map the exception to the desired bound result type</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMap_A_B_Task_TryOption&lt;A>_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None__Func_Exception_Task&lt;B>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().TriMap(Some, None, Fail)</div></div></div><div class="member-title"><a name="Where&lt;A>"></a>Where&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_A_Task_TryOption&lt;A>_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Where</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Where_A_Task_TryOption&lt;A>_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Where(pred)</div></div></div><div class="member-title"><a name="Where&lt;A>"></a>Where&lt;A&gt;(Task&lt;TryOption&lt;A&gt;&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_A_Task_TryOption&lt;A>_self__Func_A_Task&lt;bool>_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Where</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Where_A_Task_TryOption&lt;A>_self__Func_A_Task&lt;bool>_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.ToAsync().Where(pred)</div></div></div></div></body></html>