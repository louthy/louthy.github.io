<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="CondSyncToAsyncExt_.htm">CondSyncToAsyncExt</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#All&lt;A, B>">All&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;B, Task&lt;bool&gt;&gt;)</a><a class="nav-link" href="#Any&lt;A, B>">Any&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;B, Task&lt;bool&gt;&gt;)</a><a class="nav-link" href="#Else&lt;A, B>">Else&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;A, Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#Else&lt;A, B>">Else&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#Else&lt;A, B>">Else&lt;A, B&gt;(Cond&lt;A, B&gt;, Task&lt;B&gt;)</a><a class="nav-link" href="#ElseAsync&lt;A, B>">ElseAsync&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;A, Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#ElseAsync&lt;A, B>">ElseAsync&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#ElseAsync&lt;A, B>">ElseAsync&lt;A, B&gt;(Cond&lt;A, B&gt;, Task&lt;B&gt;)</a><a class="nav-link" href="#Filter&lt;A, B>">Filter&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;B, Task&lt;bool&gt;&gt;)</a><a class="nav-link" href="#Map&lt;A, B, C>">Map&lt;A, B, C&gt;(Cond&lt;A, B&gt;, Func&lt;B, Task&lt;C&gt;&gt;)</a><a class="nav-link" href="#Select&lt;A, B, C>">Select&lt;A, B, C&gt;(Cond&lt;A, B&gt;, Func&lt;B, Task&lt;C&gt;&gt;)</a><a class="nav-link" href="#SelectMany&lt;A, B, C, D>">SelectMany&lt;A, B, C, D&gt;(Cond&lt;A, B&gt;, Func&lt;B, CondAsync&lt;A, C&gt;&gt;, Func&lt;B, C, D&gt;)</a><a class="nav-link" href="#Then&lt;A, B>">Then&lt;A, B&gt;(Cond&lt;A, A&gt;, Func&lt;A, Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#Then&lt;A, B>">Then&lt;A, B&gt;(Cond&lt;A, A&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#Then&lt;A, B>">Then&lt;A, B&gt;(Cond&lt;A, A&gt;, Task&lt;B&gt;)</a><a class="nav-link" href="#ToAsync&lt;A, B>">ToAsync&lt;A, B&gt;(Cond&lt;A, B&gt;)</a><a class="nav-link" href="#Where&lt;A, B>">Where&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;B, Task&lt;bool&gt;&gt;)</a></div><div class="content-panel"><h1 >CondSyncToAsyncExt Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">CondSyncToAsyncExt</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="All&lt;A, B>"></a>All&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;B, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-All_A_B_Cond_A_B_self__Func_B_Task&lt;bool>_predicates_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >A conditional computation where the input value must match all of the predicates provided to return a positive Some/True state.  This is like an if(a &amp;&amp; b &amp;&amp; c ...) operation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The Cond computation to test</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicates</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div><div class="arg-desc"><span >The predicates to test the bound value with</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">All</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; predicates)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >A conditional computation</span></div></div></div><div style="display:none" id="code-All_A_B_Cond_A_B_self__Func_B_Task&lt;bool>_predicates_"><div class="section_title">SOURCE</div><div class="code">
            input =&gt;
                from x in self.ToAsync()(input)
                from y in x.Match(
                    Some: b =&gt; Tasks.ForAll(predicates.Map(p =&gt; p(b)), identity),
                    None: () =&gt; Task.FromResult(false))
                select y
                    ? x
                    : None</div></div></div><div class="member-title"><a name="Any&lt;A, B>"></a>Any&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;B, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Any_A_B_Cond_A_B_self__Func_B_Task&lt;bool>_predicates_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >A conditional computation where the input value can match any of the predicates provided to return a positive Some/True state.  This is like an if(a || b || c ...) operation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The Cond computation to test</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicates</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div><div class="arg-desc"><span >The predicates to test the bound value with</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">Any</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; predicates)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >A conditional computation</span></div></div></div><div style="display:none" id="code-Any_A_B_Cond_A_B_self__Func_B_Task&lt;bool>_predicates_"><div class="section_title">SOURCE</div><div class="code">
            input =&gt;
                from x in self.ToAsync()(input)
                from y in x.Match(
                    Some: b =&gt; Tasks.Exists(predicates.Map(p =&gt; p(b)), identity),
                    None: () =&gt; Task.FromResult(false))
                select y
                    ? x
                    : None</div></div></div><div class="member-title"><a name="Else&lt;A, B>"></a>Else&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;A, Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Else_A_B_Cond_A_B_self__Func_A_Task&lt;B>_Else_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Builds a delegate that runs the conditional computation, taking an input value and returning a result value.  This would usually be the last thing in a fluent Cond computation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The Cond computation to test</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Else</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The Else function to run if the Cond computation ends up in a None/False state.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">Else</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Else)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >The result of the conditional computation</span></div></div></div><div style="display:none" id="code-Else_A_B_Cond_A_B_self__Func_A_Task&lt;B>_Else_"><div class="section_title">SOURCE</div><div class="code">
            input =&gt;
                from b in self.ToAsync()(input)
                from c in b.Match(
                    Some: c1 =&gt; c1.AsTask(),
                    None: () =&gt; Else(input))
                select c</div></div></div><div class="member-title"><a name="Else&lt;A, B>"></a>Else&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Else_A_B_Cond_A_B_self__Func_Task&lt;B>_Else_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Builds a delegate that runs the conditional computation, taking an input value and returning a result value.  This would usually be the last thing in a fluent Cond computation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The Cond computation to test</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Else</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The Else function to run if the Cond computation ends up in a None/False state.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">Else</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Else)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >The result of the conditional computation</span></div></div></div><div style="display:none" id="code-Else_A_B_Cond_A_B_self__Func_Task&lt;B>_Else_"><div class="section_title">SOURCE</div><div class="code">
            input =&gt;
                from b in self.ToAsync()(input)
                from c in b.Match(
                    Some: c1 =&gt; c1.AsTask(),
                    None: () =&gt; Else())
                select c</div></div></div><div class="member-title"><a name="Else&lt;A, B>"></a>Else&lt;A, B&gt;(Cond&lt;A, B&gt;, Task&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Else_A_B_Cond_A_B_self__Task_B_Else_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Builds a delegate that runs the conditional computation, taking an input value and returning a result value.  This would usually be the last thing in a fluent Cond computation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The Cond computation to test</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Else</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The Else task to use if the Cond computation ends up in a None/False state.</span></div></div><div class="section_title">REMARKS</div><span >The Else task will always run, even if not needed by the computation.  Only use this variant if the Else task is a Task.FromResult(x) or you absolutely definitely need the operation to run in parallel to the If/Then computation so that the result is available as quickly as possible. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">Else</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; Else)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >The result of the conditional computation</span></div></div></div><div style="display:none" id="code-Else_A_B_Cond_A_B_self__Task_B_Else_"><div class="section_title">SOURCE</div><div class="code">
            input =&gt;
                from b in self.ToAsync()(input)
                from c in b.Match(
                    Some: c1 =&gt; c1.AsTask(),
                    None: () =&gt; Else)
                select c</div></div></div><div class="member-title"><a name="ElseAsync&lt;A, B>"></a>ElseAsync&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;A, Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ElseAsync_A_B_Cond_A_B_self__Func_A_Task&lt;B>_Else_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Builds a delegate that runs the conditional computation, taking an input value and returning a result value.  This would usually be the last thing in a fluent Cond computation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The Cond computation to test</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Else</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The Else function to run if the Cond computation ends up in a None/False state.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">ElseAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Else)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >The result of the conditional computation</span></div></div></div><div style="display:none" id="code-ElseAsync_A_B_Cond_A_B_self__Func_A_Task&lt;B>_Else_"><div class="section_title">SOURCE</div><div class="code">
            input =&gt;
                from a in input
                from b in self.ToAsync()(a)
                from c in b.Match(
                    Some: c1 =&gt; c1.AsTask(),
                    None: () =&gt; Else(a))
                select c</div></div></div><div class="member-title"><a name="ElseAsync&lt;A, B>"></a>ElseAsync&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ElseAsync_A_B_Cond_A_B_self__Func_Task&lt;B>_Else_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Builds a delegate that runs the conditional computation, taking an input value and returning a result value.  This would usually be the last thing in a fluent Cond computation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The Cond computation to test</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Else</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The Else function to run if the Cond computation ends up in a None/False state.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">ElseAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Else)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >The result of the conditional computation</span></div></div></div><div style="display:none" id="code-ElseAsync_A_B_Cond_A_B_self__Func_Task&lt;B>_Else_"><div class="section_title">SOURCE</div><div class="code">
            input =&gt;
                from a in input
                from b in self.ToAsync()(a)
                from c in b.Match(
                    Some: c1 =&gt; c1.AsTask(),
                    None: () =&gt; Else())
                select c</div></div></div><div class="member-title"><a name="ElseAsync&lt;A, B>"></a>ElseAsync&lt;A, B&gt;(Cond&lt;A, B&gt;, Task&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ElseAsync_A_B_Cond_A_B_self__Task_B_Else_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Builds a delegate that runs the conditional computation, taking an input value and returning a result value.  This would usually be the last thing in a fluent Cond computation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The Cond computation to test</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Else</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The Else task to use if the Cond computation ends up in a None/False state.</span></div></div><div class="section_title">REMARKS</div><span >The Else task will always run, even if not needed by the computation.  Only use this variant if the Else task is a Task.FromResult(x) or you absolutely definitely need the operation to run in parallel to the If/Then computation so that the result is available as quickly as possible. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">ElseAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; Else)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >The result of the conditional computation</span></div></div></div><div style="display:none" id="code-ElseAsync_A_B_Cond_A_B_self__Task_B_Else_"><div class="section_title">SOURCE</div><div class="code">
            input =&gt;
                from a in input
                from b in self.ToAsync()(a)
                from c in b.Match(
                    Some: c1 =&gt; c1.AsTask(),
                    None: () =&gt; Else)
                select c</div></div></div><div class="member-title"><a name="Filter&lt;A, B>"></a>Filter&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;B, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter_A_B_Cond_A_B_self__Func_B_Task&lt;bool>_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter the conditional computation.  This is the equivalent of the predicate in an If statement. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The conditional computation to test</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">Filter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >A conditional computation</span></div></div></div><div style="display:none" id="code-Filter_A_B_Cond_A_B_self__Func_B_Task&lt;bool>_pred_"><div class="section_title">SOURCE</div><div class="code">
            input =&gt;
                from b in self.ToAsync()(input)
                from p in b.Map(pred).IfNone(false.AsTask())
                select p ? b : None</div></div></div><div class="member-title"><a name="Map&lt;A, B, C>"></a>Map&lt;A, B, C&gt;(Cond&lt;A, B&gt;, Func&lt;B, Task&lt;C&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_A_B_C_Cond_A_B_self__Func_B_Task&lt;C>_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map of the conditional computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The conditional computation to map</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="ident">C</span>&gt;&gt;</div></div><div class="arg-desc"><span >Functor mapping function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="ident">C</span>&gt;&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt;</div><div class="normal"><span >A mapped conditional computation</span></div></div></div><div style="display:none" id="code-Map_A_B_C_Cond_A_B_self__Func_B_Task&lt;C>_map_"><div class="section_title">SOURCE</div><div class="code">
            Select(self, map)</div></div></div><div class="member-title"><a name="Select&lt;A, B, C>"></a>Select&lt;A, B, C&gt;(Cond&lt;A, B&gt;, Func&lt;B, Task&lt;C&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_A_B_C_Cond_A_B_self__Func_B_Task&lt;C>_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map of the conditional computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The conditional computation to map</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="ident">C</span>&gt;&gt;</div></div><div class="arg-desc"><span >Functor mapping function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt; <span class="ident">Select</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="ident">C</span>&gt;&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt;</div><div class="normal"><span >A mapped conditional computation</span></div></div></div><div style="display:none" id="code-Select_A_B_C_Cond_A_B_self__Func_B_Task&lt;C>_map_"><div class="section_title">SOURCE</div><div class="code">
            input =&gt;
                from b in self.ToAsync()(input)
                from c in b.Match(
                    Some: b2 =&gt; map(b2).ContinueWith(b3 =&gt; Optional(b3.Result)),
                    None: () =&gt; Task.FromResult(Option&lt;C&gt;.None))
                select c</div></div></div><div class="member-title"><a name="SelectMany&lt;A, B, C, D>"></a>SelectMany&lt;A, B, C, D&gt;(Cond&lt;A, B&gt;, Func&lt;B, CondAsync&lt;A, C&gt;&gt;, Func&lt;B, C, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_A_B_C_D_Cond_A_B_self__Func_B_CondAsync&lt;A, C>_bind__Func_B_C_D_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind for conditional computations.  Allows nesting of computations  that follow the rules of Cond, namely that a None/False result cancels the operation until an Else is encountered. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">D</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">D</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_A_B_C_D_Cond_A_B_self__Func_B_CondAsync&lt;A, C>_bind__Func_B_C_D_project_"><div class="section_title">SOURCE</div><div class="code">
                input =&gt;
                    from b in self.ToAsync()(input)
                    from c in b.Match(
                        Some: b1 =&gt; bind(b1)(input),
                        None: () =&gt; Option&lt;C&gt;.None.AsTask())
                    select (from x in b
                            from y in c
                            select project(x, y))</div></div></div><div class="member-title"><a name="Then&lt;A, B>"></a>Then&lt;A, B&gt;(Cond&lt;A, A&gt;, Func&lt;A, Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Then_A_B_Cond_A_A_self__Func_A_Task&lt;B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Provide the behaviour to run if the condition of the Cond computation is in a Some/True state.  This is equivalent to the &#39;then&#39; part of an If/Then/Else operation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The Cond computation to compose with</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The &#39;then&#39; computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">Then</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >A conditional computation</span></div></div></div><div style="display:none" id="code-Then_A_B_Cond_A_A_self__Func_A_Task&lt;B>_f_"><div class="section_title">SOURCE</div><div class="code">
            self.ToAsync().Select(f)</div></div></div><div class="member-title"><a name="Then&lt;A, B>"></a>Then&lt;A, B&gt;(Cond&lt;A, A&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Then_A_B_Cond_A_A_self__Func_Task&lt;B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Provide the behaviour to run if the condition of the Cond computation is in a Some/True state.  This is equivalent to the &#39;then&#39; part of an If/Then/Else operation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The Cond computation to compose with</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The &#39;then&#39; computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">Then</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >A conditional computation</span></div></div></div><div style="display:none" id="code-Then_A_B_Cond_A_A_self__Func_Task&lt;B>_f_"><div class="section_title">SOURCE</div><div class="code">
            self.Select(_ =&gt; f())</div></div></div><div class="member-title"><a name="Then&lt;A, B>"></a>Then&lt;A, B&gt;(Cond&lt;A, A&gt;, Task&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Then_A_B_Cond_A_A_self__Task_B_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Provide the behaviour to run if the condition of the Cond computation is in a Some/True state.  This is equivalent to the &#39;then&#39; part of an If/Then/Else operation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The Cond computation to compose with</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The &#39;then&#39; value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">Then</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; self, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >A conditional computation</span></div></div></div><div style="display:none" id="code-Then_A_B_Cond_A_A_self__Task_B_value_"><div class="section_title">SOURCE</div><div class="code">
            self.Select(_ =&gt; value)</div></div></div><div class="member-title"><a name="ToAsync&lt;A, B>"></a>ToAsync&lt;A, B&gt;(Cond&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToAsync_A_B_Cond_A_B_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Converts a synchronous conditional computation to an asynchronous one </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The synchronous computation to convert</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">ToAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span ></span></div></div></div><div style="display:none" id="code-ToAsync_A_B_Cond_A_B_self_"><div class="section_title">SOURCE</div><div class="code">
            input =&gt;
                Task.Run(() =&gt; self(input))</div></div></div><div class="member-title"><a name="Where&lt;A, B>"></a>Where&lt;A, B&gt;(Cond&lt;A, B&gt;, Func&lt;B, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_A_B_Cond_A_B_self__Func_B_Task&lt;bool>_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter the conditional computation.  This is the equivalent of the predicate in an If statement. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The conditional computation to test</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">Where</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >A conditional computation</span></div></div></div><div style="display:none" id="code-Where_A_B_Cond_A_B_self__Func_B_Task&lt;bool>_pred_"><div class="section_title">SOURCE</div><div class="code">
            input =&gt;
                from b in self.ToAsync()(input)
                from p in b.Map(pred).IfNone(false.AsTask())
                select p ? b : None</div></div></div></div></body></html>