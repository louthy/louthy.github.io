<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="EitherUnsafeT_.htm">EitherUnsafeT</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#appendT&lt;SEMI, FAIL, L, A>">appendT&lt;SEMI, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#appendT&lt;SEMI, L, A>">appendT&lt;SEMI, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;FAIL, L, A, B, C>">applyT&lt;FAIL, L, A, B, C&gt;(Func&lt;A, B, C&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;FAIL, L, A, B>">applyT&lt;FAIL, L, A, B&gt;(Func&lt;A, B&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B, C>">applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#applyT&lt;L, A, B>">applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;FAIL, L, A, B>">bindT&lt;FAIL, L, A, B&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#bindT&lt;L, A, B>">bindT&lt;L, A, B&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, FAIL, L, A>">compareT&lt;ORD, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#compareT&lt;ORD, L, A>">compareT&lt;ORD, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;FAIL, L, A>">countT&lt;FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#countT&lt;L, A>">countT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, FAIL, L, A>">divideT&lt;NUM, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#divideT&lt;NUM, L, A>">divideT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, FAIL, L, A>">equalsT&lt;EQ, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#equalsT&lt;EQ, L, A>">equalsT&lt;EQ, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#existsT&lt;FAIL, L, A>">existsT&lt;FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#existsT&lt;L, A>">existsT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;FAIL, L, A>">filterT&lt;FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filterT&lt;L, A>">filterT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, FAIL, L, A>">foldBackT&lt;S, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBackT&lt;S, L, A>">foldBackT&lt;S, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, FAIL, L, A>">foldT&lt;S, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldT&lt;S, L, A>">foldT&lt;S, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#forallT&lt;FAIL, L, A>">forallT&lt;FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forallT&lt;L, A>">forallT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#iterT&lt;FAIL, L, A>">iterT&lt;FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iterT&lt;L, A>">iterT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#mapT&lt;FAIL, L, A, B>">mapT&lt;FAIL, L, A, B&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#mapT&lt;L, A, B>">mapT&lt;L, A, B&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, FAIL, L, A>">plusT&lt;NUM, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#plusT&lt;NUM, L, A>">plusT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, FAIL, L, A>">productT&lt;NUM, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#productT&lt;NUM, L, A>">productT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;FAIL, L, A>">sequence&lt;FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sequence&lt;L, A>">sequence&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, FAIL, L, A>">subtractT&lt;NUM, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#subtractT&lt;NUM, L, A>">subtractT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, FAIL, L, A>">sumT&lt;NumA, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#sumT&lt;NumA, L, A>">sumT&lt;NumA, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#traverse&lt;FAIL, L, A, B>">traverse&lt;FAIL, L, A, B&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;L, A, B>">traverse&lt;L, A, B&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a></div><div class="content-panel"><h1 >EitherUnsafeT Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">EitherUnsafeT</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="appendT&lt;SEMI, FAIL, L, A>"></a>appendT&lt;SEMI, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_x__Validation_FAIL_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_x__Validation_FAIL_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_OptionAsync_EitherUnsafe&lt;L, A>_x__OptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_OptionAsync_EitherUnsafe&lt;L, A>_x__OptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_Seq_EitherUnsafe&lt;L, A>_x__Seq_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_Seq_EitherUnsafe&lt;L, A>_x__Seq_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="appendT&lt;SEMI, L, A>"></a>appendT&lt;SEMI, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-appendT_SEMI_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">appendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x ++ y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-appendT_SEMI_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="applyT&lt;FAIL, L, A, B, C>"></a>applyT&lt;FAIL, L, A, B, C&gt;(Func&lt;A, B, C&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_FAIL_L_A_B_C_Func_A_B_C_fabc__Validation_FAIL_EitherUnsafe&lt;L, A>_fa__Validation_FAIL_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_FAIL_L_A_B_C_Func_A_B_C_fabc__Validation_FAIL_EitherUnsafe&lt;L, A>_fa__Validation_FAIL_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplValidation&lt;FAIL, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MValidation&lt;FAIL, Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;FAIL, L, A, B>"></a>applyT&lt;FAIL, L, A, B&gt;(Func&lt;A, B&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_FAIL_L_A_B_Func_A_B_fab__Validation_FAIL_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_FAIL_L_A_B_Func_A_B_fab__Validation_FAIL_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplValidation&lt;FAIL, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MValidation&lt;FAIL, Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__Arr_EitherUnsafe&lt;L, A>_fa__Arr_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__Arr_EitherUnsafe&lt;L, A>_fa__Arr_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplArr&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MArr&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__HashSet_EitherUnsafe&lt;L, A>_fa__HashSet_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__HashSet_EitherUnsafe&lt;L, A>_fa__HashSet_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplHashSet&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MHashSet&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__Lst_EitherUnsafe&lt;L, A>_fa__Lst_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__Lst_EitherUnsafe&lt;L, A>_fa__Lst_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplLst&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MLst&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__Option_EitherUnsafe&lt;L, A>_fa__Option_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Option&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__Option_EitherUnsafe&lt;L, A>_fa__Option_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplOption&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MOption&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__OptionAsync_EitherUnsafe&lt;L, A>_fa__OptionAsync_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__OptionAsync_EitherUnsafe&lt;L, A>_fa__OptionAsync_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplOptionAsync&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MOptionAsync&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__OptionUnsafe_EitherUnsafe&lt;L, A>_fa__OptionUnsafe_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__OptionUnsafe_EitherUnsafe&lt;L, A>_fa__OptionUnsafe_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplOptionUnsafe&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MOptionUnsafe&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__Either_L_EitherUnsafe&lt;L, A>_fa__Either_L_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__Either_L_EitherUnsafe&lt;L, A>_fa__Either_L_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplEither&lt;L, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MEither&lt;L, Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__EitherUnsafe_L_EitherUnsafe&lt;L, A>_fa__EitherUnsafe_L_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__EitherUnsafe_L_EitherUnsafe&lt;L, A>_fa__EitherUnsafe_L_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MEitherUnsafe&lt;L, Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__Task_EitherUnsafe&lt;L, A>_fa__Task_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Task&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__Task_EitherUnsafe&lt;L, A>_fa__Task_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplTask&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MTask&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__Try_EitherUnsafe&lt;L, A>_fa__Try_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Try&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__Try_EitherUnsafe&lt;L, A>_fa__Try_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplTry&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MTry&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__TryAsync_EitherUnsafe&lt;L, A>_fa__TryAsync_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__TryAsync_EitherUnsafe&lt;L, A>_fa__TryAsync_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplTryAsync&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MTryAsync&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__TryOption_EitherUnsafe&lt;L, A>_fa__TryOption_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__TryOption_EitherUnsafe&lt;L, A>_fa__TryOption_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplTryOption&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MTryOption&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__TryOptionAsync_EitherUnsafe&lt;L, A>_fa__TryOptionAsync_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__TryOptionAsync_EitherUnsafe&lt;L, A>_fa__TryOptionAsync_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplTryOptionAsync&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MTryOptionAsync&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__IEnumerable_EitherUnsafe&lt;L, A>_fa__IEnumerable_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__IEnumerable_EitherUnsafe&lt;L, A>_fa__IEnumerable_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplEnumerable&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MEnumerable&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__Seq_EitherUnsafe&lt;L, A>_fa__Seq_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__Seq_EitherUnsafe&lt;L, A>_fa__Seq_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplSeq&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MSeq&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B, C>"></a>applyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_C_Func_A_B_C_fabc__Set_EitherUnsafe&lt;L, A>_fa__Set_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> and <span class='code-inline'>fb</span> to <span class='code-inline'>fabc</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Set&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fabc(fa, fb)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_C_Func_A_B_C_fabc__Set_EitherUnsafe&lt;L, A>_fa__Set_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplSet&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MSet&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            ApplEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__Arr_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__Arr_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplArr&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MArr&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__HashSet_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__HashSet_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplHashSet&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MHashSet&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__Lst_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__Lst_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplLst&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MLst&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__Option_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Option&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__Option_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplOption&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MOption&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__OptionAsync_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__OptionAsync_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplOptionAsync&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MOptionAsync&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__OptionUnsafe_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__OptionUnsafe_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplOptionUnsafe&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MOptionUnsafe&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__Either_L_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__Either_L_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplEither&lt;L, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MEither&lt;L, Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__EitherUnsafe_L_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__EitherUnsafe_L_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MEitherUnsafe&lt;L, Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__Task_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Task&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__Task_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplTask&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MTask&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__Try_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Try&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__Try_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplTry&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MTry&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__TryAsync_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__TryAsync_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplTryAsync&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MTryAsync&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__TryOption_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__TryOption_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplTryOption&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MTryOption&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__TryOptionAsync_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__TryOptionAsync_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplTryOptionAsync&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MTryOptionAsync&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__IEnumerable_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__IEnumerable_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplEnumerable&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MEnumerable&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__Seq_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__Seq_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplSeq&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MSeq&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="applyT&lt;L, A, B>"></a>applyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-applyT_L_A_B_Func_A_B_fab__Set_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply <span class='code-inline'>fa</span> to <span class='code-inline'>fab</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Functor</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Monad of <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">applyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Set&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>fab(fa)</span></span></div></div></div><div style="display:none" id="code-applyT_L_A_B_Func_A_B_fab__Set_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplSet&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MSet&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; ApplEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="bindT&lt;FAIL, L, A, B>"></a>bindT&lt;FAIL, L, A, B&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_FAIL_L_A_B_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_FAIL_L_A_B_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MValidation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MValidation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MArr&lt;EitherUnsafe&lt;L, B&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MHashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MLst&lt;EitherUnsafe&lt;L, B&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_Option_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Option&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_Option_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MOption&lt;EitherUnsafe&lt;L, B&gt;&gt;, Option&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_OptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_OptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MEither&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_Task_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Task&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_Task_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTask&lt;EitherUnsafe&lt;L, B&gt;&gt;, Task&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_Try_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Try&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_Try_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTry&lt;EitherUnsafe&lt;L, B&gt;&gt;, Try&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_Seq_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_Seq_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MSeq&lt;EitherUnsafe&lt;L, B&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="bindT&lt;L, A, B>"></a>bindT&lt;L, A, B&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bindT_L_A_B_Set_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >The bind function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">bindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Set&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-bindT_L_A_B_Set_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MSet&lt;EitherUnsafe&lt;L, B&gt;&gt;, Set&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, FAIL, L, A>"></a>compareT&lt;ORD, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_x__Validation_FAIL_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_x__Validation_FAIL_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_OptionAsync_EitherUnsafe&lt;L, A>_x__OptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_OptionAsync_EitherUnsafe&lt;L, A>_x__OptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_Seq_EitherUnsafe&lt;L, A>_x__Seq_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_Seq_EitherUnsafe&lt;L, A>_x__Seq_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="compareT&lt;ORD, L, A>"></a>compareT&lt;ORD, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compareT_ORD_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Ord</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >If <span class='code-inline'>x</span> is less than <span class='code-inline'>y</span>: <span class='code-inline'>-1</span>.  If <span class='code-inline'>x</span> is greater than <span class='code-inline'>y</span>: <span class='code-inline'>+1</span>.  If <span class='code-inline'>x</span> is equal to <span class='code-inline'>y</span>: <span class='code-inline'>0</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compareT_ORD_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="countT&lt;FAIL, L, A>"></a>countT&lt;FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MValidation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_Arr_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_Arr_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_Lst_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_Lst_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_Option_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_Option_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_Task_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_Task_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_Try_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_Try_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_Seq_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_Seq_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="countT&lt;L, A>"></a>countT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-countT_L_A_Set_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the count operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">countT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of <span class='code-inline'>A</span>s in <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-countT_L_A_Set_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, FAIL, L, A>"></a>divideT&lt;NUM, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_x__Validation_FAIL_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_x__Validation_FAIL_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_OptionAsync_EitherUnsafe&lt;L, A>_x__OptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_OptionAsync_EitherUnsafe&lt;L, A>_x__OptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_Seq_EitherUnsafe&lt;L, A>_x__Seq_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_Seq_EitherUnsafe&lt;L, A>_x__Seq_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="divideT&lt;NUM, L, A>"></a>divideT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divideT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides <span class='code-inline'>x</span> by <span class='code-inline'>y</span>, which are both <span class='code-inline'>Num&lt;A&gt;</span>s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">divideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x / y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divideT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, FAIL, L, A>"></a>equalsT&lt;EQ, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_x__Validation_FAIL_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_x__Validation_FAIL_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_OptionAsync_EitherUnsafe&lt;L, A>_x__OptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_OptionAsync_EitherUnsafe&lt;L, A>_x__OptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_Seq_EitherUnsafe&lt;L, A>_x__Seq_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_Seq_EitherUnsafe&lt;L, A>_x__Seq_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="equalsT&lt;EQ, L, A>"></a>equalsT&lt;EQ, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equalsT_EQ_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><span class='code-inline'>Eq</span> compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equalsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ><span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x == y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equalsT_EQ_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="existsT&lt;FAIL, L, A>"></a>existsT&lt;FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MValidation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_Seq_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_Seq_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="existsT&lt;L, A>"></a>existsT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-existsT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">existsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-existsT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="filterT&lt;FAIL, L, A>"></a>filterT&lt;FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MValidation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MValidation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_Seq_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_Seq_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="filterT&lt;L, A>"></a>filterT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filterT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate <span class='code-inline'>f</span>. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">filterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> with the predicate <span class='code-inline'>f(a)</span> applied</span></div></div></div><div style="display:none" id="code-filterT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="foldBackT&lt;S, FAIL, L, A>"></a>foldBackT&lt;S, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MValidation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_Arr_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_Arr_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_Lst_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_Lst_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_Option_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_Option_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_Task_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_Task_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_Try_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_Try_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_Seq_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_Seq_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldBackT&lt;S, L, A>"></a>foldBackT&lt;S, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackT_S_L_A_Set_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to <span class='code-inline'>Fold</span>)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldBackT_S_L_A_Set_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, FAIL, L, A>"></a>foldT&lt;S, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MValidation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_Arr_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_Arr_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_Lst_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_Lst_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_Option_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_Option_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_Task_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_Task_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_Try_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_Try_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_Seq_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_Seq_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="foldT&lt;S, L, A>"></a>foldT&lt;S, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldT_S_L_A_Set_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to <span class='code-inline'>f</span> to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >The folding function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-foldT_S_L_A_Set_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="forallT&lt;FAIL, L, A>"></a>forallT&lt;FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MValidation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_Seq_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_Seq_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="forallT&lt;L, A>"></a>forallT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forallT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >The predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forallT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate <span class='code-inline'>f</span>.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-forallT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="iterT&lt;FAIL, L, A>"></a>iterT&lt;FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MValidation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_Seq_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_Seq_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="iterT&lt;L, A>"></a>iterT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iterT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The action that contains the side-effects</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-iterT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="mapT&lt;FAIL, L, A, B>"></a>mapT&lt;FAIL, L, A, B&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_FAIL_L_A_B_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_FAIL_L_A_B_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MValidation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MValidation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MArr&lt;EitherUnsafe&lt;L, B&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MHashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MLst&lt;EitherUnsafe&lt;L, B&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_Option_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Option&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_Option_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MOption&lt;EitherUnsafe&lt;L, B&gt;&gt;, Option&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_OptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_OptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MEither&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_Task_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Task&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_Task_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MTask&lt;EitherUnsafe&lt;L, B&gt;&gt;, Task&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_Try_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Try&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_Try_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MTry&lt;EitherUnsafe&lt;L, B&gt;&gt;, Try&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MTryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MTryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_Seq_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_Seq_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MSeq&lt;EitherUnsafe&lt;L, B&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="mapT&lt;L, A, B>"></a>mapT&lt;L, A, B&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapT_L_A_B_Set_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function <span class='code-inline'>f</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">mapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Set&lt;EitherUnsafe&lt;L, B&gt;&gt;</span> which is the result of performing <span class='code-inline'>f(a)</span></span></div></div></div><div style="display:none" id="code-mapT_L_A_B_Set_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MSet&lt;EitherUnsafe&lt;L, B&gt;&gt;, Set&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, FAIL, L, A>"></a>plusT&lt;NUM, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_x__Validation_FAIL_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_x__Validation_FAIL_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_OptionAsync_EitherUnsafe&lt;L, A>_x__OptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_OptionAsync_EitherUnsafe&lt;L, A>_x__OptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_Seq_EitherUnsafe&lt;L, A>_x__Seq_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_Seq_EitherUnsafe&lt;L, A>_x__Seq_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="plusT&lt;NUM, L, A>"></a>plusT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plusT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner <span class='code-inline'>Num&lt;A&gt;</span> types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">plusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plusT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, FAIL, L, A>"></a>productT&lt;NUM, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_x__Validation_FAIL_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_x__Validation_FAIL_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_OptionAsync_EitherUnsafe&lt;L, A>_x__OptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_OptionAsync_EitherUnsafe&lt;L, A>_x__OptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_Seq_EitherUnsafe&lt;L, A>_x__Seq_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_Seq_EitherUnsafe&lt;L, A>_x__Seq_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="productT&lt;NUM, L, A>"></a>productT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-productT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">productT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing <span class='code-inline'>x * y</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-productT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="sequence&lt;FAIL, L, A>"></a>sequence&lt;FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;FAIL, L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;FAIL, L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_Arr_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_Arr_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_HashSet_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_HashSet_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_Lst_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_Lst_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_Option_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Option&lt;A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Option&lt;A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_Option_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, OptionAsync&lt;A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, OptionAsync&lt;A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_Either_L_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_Either_L_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_Task_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Task&lt;A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Task&lt;A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_Task_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_Try_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Try&lt;A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Try&lt;A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_Try_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, TryAsync&lt;A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, TryAsync&lt;A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_TryOption_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_TryOption_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, TryOptionAsync&lt;A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, TryOptionAsync&lt;A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_Seq_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_Seq_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="sequence&lt;L, A>"></a>sequence&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sequence_L_A_Set_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Set&lt;A&gt;&gt;</span>.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling <span class='code-inline'>ma.Traverse&lt;L, A, A&gt;(identity)</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Set&lt;A&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-sequence_L_A_Set_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, FAIL, L, A>"></a>subtractT&lt;NUM, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_x__Validation_FAIL_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_x__Validation_FAIL_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_OptionAsync_EitherUnsafe&lt;L, A>_x__OptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_OptionAsync_EitherUnsafe&lt;L, A>_x__OptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_Seq_EitherUnsafe&lt;L, A>_x__Seq_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_Seq_EitherUnsafe&lt;L, A>_x__Seq_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="subtractT&lt;NUM, L, A>"></a>subtractT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtractT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner <span class='code-inline'>Num&lt;A&gt;</span> types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">subtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtractT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            applyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, FAIL, L, A>"></a>sumT&lt;NumA, FAIL, L, A&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_FAIL_L_A_Validation_FAIL_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MValidation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_Arr_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_Arr_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_HashSet_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_HashSet_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_Lst_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_Lst_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_Option_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_Option_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_OptionAsync_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_Either_L_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_Either_L_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_Task_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_Task_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_Try_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_Try_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_TryOption_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_TryOption_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_Seq_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_Seq_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="sumT&lt;NumA, L, A>"></a>sumT&lt;NumA, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sumT_NumA_L_A_Set_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the sum operation on</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all <span class='code-inline'>Num&lt;A&gt;</span>s in <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sumT_NumA_L_A_Set_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="traverse&lt;FAIL, L, A, B>"></a>traverse&lt;FAIL, L, A, B&gt;(Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_FAIL_L_A_B_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Validation&lt;FAIL, B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">FAIL</span>, <span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Validation&lt;FAIL, B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_FAIL_L_A_B_Validation_FAIL_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MValidation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Validation&lt;FAIL, B&gt;&gt;, EitherUnsafe&lt;L, Validation&lt;FAIL, B&gt;&gt;, MValidation&lt;FAIL, B&gt;, Validation&lt;FAIL, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Arr&lt;B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Arr</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Arr</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Arr&lt;B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Arr&lt;B&gt;&gt;, EitherUnsafe&lt;L, Arr&lt;B&gt;&gt;, MArr&lt;B&gt;, Arr&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, HashSet&lt;B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">HashSet</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">HashSet</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, HashSet&lt;B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, HashSet&lt;B&gt;&gt;, EitherUnsafe&lt;L, HashSet&lt;B&gt;&gt;, MHashSet&lt;B&gt;, HashSet&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Lst&lt;B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Lst</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Lst</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Lst&lt;B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Lst&lt;B&gt;&gt;, EitherUnsafe&lt;L, Lst&lt;B&gt;&gt;, MLst&lt;B&gt;, Lst&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_Option_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Option&lt;B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Option&lt;B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_Option_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Option&lt;B&gt;&gt;, EitherUnsafe&lt;L, Option&lt;B&gt;&gt;, MOption&lt;B&gt;, Option&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_OptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, OptionAsync&lt;B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">OptionAsync</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, OptionAsync&lt;B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_OptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, OptionAsync&lt;B&gt;&gt;, EitherUnsafe&lt;L, OptionAsync&lt;B&gt;&gt;, MOptionAsync&lt;B&gt;, OptionAsync&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, OptionUnsafe&lt;B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, OptionUnsafe&lt;B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, OptionUnsafe&lt;B&gt;&gt;, EitherUnsafe&lt;L, OptionUnsafe&lt;B&gt;&gt;, MOptionUnsafe&lt;B&gt;, OptionUnsafe&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Either&lt;L, B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Either&lt;L, B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Either&lt;L, B&gt;&gt;, EitherUnsafe&lt;L, Either&lt;L, B&gt;&gt;, MEither&lt;L, B&gt;, Either&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_Task_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Task&lt;B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Task&lt;B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_Task_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Task&lt;B&gt;&gt;, EitherUnsafe&lt;L, Task&lt;B&gt;&gt;, MTask&lt;B&gt;, Task&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_Try_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Try&lt;B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Try</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Try</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Try&lt;B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_Try_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Try&lt;B&gt;&gt;, EitherUnsafe&lt;L, Try&lt;B&gt;&gt;, MTry&lt;B&gt;, Try&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, TryAsync&lt;B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, TryAsync&lt;B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, TryAsync&lt;B&gt;&gt;, EitherUnsafe&lt;L, TryAsync&lt;B&gt;&gt;, MTryAsync&lt;B&gt;, TryAsync&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, TryOption&lt;B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, TryOption&lt;B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, TryOption&lt;B&gt;&gt;, EitherUnsafe&lt;L, TryOption&lt;B&gt;&gt;, MTryOption&lt;B&gt;, TryOption&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, TryOptionAsync&lt;B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, TryOptionAsync&lt;B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, TryOptionAsync&lt;B&gt;&gt;, EitherUnsafe&lt;L, TryOptionAsync&lt;B&gt;&gt;, MTryOptionAsync&lt;B&gt;, TryOptionAsync&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, IEnumerable&lt;B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, IEnumerable&lt;B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, IEnumerable&lt;B&gt;&gt;, EitherUnsafe&lt;L, IEnumerable&lt;B&gt;&gt;, MEnumerable&lt;B&gt;, IEnumerable&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_Seq_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Seq&lt;B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Seq&lt;B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_Seq_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Seq&lt;B&gt;&gt;, EitherUnsafe&lt;L, Seq&lt;B&gt;&gt;, MSeq&lt;B&gt;, Seq&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="traverse&lt;L, A, B>"></a>traverse&lt;L, A, B&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_L_A_B_Set_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Traverse operation.  Takes a value of type <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span>, traverses the inner values of type <span class='code-inline'>A</span>, and returns <span class='code-inline'>EitherUnsafe&lt;L, Set&lt;B&gt;&gt;</span> (by applying <span class='code-inline'>a</span> to <span class='code-inline'>f</span>).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >The <span class='code-inline'>Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span> to perform the operation on</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Set</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Set</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span ><span class='code-inline'>EitherUnsafe&lt;L, Set&lt;B&gt;&gt;</span></span></div></div></div><div style="display:none" id="code-traverse_L_A_B_Set_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Set&lt;B&gt;&gt;, EitherUnsafe&lt;L, Set&lt;B&gt;&gt;, MSet&lt;B&gt;, Set&lt;B&gt;, B&gt;(ma, f)</div></div></div></div></body></html>