<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Map_K_V.htm">Map&lt;K, V&gt;</span></div><div class="nav-panel"><h3 >CONSTRUCTORS</h3><a class="nav-link" href="#Map">Map(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><h3 >FIELDS</h3><a class="nav-link" href="#Empty">Empty</a><h3 >PROPERTIES</h3><a class="nav-link" href="#Count">Count</a><a class="nav-link" href="#IsEmpty">IsEmpty</a><a class="nav-link" href="#Keys">Keys</a><a class="nav-link" href="#Length">Length</a><a class="nav-link" href="#this">this</a><a class="nav-link" href="#Tuples">Tuples</a><a class="nav-link" href="#Values">Values</a><a class="nav-link" href="#ValueTuples">ValueTuples</a><h3 >METHODS</h3><a class="nav-link" href="#Add">Add(K, V)</a><a class="nav-link" href="#AddOrUpdate">AddOrUpdate(K, V)</a><a class="nav-link" href="#AddOrUpdate">AddOrUpdate(K, Func&lt;V, V&gt;, Func&lt;V&gt;)</a><a class="nav-link" href="#AddOrUpdate">AddOrUpdate(K, Func&lt;V, V&gt;, V)</a><a class="nav-link" href="#AddOrUpdateRange">AddOrUpdateRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#AddOrUpdateRange">AddOrUpdateRange(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#AddOrUpdateRange">AddOrUpdateRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#AddRange">AddRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#AddRange">AddRange(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#AddRange">AddRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#AsEnumerable">AsEnumerable()</a><a class="nav-link" href="#Choose&lt;U>">Choose&lt;U&gt;(Func&lt;K, V, Option&lt;U&gt;&gt;)</a><a class="nav-link" href="#Choose&lt;U>">Choose&lt;U&gt;(Func&lt;V, Option&lt;U&gt;&gt;)</a><a class="nav-link" href="#Clear">Clear()</a><a class="nav-link" href="#Contains">Contains(K, V)</a><a class="nav-link" href="#Contains">Contains(KeyValuePair&lt;K, V&gt;)</a><a class="nav-link" href="#ContainsKey">ContainsKey(K)</a><a class="nav-link" href="#Equals">Equals(Map&lt;K, V&gt;)</a><a class="nav-link" href="#Equals">Equals(object)</a><a class="nav-link" href="#Except">Except(Map&lt;K, V&gt;)</a><a class="nav-link" href="#Exists">Exists(Func&lt;K, V, bool&gt;)</a><a class="nav-link" href="#Exists">Exists(Func&lt;Tuple&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#Exists">Exists(Func&lt;ValueTuple&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#Exists">Exists(Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#Exists">Exists(Func&lt;V, bool&gt;)</a><a class="nav-link" href="#Filter">Filter(Func&lt;V, bool&gt;)</a><a class="nav-link" href="#Filter">Filter(Func&lt;K, V, bool&gt;)</a><a class="nav-link" href="#Find">Find(K)</a><a class="nav-link" href="#Find&lt;R>">Find&lt;R&gt;(K, Func&lt;V, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#FindRange">FindRange(K, K)</a><a class="nav-link" href="#FindSeq">FindSeq(K)</a><a class="nav-link" href="#Fold&lt;S>">Fold&lt;S&gt;(S, Func&lt;S, K, V, S&gt;)</a><a class="nav-link" href="#Fold&lt;S>">Fold&lt;S&gt;(S, Func&lt;S, V, S&gt;)</a><a class="nav-link" href="#ForAll">ForAll(Func&lt;K, V, bool&gt;)</a><a class="nav-link" href="#ForAll">ForAll(Func&lt;Tuple&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#ForAll">ForAll(Func&lt;ValueTuple&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#ForAll">ForAll(Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#ForAll">ForAll(Func&lt;V, bool&gt;)</a><a class="nav-link" href="#GetEnumerator">GetEnumerator()</a><a class="nav-link" href="#GetHashCode">GetHashCode()</a><a class="nav-link" href="#Intersect&lt;V2, R>">Intersect&lt;V2, R&gt;(Map&lt;K, V2&gt;, WhenMatched&lt;K, V, V2, R&gt;)</a><a class="nav-link" href="#Iter">Iter(Action&lt;K, V&gt;)</a><a class="nav-link" href="#Iter">Iter(Action&lt;V&gt;)</a><a class="nav-link" href="#Iter">Iter(Action&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#Iter">Iter(Action&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#Iter">Iter(Action&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#Remove">Remove(K)</a><a class="nav-link" href="#RemoveRange">RemoveRange(IEnumerable&lt;K&gt;)</a><a class="nav-link" href="#Select&lt;U>">Select&lt;U&gt;(Func&lt;V, U&gt;)</a><a class="nav-link" href="#Select&lt;U>">Select&lt;U&gt;(Func&lt;K, V, U&gt;)</a><a class="nav-link" href="#SetItem">SetItem(K, V)</a><a class="nav-link" href="#SetItem">SetItem(K, Func&lt;V, V&gt;)</a><a class="nav-link" href="#SetItems">SetItems(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#SetItems">SetItems(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#SetItems">SetItems(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#Skip">Skip(int)</a><a class="nav-link" href="#SymmetricExcept">SymmetricExcept(Map&lt;K, V&gt;)</a><a class="nav-link" href="#ToDictionary">ToDictionary()</a><a class="nav-link" href="#ToDictionary&lt;KR, VR>">ToDictionary&lt;KR, VR&gt;(Func&lt;ValueTuple&lt;K, V&gt;, KR&gt;, Func&lt;ValueTuple&lt;K, V&gt;, VR&gt;)</a><a class="nav-link" href="#ToReadOnlyDictionary">ToReadOnlyDictionary()</a><a class="nav-link" href="#ToSeq">ToSeq()</a><a class="nav-link" href="#TryAdd">TryAdd(K, V)</a><a class="nav-link" href="#TryAdd">TryAdd(K, V, Func&lt;Map&lt;K, V&gt;, V, Map&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TryAddRange">TryAddRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TryAddRange">TryAddRange(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TryAddRange">TryAddRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TrySetItem">TrySetItem(K, V)</a><a class="nav-link" href="#TrySetItem">TrySetItem(K, Func&lt;V, V&gt;)</a><a class="nav-link" href="#TrySetItem">TrySetItem(K, Func&lt;V, V&gt;, Func&lt;Map&lt;K, V&gt;, Map&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TrySetItems">TrySetItems(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TrySetItems">TrySetItems(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TrySetItems">TrySetItems(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#TrySetItems">TrySetItems(IEnumerable&lt;K&gt;, Func&lt;V, V&gt;)</a><a class="nav-link" href="#Union">Union(Map&lt;K, V&gt;, WhenMatched&lt;K, V, V, V&gt;)</a><a class="nav-link" href="#Union&lt;V2, R>">Union&lt;V2, R&gt;(Map&lt;K, V2&gt;, WhenMissing&lt;K, V, R&gt;, WhenMissing&lt;K, V2, R&gt;, WhenMatched&lt;K, V, V2, R&gt;)</a><a class="nav-link" href="#Union&lt;V2>">Union&lt;V2&gt;(Map&lt;K, V2&gt;, WhenMissing&lt;K, V2, V&gt;, WhenMatched&lt;K, V, V2, V&gt;)</a><a class="nav-link" href="#Union&lt;V2>">Union&lt;V2&gt;(Map&lt;K, V2&gt;, WhenMissing&lt;K, V, V2&gt;, WhenMatched&lt;K, V, V2, V2&gt;)</a><a class="nav-link" href="#Where">Where(Func&lt;V, bool&gt;)</a><a class="nav-link" href="#Where">Where(Func&lt;K, V, bool&gt;)</a></div><div class="content-panel"><h1 >Map&lt;K, V&gt; Struct</h1><p ><span >Immutable map AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Constructors</h2><div class="member-title"><a name="Map"></a>Map(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map__IEnumerable_ValueTuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">ctor</span> <span class="ident">Map</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div></div><div style="display:none" id="code-Map__IEnumerable_ValueTuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            var map = Map&lt;K, V&gt;.Empty;
            foreach (var item in items)
            {
                map = map.Add(item.Key, item.Value);
            }
            this.value = map.value;
        </div></div></div><h2 >Fields</h2><div class="member-title"><a name="Empty"></a>Empty</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Empty</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="Count"></a>Count</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Number of items in the map </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">Count</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IsEmpty"></a>IsEmpty</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Is the map empty </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsEmpty</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="Keys"></a>Keys</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Enumerable of map keys </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt; <span class="ident">Keys</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="Length"></a>Length</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Alias of Count </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">Length</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="this"></a>this</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >&#39;this&#39; accessor </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">V</span> <span class="keyword">this</span> [<span class="ident">K</span> key] { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">V</span></div><div class="normal"><span >Optional value</span></div></div></div></div><div class="member-title"><a name="Tuples"></a>Tuples</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Enumerable of in-order tuples that make up the map </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">Tuples</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"><span >Tuples</span></div></div></div></div><div class="member-title"><a name="Values"></a>Values</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Enumerable of map values </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">Values</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"></div></div></div></div><div class="member-title"><a name="ValueTuples"></a>ValueTuples</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Enumerable of in-order tuples that make up the map </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">ValueTuples</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"><span >Tuples</span></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Add"></a>Add(K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Add__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Add</span>(<span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if the key already exists</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-Add__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.Add(key,value))</div></div></div><div class="member-title"><a name="AddOrUpdate"></a>AddOrUpdate(K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddOrUpdate__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map. If the key already exists, the new item replaces it. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdate</span>(<span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-AddOrUpdate__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.AddOrUpdate(key,value))</div></div></div><div class="member-title"><a name="AddOrUpdate"></a>AddOrUpdate(K, Func&lt;V, V&gt;, Func&lt;V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddOrUpdate__K__key__Func_V_V_Some__Func_V_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key, map it to a new value, put it back.  If it doesn&#39;t exist, add a new one based on None result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdate</span>(<span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">V</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the mapped value</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if None returns null</span></div></div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div></div><div style="display:none" id="code-AddOrUpdate__K__key__Func_V_V_Some__Func_V_None_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.AddOrUpdate(key, Some, None))</div></div></div><div class="member-title"><a name="AddOrUpdate"></a>AddOrUpdate(K, Func&lt;V, V&gt;, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddOrUpdate__K__key__Func_V_V_Some__V__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key, map it to a new value, put it back.  If it doesn&#39;t exist, add a new one based on None result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">V</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdate</span>(<span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some, <span class="ident">V</span> None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the mapped value</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException if None is null</span></div></div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div></div><div style="display:none" id="code-AddOrUpdate__K__key__Func_V_V_Some__V__None_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.AddOrUpdate(key, Some, None))</div></div></div><div class="member-title"><a name="AddOrUpdateRange"></a>AddOrUpdateRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddOrUpdateRange__IEnumerable_Tuple&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re replaced. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Range of tuples to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdateRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-AddOrUpdateRange__IEnumerable_Tuple&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.AddOrUpdateRange(range))</div></div></div><div class="member-title"><a name="AddOrUpdateRange"></a>AddOrUpdateRange(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddOrUpdateRange__IEnumerable_ValueTuple&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re replaced. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Range of tuples to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdateRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-AddOrUpdateRange__IEnumerable_ValueTuple&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.AddOrUpdateRange(range))</div></div></div><div class="member-title"><a name="AddOrUpdateRange"></a>AddOrUpdateRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddOrUpdateRange__IEnumerable_KeyValuePair&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re replaced. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Range of KeyValuePairs to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddOrUpdateRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-AddOrUpdateRange__IEnumerable_KeyValuePair&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.AddOrUpdateRange(range))</div></div></div><div class="member-title"><a name="AddRange"></a>AddRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddRange__IEnumerable_Tuple&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Range of tuples to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-AddRange__IEnumerable_Tuple&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.AddRange(range))</div></div></div><div class="member-title"><a name="AddRange"></a>AddRange(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddRange__IEnumerable_ValueTuple&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Range of tuples to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-AddRange__IEnumerable_ValueTuple&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.AddRange(range))</div></div></div><div class="member-title"><a name="AddRange"></a>AddRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddRange__IEnumerable_KeyValuePair&lt;K, V>_pairs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pairs</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Range of KeyValuePairs to add</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">AddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; pairs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div></div><div style="display:none" id="code-AddRange__IEnumerable_KeyValuePair&lt;K, V>_pairs_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.AddRange(pairs))</div></div></div><div class="member-title"><a name="AsEnumerable"></a>AsEnumerable()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">AsEnumerable</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsEnumerable__"><div class="section_title">SOURCE</div><div class="code"> 
            Value.AsEnumerable()</div></div></div><div class="member-title"><a name="Choose&lt;U>"></a>Choose&lt;U&gt;(Func&lt;K, V, Option&lt;U&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Choose_U_Func_K_V_Option&lt;U>_selector_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Equivalent to map and filter but the filtering is done based on whether the returned Option is Some or None.  If the item is None then it&#39;s filtered out, if not the the mapped Some value is used. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">Option</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt; <span class="ident">Choose</span>&lt;<span class="ident">U</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">Option</span>&lt;<span class="ident">U</span>&gt;&gt; selector)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt;</div><div class="normal"><span >Filtered map</span></div></div></div><div style="display:none" id="code-Choose_U_Func_K_V_Option&lt;U>_selector_"><div class="section_title">SOURCE</div><div class="code">
            new Map&lt;K, U&gt;(MapModule.Choose(Value.Root, selector), Value.Rev)</div></div></div><div class="member-title"><a name="Choose&lt;U>"></a>Choose&lt;U&gt;(Func&lt;V, Option&lt;U&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Choose_U_Func_V_Option&lt;U>_selector_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Equivalent to map and filter but the filtering is done based on whether the returned Option is Some or None.  If the item is None then it&#39;s filtered out, if not the the mapped Some value is used. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">Option</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt; <span class="ident">Choose</span>&lt;<span class="ident">U</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">Option</span>&lt;<span class="ident">U</span>&gt;&gt; selector)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt;</div><div class="normal"><span >Filtered map</span></div></div></div><div style="display:none" id="code-Choose_U_Func_V_Option&lt;U>_selector_"><div class="section_title">SOURCE</div><div class="code">
            new Map&lt;K, U&gt;(MapModule.Choose(Value.Root, selector), Value.Rev)</div></div></div><div class="member-title"><a name="Clear"></a>Clear()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Clear__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Clears all items from the map  </span></p><div class="section_title">REMARKS</div><span >Functionally equivalent to calling Map.empty as the original structure is untouched</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Clear</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >Empty map</span></div></div></div><div style="display:none" id="code-Clear__"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.Clear())</div></div></div><div class="member-title"><a name="Contains"></a>Contains(K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Contains__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Checks for existence of a key in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to check</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Contains</span>(<span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if an item with the key supplied is in the map</span></div></div></div><div style="display:none" id="code-Contains__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code"> Value.Contains(key, value)</div></div></div><div class="member-title"><a name="Contains"></a>Contains(KeyValuePair&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Contains__KeyValuePair_K_V_pair_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if a Key/Value pair exists in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pair</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >Pair to find</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Contains</span>(<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; pair)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if exists, false otherwise</span></div></div></div><div style="display:none" id="code-Contains__KeyValuePair_K_V_pair_"><div class="section_title">SOURCE</div><div class="code"> Value.Contains(pair)</div></div></div><div class="member-title"><a name="ContainsKey"></a>ContainsKey(K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ContainsKey__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Checks for existence of a key in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to check</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">ContainsKey</span>(<span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if an item with the key supplied is in the map</span></div></div></div><div style="display:none" id="code-ContainsKey__K__key_"><div class="section_title">SOURCE</div><div class="code"> Value.ContainsKey(key)</div></div></div><div class="member-title"><a name="Equals"></a>Equals(Map&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__Map_K_V_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Equals__Map_K_V_y_"><div class="section_title">SOURCE</div><div class="code">
            Value.Equals(y.Value)</div></div></div><div class="member-title"><a name="Equals"></a>Equals(object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__object__obj_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">obj</div><div class="arg-type"><span class="keyword">object</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="keyword">object</span> obj)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Equals__object__obj_"><div class="section_title">SOURCE</div><div class="code">
            !ReferenceEquals(obj, null) &amp;&amp; obj is Map&lt;K, V&gt; &amp;&amp; Equals((Map&lt;K, V&gt;)obj)</div></div></div><div class="member-title"><a name="Except"></a>Except(Map&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Except__Map_K_V_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map differencing based on key.  this - other. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Except</span>(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Except__Map_K_V_other_"><div class="section_title">SOURCE</div><div class="code">
            // TODO: Look into more optimal solution

            var map = this;
            foreach (var right in other)
            {
                if (map.ContainsKey(right.Key))
                {
                    map = map.Remove(right.Key);
                }
            }
            return map;
        </div></div></div><div class="member-title"><a name="Exists"></a>Exists(Func&lt;K, V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists__Func_K_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *any* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Exists</span>(<span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-Exists__Func_K_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            MapModule.Exists(Value.Root, pred)</div></div></div><div class="member-title"><a name="Exists"></a>Exists(Func&lt;Tuple&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists__Func_Tuple&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *any* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Exists</span>(<span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-Exists__Func_Tuple&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            MapModule.Exists(Value.Root, (k, v) =&gt; pred(new Tuple&lt;K, V&gt;(k, v)))</div></div></div><div class="member-title"><a name="Exists"></a>Exists(Func&lt;ValueTuple&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists__Func_ValueTuple&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *any* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Exists</span>(<span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-Exists__Func_ValueTuple&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            MapModule.Exists(Value.Root, (k, v) =&gt; pred((k, v)))</div></div></div><div class="member-title"><a name="Exists"></a>Exists(Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists__Func_KeyValuePair&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *any* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Exists</span>(<span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-Exists__Func_KeyValuePair&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            MapModule.Exists(Value.Root, (k, v) =&gt; pred(new KeyValuePair&lt;K, V&gt;(k, v)))</div></div></div><div class="member-title"><a name="Exists"></a>Exists(Func&lt;V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists__Func_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *any* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Exists</span>(<span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-Exists__Func_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            MapModule.Exists(Value.Root, (_, v) =&gt; pred(v))</div></div></div><div class="member-title"><a name="Filter"></a>Filter(Func&lt;V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter__Func_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically filter out items that return false when a predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Filter</span>(<span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with items filtered</span></div></div></div><div style="display:none" id="code-Filter__Func_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            SetRoot(MapModule.Filter(Value.Root, pred))</div></div></div><div class="member-title"><a name="Filter"></a>Filter(Func&lt;K, V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter__Func_K_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically filter out items that return false when a predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Filter</span>(<span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with items filtered</span></div></div></div><div style="display:none" id="code-Filter__Func_K_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            SetRoot(MapModule.Filter(Value.Root, pred))</div></div></div><div class="member-title"><a name="Find"></a>Find(K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Find__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Option</span>&lt;<span class="ident">V</span>&gt; <span class="ident">Find</span>(<span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"><span >Found value</span></div></div></div><div style="display:none" id="code-Find__K__key_"><div class="section_title">SOURCE</div><div class="code"> Value.Find(key)</div></div></div><div class="member-title"><a name="Find&lt;R>"></a>Find&lt;R&gt;(K, Func&lt;V, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Find_R_K__key__Func_V_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key and pattern match the result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">Find</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Found value</span></div></div></div><div style="display:none" id="code-Find_R_K__key__Func_V_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code"> Value.Find(key, Some, None)</div></div></div><div class="member-title"><a name="FindRange"></a>FindRange(K, K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FindRange__K__keyFrom__K__keyTo_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a range of values  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keyFrom</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Range start (inclusive)</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyTo</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Range to (inclusive)</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">FindRange</span>(<span class="ident">K</span> keyFrom, <span class="ident">K</span> keyTo)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"><span >Range of values</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keyFrom or keyTo are null</span></div></div></div><div style="display:none" id="code-FindRange__K__keyFrom__K__keyTo_"><div class="section_title">SOURCE</div><div class="code"> Value.FindRange(keyFrom, keyTo)</div></div></div><div class="member-title"><a name="FindSeq"></a>FindSeq(K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FindSeq__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key as an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">FindSeq</span>(<span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"><span >Found value</span></div></div></div><div style="display:none" id="code-FindSeq__K__key_"><div class="section_title">SOURCE</div><div class="code"> Value.FindSeq(key)</div></div></div><div class="member-title"><a name="Fold&lt;S>"></a>Fold&lt;S&gt;(S, Func&lt;S, K, V, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_S_S__state__Func_S_K_V_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically folds all items in the map (in order) using the folder function provided. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">S</span> <span class="ident">Fold</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-Fold_S_S__state__Func_S_K_V_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            MapModule.Fold(Value.Root, state, folder)</div></div></div><div class="member-title"><a name="Fold&lt;S>"></a>Fold&lt;S&gt;(S, Func&lt;S, V, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_S_S__state__Func_S_V_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically folds all items in the map (in order) using the folder function provided. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">S</span> <span class="ident">Fold</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-Fold_S_S__state__Func_S_V_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            MapModule.Fold(Value.Root, state, folder)</div></div></div><div class="member-title"><a name="ForAll"></a>ForAll(Func&lt;K, V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll__Func_K_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if all items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">ForAll</span>(<span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-ForAll__Func_K_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            MapModule.ForAll(Value.Root, pred)</div></div></div><div class="member-title"><a name="ForAll"></a>ForAll(Func&lt;Tuple&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll__Func_Tuple&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if all items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">ForAll</span>(<span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-ForAll__Func_Tuple&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            MapModule.ForAll(Value.Root, (k, v) =&gt; pred(new Tuple&lt;K, V&gt;(k, v)))</div></div></div><div class="member-title"><a name="ForAll"></a>ForAll(Func&lt;ValueTuple&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll__Func_ValueTuple&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if all items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">ForAll</span>(<span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-ForAll__Func_ValueTuple&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            MapModule.ForAll(Value.Root, (k, v) =&gt; pred((k, v)))</div></div></div><div class="member-title"><a name="ForAll"></a>ForAll(Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll__Func_KeyValuePair&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *all* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">ForAll</span>(<span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-ForAll__Func_KeyValuePair&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            MapModule.ForAll(Value.Root, (k, v) =&gt; pred(new KeyValuePair&lt;K, V&gt;(k, v)))</div></div></div><div class="member-title"><a name="ForAll"></a>ForAll(Func&lt;V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll__Func_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if all items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">ForAll</span>(<span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-ForAll__Func_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            MapModule.ForAll(Value.Root, (k, v) =&gt; pred(v))</div></div></div><div class="member-title"><a name="GetEnumerator"></a>GetEnumerator()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetEnumerator__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >GetEnumerator - IEnumerable interface </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerator</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">GetEnumerator</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerator</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-GetEnumerator__"><div class="section_title">SOURCE</div><div class="code"> 
            Value.GetEnumerator()</div></div></div><div class="member-title"><a name="GetHashCode"></a>GetHashCode()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetHashCode__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="ident">GetHashCode</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-GetHashCode__"><div class="section_title">SOURCE</div><div class="code">
            Value.GetHashCode()</div></div></div><div class="member-title"><a name="Intersect&lt;V2, R>"></a>Intersect&lt;V2, R&gt;(Map&lt;K, V2&gt;, WhenMatched&lt;K, V, V2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Intersect_V2_R_Map_K_V2_other__WhenMatched_K_V_V2_R_Merge_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Merge</div><div class="arg-type"><span class="ident">WhenMatched</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">V2</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">R</span>&gt; <span class="ident">Intersect</span>&lt;<span class="ident">V2</span>, <span class="ident">R</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V2</span>&gt; other, <span class="ident">WhenMatched</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">V2</span>, <span class="ident">R</span>&gt; Merge)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Intersect_V2_R_Map_K_V2_other__WhenMatched_K_V_V2_R_Merge_"><div class="section_title">SOURCE</div><div class="code">
            // TODO: Look into more optimal solution

            if (Merge == null) throw new ArgumentNullException(nameof(Merge));

            var map = Map&lt;K, R&gt;.Empty;
            foreach (var right in other)
            {
                var left = Find(right.Key);
                if (left.IsSome)
                {
                    map = map.Add(right.Key, Merge(right.Key, left.Value, right.Value));
                }
            }
            return map;
        </div></div></div><div class="member-title"><a name="Iter"></a>Iter(Action&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter__Action_K_V_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically iterate through all key/value pairs in the map (in order) and execute an action on each </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >Action to execute</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">Iter</span>(<span class="ident">Action</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; action)</div></div><div style="display:none" id="code-Iter__Action_K_V_action_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in this)
            {
                action(item.Key, item.Value);
            }
            return unit;
        </div></div></div><div class="member-title"><a name="Iter"></a>Iter(Action&lt;V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter__Action_V_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically iterate through all values in the map (in order) and execute an action on each </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >Action to execute</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">Iter</span>(<span class="ident">Action</span>&lt;<span class="ident">V</span>&gt; action)</div></div><div style="display:none" id="code-Iter__Action_V_action_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in this)
            {
                action(item.Value);
            }
            return unit;
        </div></div></div><div class="member-title"><a name="Iter"></a>Iter(Action&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter__Action_Tuple&lt;K, V>_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically iterate through all key/value pairs (as tuples) in the map (in order)  and execute an action on each </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Action to execute</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">Iter</span>(<span class="ident">Action</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; action)</div></div><div style="display:none" id="code-Iter__Action_Tuple&lt;K, V>_action_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in this)
            {
                action(new Tuple&lt;K, V&gt;(item.Key, item.Value));
            }
            return unit;
        </div></div></div><div class="member-title"><a name="Iter"></a>Iter(Action&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter__Action_ValueTuple&lt;K, V>_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically iterate through all key/value pairs (as tuples) in the map (in order)  and execute an action on each </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Action to execute</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">Iter</span>(<span class="ident">Action</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; action)</div></div><div style="display:none" id="code-Iter__Action_ValueTuple&lt;K, V>_action_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in this)
            {
                action(item);
            }
            return unit;
        </div></div></div><div class="member-title"><a name="Iter"></a>Iter(Action&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter__Action_KeyValuePair&lt;K, V>_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically iterate through all key/value pairs in the map (in order) and execute an action on each </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Action to execute</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">Iter</span>(<span class="ident">Action</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; action)</div></div><div style="display:none" id="code-Iter__Action_KeyValuePair&lt;K, V>_action_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in this)
            {
                action(new KeyValuePair&lt;K, V&gt;(item.Key, item.Value));
            }
            return unit;
        </div></div></div><div class="member-title"><a name="Remove"></a>Remove(K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Remove__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically removes an item from the map If the key doesn&#39;t exists, the request is ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Remove</span>(<span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the item removed</span></div></div></div><div style="display:none" id="code-Remove__K__key_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.Remove(key))</div></div></div><div class="member-title"><a name="RemoveRange"></a>RemoveRange(IEnumerable&lt;K&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-RemoveRange__IEnumerable_K_keys_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically removes a set of keys from the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keys</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt;</div></div><div class="arg-desc"><span >Keys to remove</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">RemoveRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt; keys)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items removed</span></div></div></div><div style="display:none" id="code-RemoveRange__IEnumerable_K_keys_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.RemoveRange(keys))</div></div></div><div class="member-title"><a name="Select&lt;U>"></a>Select&lt;U&gt;(Func&lt;V, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_U_Func_V_U_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically maps the map to a new map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt; <span class="ident">Select</span>&lt;<span class="ident">U</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">U</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt;</div><div class="normal"><span >Mapped items in a new map</span></div></div></div><div style="display:none" id="code-Select_U_Func_V_U_mapper_"><div class="section_title">SOURCE</div><div class="code">
            new Map&lt;K, U&gt;(MapModule.Map(Value.Root, mapper), Value.Rev)</div></div></div><div class="member-title"><a name="Select&lt;U>"></a>Select&lt;U&gt;(Func&lt;K, V, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_U_Func_K_V_U_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically maps the map to a new map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt; <span class="ident">Select</span>&lt;<span class="ident">U</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">U</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt;</div><div class="normal"><span >Mapped items in a new map</span></div></div></div><div style="display:none" id="code-Select_U_Func_K_V_U_mapper_"><div class="section_title">SOURCE</div><div class="code">
            new Map&lt;K, U&gt;(MapModule.Map(Value.Root, mapper), Value.Rev)</div></div></div><div class="member-title"><a name="SetItem"></a>SetItem(K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SetItem__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically updates an existing item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">SetItem</span>(<span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-SetItem__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.SetItem(key, value))</div></div></div><div class="member-title"><a name="SetItem"></a>SetItem(K, Func&lt;V, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SetItem__K__key__Func_V_V_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key, map it to a new value, put it back. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">SetItem</span>(<span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the mapped value</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if the item isn&#39;t found</span></div></div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div></div><div style="display:none" id="code-SetItem__K__key__Func_V_V_Some_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.SetItem(key, Some))</div></div></div><div class="member-title"><a name="SetItems"></a>SetItems(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SetItems__IEnumerable_KeyValuePair&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the KeyValuePairs provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">SetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys aren&#39;t in the map</span></div></div></div><div style="display:none" id="code-SetItems__IEnumerable_KeyValuePair&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.SetItems(items))</div></div></div><div class="member-title"><a name="SetItems"></a>SetItems(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SetItems__IEnumerable_Tuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the Tuples provided. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">SetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys aren&#39;t in the map</span></div></div></div><div style="display:none" id="code-SetItems__IEnumerable_Tuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.SetItems(items))</div></div></div><div class="member-title"><a name="SetItems"></a>SetItems(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SetItems__IEnumerable_ValueTuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the Tuples provided. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">SetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys aren&#39;t in the map</span></div></div></div><div style="display:none" id="code-SetItems__IEnumerable_ValueTuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.SetItems(items))</div></div></div><div class="member-title"><a name="Skip"></a>Skip(int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Skip__int__amount_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Skips &#39;amount&#39; values and returns a new tree without the  skipped values. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">amount</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc"><span >Amount to skip</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">Skip</span>(<span class="keyword">int</span> amount)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"><span >New tree</span></div></div></div><div style="display:none" id="code-Skip__int__amount_"><div class="section_title">SOURCE</div><div class="code"> Value.Skip(amount)</div></div></div><div class="member-title"><a name="SymmetricExcept"></a>SymmetricExcept(Map&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SymmetricExcept__Map_K_V_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Keys that are in both maps are dropped and the remaining items are merged and returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">SymmetricExcept</span>(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SymmetricExcept__Map_K_V_other_"><div class="section_title">SOURCE</div><div class="code">
            // TODO: Look into more optimal solution

            var map = Map&lt;K, V&gt;.Empty;
            foreach (var left in this)
            {
                if (!other.ContainsKey(left.Key))
                {
                    map = map.Add(left.Key, left.Value);
                }
            }
            foreach (var right in other)
            {
                if (!ContainsKey(right.Key))
                {
                    map = map.Add(right.Key, right.Value);
                }
            }
            return map;
        </div></div></div><div class="member-title"><a name="ToDictionary"></a>ToDictionary()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToDictionary__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the map to an <span class='code-inline'>IReadOnlyDictionary&lt;K, V&gt;</span> </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IReadOnlyDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">ToDictionary</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IReadOnlyDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span ></span></div></div></div><div style="display:none" id="code-ToDictionary__"><div class="section_title">SOURCE</div><div class="code"> Value.ToDictionary()</div></div></div><div class="member-title"><a name="ToDictionary&lt;KR, VR>"></a>ToDictionary&lt;KR, VR&gt;(Func&lt;ValueTuple&lt;K, V&gt;, KR&gt;, Func&lt;ValueTuple&lt;K, V&gt;, VR&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToDictionary_KR_VR_Func_ValueTuple&lt;K, V>_KR_keySelector__Func_ValueTuple&lt;K, V>_VR_valueSelector_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map the map the a dictionary </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keySelector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">KR</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">valueSelector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">VR</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IDictionary</span>&lt;<span class="ident">KR</span>, <span class="ident">VR</span>&gt; <span class="ident">ToDictionary</span>&lt;<span class="ident">KR</span>, <span class="ident">VR</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">KR</span>&gt; keySelector, <span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">VR</span>&gt; valueSelector)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IDictionary</span>&lt;<span class="ident">KR</span>, <span class="ident">VR</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToDictionary_KR_VR_Func_ValueTuple&lt;K, V>_KR_keySelector__Func_ValueTuple&lt;K, V>_VR_valueSelector_"><div class="section_title">SOURCE</div><div class="code"> Value.ToDictionary(keySelector, valueSelector)</div></div></div><div class="member-title"><a name="ToReadOnlyDictionary"></a>ToReadOnlyDictionary()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToReadOnlyDictionary__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get a IReadOnlyDictionary for this map.  No mapping is required, so this is very fast. </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IReadOnlyDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">ToReadOnlyDictionary</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IReadOnlyDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToReadOnlyDictionary__"><div class="section_title">SOURCE</div><div class="code">
            value</div></div></div><div class="member-title"><a name="ToSeq"></a>ToSeq()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToSeq__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Seq</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">ToSeq</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToSeq__"><div class="section_title">SOURCE</div><div class="code">
            Seq(this)</div></div></div><div class="member-title"><a name="TryAdd"></a>TryAdd(K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryAdd__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map. If the key already exists, then the new item is ignored </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TryAdd</span>(<span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-TryAdd__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.TryAdd(key, value))</div></div></div><div class="member-title"><a name="TryAdd"></a>TryAdd(K, V, Func&lt;Map&lt;K, V&gt;, V, Map&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryAdd__K__key__V__value__Func_Map&lt;K, V>_V_Map&lt;K, V>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map. If the key already exists then the Fail handler is called with the unaltered map  and the value already set for the key, it expects a new map returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">V</span>, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to handle failure, you&#39;re given the unaltered map  and the value already set for the key</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TryAdd</span>(<span class="ident">K</span> key, <span class="ident">V</span> value, <span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">V</span>, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-TryAdd__K__key__V__value__Func_Map&lt;K, V>_V_Map&lt;K, V>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.TryAdd(key, value, (m, v) =&gt; Fail(Wrap(m), v).Value))</div></div></div><div class="member-title"><a name="TryAddRange"></a>TryAddRange(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryAddRange__IEnumerable_Tuple&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Range of tuples to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TryAddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-TryAddRange__IEnumerable_Tuple&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.TryAddRange(range))</div></div></div><div class="member-title"><a name="TryAddRange"></a>TryAddRange(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryAddRange__IEnumerable_ValueTuple&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Range of tuples to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TryAddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-TryAddRange__IEnumerable_ValueTuple&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.TryAddRange(range))</div></div></div><div class="member-title"><a name="TryAddRange"></a>TryAddRange(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryAddRange__IEnumerable_KeyValuePair&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Range of KeyValuePairs to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TryAddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-TryAddRange__IEnumerable_KeyValuePair&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.TryAddRange(range))</div></div></div><div class="member-title"><a name="TrySetItem"></a>TrySetItem(K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TrySetItem__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically updates an existing item, unless it doesn&#39;t exist, in which case  it is ignored </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItem</span>(<span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the value is null</span></div></div></div><div style="display:none" id="code-TrySetItem__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.TrySetItem(key, value))</div></div></div><div class="member-title"><a name="TrySetItem"></a>TrySetItem(K, Func&lt;V, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TrySetItem__K__key__Func_V_V_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets an item by first retrieving it, applying a map, and then putting it back. Silently fails if the value doesn&#39;t exist </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >delegate to map the existing value to a new one before setting</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItem</span>(<span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the item set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-TrySetItem__K__key__Func_V_V_Some_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.TrySetItem(key, Some))</div></div></div><div class="member-title"><a name="TrySetItem"></a>TrySetItem(K, Func&lt;V, V&gt;, Func&lt;Map&lt;K, V&gt;, Map&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TrySetItem__K__key__Func_V_V_Some__Func_Map&lt;K, V>_Map&lt;K, V>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets an item by first retrieving it, applying a map, and then putting it back. Calls the None delegate to return a new map if the item can&#39;t be found </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >delegate to map the existing value to a new one before setting</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >delegate to return a new map if the item can&#39;t be found</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItem</span>(<span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the item set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if None returns null</span></div></div></div><div style="display:none" id="code-TrySetItem__K__key__Func_V_V_Some__Func_Map&lt;K, V>_Map&lt;K, V>_None_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.TrySetItem(key, Some, None))</div></div></div><div class="member-title"><a name="TrySetItems"></a>TrySetItems(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TrySetItems__IEnumerable_KeyValuePair&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the KeyValuePairs provided.  If any of the  items don&#39;t exist then they&#39;re silently ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div></div><div style="display:none" id="code-TrySetItems__IEnumerable_KeyValuePair&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.TrySetItems(items))</div></div></div><div class="member-title"><a name="TrySetItems"></a>TrySetItems(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TrySetItems__IEnumerable_Tuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the Tuples provided  If any of the  items don&#39;t exist then they&#39;re silently ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div></div><div style="display:none" id="code-TrySetItems__IEnumerable_Tuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.TrySetItems(items))</div></div></div><div class="member-title"><a name="TrySetItems"></a>TrySetItems(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TrySetItems__IEnumerable_ValueTuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the Tuples provided  If any of the  items don&#39;t exist then they&#39;re silently ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div></div><div style="display:none" id="code-TrySetItems__IEnumerable_ValueTuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.TrySetItems(items))</div></div></div><div class="member-title"><a name="TrySetItems"></a>TrySetItems(IEnumerable&lt;K&gt;, Func&lt;V, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TrySetItems__IEnumerable_K_keys__Func_V_V_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the keys provided to find the items and the Some delegate maps to a new value.  If the items don&#39;t exist then they&#39;re silently ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keys</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt;</div></div><div class="arg-desc"><span >Keys of items to set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >Function map the existing item to a new one</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">TrySetItems</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt; keys, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div></div><div style="display:none" id="code-TrySetItems__IEnumerable_K_keys__Func_V_V_Some_"><div class="section_title">SOURCE</div><div class="code"> Wrap(Value.TrySetItems(keys, Some))</div></div></div><div class="member-title"><a name="Union"></a>Union(Map&lt;K, V&gt;, WhenMatched&lt;K, V, V, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Union__Map_K_V_other__WhenMatched_K_V_V_V_Merge_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Union two maps.  The merge function is called keys are present in both map. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Merge</div><div class="arg-type"><span class="ident">WhenMatched</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Union</span>(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; other, <span class="ident">WhenMatched</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">V</span>, <span class="ident">V</span>&gt; Merge)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Union__Map_K_V_other__WhenMatched_K_V_V_V_Merge_"><div class="section_title">SOURCE</div><div class="code">
            Union(other, (k, v) =&gt; v, (k, v) =&gt; v, Merge)</div></div></div><div class="member-title"><a name="Union&lt;V2, R>"></a>Union&lt;V2, R&gt;(Map&lt;K, V2&gt;, WhenMissing&lt;K, V, R&gt;, WhenMissing&lt;K, V2, R&gt;, WhenMatched&lt;K, V, V2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Union_V2_R_Map_K_V2_other__WhenMissing_K_V_R_MapLeft__WhenMissing_K_V2_R_MapRight__WhenMatched_K_V_V2_R_Merge_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Union two maps.  The merge function is called keys are present in both map. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapLeft</div><div class="arg-type"><span class="ident">WhenMissing</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapRight</div><div class="arg-type"><span class="ident">WhenMissing</span>&lt;<span class="ident">K</span>, <span class="ident">V2</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Merge</div><div class="arg-type"><span class="ident">WhenMatched</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">V2</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">R</span>&gt; <span class="ident">Union</span>&lt;<span class="ident">V2</span>, <span class="ident">R</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V2</span>&gt; other, <span class="ident">WhenMissing</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">R</span>&gt; MapLeft, <span class="ident">WhenMissing</span>&lt;<span class="ident">K</span>, <span class="ident">V2</span>, <span class="ident">R</span>&gt; MapRight, <span class="ident">WhenMatched</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">V2</span>, <span class="ident">R</span>&gt; Merge)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Union_V2_R_Map_K_V2_other__WhenMissing_K_V_R_MapLeft__WhenMissing_K_V2_R_MapRight__WhenMatched_K_V_V2_R_Merge_"><div class="section_title">SOURCE</div><div class="code">
            // TODO: Look into more optimal solution

            if (MapLeft == null) throw new ArgumentNullException(nameof(MapLeft));
            if (MapRight == null) throw new ArgumentNullException(nameof(MapRight));
            if (Merge == null) throw new ArgumentNullException(nameof(Merge));

            var result = Map&lt;K, R&gt;.Empty;
            foreach (var right in other)
            {
                var key = right.Key;
                var left = Find(key);
                if(left.IsSome)
                {
                    result = result.Add(key, Merge(key, left.Value, right.Value));
                }
                else
                {
                    result = result.Add(key, MapRight(key, right.Value));
                }
            }
            foreach (var left in this)
            {
                var key = left.Key;
                var right = other.Find(key);
                if (right.IsNone)
                {
                    result = result.Add(key, MapLeft(key, left.Value));
                }
            }
            return result;
        </div></div></div><div class="member-title"><a name="Union&lt;V2>"></a>Union&lt;V2&gt;(Map&lt;K, V2&gt;, WhenMissing&lt;K, V2, V&gt;, WhenMatched&lt;K, V, V2, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Union_V2_Map_K_V2_other__WhenMissing_K_V2_V_MapRight__WhenMatched_K_V_V2_V_Merge_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Union two maps.  The merge function is called keys are present in both map. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapRight</div><div class="arg-type"><span class="ident">WhenMissing</span>&lt;<span class="ident">K</span>, <span class="ident">V2</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Merge</div><div class="arg-type"><span class="ident">WhenMatched</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">V2</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Union</span>&lt;<span class="ident">V2</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V2</span>&gt; other, <span class="ident">WhenMissing</span>&lt;<span class="ident">K</span>, <span class="ident">V2</span>, <span class="ident">V</span>&gt; MapRight, <span class="ident">WhenMatched</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">V2</span>, <span class="ident">V</span>&gt; Merge)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Union_V2_Map_K_V2_other__WhenMissing_K_V2_V_MapRight__WhenMatched_K_V_V2_V_Merge_"><div class="section_title">SOURCE</div><div class="code">
            Union(other, (k, v) =&gt; v, MapRight, Merge)</div></div></div><div class="member-title"><a name="Union&lt;V2>"></a>Union&lt;V2&gt;(Map&lt;K, V2&gt;, WhenMissing&lt;K, V, V2&gt;, WhenMatched&lt;K, V, V2, V2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Union_V2_Map_K_V2_other__WhenMissing_K_V_V2_MapLeft__WhenMatched_K_V_V2_V2_Merge_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Union two maps.  The merge function is called keys are present in both map. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">MapLeft</div><div class="arg-type"><span class="ident">WhenMissing</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">V2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Merge</div><div class="arg-type"><span class="ident">WhenMatched</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">V2</span>, <span class="ident">V2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V2</span>&gt; <span class="ident">Union</span>&lt;<span class="ident">V2</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V2</span>&gt; other, <span class="ident">WhenMissing</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">V2</span>&gt; MapLeft, <span class="ident">WhenMatched</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">V2</span>, <span class="ident">V2</span>&gt; Merge)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V2</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Union_V2_Map_K_V2_other__WhenMissing_K_V_V2_MapLeft__WhenMatched_K_V_V2_V2_Merge_"><div class="section_title">SOURCE</div><div class="code">
            Union(other, MapLeft, (k, v) =&gt; v, Merge)</div></div></div><div class="member-title"><a name="Where"></a>Where(Func&lt;V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where__Func_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically filter out items that return false when a predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Where</span>(<span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with items filtered</span></div></div></div><div style="display:none" id="code-Where__Func_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            new Map&lt;K, V&gt;(MapModule.Filter(Value.Root, pred), Value.Rev)</div></div></div><div class="member-title"><a name="Where"></a>Where(Func&lt;K, V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where__Func_K_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically filter out items that return false when a predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Where</span>(<span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with items filtered</span></div></div></div><div style="display:none" id="code-Where__Func_K_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            SetRoot(MapModule.Filter(Value.Root, pred))</div></div></div></div></body></html>