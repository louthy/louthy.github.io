<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Prelude_.htm">Prelude</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#centimeter">centimeter</a><a class="nav-link" href="#centimeter2">centimeter2</a><a class="nav-link" href="#centimeters">centimeters</a><a class="nav-link" href="#centimetre">centimetre</a><a class="nav-link" href="#centimetre2">centimetre2</a><a class="nav-link" href="#centimetres">centimetres</a><a class="nav-link" href="#cm">cm</a><a class="nav-link" href="#cm2">cm2</a><a class="nav-link" href="#day">day</a><a class="nav-link" href="#days">days</a><a class="nav-link" href="#feet">feet</a><a class="nav-link" href="#foot">foot</a><a class="nav-link" href="#ft">ft</a><a class="nav-link" href="#hour">hour</a><a class="nav-link" href="#hours">hours</a><a class="nav-link" href="#hr">hr</a><a class="nav-link" href="#hrs">hrs</a><a class="nav-link" href="#inch">inch</a><a class="nav-link" href="#inches">inches</a><a class="nav-link" href="#kilometer">kilometer</a><a class="nav-link" href="#kilometer2">kilometer2</a><a class="nav-link" href="#kilometers">kilometers</a><a class="nav-link" href="#kilometre">kilometre</a><a class="nav-link" href="#kilometre2">kilometre2</a><a class="nav-link" href="#kilometres">kilometres</a><a class="nav-link" href="#km">km</a><a class="nav-link" href="#km2">km2</a><a class="nav-link" href="#kph">kph</a><a class="nav-link" href="#m">m</a><a class="nav-link" href="#m2">m2</a><a class="nav-link" href="#meter">meter</a><a class="nav-link" href="#meter2">meter2</a><a class="nav-link" href="#meters">meters</a><a class="nav-link" href="#metre">metre</a><a class="nav-link" href="#metre2">metre2</a><a class="nav-link" href="#metres">metres</a><a class="nav-link" href="#mile">mile</a><a class="nav-link" href="#miles">miles</a><a class="nav-link" href="#millimeter">millimeter</a><a class="nav-link" href="#millimeter2">millimeter2</a><a class="nav-link" href="#millimeters">millimeters</a><a class="nav-link" href="#millimetre">millimetre</a><a class="nav-link" href="#millimetre2">millimetre2</a><a class="nav-link" href="#millimetres">millimetres</a><a class="nav-link" href="#millisecond">millisecond</a><a class="nav-link" href="#milliseconds">milliseconds</a><a class="nav-link" href="#min">min</a><a class="nav-link" href="#mins">mins</a><a class="nav-link" href="#minute">minute</a><a class="nav-link" href="#minutes">minutes</a><a class="nav-link" href="#mm">mm</a><a class="nav-link" href="#mm2">mm2</a><a class="nav-link" href="#mph">mph</a><a class="nav-link" href="#ms">ms</a><a class="nav-link" href="#ms2">ms2</a><a class="nav-link" href="#s">s</a><a class="nav-link" href="#sec">sec</a><a class="nav-link" href="#second">second</a><a class="nav-link" href="#seconds">seconds</a><a class="nav-link" href="#yard">yard</a><a class="nav-link" href="#yards">yards</a><a class="nav-link" href="#yd">yd</a><h3 >PROPERTIES</h3><a class="nav-link" href="#None">None</a><a class="nav-link" href="#unit">unit</a><h3 >METHODS</h3><a class="nav-link" href="#act">act(Action)</a><a class="nav-link" href="#act&lt;R>">act&lt;R&gt;(Func&lt;R&gt;)</a><a class="nav-link" href="#act&lt;T1, R>">act&lt;T1, R&gt;(Func&lt;T1, R&gt;)</a><a class="nav-link" href="#act&lt;T1, T2, R>">act&lt;T1, T2, R&gt;(Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#act&lt;T1, T2, T3, R>">act&lt;T1, T2, T3, R&gt;(Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#act&lt;T1, T2, T3, T4, R>">act&lt;T1, T2, T3, T4, R&gt;(Func&lt;T1, T2, T3, T4, R&gt;)</a><a class="nav-link" href="#act&lt;T1, T2, T3, T4, T5, R>">act&lt;T1, T2, T3, T4, T5, R&gt;(Func&lt;T1, T2, T3, T4, T5, R&gt;)</a><a class="nav-link" href="#act&lt;T1, T2, T3, T4, T5, T6, R>">act&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;)</a><a class="nav-link" href="#act&lt;T1, T2, T3, T4, T5, T6, T7, R>">act&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;)</a><a class="nav-link" href="#act&lt;T1, T2, T3, T4, T5, T6, T7>">act&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;)</a><a class="nav-link" href="#act&lt;T1, T2, T3, T4, T5, T6>">act&lt;T1, T2, T3, T4, T5, T6&gt;(Action&lt;T1, T2, T3, T4, T5, T6&gt;)</a><a class="nav-link" href="#act&lt;T1, T2, T3, T4, T5>">act&lt;T1, T2, T3, T4, T5&gt;(Action&lt;T1, T2, T3, T4, T5&gt;)</a><a class="nav-link" href="#act&lt;T1, T2, T3, T4>">act&lt;T1, T2, T3, T4&gt;(Action&lt;T1, T2, T3, T4&gt;)</a><a class="nav-link" href="#act&lt;T1, T2, T3>">act&lt;T1, T2, T3&gt;(Action&lt;T1, T2, T3&gt;)</a><a class="nav-link" href="#act&lt;T1, T2>">act&lt;T1, T2&gt;(Action&lt;T1, T2&gt;)</a><a class="nav-link" href="#act&lt;T1>">act&lt;T1&gt;(Action&lt;T1&gt;)</a><a class="nav-link" href="#action&lt;A, B>">action&lt;A, B&gt;(Option&lt;A&gt;, Option&lt;B&gt;)</a><a class="nav-link" href="#action&lt;A, B>">action&lt;A, B&gt;(OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;B&gt;)</a><a class="nav-link" href="#action&lt;A, B>">action&lt;A, B&gt;(Try&lt;A&gt;, Try&lt;B&gt;)</a><a class="nav-link" href="#action&lt;A, B>">action&lt;A, B&gt;(TryAsync&lt;A&gt;, TryAsync&lt;B&gt;)</a><a class="nav-link" href="#action&lt;A, B>">action&lt;A, B&gt;(TryOption&lt;A&gt;, TryOption&lt;B&gt;)</a><a class="nav-link" href="#action&lt;A, B>">action&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;B&gt;)</a><a class="nav-link" href="#action&lt;L, A, B>">action&lt;L, A, B&gt;(Either&lt;L, A&gt;, Either&lt;L, B&gt;)</a><a class="nav-link" href="#action&lt;L, A, B>">action&lt;L, A, B&gt;(EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;)</a><a class="nav-link" href="#ad&lt;T1, T2, T3>">ad&lt;T1, T2, T3&gt;(ValueTuple&lt;T1, T2&gt;, T3)</a><a class="nav-link" href="#add&lt;A, B, C, D, E, F, G, H>">add&lt;A, B, C, D, E, F, G, H&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, H)</a><a class="nav-link" href="#add&lt;A, B, C, D, E, F, G>">add&lt;A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F&gt;, G)</a><a class="nav-link" href="#add&lt;A, B, C, D, E, F, G>">add&lt;A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, G)</a><a class="nav-link" href="#add&lt;A, B, C, D, E, F>">add&lt;A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E&gt;, F)</a><a class="nav-link" href="#add&lt;A, B, C, D, E, F>">add&lt;A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E&gt;, F)</a><a class="nav-link" href="#add&lt;A, B, C, D, E>">add&lt;A, B, C, D, E&gt;(Tuple&lt;A, B, C, D&gt;, E)</a><a class="nav-link" href="#add&lt;A, B, C, D, E>">add&lt;A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D&gt;, E)</a><a class="nav-link" href="#add&lt;A, B>">add&lt;A, B&gt;(Tuple&lt;A&gt;, B)</a><a class="nav-link" href="#add&lt;A, B>">add&lt;A, B&gt;(ValueTuple&lt;A&gt;, B)</a><a class="nav-link" href="#add&lt;NUM, A>">add&lt;NUM, A&gt;(Try&lt;A&gt;, Try&lt;A&gt;)</a><a class="nav-link" href="#add&lt;NUM, A>">add&lt;NUM, A&gt;(TryAsync&lt;A&gt;, TryAsync&lt;A&gt;)</a><a class="nav-link" href="#add&lt;NUM, A>">add&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#add&lt;NUM, A>">add&lt;NUM, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#add&lt;NUM, T>">add&lt;NUM, T&gt;(Option&lt;T&gt;, Option&lt;T&gt;)</a><a class="nav-link" href="#add&lt;NUM, T>">add&lt;NUM, T&gt;(OptionUnsafe&lt;T&gt;, OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#add&lt;NUMTYPE, NUM, A, PRED>">add&lt;NUMTYPE, NUM, A, PRED&gt;(NumType&lt;NUMTYPE, NUM, A, PRED&gt;, NUMTYPE)</a><a class="nav-link" href="#add&lt;NUMTYPE, NUM, A>">add&lt;NUMTYPE, NUM, A&gt;(NumType&lt;NUMTYPE, NUM, A&gt;, NUMTYPE)</a><a class="nav-link" href="#add&lt;SELF, FLOAT, A, PRED>">add&lt;SELF, FLOAT, A, PRED&gt;(FloatType&lt;SELF, FLOAT, A, PRED&gt;, SELF)</a><a class="nav-link" href="#add&lt;SELF, FLOAT, A>">add&lt;SELF, FLOAT, A&gt;(FloatType&lt;SELF, FLOAT, A&gt;, SELF)</a><a class="nav-link" href="#add&lt;T1, T2, T3, T4>">add&lt;T1, T2, T3, T4&gt;(ValueTuple&lt;T1, T2, T3&gt;, T4)</a><a class="nav-link" href="#add&lt;T1, T2, T3>">add&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2&gt;, T3)</a><a class="nav-link" href="#append&lt;SEMI, A>">append&lt;SEMI, A&gt;(Try&lt;A&gt;, Try&lt;A&gt;)</a><a class="nav-link" href="#Append&lt;SEMI, A>">Append&lt;SEMI, A&gt;(TryAsync&lt;A&gt;, TryAsync&lt;A&gt;)</a><a class="nav-link" href="#Append&lt;SEMI, A>">Append&lt;SEMI, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#append&lt;SEMI, T>">append&lt;SEMI, T&gt;(T?, T?)</a><a class="nav-link" href="#append&lt;SemiA, A>">append&lt;SemiA, A&gt;(Tuple&lt;A, A&gt;)</a><a class="nav-link" href="#append&lt;SemiA, A>">append&lt;SemiA, A&gt;(Tuple&lt;A, A, A&gt;)</a><a class="nav-link" href="#append&lt;SemiA, A>">append&lt;SemiA, A&gt;(Tuple&lt;A, A, A, A&gt;)</a><a class="nav-link" href="#append&lt;SemiA, A>">append&lt;SemiA, A&gt;(Tuple&lt;A, A, A, A, A&gt;)</a><a class="nav-link" href="#append&lt;SemiA, A>">append&lt;SemiA, A&gt;(Tuple&lt;A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#append&lt;SemiA, A>">append&lt;SemiA, A&gt;(Tuple&lt;A, A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#append&lt;SemiA, A>">append&lt;SemiA, A&gt;(ValueTuple&lt;A, A&gt;)</a><a class="nav-link" href="#append&lt;SemiA, A>">append&lt;SemiA, A&gt;(ValueTuple&lt;A, A, A&gt;)</a><a class="nav-link" href="#append&lt;SemiA, A>">append&lt;SemiA, A&gt;(ValueTuple&lt;A, A, A, A&gt;)</a><a class="nav-link" href="#append&lt;SemiA, A>">append&lt;SemiA, A&gt;(ValueTuple&lt;A, A, A, A, A&gt;)</a><a class="nav-link" href="#append&lt;SemiA, A>">append&lt;SemiA, A&gt;(ValueTuple&lt;A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#append&lt;SemiA, A>">append&lt;SemiA, A&gt;(ValueTuple&lt;A, A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#append&lt;SemiA, SemiB, A, B>">append&lt;SemiA, SemiB, A, B&gt;(Tuple&lt;A&gt;, Tuple&lt;A&gt;)</a><a class="nav-link" href="#append&lt;SemiA, SemiB, A, B>">append&lt;SemiA, SemiB, A, B&gt;(Tuple&lt;A, B&gt;, Tuple&lt;A, B&gt;)</a><a class="nav-link" href="#append&lt;SemiA, SemiB, A, B>">append&lt;SemiA, SemiB, A, B&gt;(ValueTuple&lt;A&gt;, ValueTuple&lt;A&gt;)</a><a class="nav-link" href="#append&lt;SemiA, SemiB, A, B>">append&lt;SemiA, SemiB, A, B&gt;(ValueTuple&lt;A, B&gt;, ValueTuple&lt;A, B&gt;)</a><a class="nav-link" href="#append&lt;SemiA, SemiB, SemiC, A, B, C>">append&lt;SemiA, SemiB, SemiC, A, B, C&gt;(Tuple&lt;A, B, C&gt;, Tuple&lt;A, B, C&gt;)</a><a class="nav-link" href="#append&lt;SemiA, SemiB, SemiC, A, B, C>">append&lt;SemiA, SemiB, SemiC, A, B, C&gt;(ValueTuple&lt;A, B, C&gt;, ValueTuple&lt;A, B, C&gt;)</a><a class="nav-link" href="#append&lt;SemiA, SemiB, SemiC, SemiD, A, B, C, D>">append&lt;SemiA, SemiB, SemiC, SemiD, A, B, C, D&gt;(Tuple&lt;A, B, C, D&gt;, Tuple&lt;A, B, C, D&gt;)</a><a class="nav-link" href="#append&lt;SemiA, SemiB, SemiC, SemiD, A, B, C, D>">append&lt;SemiA, SemiB, SemiC, SemiD, A, B, C, D&gt;(ValueTuple&lt;A, B, C, D&gt;, ValueTuple&lt;A, B, C, D&gt;)</a><a class="nav-link" href="#append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, A, B, C, D, E>">append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, A, B, C, D, E&gt;(Tuple&lt;A, B, C, D, E&gt;, Tuple&lt;A, B, C, D, E&gt;)</a><a class="nav-link" href="#append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, A, B, C, D, E>">append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D, E&gt;, ValueTuple&lt;A, B, C, D, E&gt;)</a><a class="nav-link" href="#append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, A, B, C, D, E, F>">append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Tuple&lt;A, B, C, D, E, F&gt;)</a><a class="nav-link" href="#append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, A, B, C, D, E, F>">append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, ValueTuple&lt;A, B, C, D, E, F&gt;)</a><a class="nav-link" href="#append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, SemiG, A, B, C, D, E, F, G>">append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, SemiG, A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Tuple&lt;A, B, C, D, E, F, G&gt;)</a><a class="nav-link" href="#append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, SemiG, A, B, C, D, E, F, G>">append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, SemiG, A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, ValueTuple&lt;A, B, C, D, E, F, G&gt;)</a><a class="nav-link" href="#append&lt;T1, T2, T3, T4>">append&lt;T1, T2, T3, T4&gt;(Tuple&lt;T1, T2, T3&gt;, T4)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Option&lt;Func&lt;A, B, C&gt;&gt;, Option&lt;A&gt;, Option&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Option&lt;A&gt;, Option&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Option&lt;Func&lt;A, B, C&gt;&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Option&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(OptionUnsafe&lt;Func&lt;A, B, C&gt;&gt;, OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(OptionUnsafe&lt;Func&lt;A, B, C&gt;&gt;, OptionUnsafe&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, OptionUnsafe&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(OptionUnsafe&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, OptionUnsafe&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, OptionUnsafe&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Try&lt;Func&lt;A, B, C&gt;&gt;, Try&lt;A&gt;, Try&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Try&lt;A&gt;, Try&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Try&lt;Func&lt;A, B, C&gt;&gt;, Try&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Try&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Try&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Try&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Try&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(TryAsync&lt;Func&lt;A, B, C&gt;&gt;, TryAsync&lt;A&gt;, TryAsync&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryAsync&lt;A&gt;, TryAsync&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(TryAsync&lt;Func&lt;A, B, C&gt;&gt;, TryAsync&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryAsync&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(TryAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, TryAsync&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, TryAsync&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(TryOption&lt;Func&lt;A, B, C&gt;&gt;, TryOption&lt;A&gt;, TryOption&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOption&lt;A&gt;, TryOption&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(TryOption&lt;Func&lt;A, B, C&gt;&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(TryOption&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(TryOptionAsync&lt;Func&lt;A, B, C&gt;&gt;, TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(TryOptionAsync&lt;Func&lt;A, B, C&gt;&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(TryOptionAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B>">apply&lt;A, B&gt;(Option&lt;Func&lt;A, B&gt;&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B>">apply&lt;A, B&gt;(Func&lt;A, B&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B>">apply&lt;A, B&gt;(OptionUnsafe&lt;Func&lt;A, B&gt;&gt;, OptionUnsafe&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B>">apply&lt;A, B&gt;(Func&lt;A, B&gt;, OptionUnsafe&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B>">apply&lt;A, B&gt;(Try&lt;Func&lt;A, B&gt;&gt;, Try&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B>">apply&lt;A, B&gt;(Func&lt;A, B&gt;, Try&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B>">apply&lt;A, B&gt;(TryAsync&lt;Func&lt;A, B&gt;&gt;, TryAsync&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B>">apply&lt;A, B&gt;(Func&lt;A, B&gt;, TryAsync&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B>">apply&lt;A, B&gt;(TryOption&lt;Func&lt;A, B&gt;&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B>">apply&lt;A, B&gt;(Func&lt;A, B&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B>">apply&lt;A, B&gt;(TryOptionAsync&lt;Func&lt;A, B&gt;&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B>">apply&lt;A, B&gt;(Func&lt;A, B&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B, C>">apply&lt;L, A, B, C&gt;(Either&lt;L, Func&lt;A, B, C&gt;&gt;, Either&lt;L, A&gt;, Either&lt;L, B&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B, C>">apply&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Either&lt;L, A&gt;, Either&lt;L, B&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B, C>">apply&lt;L, A, B, C&gt;(Either&lt;L, Func&lt;A, B, C&gt;&gt;, Either&lt;L, A&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B, C>">apply&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Either&lt;L, A&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B, C>">apply&lt;L, A, B, C&gt;(Either&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Either&lt;L, A&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B, C>">apply&lt;L, A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Either&lt;L, A&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B, C>">apply&lt;L, A, B, C&gt;(EitherUnsafe&lt;L, Func&lt;A, B, C&gt;&gt;, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B, C>">apply&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B, C>">apply&lt;L, A, B, C&gt;(EitherUnsafe&lt;L, Func&lt;A, B, C&gt;&gt;, EitherUnsafe&lt;L, A&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B, C>">apply&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, EitherUnsafe&lt;L, A&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B, C>">apply&lt;L, A, B, C&gt;(EitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, EitherUnsafe&lt;L, A&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B, C>">apply&lt;L, A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, EitherUnsafe&lt;L, A&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B>">apply&lt;L, A, B&gt;(Either&lt;L, Func&lt;A, B&gt;&gt;, Either&lt;L, A&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B>">apply&lt;L, A, B&gt;(Func&lt;A, B&gt;, Either&lt;L, A&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B>">apply&lt;L, A, B&gt;(EitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;, EitherUnsafe&lt;L, A&gt;)</a><a class="nav-link" href="#apply&lt;L, A, B>">apply&lt;L, A, B&gt;(Func&lt;A, B&gt;, EitherUnsafe&lt;L, A&gt;)</a><a class="nav-link" href="#array&lt;T>">array&lt;T&gt;()</a><a class="nav-link" href="#array&lt;T>">array&lt;T&gt;(T)</a><a class="nav-link" href="#array&lt;T>">array&lt;T&gt;(T)</a><a class="nav-link" href="#Array&lt;T>">Array&lt;T&gt;()</a><a class="nav-link" href="#Array&lt;T>">Array&lt;T&gt;(T, T)</a><a class="nav-link" href="#ask&lt;Env>">ask&lt;Env&gt;()</a><a class="nav-link" href="#asks&lt;Env, R>">asks&lt;Env, R&gt;(Func&lt;Env, R&gt;)</a><a class="nav-link" href="#bibind&lt;T, R>">bibind&lt;T, R&gt;(Try&lt;T&gt;, Func&lt;T, Try&lt;R&gt;&gt;, Func&lt;Exception, Try&lt;R&gt;&gt;)</a><a class="nav-link" href="#bibind&lt;T, R>">bibind&lt;T, R&gt;(TryAsync&lt;T&gt;, Func&lt;T, TryAsync&lt;R&gt;&gt;, Func&lt;Exception, TryAsync&lt;R&gt;&gt;)</a><a class="nav-link" href="#bibind&lt;T, R>">bibind&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, TryOption&lt;R&gt;&gt;, Func&lt;TryOption&lt;R&gt;&gt;)</a><a class="nav-link" href="#bibind&lt;T, R>">bibind&lt;T, R&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, TryOptionAsync&lt;R&gt;&gt;, Func&lt;TryOptionAsync&lt;R&gt;&gt;)</a><a class="nav-link" href="#biexists&lt;A>">biexists&lt;A&gt;(Option&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)</a><a class="nav-link" href="#biexists&lt;A>">biexists&lt;A&gt;(Option&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#biexists&lt;A>">biexists&lt;A&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)</a><a class="nav-link" href="#biexists&lt;A>">biexists&lt;A&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#biexists&lt;L, R>">biexists&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)</a><a class="nav-link" href="#biexists&lt;L, R>">biexists&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)</a><a class="nav-link" href="#biexistsT&lt;L, R>">biexistsT&lt;L, R&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)</a><a class="nav-link" href="#biexistsT&lt;L, R>">biexistsT&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)</a><a class="nav-link" href="#bifilter&lt;T>">bifilter&lt;T&gt;(Try&lt;T&gt;, Func&lt;T, bool&gt;, Func&lt;Exception, bool&gt;)</a><a class="nav-link" href="#bifilter&lt;T>">bifilter&lt;T&gt;(TryAsync&lt;T&gt;, Func&lt;T, bool&gt;, Func&lt;Exception, bool&gt;)</a><a class="nav-link" href="#bifilter&lt;T>">bifilter&lt;T&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#bifold&lt;L, R, S>">bifold&lt;L, R, S&gt;(Either&lt;L, R&gt;, S, Func&lt;S, R, S&gt;, Func&lt;S, L, S&gt;)</a><a class="nav-link" href="#bifold&lt;L, R, S>">bifold&lt;L, R, S&gt;(EitherUnsafe&lt;L, R&gt;, S, Func&lt;S, R, S&gt;, Func&lt;S, L, S&gt;)</a><a class="nav-link" href="#bifold&lt;S, A>">bifold&lt;S, A&gt;(Option&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#bifold&lt;S, A>">bifold&lt;S, A&gt;(Option&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)</a><a class="nav-link" href="#bifold&lt;S, A>">bifold&lt;S, A&gt;(OptionUnsafe&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#bifold&lt;S, A>">bifold&lt;S, A&gt;(OptionUnsafe&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)</a><a class="nav-link" href="#bifold&lt;S, T>">bifold&lt;S, T&gt;(TryOption&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#bifold&lt;T1, T2, S>">bifold&lt;T1, T2, S&gt;(Tuple&lt;T1, T2&gt;, S, Func&lt;S, T1, S&gt;, Func&lt;S, T2, S&gt;)</a><a class="nav-link" href="#bifold&lt;T1, T2, S>">bifold&lt;T1, T2, S&gt;(ValueTuple&lt;T1, T2&gt;, S, Func&lt;S, T1, S&gt;, Func&lt;S, T2, S&gt;)</a><a class="nav-link" href="#bifoldBack&lt;T1, T2, S>">bifoldBack&lt;T1, T2, S&gt;(Tuple&lt;T1, T2&gt;, S, Func&lt;S, T2, S&gt;, Func&lt;S, T1, S&gt;)</a><a class="nav-link" href="#bifoldBack&lt;T1, T2, S>">bifoldBack&lt;T1, T2, S&gt;(ValueTuple&lt;T1, T2&gt;, S, Func&lt;S, T2, S&gt;, Func&lt;S, T1, S&gt;)</a><a class="nav-link" href="#bifoldT&lt;L, R, S>">bifoldT&lt;L, R, S&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;, S, Func&lt;S, R, S&gt;, Func&lt;S, L, S&gt;)</a><a class="nav-link" href="#bifoldT&lt;L, R, S>">bifoldT&lt;L, R, S&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;, S, Func&lt;S, R, S&gt;, Func&lt;S, L, S&gt;)</a><a class="nav-link" href="#biforall&lt;A>">biforall&lt;A&gt;(Option&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)</a><a class="nav-link" href="#biforall&lt;A>">biforall&lt;A&gt;(Option&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#biforall&lt;A>">biforall&lt;A&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)</a><a class="nav-link" href="#biforall&lt;A>">biforall&lt;A&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#biforall&lt;L, R>">biforall&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)</a><a class="nav-link" href="#biforall&lt;L, R>">biforall&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)</a><a class="nav-link" href="#biforallT&lt;L, R>">biforallT&lt;L, R&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)</a><a class="nav-link" href="#biforallT&lt;L, R>">biforallT&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)</a><a class="nav-link" href="#bimap&lt;A, B>">bimap&lt;A, B&gt;(Option&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#bimap&lt;A, B>">bimap&lt;A, B&gt;(Option&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Unit, B&gt;)</a><a class="nav-link" href="#bimap&lt;A, B>">bimap&lt;A, B&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#bimap&lt;A, B>">bimap&lt;A, B&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Unit, B&gt;)</a><a class="nav-link" href="#bimap&lt;L, R, LRet, RRet>">bimap&lt;L, R, LRet, RRet&gt;(Either&lt;L, R&gt;, Func&lt;R, RRet&gt;, Func&lt;L, LRet&gt;)</a><a class="nav-link" href="#bimap&lt;L, R, LRet, RRet>">bimap&lt;L, R, LRet, RRet&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, RRet&gt;, Func&lt;L, LRet&gt;)</a><a class="nav-link" href="#bimap&lt;T, R>">bimap&lt;T, R&gt;(Try&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#bimap&lt;T, R>">bimap&lt;T, R&gt;(TryAsync&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#bimap&lt;T, R>">bimap&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#bimap&lt;T, R>">bimap&lt;T, R&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#bimap&lt;T1, T2, R1, R2>">bimap&lt;T1, T2, R1, R2&gt;(Tuple&lt;T1, T2&gt;, Func&lt;T1, R1&gt;, Func&lt;T2, R2&gt;)</a><a class="nav-link" href="#bimap&lt;T1, T2, R1, R2>">bimap&lt;T1, T2, R1, R2&gt;(ValueTuple&lt;T1, T2&gt;, Func&lt;T1, R1&gt;, Func&lt;T2, R2&gt;)</a><a class="nav-link" href="#bimapT&lt;L, R, LRet, RRet>">bimapT&lt;L, R, LRet, RRet&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;, Func&lt;R, RRet&gt;, Func&lt;L, LRet&gt;)</a><a class="nav-link" href="#bimapT&lt;L, R, LRet, RRet>">bimapT&lt;L, R, LRet, RRet&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, RRet&gt;, Func&lt;L, LRet&gt;)</a><a class="nav-link" href="#bind&lt;L, R, Ret>">bind&lt;L, R, Ret&gt;(Either&lt;L, R&gt;, Func&lt;R, Either&lt;L, Ret&gt;&gt;)</a><a class="nav-link" href="#bind&lt;L, R, Ret>">bind&lt;L, R, Ret&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, EitherUnsafe&lt;L, Ret&gt;&gt;)</a><a class="nav-link" href="#bind&lt;MonoidW, W, A, B>">bind&lt;MonoidW, W, A, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, Writer&lt;MonoidW, W, B&gt;&gt;)</a><a class="nav-link" href="#bind&lt;NEWTYPE, T, PRED>">bind&lt;NEWTYPE, T, PRED&gt;(NewType&lt;NEWTYPE, T, PRED&gt;, Func&lt;T, NEWTYPE&gt;)</a><a class="nav-link" href="#bind&lt;NUMTYPE, NUM, T, PRED>">bind&lt;NUMTYPE, NUM, T, PRED&gt;(NumType&lt;NUMTYPE, NUM, T, PRED&gt;, Func&lt;T, NUMTYPE&gt;)</a><a class="nav-link" href="#bind&lt;NUMTYPE, NUM, T>">bind&lt;NUMTYPE, NUM, T&gt;(NumType&lt;NUMTYPE, NUM, T&gt;, Func&lt;T, NUMTYPE&gt;)</a><a class="nav-link" href="#bind&lt;SELF, FLOAT, T, PRED>">bind&lt;SELF, FLOAT, T, PRED&gt;(FloatType&lt;SELF, FLOAT, T, PRED&gt;, Func&lt;T, SELF&gt;)</a><a class="nav-link" href="#bind&lt;SELF, FLOAT, T>">bind&lt;SELF, FLOAT, T&gt;(FloatType&lt;SELF, FLOAT, T&gt;, Func&lt;T, SELF&gt;)</a><a class="nav-link" href="#bind&lt;T, R>">bind&lt;T, R&gt;(T?, Func&lt;T, R?&gt;)</a><a class="nav-link" href="#bind&lt;T, R>">bind&lt;T, R&gt;(T?, Func&lt;T, R?&gt;, Func&lt;R?&gt;)</a><a class="nav-link" href="#bind&lt;T, R>">bind&lt;T, R&gt;(Option&lt;T&gt;, Func&lt;T, Option&lt;R&gt;&gt;)</a><a class="nav-link" href="#bind&lt;T, R>">bind&lt;T, R&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, OptionUnsafe&lt;R&gt;&gt;)</a><a class="nav-link" href="#bind&lt;T, R>">bind&lt;T, R&gt;(Try&lt;T&gt;, Func&lt;T, Try&lt;R&gt;&gt;)</a><a class="nav-link" href="#bind&lt;T, R>">bind&lt;T, R&gt;(Try&lt;T&gt;, Func&lt;T, Try&lt;R&gt;&gt;, Func&lt;Exception, Try&lt;R&gt;&gt;)</a><a class="nav-link" href="#bind&lt;T, R>">bind&lt;T, R&gt;(TryAsync&lt;T&gt;, Func&lt;T, TryAsync&lt;R&gt;&gt;)</a><a class="nav-link" href="#bind&lt;T, R>">bind&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, TryOption&lt;R&gt;&gt;)</a><a class="nav-link" href="#bind&lt;T, R>">bind&lt;T, R&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, TryOptionAsync&lt;R&gt;&gt;)</a><a class="nav-link" href="#bind&lt;T, U>">bind&lt;T, U&gt;(Task&lt;T&gt;, Func&lt;T, Task&lt;U&gt;&gt;)</a><a class="nav-link" href="#censor&lt;MonoidW, W, A>">censor&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;W, W&gt;)</a><a class="nav-link" href="#choose&lt;Env, A>">choose&lt;Env, A&gt;(Reader&lt;Env, Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#choose&lt;S, A>">choose&lt;S, A&gt;(State&lt;S, Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#compose&lt;T1, T2, T3, T4, T5, T6, T7>">compose&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Func&lt;T1, T2&gt;, Func&lt;T2, T3&gt;, Func&lt;T3, T4&gt;, Func&lt;T4, T5&gt;, Func&lt;T5, T6&gt;, Func&lt;T6, T7&gt;)</a><a class="nav-link" href="#compose&lt;T1, T2, T3, T4, T5, T6>">compose&lt;T1, T2, T3, T4, T5, T6&gt;(Func&lt;T1, T2&gt;, Func&lt;T2, T3&gt;, Func&lt;T3, T4&gt;, Func&lt;T4, T5&gt;, Func&lt;T5, T6&gt;)</a><a class="nav-link" href="#compose&lt;T1, T2, T3, T4, T5>">compose&lt;T1, T2, T3, T4, T5&gt;(Func&lt;T1, T2&gt;, Func&lt;T2, T3&gt;, Func&lt;T3, T4&gt;, Func&lt;T4, T5&gt;)</a><a class="nav-link" href="#compose&lt;T1, T2, T3, T4>">compose&lt;T1, T2, T3, T4&gt;(Func&lt;T1, T2&gt;, Func&lt;T2, T3&gt;, Func&lt;T3, T4&gt;)</a><a class="nav-link" href="#compose&lt;T1, T2, T3>">compose&lt;T1, T2, T3&gt;(Func&lt;T1, T2&gt;, Func&lt;T2, T3&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, A, B>">concat&lt;MonoidA, A, B&gt;(Tuple&lt;A&gt;, Tuple&lt;A&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, A>">concat&lt;MonoidA, A&gt;(Tuple&lt;A, A&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, A>">concat&lt;MonoidA, A&gt;(Tuple&lt;A, A, A&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, A>">concat&lt;MonoidA, A&gt;(Tuple&lt;A, A, A, A&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, A>">concat&lt;MonoidA, A&gt;(Tuple&lt;A, A, A, A, A&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, A>">concat&lt;MonoidA, A&gt;(Tuple&lt;A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, A>">concat&lt;MonoidA, A&gt;(Tuple&lt;A, A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, A>">concat&lt;MonoidA, A&gt;(ValueTuple&lt;A, A&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, A>">concat&lt;MonoidA, A&gt;(ValueTuple&lt;A, A, A&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, A>">concat&lt;MonoidA, A&gt;(ValueTuple&lt;A, A, A, A&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, A>">concat&lt;MonoidA, A&gt;(ValueTuple&lt;A, A, A, A, A&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, A>">concat&lt;MonoidA, A&gt;(ValueTuple&lt;A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, A>">concat&lt;MonoidA, A&gt;(ValueTuple&lt;A, A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, MonoidB, A, B>">concat&lt;MonoidA, MonoidB, A, B&gt;(Tuple&lt;A, B&gt;, Tuple&lt;A, B&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, MonoidB, A, B>">concat&lt;MonoidA, MonoidB, A, B&gt;(ValueTuple&lt;A&gt;, ValueTuple&lt;A&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, MonoidB, A, B>">concat&lt;MonoidA, MonoidB, A, B&gt;(ValueTuple&lt;A, B&gt;, ValueTuple&lt;A, B&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, MonoidB, MonoidC, A, B, C>">concat&lt;MonoidA, MonoidB, MonoidC, A, B, C&gt;(Tuple&lt;A, B, C&gt;, Tuple&lt;A, B, C&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, MonoidB, MonoidC, A, B, C>">concat&lt;MonoidA, MonoidB, MonoidC, A, B, C&gt;(ValueTuple&lt;A, B, C&gt;, ValueTuple&lt;A, B, C&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, A, B, C, D>">concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, A, B, C, D&gt;(Tuple&lt;A, B, C, D&gt;, Tuple&lt;A, B, C, D&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, A, B, C, D>">concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, A, B, C, D&gt;(ValueTuple&lt;A, B, C, D&gt;, ValueTuple&lt;A, B, C, D&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, A, B, C, D, E>">concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, A, B, C, D, E&gt;(Tuple&lt;A, B, C, D, E&gt;, Tuple&lt;A, B, C, D, E&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, A, B, C, D, E>">concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D, E&gt;, ValueTuple&lt;A, B, C, D, E&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, A, B, C, D, E, F>">concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Tuple&lt;A, B, C, D, E, F&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, A, B, C, D, E, F>">concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, ValueTuple&lt;A, B, C, D, E, F&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, MonoidG, A, B, C, D, E, F, G>">concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, MonoidG, A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Tuple&lt;A, B, C, D, E, F, G&gt;)</a><a class="nav-link" href="#concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, MonoidG, A, B, C, D, E, F, G>">concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, MonoidG, A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, ValueTuple&lt;A, B, C, D, E, F, G&gt;)</a><a class="nav-link" href="#Cond&lt;A>">Cond&lt;A&gt;(Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Cond&lt;A>">Cond&lt;A&gt;(Func&lt;A, Task&lt;bool&gt;&gt;)</a><a class="nav-link" href="#cons&lt;T>">cons&lt;T&gt;(T, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#cons&lt;T>">cons&lt;T&gt;(T, Lst&lt;T&gt;)</a><a class="nav-link" href="#Cons&lt;T>">Cons&lt;T&gt;(T, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#Cons&lt;T>">Cons&lt;T&gt;(T, Lst&lt;T&gt;)</a><a class="nav-link" href="#contains&lt;EQ, A>">contains&lt;EQ, A&gt;(Tuple&lt;A&gt;, A)</a><a class="nav-link" href="#contains&lt;EQ, A>">contains&lt;EQ, A&gt;(Tuple&lt;A, A&gt;, A)</a><a class="nav-link" href="#contains&lt;EQ, A>">contains&lt;EQ, A&gt;(Tuple&lt;A, A, A&gt;, A)</a><a class="nav-link" href="#contains&lt;EQ, A>">contains&lt;EQ, A&gt;(Tuple&lt;A, A, A, A&gt;, A)</a><a class="nav-link" href="#contains&lt;EQ, A>">contains&lt;EQ, A&gt;(Tuple&lt;A, A, A, A, A&gt;, A)</a><a class="nav-link" href="#contains&lt;EQ, A>">contains&lt;EQ, A&gt;(Tuple&lt;A, A, A, A, A, A&gt;, A)</a><a class="nav-link" href="#contains&lt;EQ, A>">contains&lt;EQ, A&gt;(Tuple&lt;A, A, A, A, A, A, A&gt;, A)</a><a class="nav-link" href="#contains&lt;EQ, A>">contains&lt;EQ, A&gt;(ValueTuple&lt;A&gt;, A)</a><a class="nav-link" href="#contains&lt;EQ, A>">contains&lt;EQ, A&gt;(ValueTuple&lt;A, A&gt;, A)</a><a class="nav-link" href="#contains&lt;EQ, A>">contains&lt;EQ, A&gt;(ValueTuple&lt;A, A, A&gt;, A)</a><a class="nav-link" href="#contains&lt;EQ, A>">contains&lt;EQ, A&gt;(ValueTuple&lt;A, A, A, A&gt;, A)</a><a class="nav-link" href="#contains&lt;EQ, A>">contains&lt;EQ, A&gt;(ValueTuple&lt;A, A, A, A, A&gt;, A)</a><a class="nav-link" href="#contains&lt;EQ, A>">contains&lt;EQ, A&gt;(ValueTuple&lt;A, A, A, A, A, A&gt;, A)</a><a class="nav-link" href="#contains&lt;EQ, A>">contains&lt;EQ, A&gt;(ValueTuple&lt;A, A, A, A, A, A, A&gt;, A)</a><a class="nav-link" href="#convert&lt;T>">convert&lt;T&gt;(string)</a><a class="nav-link" href="#count&lt;A>">count&lt;A&gt;(Option&lt;A&gt;)</a><a class="nav-link" href="#count&lt;A>">count&lt;A&gt;(OptionUnsafe&lt;A&gt;)</a><a class="nav-link" href="#count&lt;L, R>">count&lt;L, R&gt;(Either&lt;L, R&gt;)</a><a class="nav-link" href="#count&lt;L, R>">count&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#count&lt;MonoidW, W>">count&lt;MonoidW, W&gt;(Writer&lt;MonoidW, W, int&gt;)</a><a class="nav-link" href="#count&lt;NUMTYPE, NUM, T, PRED>">count&lt;NUMTYPE, NUM, T, PRED&gt;(NumType&lt;NUMTYPE, NUM, T, PRED&gt;)</a><a class="nav-link" href="#count&lt;NUMTYPE, NUM, T>">count&lt;NUMTYPE, NUM, T&gt;(NumType&lt;NUMTYPE, NUM, T&gt;)</a><a class="nav-link" href="#count&lt;SELF, FLOAT, T, PRED>">count&lt;SELF, FLOAT, T, PRED&gt;(FloatType&lt;SELF, FLOAT, T, PRED&gt;)</a><a class="nav-link" href="#count&lt;SELF, FLOAT, T>">count&lt;SELF, FLOAT, T&gt;(FloatType&lt;SELF, FLOAT, T&gt;)</a><a class="nav-link" href="#count&lt;T>">count&lt;T&gt;(T?)</a><a class="nav-link" href="#count&lt;T>">count&lt;T&gt;(Try&lt;T&gt;)</a><a class="nav-link" href="#count&lt;T>">count&lt;T&gt;(TryAsync&lt;T&gt;)</a><a class="nav-link" href="#count&lt;T>">count&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#count&lt;T>">count&lt;T&gt;(TryOptionAsync&lt;T&gt;)</a><a class="nav-link" href="#count&lt;T>">count&lt;T&gt;(Task&lt;T&gt;)</a><a class="nav-link" href="#curry&lt;T1, T2, R>">curry&lt;T1, T2, R&gt;(Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#curry&lt;T1, T2, T3, R>">curry&lt;T1, T2, T3, R&gt;(Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#curry&lt;T1, T2, T3, T4, R>">curry&lt;T1, T2, T3, T4, R&gt;(Func&lt;T1, T2, T3, T4, R&gt;)</a><a class="nav-link" href="#curry&lt;T1, T2, T3, T4, T5, R>">curry&lt;T1, T2, T3, T4, T5, R&gt;(Func&lt;T1, T2, T3, T4, T5, R&gt;)</a><a class="nav-link" href="#curry&lt;T1, T2, T3, T4, T5, T6, R>">curry&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;)</a><a class="nav-link" href="#curry&lt;T1, T2, T3, T4, T5, T6, T7, R>">curry&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;)</a><a class="nav-link" href="#curry&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>">curry&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;)</a><a class="nav-link" href="#curry&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>">curry&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;)</a><a class="nav-link" href="#curry&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>">curry&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;)</a><a class="nav-link" href="#delay">delay(Action, TimeSpan)</a><a class="nav-link" href="#delay">delay(Action, DateTime)</a><a class="nav-link" href="#delay&lt;T>">delay&lt;T&gt;(Func&lt;T&gt;, TimeSpan)</a><a class="nav-link" href="#delay&lt;T>">delay&lt;T&gt;(Func&lt;T&gt;, DateTime)</a><a class="nav-link" href="#divide&lt;NUM, L, R>">divide&lt;NUM, L, R&gt;(Either&lt;L, R&gt;, Either&lt;L, R&gt;)</a><a class="nav-link" href="#divide&lt;NUM, L, R>">divide&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#divide&lt;NUM, T>">divide&lt;NUM, T&gt;(T?, T?)</a><a class="nav-link" href="#divide&lt;NUM, T>">divide&lt;NUM, T&gt;(Option&lt;T&gt;, Option&lt;T&gt;)</a><a class="nav-link" href="#divide&lt;NUM, T>">divide&lt;NUM, T&gt;(OptionUnsafe&lt;T&gt;, OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#divide&lt;NUM, T>">divide&lt;NUM, T&gt;(Try&lt;T&gt;, Try&lt;T&gt;)</a><a class="nav-link" href="#divide&lt;NUM, T>">divide&lt;NUM, T&gt;(TryAsync&lt;T&gt;, TryAsync&lt;T&gt;)</a><a class="nav-link" href="#divide&lt;NUM, T>">divide&lt;NUM, T&gt;(TryOption&lt;T&gt;, TryOption&lt;T&gt;)</a><a class="nav-link" href="#divide&lt;NUM, T>">divide&lt;NUM, T&gt;(TryOptionAsync&lt;T&gt;, TryOptionAsync&lt;T&gt;)</a><a class="nav-link" href="#divide&lt;NUMTYPE, NUM, A, PRED>">divide&lt;NUMTYPE, NUM, A, PRED&gt;(NumType&lt;NUMTYPE, NUM, A, PRED&gt;, NUMTYPE)</a><a class="nav-link" href="#divide&lt;NUMTYPE, NUM, A>">divide&lt;NUMTYPE, NUM, A&gt;(NumType&lt;NUMTYPE, NUM, A&gt;, NUMTYPE)</a><a class="nav-link" href="#divide&lt;SELF, FLOAT, A, PRED>">divide&lt;SELF, FLOAT, A, PRED&gt;(FloatType&lt;SELF, FLOAT, A, PRED&gt;, SELF)</a><a class="nav-link" href="#divide&lt;SELF, FLOAT, A>">divide&lt;SELF, FLOAT, A&gt;(FloatType&lt;SELF, FLOAT, A&gt;, SELF)</a><a class="nav-link" href="#empty&lt;T>">empty&lt;T&gt;()</a><a class="nav-link" href="#exceptionIs&lt;E>">exceptionIs&lt;E&gt;(Exception)</a><a class="nav-link" href="#exists&lt;A>">exists&lt;A&gt;(Option&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#exists&lt;A>">exists&lt;A&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#exists&lt;L, R>">exists&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;R, bool&gt;)</a><a class="nav-link" href="#exists&lt;L, R>">exists&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, bool&gt;)</a><a class="nav-link" href="#exists&lt;MonoidW, W, A>">exists&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#exists&lt;NEWTYPE, T, PRED>">exists&lt;NEWTYPE, T, PRED&gt;(NewType&lt;NEWTYPE, T, PRED&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#exists&lt;NUMTYPE, NUM, T, PRED>">exists&lt;NUMTYPE, NUM, T, PRED&gt;(NumType&lt;NUMTYPE, NUM, T, PRED&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#exists&lt;NUMTYPE, NUM, T>">exists&lt;NUMTYPE, NUM, T&gt;(NumType&lt;NUMTYPE, NUM, T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#exists&lt;SELF, FLOAT, T, PRED>">exists&lt;SELF, FLOAT, T, PRED&gt;(FloatType&lt;SELF, FLOAT, T, PRED&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#exists&lt;SELF, FLOAT, T>">exists&lt;SELF, FLOAT, T&gt;(FloatType&lt;SELF, FLOAT, T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#exists&lt;T>">exists&lt;T&gt;(T?, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#exists&lt;T>">exists&lt;T&gt;(T?, Func&lt;T, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#exists&lt;T>">exists&lt;T&gt;(Try&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#exists&lt;T>">exists&lt;T&gt;(TryAsync&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#exists&lt;T>">exists&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#exists&lt;T>">exists&lt;T&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#exists&lt;T>">exists&lt;T&gt;(Task&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#expr">expr(Expression&lt;Action&gt;)</a><a class="nav-link" href="#expr&lt;R>">expr&lt;R&gt;(Expression&lt;Func&lt;R&gt;&gt;)</a><a class="nav-link" href="#expr&lt;T1, R>">expr&lt;T1, R&gt;(Expression&lt;Func&lt;T1, R&gt;&gt;)</a><a class="nav-link" href="#expr&lt;T1, T2, R>">expr&lt;T1, T2, R&gt;(Expression&lt;Func&lt;T1, T2, R&gt;&gt;)</a><a class="nav-link" href="#expr&lt;T1, T2, T3, R>">expr&lt;T1, T2, T3, R&gt;(Expression&lt;Func&lt;T1, T2, T3, R&gt;&gt;)</a><a class="nav-link" href="#expr&lt;T1, T2, T3, T4, R>">expr&lt;T1, T2, T3, T4, R&gt;(Expression&lt;Func&lt;T1, T2, T3, T4, R&gt;&gt;)</a><a class="nav-link" href="#expr&lt;T1, T2, T3, T4, T5, R>">expr&lt;T1, T2, T3, T4, T5, R&gt;(Expression&lt;Func&lt;T1, T2, T3, T4, T5, R&gt;&gt;)</a><a class="nav-link" href="#expr&lt;T1, T2, T3, T4, T5, T6, R>">expr&lt;T1, T2, T3, T4, T5, T6, R&gt;(Expression&lt;Func&lt;T1, T2, T3, T4, T5, T6, R&gt;&gt;)</a><a class="nav-link" href="#expr&lt;T1, T2, T3, T4, T5, T6, T7, R>">expr&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Expression&lt;Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;&gt;)</a><a class="nav-link" href="#expr&lt;T1, T2, T3, T4, T5, T6, T7>">expr&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Expression&lt;Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;&gt;)</a><a class="nav-link" href="#expr&lt;T1, T2, T3, T4, T5, T6>">expr&lt;T1, T2, T3, T4, T5, T6&gt;(Expression&lt;Action&lt;T1, T2, T3, T4, T5, T6&gt;&gt;)</a><a class="nav-link" href="#expr&lt;T1, T2, T3, T4, T5>">expr&lt;T1, T2, T3, T4, T5&gt;(Expression&lt;Action&lt;T1, T2, T3, T4, T5&gt;&gt;)</a><a class="nav-link" href="#expr&lt;T1, T2, T3, T4>">expr&lt;T1, T2, T3, T4&gt;(Expression&lt;Action&lt;T1, T2, T3, T4&gt;&gt;)</a><a class="nav-link" href="#expr&lt;T1, T2, T3>">expr&lt;T1, T2, T3&gt;(Expression&lt;Action&lt;T1, T2, T3&gt;&gt;)</a><a class="nav-link" href="#expr&lt;T1, T2>">expr&lt;T1, T2&gt;(Expression&lt;Action&lt;T1, T2&gt;&gt;)</a><a class="nav-link" href="#expr&lt;T1>">expr&lt;T1&gt;(Expression&lt;Action&lt;T1&gt;&gt;)</a><a class="nav-link" href="#failed&lt;T>">failed&lt;T&gt;(Try&lt;T&gt;)</a><a class="nav-link" href="#failed&lt;T>">failed&lt;T&gt;(TryAsync&lt;T&gt;)</a><a class="nav-link" href="#failed&lt;T>">failed&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#failwith">failwith(string)</a><a class="nav-link" href="#failwith&lt;R>">failwith&lt;R&gt;(string)</a><a class="nav-link" href="#filter&lt;L, R>">filter&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;R, bool&gt;)</a><a class="nav-link" href="#filter&lt;L, R>">filter&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, bool&gt;)</a><a class="nav-link" href="#filter&lt;MonoidW, W, A>">filter&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#filter&lt;T>">filter&lt;T&gt;(T?, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#filter&lt;T>">filter&lt;T&gt;(T?, Func&lt;T, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#filter&lt;T>">filter&lt;T&gt;(Option&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#filter&lt;T>">filter&lt;T&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#filter&lt;T>">filter&lt;T&gt;(Try&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#filter&lt;T>">filter&lt;T&gt;(Try&lt;T&gt;, Func&lt;T, bool&gt;, Func&lt;Exception, bool&gt;)</a><a class="nav-link" href="#filter&lt;T>">filter&lt;T&gt;(TryAsync&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#filter&lt;T>">filter&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#filter&lt;T>">filter&lt;T&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#filter&lt;T>">filter&lt;T&gt;(Task&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#flatten&lt;T>">flatten&lt;T&gt;(Try&lt;Try&lt;T&gt;&gt;)</a><a class="nav-link" href="#flatten&lt;T>">flatten&lt;T&gt;(Try&lt;Try&lt;Try&lt;T&gt;&gt;&gt;)</a><a class="nav-link" href="#flatten&lt;T>">flatten&lt;T&gt;(Try&lt;Try&lt;Try&lt;Try&lt;T&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#flatten&lt;T>">flatten&lt;T&gt;(TryAsync&lt;TryAsync&lt;T&gt;&gt;)</a><a class="nav-link" href="#flatten&lt;T>">flatten&lt;T&gt;(TryAsync&lt;TryAsync&lt;TryAsync&lt;T&gt;&gt;&gt;)</a><a class="nav-link" href="#flatten&lt;T>">flatten&lt;T&gt;(TryAsync&lt;TryAsync&lt;TryAsync&lt;TryAsync&lt;T&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#flatten&lt;T>">flatten&lt;T&gt;(TryOption&lt;TryOption&lt;T&gt;&gt;)</a><a class="nav-link" href="#flatten&lt;T>">flatten&lt;T&gt;(TryOption&lt;TryOption&lt;TryOption&lt;T&gt;&gt;&gt;)</a><a class="nav-link" href="#flatten&lt;T>">flatten&lt;T&gt;(TryOption&lt;TryOption&lt;TryOption&lt;TryOption&lt;T&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#flatten&lt;T>">flatten&lt;T&gt;(TryOptionAsync&lt;TryOptionAsync&lt;T&gt;&gt;)</a><a class="nav-link" href="#flatten&lt;T>">flatten&lt;T&gt;(TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;T&gt;&gt;&gt;)</a><a class="nav-link" href="#flatten&lt;T>">flatten&lt;T&gt;(TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;T&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#flip&lt;A, B, C, R>">flip&lt;A, B, C, R&gt;(Func&lt;A, Func&lt;B, Func&lt;C, R&gt;&gt;&gt;)</a><a class="nav-link" href="#flip&lt;A, B, C, R>">flip&lt;A, B, C, R&gt;(Func&lt;A, B, C, R&gt;)</a><a class="nav-link" href="#Flip&lt;A, B, C, R>">Flip&lt;A, B, C, R&gt;(Func&lt;A, Func&lt;B, Func&lt;C, R&gt;&gt;&gt;)</a><a class="nav-link" href="#Flip&lt;A, B, C, R>">Flip&lt;A, B, C, R&gt;(Func&lt;A, B, C, R&gt;)</a><a class="nav-link" href="#flip&lt;A, B, C>">flip&lt;A, B, C&gt;(Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#Flip&lt;A, B, C>">Flip&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;)</a><a class="nav-link" href="#Flip&lt;A, B, C>">Flip&lt;A, B, C&gt;(Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#flip&lt;A, B, R>">flip&lt;A, B, R&gt;(Func&lt;A, Func&lt;B, R&gt;&gt;)</a><a class="nav-link" href="#fold&lt;A, B, C, D, E, F, G, S>">fold&lt;A, B, C, D, E, F, G, S&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, S, Func&lt;S, A, B, C, D, E, F, G, S&gt;)</a><a class="nav-link" href="#fold&lt;A, B, C, D, E, F, G, S>">fold&lt;A, B, C, D, E, F, G, S&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, S, Func&lt;S, A, B, C, D, E, F, G, S&gt;)</a><a class="nav-link" href="#fold&lt;A, B, C, D, E, F, S>">fold&lt;A, B, C, D, E, F, S&gt;(Tuple&lt;A, B, C, D, E, F&gt;, S, Func&lt;S, A, B, C, D, E, F, S&gt;)</a><a class="nav-link" href="#fold&lt;A, B, C, D, E, F, S>">fold&lt;A, B, C, D, E, F, S&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, S, Func&lt;S, A, B, C, D, E, F, S&gt;)</a><a class="nav-link" href="#fold&lt;A, B, C, D, E, S>">fold&lt;A, B, C, D, E, S&gt;(Tuple&lt;A, B, C, D, E&gt;, S, Func&lt;S, A, B, C, D, E, S&gt;)</a><a class="nav-link" href="#fold&lt;A, B, C, D, E, S>">fold&lt;A, B, C, D, E, S&gt;(ValueTuple&lt;A, B, C, D, E&gt;, S, Func&lt;S, A, B, C, D, E, S&gt;)</a><a class="nav-link" href="#fold&lt;A, B, C, D, S>">fold&lt;A, B, C, D, S&gt;(Tuple&lt;A, B, C, D&gt;, S, Func&lt;S, A, B, C, D, S&gt;)</a><a class="nav-link" href="#fold&lt;A, B, C, D, S>">fold&lt;A, B, C, D, S&gt;(ValueTuple&lt;A, B, C, D&gt;, S, Func&lt;S, A, B, C, D, S&gt;)</a><a class="nav-link" href="#fold&lt;A, S>">fold&lt;A, S&gt;(Tuple&lt;A&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#fold&lt;A, S>">fold&lt;A, S&gt;(ValueTuple&lt;A&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#fold&lt;FState, MonoidW, W, A>">fold&lt;FState, MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, FState, Func&lt;FState, A, FState&gt;)</a><a class="nav-link" href="#fold&lt;MonoidW, W, A>">fold&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;W, A, W&gt;)</a><a class="nav-link" href="#fold&lt;NEWTYPE, T, S, PRED>">fold&lt;NEWTYPE, T, S, PRED&gt;(NewType&lt;NEWTYPE, T, PRED&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#fold&lt;NUMTYPE, NUM, T, S, PRED>">fold&lt;NUMTYPE, NUM, T, S, PRED&gt;(NumType&lt;NUMTYPE, NUM, T, PRED&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#fold&lt;NUMTYPE, NUM, T, S>">fold&lt;NUMTYPE, NUM, T, S&gt;(NumType&lt;NUMTYPE, NUM, T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#fold&lt;S, A>">fold&lt;S, A&gt;(Option&lt;A&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#fold&lt;S, A>">fold&lt;S, A&gt;(OptionUnsafe&lt;A&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#fold&lt;S, L, R>">fold&lt;S, L, R&gt;(Either&lt;L, R&gt;, S, Func&lt;S, R, S&gt;)</a><a class="nav-link" href="#fold&lt;S, L, R>">fold&lt;S, L, R&gt;(EitherUnsafe&lt;L, R&gt;, S, Func&lt;S, R, S&gt;)</a><a class="nav-link" href="#fold&lt;S, T>">fold&lt;S, T&gt;(T?, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#fold&lt;S, T>">fold&lt;S, T&gt;(T?, S, Func&lt;S, T, S&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#fold&lt;S, T>">fold&lt;S, T&gt;(Try&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#fold&lt;S, T>">fold&lt;S, T&gt;(Try&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#fold&lt;S, T>">fold&lt;S, T&gt;(TryAsync&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#fold&lt;S, T>">fold&lt;S, T&gt;(TryAsync&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#fold&lt;S, T>">fold&lt;S, T&gt;(TryOption&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#fold&lt;S, T>">fold&lt;S, T&gt;(TryOptionAsync&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#fold&lt;SELF, FLOAT, T, S, PRED>">fold&lt;SELF, FLOAT, T, S, PRED&gt;(FloatType&lt;SELF, FLOAT, T, PRED&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#fold&lt;SELF, FLOAT, T, S>">fold&lt;SELF, FLOAT, T, S&gt;(FloatType&lt;SELF, FLOAT, T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#fold&lt;T, S>">fold&lt;T, S&gt;(Task&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#fold&lt;T1, T2, S>">fold&lt;T1, T2, S&gt;(Tuple&lt;T1, T2&gt;, S, Func&lt;S, T1, T2, S&gt;)</a><a class="nav-link" href="#fold&lt;T1, T2, S>">fold&lt;T1, T2, S&gt;(ValueTuple&lt;T1, T2&gt;, S, Func&lt;S, T1, T2, S&gt;)</a><a class="nav-link" href="#fold&lt;T1, T2, T3, S>">fold&lt;T1, T2, T3, S&gt;(Tuple&lt;T1, T2, T3&gt;, S, Func&lt;S, T1, T2, T3, S&gt;)</a><a class="nav-link" href="#fold&lt;T1, T2, T3, S>">fold&lt;T1, T2, T3, S&gt;(ValueTuple&lt;T1, T2, T3&gt;, S, Func&lt;S, T1, T2, T3, S&gt;)</a><a class="nav-link" href="#forall&lt;A>">forall&lt;A&gt;(Option&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forall&lt;A>">forall&lt;A&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forall&lt;L, R>">forall&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;R, bool&gt;)</a><a class="nav-link" href="#forall&lt;L, R>">forall&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, bool&gt;)</a><a class="nav-link" href="#forall&lt;MonoidW, W, A>">forall&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#forall&lt;NEWTYPE, T, PRED>">forall&lt;NEWTYPE, T, PRED&gt;(NewType&lt;NEWTYPE, T, PRED&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#forall&lt;NUMTYPE, NUM, T, PRED>">forall&lt;NUMTYPE, NUM, T, PRED&gt;(NumType&lt;NUMTYPE, NUM, T, PRED&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#forall&lt;NUMTYPE, NUM, T>">forall&lt;NUMTYPE, NUM, T&gt;(NumType&lt;NUMTYPE, NUM, T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#forall&lt;SELF, FLOAT, T, PRED>">forall&lt;SELF, FLOAT, T, PRED&gt;(FloatType&lt;SELF, FLOAT, T, PRED&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#forall&lt;SELF, FLOAT, T>">forall&lt;SELF, FLOAT, T&gt;(FloatType&lt;SELF, FLOAT, T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#forall&lt;T>">forall&lt;T&gt;(T?, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#forall&lt;T>">forall&lt;T&gt;(T?, Func&lt;T, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#forall&lt;T>">forall&lt;T&gt;(Try&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#forall&lt;T>">forall&lt;T&gt;(TryAsync&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#forall&lt;T>">forall&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#forall&lt;T>">forall&lt;T&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#forall&lt;T>">forall&lt;T&gt;(Task&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#fun">fun(Action)</a><a class="nav-link" href="#fun&lt;R>">fun&lt;R&gt;(Func&lt;R&gt;)</a><a class="nav-link" href="#fun&lt;T1, R>">fun&lt;T1, R&gt;(Func&lt;T1, R&gt;)</a><a class="nav-link" href="#fun&lt;T1, T2, R>">fun&lt;T1, T2, R&gt;(Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#fun&lt;T1, T2, T3, R>">fun&lt;T1, T2, T3, R&gt;(Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#fun&lt;T1, T2, T3, T4, R>">fun&lt;T1, T2, T3, T4, R&gt;(Func&lt;T1, T2, T3, T4, R&gt;)</a><a class="nav-link" href="#fun&lt;T1, T2, T3, T4, T5, R>">fun&lt;T1, T2, T3, T4, T5, R&gt;(Func&lt;T1, T2, T3, T4, T5, R&gt;)</a><a class="nav-link" href="#fun&lt;T1, T2, T3, T4, T5, T6, R>">fun&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;)</a><a class="nav-link" href="#fun&lt;T1, T2, T3, T4, T5, T6, T7, R>">fun&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;)</a><a class="nav-link" href="#fun&lt;T1, T2, T3, T4, T5, T6, T7>">fun&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;)</a><a class="nav-link" href="#fun&lt;T1, T2, T3, T4, T5, T6>">fun&lt;T1, T2, T3, T4, T5, T6&gt;(Action&lt;T1, T2, T3, T4, T5, T6&gt;)</a><a class="nav-link" href="#fun&lt;T1, T2, T3, T4, T5>">fun&lt;T1, T2, T3, T4, T5&gt;(Action&lt;T1, T2, T3, T4, T5&gt;)</a><a class="nav-link" href="#fun&lt;T1, T2, T3, T4>">fun&lt;T1, T2, T3, T4&gt;(Action&lt;T1, T2, T3, T4&gt;)</a><a class="nav-link" href="#fun&lt;T1, T2, T3>">fun&lt;T1, T2, T3&gt;(Action&lt;T1, T2, T3&gt;)</a><a class="nav-link" href="#fun&lt;T1, T2>">fun&lt;T1, T2&gt;(Action&lt;T1, T2&gt;)</a><a class="nav-link" href="#fun&lt;T1>">fun&lt;T1&gt;(Action&lt;T1&gt;)</a><a class="nav-link" href="#function&lt;T, R>">function&lt;T, R&gt;(Func&lt;T, Option&lt;R&gt;&gt;)</a><a class="nav-link" href="#get&lt;S>">get&lt;S&gt;()</a><a class="nav-link" href="#gets&lt;S, A>">gets&lt;S, A&gt;(Func&lt;S, A&gt;)</a><a class="nav-link" href="#hash&lt;T>">hash&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#HashMap&lt;EqK, K, V>">HashMap&lt;EqK, K, V&gt;()</a><a class="nav-link" href="#HashMap&lt;EqK, K, V>">HashMap&lt;EqK, K, V&gt;(Tuple&lt;K, V&gt;, Tuple&lt;K, V&gt;)</a><a class="nav-link" href="#HashMap&lt;EqK, K, V>">HashMap&lt;EqK, K, V&gt;(ValueTuple&lt;K, V&gt;, ValueTuple&lt;K, V&gt;)</a><a class="nav-link" href="#HashMap&lt;EqK, K, V>">HashMap&lt;EqK, K, V&gt;(KeyValuePair&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)</a><a class="nav-link" href="#HashMap&lt;K, V>">HashMap&lt;K, V&gt;()</a><a class="nav-link" href="#HashMap&lt;K, V>">HashMap&lt;K, V&gt;(Tuple&lt;K, V&gt;, Tuple&lt;K, V&gt;)</a><a class="nav-link" href="#HashMap&lt;K, V>">HashMap&lt;K, V&gt;(ValueTuple&lt;K, V&gt;, ValueTuple&lt;K, V&gt;)</a><a class="nav-link" href="#HashMap&lt;K, V>">HashMap&lt;K, V&gt;(KeyValuePair&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)</a><a class="nav-link" href="#HashSet&lt;EqT, T>">HashSet&lt;EqT, T&gt;()</a><a class="nav-link" href="#HashSet&lt;EqT, T>">HashSet&lt;EqT, T&gt;(T, T)</a><a class="nav-link" href="#HashSet&lt;T>">HashSet&lt;T&gt;()</a><a class="nav-link" href="#HashSet&lt;T>">HashSet&lt;T&gt;(T, T)</a><a class="nav-link" href="#head&lt;A, B, C, D, E, F, G>">head&lt;A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;)</a><a class="nav-link" href="#head&lt;A, B, C, D, E, F, G>">head&lt;A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;)</a><a class="nav-link" href="#head&lt;A, B, C, D, E, F>">head&lt;A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E, F&gt;)</a><a class="nav-link" href="#head&lt;A, B, C, D, E, F>">head&lt;A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;)</a><a class="nav-link" href="#head&lt;A, B, C, D, E>">head&lt;A, B, C, D, E&gt;(Tuple&lt;A, B, C, D, E&gt;)</a><a class="nav-link" href="#head&lt;A, B, C, D, E>">head&lt;A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D, E&gt;)</a><a class="nav-link" href="#head&lt;A, B, C, D>">head&lt;A, B, C, D&gt;(Tuple&lt;A, B, C, D&gt;)</a><a class="nav-link" href="#head&lt;A, B, C, D>">head&lt;A, B, C, D&gt;(ValueTuple&lt;A, B, C, D&gt;)</a><a class="nav-link" href="#head&lt;A>">head&lt;A&gt;(Tuple&lt;A&gt;)</a><a class="nav-link" href="#head&lt;A>">head&lt;A&gt;(ValueTuple&lt;A&gt;)</a><a class="nav-link" href="#head&lt;T1, T2, T3>">head&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2, T3&gt;)</a><a class="nav-link" href="#head&lt;T1, T2, T3>">head&lt;T1, T2, T3&gt;(ValueTuple&lt;T1, T2, T3&gt;)</a><a class="nav-link" href="#head&lt;T1, T2>">head&lt;T1, T2&gt;(Tuple&lt;T1, T2&gt;)</a><a class="nav-link" href="#head&lt;T1, T2>">head&lt;T1, T2&gt;(ValueTuple&lt;T1, T2&gt;)</a><a class="nav-link" href="#identity&lt;T>">identity&lt;T&gt;(T)</a><a class="nav-link" href="#ifFail&lt;T>">ifFail&lt;T&gt;(Try&lt;T&gt;, Func&lt;T&gt;)</a><a class="nav-link" href="#ifFail&lt;T>">ifFail&lt;T&gt;(Try&lt;T&gt;, T)</a><a class="nav-link" href="#ifFail&lt;T>">ifFail&lt;T&gt;(Try&lt;T&gt;)</a><a class="nav-link" href="#ifFail&lt;T>">ifFail&lt;T&gt;(TryAsync&lt;T&gt;, Func&lt;T&gt;)</a><a class="nav-link" href="#ifFail&lt;T>">ifFail&lt;T&gt;(TryAsync&lt;T&gt;, T)</a><a class="nav-link" href="#ifFail&lt;T>">ifFail&lt;T&gt;(TryAsync&lt;T&gt;)</a><a class="nav-link" href="#ifFail&lt;T>">ifFail&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#ifFail&lt;T>">ifFail&lt;T&gt;(TryOptionAsync&lt;T&gt;)</a><a class="nav-link" href="#ifFailOrNone&lt;T>">ifFailOrNone&lt;T&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T&gt;)</a><a class="nav-link" href="#ifLeft&lt;L, R>">ifLeft&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#ifLeft&lt;L, R>">ifLeft&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;L, R&gt;)</a><a class="nav-link" href="#ifLeft&lt;L, R>">ifLeft&lt;L, R&gt;(Either&lt;L, R&gt;, R)</a><a class="nav-link" href="#ifLeft&lt;L, R>">ifLeft&lt;L, R&gt;(Either&lt;L, R&gt;, Action&lt;L&gt;)</a><a class="nav-link" href="#ifLeftUnsafe&lt;L, R>">ifLeftUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#ifLeftUnsafe&lt;L, R>">ifLeftUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;L, R&gt;)</a><a class="nav-link" href="#ifLeftUnsafe&lt;L, R>">ifLeftUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, R)</a><a class="nav-link" href="#ifLeftUnsafe&lt;L, R>">ifLeftUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Action&lt;L&gt;)</a><a class="nav-link" href="#ifNone&lt;T>">ifNone&lt;T&gt;(T?, Func&lt;T&gt;)</a><a class="nav-link" href="#ifNone&lt;T>">ifNone&lt;T&gt;(T?, T)</a><a class="nav-link" href="#ifNone&lt;T>">ifNone&lt;T&gt;(Option&lt;T&gt;, Func&lt;T&gt;)</a><a class="nav-link" href="#ifNone&lt;T>">ifNone&lt;T&gt;(Option&lt;T&gt;, T)</a><a class="nav-link" href="#ifNoneOrFail&lt;T>">ifNoneOrFail&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T&gt;, Func&lt;Exception, T&gt;)</a><a class="nav-link" href="#ifNoneOrFail&lt;T>">ifNoneOrFail&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T&gt;)</a><a class="nav-link" href="#ifNoneOrFail&lt;T>">ifNoneOrFail&lt;T&gt;(TryOption&lt;T&gt;, T)</a><a class="nav-link" href="#ifNoneOrFail&lt;T>">ifNoneOrFail&lt;T&gt;(TryOptionAsync&lt;T&gt;, T)</a><a class="nav-link" href="#ifNoneUnsafe&lt;T>">ifNoneUnsafe&lt;T&gt;(Option&lt;T&gt;, Func&lt;T&gt;)</a><a class="nav-link" href="#ifNoneUnsafe&lt;T>">ifNoneUnsafe&lt;T&gt;(Option&lt;T&gt;, T)</a><a class="nav-link" href="#ifNoneUnsafe&lt;T>">ifNoneUnsafe&lt;T&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T&gt;)</a><a class="nav-link" href="#ifNoneUnsafe&lt;T>">ifNoneUnsafe&lt;T&gt;(OptionUnsafe&lt;T&gt;, T)</a><a class="nav-link" href="#ifRight&lt;L, R>">ifRight&lt;L, R&gt;(Either&lt;L, R&gt;, Action&lt;R&gt;)</a><a class="nav-link" href="#ifRight&lt;L, R>">ifRight&lt;L, R&gt;(Either&lt;L, R&gt;, L)</a><a class="nav-link" href="#ifRight&lt;L, R>">ifRight&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;L&gt;)</a><a class="nav-link" href="#ifRight&lt;L, R>">ifRight&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;R, L&gt;)</a><a class="nav-link" href="#ifRightUnsafe&lt;L, R>">ifRightUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Action&lt;R&gt;)</a><a class="nav-link" href="#ifRightUnsafe&lt;L, R>">ifRightUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, L)</a><a class="nav-link" href="#ifRightUnsafe&lt;L, R>">ifRightUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;L&gt;)</a><a class="nav-link" href="#ifRightUnsafe&lt;L, R>">ifRightUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, L&gt;)</a><a class="nav-link" href="#ifSome&lt;T>">ifSome&lt;T&gt;(T?, Action&lt;T&gt;)</a><a class="nav-link" href="#ifSome&lt;T>">ifSome&lt;T&gt;(T?, Func&lt;T, Unit&gt;)</a><a class="nav-link" href="#ifSome&lt;T>">ifSome&lt;T&gt;(Option&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#ifSome&lt;T>">ifSome&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#ifSome&lt;T>">ifSome&lt;T&gt;(TryOptionAsync&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#ifSomeUnsafe&lt;T>">ifSomeUnsafe&lt;T&gt;(OptionUnsafe&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#ifSucc&lt;T>">ifSucc&lt;T&gt;(Try&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#ifSucc&lt;T>">ifSucc&lt;T&gt;(TryAsync&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#ignore&lt;T>">ignore&lt;T&gt;(T)</a><a class="nav-link" href="#isDefault&lt;T>">isDefault&lt;T&gt;(T)</a><a class="nav-link" href="#isFail&lt;T>">isFail&lt;T&gt;(Try&lt;T&gt;)</a><a class="nav-link" href="#isFail&lt;T>">isFail&lt;T&gt;(TryAsync&lt;T&gt;)</a><a class="nav-link" href="#isFail&lt;T>">isFail&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#isFail&lt;T>">isFail&lt;T&gt;(TryOptionAsync&lt;T&gt;)</a><a class="nav-link" href="#isLeft&lt;L, R>">isLeft&lt;L, R&gt;(Either&lt;L, R&gt;)</a><a class="nav-link" href="#isLeft&lt;L, R>">isLeft&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#isNone&lt;T>">isNone&lt;T&gt;(Option&lt;T&gt;)</a><a class="nav-link" href="#isNone&lt;T>">isNone&lt;T&gt;(OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#isNone&lt;T>">isNone&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#isnull&lt;T>">isnull&lt;T&gt;(T)</a><a class="nav-link" href="#isRight&lt;L, R>">isRight&lt;L, R&gt;(Either&lt;L, R&gt;)</a><a class="nav-link" href="#isRight&lt;L, R>">isRight&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#isSome&lt;T>">isSome&lt;T&gt;(Option&lt;T&gt;)</a><a class="nav-link" href="#isSome&lt;T>">isSome&lt;T&gt;(OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#isSome&lt;T>">isSome&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#isSome&lt;T>">isSome&lt;T&gt;(TryOptionAsync&lt;T&gt;)</a><a class="nav-link" href="#isSucc&lt;T>">isSucc&lt;T&gt;(Try&lt;T&gt;)</a><a class="nav-link" href="#isSucc&lt;T>">isSucc&lt;T&gt;(TryAsync&lt;T&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D, E, F, G>">iter&lt;A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Action&lt;A, B, C, D, E, F, G&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D, E, F, G>">iter&lt;A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;, Action&lt;E&gt;, Action&lt;F&gt;, Action&lt;G&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D, E, F, G>">iter&lt;A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Action&lt;A, B, C, D, E, F, G&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D, E, F, G>">iter&lt;A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;, Action&lt;E&gt;, Action&lt;F&gt;, Action&lt;G&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D, E, F>">iter&lt;A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Action&lt;A, B, C, D, E, F&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D, E, F>">iter&lt;A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;, Action&lt;E&gt;, Action&lt;F&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D, E, F>">iter&lt;A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Action&lt;A, B, C, D, E, F&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D, E, F>">iter&lt;A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;, Action&lt;E&gt;, Action&lt;F&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D, E>">iter&lt;A, B, C, D, E&gt;(Tuple&lt;A, B, C, D, E&gt;, Action&lt;A, B, C, D, E&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D, E>">iter&lt;A, B, C, D, E&gt;(Tuple&lt;A, B, C, D, E&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;, Action&lt;E&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D, E>">iter&lt;A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Action&lt;A, B, C, D, E&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D, E>">iter&lt;A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;, Action&lt;E&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D>">iter&lt;A, B, C, D&gt;(Tuple&lt;A, B, C, D&gt;, Action&lt;A, B, C, D&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D>">iter&lt;A, B, C, D&gt;(Tuple&lt;A, B, C, D&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D>">iter&lt;A, B, C, D&gt;(ValueTuple&lt;A, B, C, D&gt;, Action&lt;A, B, C, D&gt;)</a><a class="nav-link" href="#iter&lt;A, B, C, D>">iter&lt;A, B, C, D&gt;(ValueTuple&lt;A, B, C, D&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;)</a><a class="nav-link" href="#iter&lt;A>">iter&lt;A&gt;(Tuple&lt;A&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iter&lt;A>">iter&lt;A&gt;(ValueTuple&lt;A&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iter&lt;MonoidW, W, A>">iter&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#iter&lt;NEWTYPE, T, PRED>">iter&lt;NEWTYPE, T, PRED&gt;(NewType&lt;NEWTYPE, T, PRED&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#iter&lt;NUMTYPE, NUM, T, PRED>">iter&lt;NUMTYPE, NUM, T, PRED&gt;(NumType&lt;NUMTYPE, NUM, T, PRED&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#iter&lt;NUMTYPE, NUM, T>">iter&lt;NUMTYPE, NUM, T&gt;(NumType&lt;NUMTYPE, NUM, T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#iter&lt;SELF, FLOAT, T, PRED>">iter&lt;SELF, FLOAT, T, PRED&gt;(FloatType&lt;SELF, FLOAT, T, PRED&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#iter&lt;SELF, FLOAT, T>">iter&lt;SELF, FLOAT, T&gt;(FloatType&lt;SELF, FLOAT, T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#iter&lt;T>">iter&lt;T&gt;(T?, Action&lt;T&gt;)</a><a class="nav-link" href="#iter&lt;T>">iter&lt;T&gt;(Try&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#iter&lt;T>">iter&lt;T&gt;(TryAsync&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#iter&lt;T>">iter&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#iter&lt;T>">iter&lt;T&gt;(TryOptionAsync&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#iter&lt;T>">iter&lt;T&gt;(Task&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#iter&lt;T1, T2, T3>">iter&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2, T3&gt;, Action&lt;T1, T2, T3&gt;)</a><a class="nav-link" href="#iter&lt;T1, T2, T3>">iter&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2, T3&gt;, Action&lt;T1&gt;, Action&lt;T2&gt;, Action&lt;T3&gt;)</a><a class="nav-link" href="#iter&lt;T1, T2, T3>">iter&lt;T1, T2, T3&gt;(ValueTuple&lt;T1, T2, T3&gt;, Action&lt;T1, T2, T3&gt;)</a><a class="nav-link" href="#iter&lt;T1, T2, T3>">iter&lt;T1, T2, T3&gt;(ValueTuple&lt;T1, T2, T3&gt;, Action&lt;T1&gt;, Action&lt;T2&gt;, Action&lt;T3&gt;)</a><a class="nav-link" href="#iter&lt;T1, T2>">iter&lt;T1, T2&gt;(Tuple&lt;T1, T2&gt;, Action&lt;T1&gt;, Action&lt;T2&gt;)</a><a class="nav-link" href="#iter&lt;T1, T2>">iter&lt;T1, T2&gt;(Tuple&lt;T1, T2&gt;, Action&lt;T1, T2&gt;)</a><a class="nav-link" href="#iter&lt;T1, T2>">iter&lt;T1, T2&gt;(ValueTuple&lt;T1, T2&gt;, Action&lt;T1&gt;, Action&lt;T2&gt;)</a><a class="nav-link" href="#iter&lt;T1, T2>">iter&lt;T1, T2&gt;(ValueTuple&lt;T1, T2&gt;, Action&lt;T1, T2&gt;)</a><a class="nav-link" href="#last&lt;A, B, C, D, E, F, G>">last&lt;A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;)</a><a class="nav-link" href="#last&lt;A, B, C, D, E, F, G>">last&lt;A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;)</a><a class="nav-link" href="#last&lt;A, B, C, D, E, F>">last&lt;A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E, F&gt;)</a><a class="nav-link" href="#last&lt;A, B, C, D, E, F>">last&lt;A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;)</a><a class="nav-link" href="#last&lt;A, B, C, D, E>">last&lt;A, B, C, D, E&gt;(Tuple&lt;A, B, C, D, E&gt;)</a><a class="nav-link" href="#last&lt;A, B, C, D, E>">last&lt;A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D, E&gt;)</a><a class="nav-link" href="#last&lt;A, B, C, D>">last&lt;A, B, C, D&gt;(Tuple&lt;A, B, C, D&gt;)</a><a class="nav-link" href="#last&lt;A, B, C, D>">last&lt;A, B, C, D&gt;(ValueTuple&lt;A, B, C, D&gt;)</a><a class="nav-link" href="#last&lt;A>">last&lt;A&gt;(Tuple&lt;A&gt;)</a><a class="nav-link" href="#last&lt;A>">last&lt;A&gt;(ValueTuple&lt;A&gt;)</a><a class="nav-link" href="#last&lt;T1, T2, T3>">last&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2, T3&gt;)</a><a class="nav-link" href="#last&lt;T1, T2, T3>">last&lt;T1, T2, T3&gt;(ValueTuple&lt;T1, T2, T3&gt;)</a><a class="nav-link" href="#last&lt;T1, T2>">last&lt;T1, T2&gt;(Tuple&lt;T1, T2&gt;)</a><a class="nav-link" href="#last&lt;T1, T2>">last&lt;T1, T2&gt;(ValueTuple&lt;T1, T2&gt;)</a><a class="nav-link" href="#Left&lt;L, R>">Left&lt;L, R&gt;(L)</a><a class="nav-link" href="#Left&lt;L, R>">Left&lt;L, R&gt;(L?)</a><a class="nav-link" href="#lefts&lt;L, R>">lefts&lt;L, R&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;)</a><a class="nav-link" href="#lefts&lt;L, R>">lefts&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;)</a><a class="nav-link" href="#leftToArray&lt;L, R>">leftToArray&lt;L, R&gt;(Either&lt;L, R&gt;)</a><a class="nav-link" href="#leftToArray&lt;L, R>">leftToArray&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#leftToList&lt;L, R>">leftToList&lt;L, R&gt;(Either&lt;L, R&gt;)</a><a class="nav-link" href="#leftToList&lt;L, R>">leftToList&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#leftToQuery&lt;L, R>">leftToQuery&lt;L, R&gt;(Either&lt;L, R&gt;)</a><a class="nav-link" href="#leftToQuery&lt;L, R>">leftToQuery&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#LeftUnsafe&lt;L, R>">LeftUnsafe&lt;L, R&gt;(L)</a><a class="nav-link" href="#list&lt;T>">list&lt;T&gt;()</a><a class="nav-link" href="#list&lt;T>">list&lt;T&gt;(T)</a><a class="nav-link" href="#List&lt;T>">List&lt;T&gt;()</a><a class="nav-link" href="#List&lt;T>">List&lt;T&gt;(T, T)</a><a class="nav-link" href="#listen&lt;MonoidW, W, A, B>">listen&lt;MonoidW, W, A, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;W, B&gt;)</a><a class="nav-link" href="#local&lt;Env, A>">local&lt;Env, A&gt;(Reader&lt;Env, A&gt;, Func&lt;Env, Env&gt;)</a><a class="nav-link" href="#lpar&lt;T1, T2, R>">lpar&lt;T1, T2, R&gt;(Func&lt;T1, T2, R&gt;, T2)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, F, G, R>">map&lt;A, B, C, D, E, F, G, R&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;Tuple&lt;A, B, C, D, E, F, G&gt;, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, F, G, R>">map&lt;A, B, C, D, E, F, G, R&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;A, B, C, D, E, F, G, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, F, G, R>">map&lt;A, B, C, D, E, F, G, R&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;ValueTuple&lt;A, B, C, D, E, F, G&gt;, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, F, G, R>">map&lt;A, B, C, D, E, F, G, R&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;A, B, C, D, E, F, G, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, F, G, T, U, V, W, X, Y, Z>">map&lt;A, B, C, D, E, F, G, T, U, V, W, X, Y, Z&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;A, T&gt;, Func&lt;B, U&gt;, Func&lt;C, V&gt;, Func&lt;D, W&gt;, Func&lt;E, X&gt;, Func&lt;F, Y&gt;, Func&lt;G, Z&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, F, G, T, U, V, W, X, Y, Z>">map&lt;A, B, C, D, E, F, G, T, U, V, W, X, Y, Z&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;A, T&gt;, Func&lt;B, U&gt;, Func&lt;C, V&gt;, Func&lt;D, W&gt;, Func&lt;E, X&gt;, Func&lt;F, Y&gt;, Func&lt;G, Z&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, F, R>">map&lt;A, B, C, D, E, F, R&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;Tuple&lt;A, B, C, D, E, F&gt;, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, F, R>">map&lt;A, B, C, D, E, F, R&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;A, B, C, D, E, F, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, F, R>">map&lt;A, B, C, D, E, F, R&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;ValueTuple&lt;A, B, C, D, E, F&gt;, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, F, R>">map&lt;A, B, C, D, E, F, R&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;A, B, C, D, E, F, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, F, U, V, W, X, Y, Z>">map&lt;A, B, C, D, E, F, U, V, W, X, Y, Z&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;A, U&gt;, Func&lt;B, V&gt;, Func&lt;C, W&gt;, Func&lt;D, X&gt;, Func&lt;E, Y&gt;, Func&lt;F, Z&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, F, U, V, W, X, Y, Z>">map&lt;A, B, C, D, E, F, U, V, W, X, Y, Z&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;A, U&gt;, Func&lt;B, V&gt;, Func&lt;C, W&gt;, Func&lt;D, X&gt;, Func&lt;E, Y&gt;, Func&lt;F, Z&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, R>">map&lt;A, B, C, D, E, R&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;Tuple&lt;A, B, C, D, E&gt;, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, R>">map&lt;A, B, C, D, E, R&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;A, B, C, D, E, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, R>">map&lt;A, B, C, D, E, R&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;ValueTuple&lt;A, B, C, D, E&gt;, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, R>">map&lt;A, B, C, D, E, R&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;A, B, C, D, E, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, V, W, X, Y, Z>">map&lt;A, B, C, D, E, V, W, X, Y, Z&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;A, V&gt;, Func&lt;B, W&gt;, Func&lt;C, X&gt;, Func&lt;D, Y&gt;, Func&lt;E, Z&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, E, V, W, X, Y, Z>">map&lt;A, B, C, D, E, V, W, X, Y, Z&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;A, V&gt;, Func&lt;B, W&gt;, Func&lt;C, X&gt;, Func&lt;D, Y&gt;, Func&lt;E, Z&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, R>">map&lt;A, B, C, D, R&gt;(Tuple&lt;A, B, C, D&gt;, Func&lt;Tuple&lt;A, B, C, D&gt;, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, R>">map&lt;A, B, C, D, R&gt;(Tuple&lt;A, B, C, D&gt;, Func&lt;A, B, C, D, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, R>">map&lt;A, B, C, D, R&gt;(ValueTuple&lt;A, B, C, D&gt;, Func&lt;ValueTuple&lt;A, B, C, D&gt;, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, R>">map&lt;A, B, C, D, R&gt;(ValueTuple&lt;A, B, C, D&gt;, Func&lt;A, B, C, D, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, W, X, Y, Z>">map&lt;A, B, C, D, W, X, Y, Z&gt;(Tuple&lt;A, B, C, D&gt;, Func&lt;A, W&gt;, Func&lt;B, X&gt;, Func&lt;C, Y&gt;, Func&lt;D, Z&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, D, W, X, Y, Z>">map&lt;A, B, C, D, W, X, Y, Z&gt;(ValueTuple&lt;A, B, C, D&gt;, Func&lt;A, W&gt;, Func&lt;B, X&gt;, Func&lt;C, Y&gt;, Func&lt;D, Z&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, R>">map&lt;A, B, C, R&gt;(Tuple&lt;A, B, C&gt;, Func&lt;Tuple&lt;A, B, C&gt;, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, R>">map&lt;A, B, C, R&gt;(Tuple&lt;A, B, C&gt;, Func&lt;A, B, C, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, R>">map&lt;A, B, C, R&gt;(ValueTuple&lt;A, B, C&gt;, Func&lt;ValueTuple&lt;A, B, C&gt;, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, C, R>">map&lt;A, B, C, R&gt;(ValueTuple&lt;A, B, C&gt;, Func&lt;A, B, C, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, R>">map&lt;A, B, R&gt;(Tuple&lt;A, B&gt;, Func&lt;Tuple&lt;A, B&gt;, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, R>">map&lt;A, B, R&gt;(ValueTuple&lt;A, B&gt;, Func&lt;ValueTuple&lt;A, B&gt;, R&gt;)</a><a class="nav-link" href="#map&lt;A, B, R>">map&lt;A, B, R&gt;(ValueTuple&lt;A, B&gt;, Func&lt;A, B, R&gt;)</a><a class="nav-link" href="#map&lt;A, B>">map&lt;A, B&gt;(Option&lt;A&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#map&lt;A, B>">map&lt;A, B&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#map&lt;A, R>">map&lt;A, R&gt;(Tuple&lt;A&gt;, Func&lt;A, R&gt;)</a><a class="nav-link" href="#map&lt;A, R>">map&lt;A, R&gt;(ValueTuple&lt;A&gt;, Func&lt;A, R&gt;)</a><a class="nav-link" href="#map&lt;K, V>">map&lt;K, V&gt;()</a><a class="nav-link" href="#map&lt;K, V>">map&lt;K, V&gt;(Tuple&lt;K, V&gt;)</a><a class="nav-link" href="#map&lt;K, V>">map&lt;K, V&gt;(KeyValuePair&lt;K, V&gt;)</a><a class="nav-link" href="#Map&lt;K, V>">Map&lt;K, V&gt;()</a><a class="nav-link" href="#Map&lt;K, V>">Map&lt;K, V&gt;(Tuple&lt;K, V&gt;, Tuple&lt;K, V&gt;)</a><a class="nav-link" href="#Map&lt;K, V>">Map&lt;K, V&gt;(ValueTuple&lt;K, V&gt;, ValueTuple&lt;K, V&gt;)</a><a class="nav-link" href="#Map&lt;K, V>">Map&lt;K, V&gt;(KeyValuePair&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)</a><a class="nav-link" href="#map&lt;L, R, Ret>">map&lt;L, R, Ret&gt;(Either&lt;L, R&gt;, Func&lt;R, Ret&gt;)</a><a class="nav-link" href="#map&lt;L, R, Ret>">map&lt;L, R, Ret&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, Ret&gt;)</a><a class="nav-link" href="#map&lt;MonoidW, W, A, B>">map&lt;MonoidW, W, A, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#map&lt;NEWTYPE, T, PRED>">map&lt;NEWTYPE, T, PRED&gt;(NewType&lt;NEWTYPE, T, PRED&gt;, Func&lt;T, T&gt;)</a><a class="nav-link" href="#map&lt;NUMTYPE, NUM, T, PRED>">map&lt;NUMTYPE, NUM, T, PRED&gt;(NumType&lt;NUMTYPE, NUM, T, PRED&gt;, Func&lt;T, T&gt;)</a><a class="nav-link" href="#map&lt;NUMTYPE, NUM, T>">map&lt;NUMTYPE, NUM, T&gt;(NumType&lt;NUMTYPE, NUM, T&gt;, Func&lt;T, T&gt;)</a><a class="nav-link" href="#Map&lt;OrdK, K, V>">Map&lt;OrdK, K, V&gt;()</a><a class="nav-link" href="#Map&lt;OrdK, K, V>">Map&lt;OrdK, K, V&gt;(Tuple&lt;K, V&gt;, Tuple&lt;K, V&gt;)</a><a class="nav-link" href="#Map&lt;OrdK, K, V>">Map&lt;OrdK, K, V&gt;(ValueTuple&lt;K, V&gt;, ValueTuple&lt;K, V&gt;)</a><a class="nav-link" href="#map&lt;SELF, FLOAT, T, PRED>">map&lt;SELF, FLOAT, T, PRED&gt;(FloatType&lt;SELF, FLOAT, T, PRED&gt;, Func&lt;T, T&gt;)</a><a class="nav-link" href="#map&lt;SELF, FLOAT, T>">map&lt;SELF, FLOAT, T&gt;(FloatType&lt;SELF, FLOAT, T&gt;, Func&lt;T, T&gt;)</a><a class="nav-link" href="#map&lt;T, R>">map&lt;T, R&gt;(T?, Func&lt;T, R&gt;)</a><a class="nav-link" href="#map&lt;T, R>">map&lt;T, R&gt;(T?, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#map&lt;T, R>">map&lt;T, R&gt;(Try&lt;T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#map&lt;T, R>">map&lt;T, R&gt;(TryAsync&lt;T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#map&lt;T, R>">map&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#map&lt;T, R>">map&lt;T, R&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#map&lt;T, R>">map&lt;T, R&gt;(T, Func&lt;T, R&gt;)</a><a class="nav-link" href="#map&lt;T, U>">map&lt;T, U&gt;(Task&lt;T&gt;, Func&lt;T, U&gt;)</a><a class="nav-link" href="#map&lt;T1, T2, R>">map&lt;T1, T2, R&gt;(Tuple&lt;T1, T2&gt;, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#map&lt;T1, T2, R>">map&lt;T1, T2, R&gt;(T1, T2, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#map&lt;T1, T2, T3, R>">map&lt;T1, T2, T3, R&gt;(T1, T2, T3, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#map&lt;T1, T2, T3, T4, R>">map&lt;T1, T2, T3, T4, R&gt;(T1, T2, T3, T4, Func&lt;T1, T2, T3, T4, R&gt;)</a><a class="nav-link" href="#map&lt;T1, T2, T3, T4, T5, R>">map&lt;T1, T2, T3, T4, T5, R&gt;(T1, T2, T3, T4, T5, Func&lt;T1, T2, T3, T4, T5, R&gt;)</a><a class="nav-link" href="#mapFifth&lt;A, B, C, D, E, F, G, R5>">mapFifth&lt;A, B, C, D, E, F, G, R5&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;E, R5&gt;)</a><a class="nav-link" href="#mapFifth&lt;A, B, C, D, E, F, G, R5>">mapFifth&lt;A, B, C, D, E, F, G, R5&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;E, R5&gt;)</a><a class="nav-link" href="#mapFifth&lt;A, B, C, D, E, F, R5>">mapFifth&lt;A, B, C, D, E, F, R5&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;E, R5&gt;)</a><a class="nav-link" href="#mapFifth&lt;A, B, C, D, E, F, R5>">mapFifth&lt;A, B, C, D, E, F, R5&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;E, R5&gt;)</a><a class="nav-link" href="#mapFifth&lt;A, B, C, D, E, R5>">mapFifth&lt;A, B, C, D, E, R5&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;E, R5&gt;)</a><a class="nav-link" href="#mapFifth&lt;A, B, C, D, E, R5>">mapFifth&lt;A, B, C, D, E, R5&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;E, R5&gt;)</a><a class="nav-link" href="#mapFirst&lt;A, B, C, D, E, F, G, R1>">mapFirst&lt;A, B, C, D, E, F, G, R1&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;A, R1&gt;)</a><a class="nav-link" href="#mapFirst&lt;A, B, C, D, E, F, G, R1>">mapFirst&lt;A, B, C, D, E, F, G, R1&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;A, R1&gt;)</a><a class="nav-link" href="#mapFirst&lt;A, B, C, D, E, F, R1>">mapFirst&lt;A, B, C, D, E, F, R1&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;A, R1&gt;)</a><a class="nav-link" href="#mapFirst&lt;A, B, C, D, E, F, R1>">mapFirst&lt;A, B, C, D, E, F, R1&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;A, R1&gt;)</a><a class="nav-link" href="#mapFirst&lt;A, B, C, D, E, R1>">mapFirst&lt;A, B, C, D, E, R1&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;A, R1&gt;)</a><a class="nav-link" href="#mapFirst&lt;A, B, C, D, E, R1>">mapFirst&lt;A, B, C, D, E, R1&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;A, R1&gt;)</a><a class="nav-link" href="#mapFirst&lt;A, B, C, D, R1>">mapFirst&lt;A, B, C, D, R1&gt;(Tuple&lt;A, B, C, D&gt;, Func&lt;A, R1&gt;)</a><a class="nav-link" href="#mapFirst&lt;A, B, C, D, R1>">mapFirst&lt;A, B, C, D, R1&gt;(ValueTuple&lt;A, B, C, D&gt;, Func&lt;A, R1&gt;)</a><a class="nav-link" href="#mapFirst&lt;T1, T2, T3, R1>">mapFirst&lt;T1, T2, T3, R1&gt;(Tuple&lt;T1, T2, T3&gt;, Func&lt;T1, R1&gt;)</a><a class="nav-link" href="#mapFirst&lt;T1, T2, T3, R1>">mapFirst&lt;T1, T2, T3, R1&gt;(ValueTuple&lt;T1, T2, T3&gt;, Func&lt;T1, R1&gt;)</a><a class="nav-link" href="#mapFourth&lt;A, B, C, D, E, F, G, R4>">mapFourth&lt;A, B, C, D, E, F, G, R4&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;D, R4&gt;)</a><a class="nav-link" href="#mapFourth&lt;A, B, C, D, E, F, G, R4>">mapFourth&lt;A, B, C, D, E, F, G, R4&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;D, R4&gt;)</a><a class="nav-link" href="#mapFourth&lt;A, B, C, D, E, F, R4>">mapFourth&lt;A, B, C, D, E, F, R4&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;D, R4&gt;)</a><a class="nav-link" href="#mapFourth&lt;A, B, C, D, E, F, R4>">mapFourth&lt;A, B, C, D, E, F, R4&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;D, R4&gt;)</a><a class="nav-link" href="#mapFourth&lt;A, B, C, D, E, R4>">mapFourth&lt;A, B, C, D, E, R4&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;D, R4&gt;)</a><a class="nav-link" href="#mapFourth&lt;A, B, C, D, E, R4>">mapFourth&lt;A, B, C, D, E, R4&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;D, R4&gt;)</a><a class="nav-link" href="#mapFourth&lt;A, B, C, D, R4>">mapFourth&lt;A, B, C, D, R4&gt;(Tuple&lt;A, B, C, D&gt;, Func&lt;D, R4&gt;)</a><a class="nav-link" href="#mapFourth&lt;A, B, C, D, R4>">mapFourth&lt;A, B, C, D, R4&gt;(ValueTuple&lt;A, B, C, D&gt;, Func&lt;D, R4&gt;)</a><a class="nav-link" href="#mapLeftT&lt;L, R, Ret>">mapLeftT&lt;L, R, Ret&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;, Func&lt;L, Ret&gt;)</a><a class="nav-link" href="#mapLeftT&lt;L, R, Ret>">mapLeftT&lt;L, R, Ret&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;L, Ret&gt;)</a><a class="nav-link" href="#mapSecond&lt;A, B, C, D, E, F, G, R2>">mapSecond&lt;A, B, C, D, E, F, G, R2&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;B, R2&gt;)</a><a class="nav-link" href="#mapSecond&lt;A, B, C, D, E, F, G, R2>">mapSecond&lt;A, B, C, D, E, F, G, R2&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;B, R2&gt;)</a><a class="nav-link" href="#mapSecond&lt;A, B, C, D, E, F, R2>">mapSecond&lt;A, B, C, D, E, F, R2&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;B, R2&gt;)</a><a class="nav-link" href="#mapSecond&lt;A, B, C, D, E, F, R2>">mapSecond&lt;A, B, C, D, E, F, R2&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;B, R2&gt;)</a><a class="nav-link" href="#mapSecond&lt;A, B, C, D, E, R2>">mapSecond&lt;A, B, C, D, E, R2&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;B, R2&gt;)</a><a class="nav-link" href="#mapSecond&lt;A, B, C, D, E, R2>">mapSecond&lt;A, B, C, D, E, R2&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;B, R2&gt;)</a><a class="nav-link" href="#mapSecond&lt;A, B, C, D, R2>">mapSecond&lt;A, B, C, D, R2&gt;(Tuple&lt;A, B, C, D&gt;, Func&lt;B, R2&gt;)</a><a class="nav-link" href="#mapSecond&lt;A, B, C, D, R2>">mapSecond&lt;A, B, C, D, R2&gt;(ValueTuple&lt;A, B, C, D&gt;, Func&lt;B, R2&gt;)</a><a class="nav-link" href="#mapSecond&lt;T1, T2, T3, R2>">mapSecond&lt;T1, T2, T3, R2&gt;(Tuple&lt;T1, T2, T3&gt;, Func&lt;T2, R2&gt;)</a><a class="nav-link" href="#mapSecond&lt;T1, T2, T3, R2>">mapSecond&lt;T1, T2, T3, R2&gt;(ValueTuple&lt;T1, T2, T3&gt;, Func&lt;T2, R2&gt;)</a><a class="nav-link" href="#mapSeventh&lt;A, B, C, D, E, F, G, R7>">mapSeventh&lt;A, B, C, D, E, F, G, R7&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;G, R7&gt;)</a><a class="nav-link" href="#mapSeventh&lt;A, B, C, D, E, F, G, R7>">mapSeventh&lt;A, B, C, D, E, F, G, R7&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;G, R7&gt;)</a><a class="nav-link" href="#mapSixth&lt;A, B, C, D, E, F, G, R6>">mapSixth&lt;A, B, C, D, E, F, G, R6&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;F, R6&gt;)</a><a class="nav-link" href="#mapSixth&lt;A, B, C, D, E, F, G, R6>">mapSixth&lt;A, B, C, D, E, F, G, R6&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;F, R6&gt;)</a><a class="nav-link" href="#mapSixth&lt;A, B, C, D, E, F, R6>">mapSixth&lt;A, B, C, D, E, F, R6&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;F, R6&gt;)</a><a class="nav-link" href="#mapSixth&lt;A, B, C, D, E, F, R6>">mapSixth&lt;A, B, C, D, E, F, R6&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;F, R6&gt;)</a><a class="nav-link" href="#mapThird&lt;A, B, C, D, E, F, G, R3>">mapThird&lt;A, B, C, D, E, F, G, R3&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;C, R3&gt;)</a><a class="nav-link" href="#mapThird&lt;A, B, C, D, E, F, G, R3>">mapThird&lt;A, B, C, D, E, F, G, R3&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;C, R3&gt;)</a><a class="nav-link" href="#mapThird&lt;A, B, C, D, E, F, R3>">mapThird&lt;A, B, C, D, E, F, R3&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;C, R3&gt;)</a><a class="nav-link" href="#mapThird&lt;A, B, C, D, E, F, R3>">mapThird&lt;A, B, C, D, E, F, R3&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;C, R3&gt;)</a><a class="nav-link" href="#mapThird&lt;A, B, C, D, E, R3>">mapThird&lt;A, B, C, D, E, R3&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;C, R3&gt;)</a><a class="nav-link" href="#mapThird&lt;A, B, C, D, E, R3>">mapThird&lt;A, B, C, D, E, R3&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;C, R3&gt;)</a><a class="nav-link" href="#mapThird&lt;A, B, C, D, R3>">mapThird&lt;A, B, C, D, R3&gt;(Tuple&lt;A, B, C, D&gt;, Func&lt;C, R3&gt;)</a><a class="nav-link" href="#mapThird&lt;A, B, C, D, R3>">mapThird&lt;A, B, C, D, R3&gt;(ValueTuple&lt;A, B, C, D&gt;, Func&lt;C, R3&gt;)</a><a class="nav-link" href="#mapThird&lt;T1, T2, T3, R3>">mapThird&lt;T1, T2, T3, R3&gt;(Tuple&lt;T1, T2, T3&gt;, Func&lt;T3, R3&gt;)</a><a class="nav-link" href="#mapThird&lt;T1, T2, T3, R3>">mapThird&lt;T1, T2, T3, R3&gt;(ValueTuple&lt;T1, T2, T3&gt;, Func&lt;T3, R3&gt;)</a><a class="nav-link" href="#match&lt;A, R>">match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#match&lt;A, R>">match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#match&lt;A, R>">match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#match&lt;A, R>">match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#match&lt;A, R>">match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#match&lt;A, R>">match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#match&lt;A, R>">match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#match&lt;A, R>">match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#match&lt;A, R>">match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, R)</a><a class="nav-link" href="#match&lt;A, R>">match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, R)</a><a class="nav-link" href="#match&lt;A, R>">match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, R)</a><a class="nav-link" href="#match&lt;A, R>">match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, R)</a><a class="nav-link" href="#match&lt;A>">match&lt;A&gt;(TryOptionAsync&lt;A&gt;, Action&lt;A&gt;, Action, Action&lt;Exception&gt;)</a><a class="nav-link" href="#match&lt;K, V, R>">match&lt;K, V, R&gt;(Map&lt;K, V&gt;, K, Func&lt;V, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#match&lt;K, V, R>">match&lt;K, V, R&gt;(HashMap&lt;K, V&gt;, K, Func&lt;V, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#match&lt;K, V>">match&lt;K, V&gt;(Map&lt;K, V&gt;, K, Action&lt;V&gt;, Action)</a><a class="nav-link" href="#match&lt;K, V>">match&lt;K, V&gt;(HashMap&lt;K, V&gt;, K, Action&lt;V&gt;, Action)</a><a class="nav-link" href="#match&lt;L, R, Ret>">match&lt;L, R, Ret&gt;(Either&lt;L, R&gt;, Func&lt;R, Ret&gt;, Func&lt;L, Ret&gt;)</a><a class="nav-link" href="#match&lt;L, R, Ret>">match&lt;L, R, Ret&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;, Func&lt;R, Ret&gt;, Func&lt;L, Ret&gt;)</a><a class="nav-link" href="#match&lt;L, R, Ret>">match&lt;L, R, Ret&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, Ret&gt;, Func&lt;L, Ret&gt;)</a><a class="nav-link" href="#Match&lt;L, R, Ret>">Match&lt;L, R, Ret&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;, Func&lt;R, Ret&gt;, Func&lt;L, Ret&gt;)</a><a class="nav-link" href="#Match&lt;L, R, Ret>">Match&lt;L, R, Ret&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, Ret&gt;, Func&lt;L, Ret&gt;)</a><a class="nav-link" href="#match&lt;L, R>">match&lt;L, R&gt;(Either&lt;L, R&gt;, Action&lt;R&gt;, Action&lt;L&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(T?, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(Option&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(IEnumerable&lt;Option&lt;T&gt;&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;, Func&lt;IEnumerable&lt;R&gt;&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(IEnumerable&lt;Option&lt;T&gt;&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;, IEnumerable&lt;R&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(Try&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(Try&lt;T&gt;, Func&lt;T, R&gt;, R)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(TryAsync&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(TryAsync&lt;T&gt;, Func&lt;T, R&gt;, R)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, R)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(T, Func&lt;T, Option&lt;R&gt;&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, IEnumerable&lt;T&gt;, R&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, IEnumerable&lt;T&gt;, R&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, IEnumerable&lt;T&gt;, R&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, IEnumerable&lt;T&gt;, R&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, T, R&gt;, Func&lt;T, T, T, T, IEnumerable&lt;T&gt;, R&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, IEnumerable&lt;T&gt;, R&gt;)</a><a class="nav-link" href="#match&lt;T, R>">match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, T, IEnumerable&lt;T&gt;, R&gt;)</a><a class="nav-link" href="#match&lt;T>">match&lt;T&gt;(T?, Action&lt;T&gt;, Action)</a><a class="nav-link" href="#match&lt;T>">match&lt;T&gt;(Option&lt;T&gt;, Action&lt;T&gt;, Action)</a><a class="nav-link" href="#match&lt;T>">match&lt;T&gt;(Try&lt;T&gt;, Action&lt;T&gt;, Action&lt;Exception&gt;)</a><a class="nav-link" href="#match&lt;T>">match&lt;T&gt;(TryAsync&lt;T&gt;, Action&lt;T&gt;, Action&lt;Exception&gt;)</a><a class="nav-link" href="#match&lt;T>">match&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;, Action)</a><a class="nav-link" href="#match&lt;T>">match&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;, Action, Action&lt;Exception&gt;)</a><a class="nav-link" href="#matchAsync&lt;T, R>">matchAsync&lt;T, R&gt;(T?, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#matchAsync&lt;T, R>">matchAsync&lt;T, R&gt;(T?, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#matchObservable&lt;A, B>">matchObservable&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;B&gt;&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#matchObservable&lt;A, B>">matchObservable&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;B&gt;&gt;, Func&lt;IObservable&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#matchObservable&lt;A, R>">matchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#matchObservable&lt;A, R>">matchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#matchObservable&lt;A, R>">matchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#matchObservable&lt;A, R>">matchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#matchObservable&lt;T, R>">matchObservable&lt;T, R&gt;(T?, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#matchObservable&lt;T, R>">matchObservable&lt;T, R&gt;(T?, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#matchObservable&lt;T, R>">matchObservable&lt;T, R&gt;(IObservable&lt;T?&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#matchUnsafe&lt;L, R, Ret>">matchUnsafe&lt;L, R, Ret&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, Ret&gt;, Func&lt;L, Ret&gt;)</a><a class="nav-link" href="#matchUnsafe&lt;L, R>">matchUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Action&lt;R&gt;, Action&lt;L&gt;)</a><a class="nav-link" href="#matchUnsafe&lt;T, R>">matchUnsafe&lt;T, R&gt;(Option&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#matchUnsafe&lt;T, R>">matchUnsafe&lt;T, R&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#matchUnsafe&lt;T, R>">matchUnsafe&lt;T, R&gt;(IEnumerable&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;, Func&lt;IEnumerable&lt;R&gt;&gt;)</a><a class="nav-link" href="#matchUnsafe&lt;T, R>">matchUnsafe&lt;T, R&gt;(IEnumerable&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;, IEnumerable&lt;R&gt;)</a><a class="nav-link" href="#matchUnsafe&lt;T>">matchUnsafe&lt;T&gt;(OptionUnsafe&lt;T&gt;, Action&lt;T&gt;, Action)</a><a class="nav-link" href="#memo&lt;T, R>">memo&lt;T, R&gt;(Func&lt;T, R&gt;)</a><a class="nav-link" href="#memo&lt;T>">memo&lt;T&gt;(Func&lt;T&gt;)</a><a class="nav-link" href="#memo&lt;T>">memo&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#memoUnsafe&lt;T, R>">memoUnsafe&lt;T, R&gt;(Func&lt;T, R&gt;)</a><a class="nav-link" href="#modify&lt;S>">modify&lt;S&gt;(Func&lt;S, S&gt;)</a><a class="nav-link" href="#notDefault&lt;T>">notDefault&lt;T&gt;(T)</a><a class="nav-link" href="#notnull&lt;T>">notnull&lt;T&gt;(T)</a><a class="nav-link" href="#Optional&lt;T>">Optional&lt;T&gt;(T)</a><a class="nav-link" href="#Optional&lt;T>">Optional&lt;T&gt;(Func&lt;Option&lt;T&gt;&gt;, bool)</a><a class="nav-link" href="#Optional&lt;T>">Optional&lt;T&gt;(T?)</a><a class="nav-link" href="#otherwise&lt;T, R>">otherwise&lt;T, R&gt;(Func&lt;T, R&gt;)</a><a class="nav-link" href="#par&lt;T1, T2, R>">par&lt;T1, T2, R&gt;(Func&lt;T1, T2, R&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3, R>">par&lt;T1, T2, T3, R&gt;(Func&lt;T1, T2, T3, R&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3, R>">par&lt;T1, T2, T3, R&gt;(Func&lt;T1, T2, T3, R&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, R>">par&lt;T1, T2, T3, T4, R&gt;(Func&lt;T1, T2, T3, T4, R&gt;, T1, T2, T3)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, R>">par&lt;T1, T2, T3, T4, R&gt;(Func&lt;T1, T2, T3, T4, R&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, R>">par&lt;T1, T2, T3, T4, R&gt;(Func&lt;T1, T2, T3, T4, R&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, R>">par&lt;T1, T2, T3, T4, T5, R&gt;(Func&lt;T1, T2, T3, T4, T5, R&gt;, T1, T2, T3, T4)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, R>">par&lt;T1, T2, T3, T4, T5, R&gt;(Func&lt;T1, T2, T3, T4, T5, R&gt;, T1, T2, T3)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, R>">par&lt;T1, T2, T3, T4, T5, R&gt;(Func&lt;T1, T2, T3, T4, T5, R&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, R>">par&lt;T1, T2, T3, T4, T5, R&gt;(Func&lt;T1, T2, T3, T4, T5, R&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, R>">par&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;, T1, T2, T3, T4, T5)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, R>">par&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;, T1, T2, T3, T4)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, R>">par&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;, T1, T2, T3)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, R>">par&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, R>">par&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;, T1, T2, T3, T4, T5, T6)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;, T1, T2, T3, T4, T5)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;, T1, T2, T3, T4)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;, T1, T2, T3)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;, T1, T2, T3)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;, T1, T2, T3, T4)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;, T1, T2, T3, T4, T5)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;, T1, T2, T3, T4, T5, T6)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;, T1, T2, T3, T4, T5, T6, T7)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1, T2, T3)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1, T2, T3, T4)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1, T2, T3, T4, T5)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1, T2, T3, T4, T5, T6)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1, T2, T3, T4, T5, T6, T7)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1, T2, T3, T4, T5, T6, T7, T8)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2, T3)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2, T3, T4)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2, T3, T4, T5)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2, T3, T4, T5, T6)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2, T3, T4, T5, T6, T7)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2, T3, T4, T5, T6, T7, T8)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2, T3, T4, T5, T6, T7, T8, T9)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2, T3)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2, T3, T4)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2, T3, T4, T5)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2, T3, T4, T5, T6)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2, T3, T4, T5, T6, T7)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2, T3, T4, T5, T6, T7, T8)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2, T3, T4, T5, T6, T7, T8, T9)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1, T2, T3)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1, T2, T3, T4)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1, T2, T3, T4, T5)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1, T2, T3, T4, T5, T6)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1, T2, T3, T4, T5, T6, T7)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1, T2, T3, T4, T5, T6, T7, T8)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;, T1, T2, T3)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;, T1, T2, T3, T4)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;, T1, T2, T3, T4, T5)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;, T1, T2, T3, T4, T5, T6)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7, T8>">par&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;, T1, T2, T3, T4, T5, T6, T7)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7>">par&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;, T1, T2, T3, T4, T5, T6)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7>">par&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;, T1, T2, T3, T4, T5)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7>">par&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;, T1, T2, T3, T4)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7>">par&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;, T1, T2, T3)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7>">par&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6, T7>">par&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6>">par&lt;T1, T2, T3, T4, T5, T6&gt;(Action&lt;T1, T2, T3, T4, T5, T6&gt;, T1, T2, T3, T4, T5)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6>">par&lt;T1, T2, T3, T4, T5, T6&gt;(Action&lt;T1, T2, T3, T4, T5, T6&gt;, T1, T2, T3, T4)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6>">par&lt;T1, T2, T3, T4, T5, T6&gt;(Action&lt;T1, T2, T3, T4, T5, T6&gt;, T1, T2, T3)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6>">par&lt;T1, T2, T3, T4, T5, T6&gt;(Action&lt;T1, T2, T3, T4, T5, T6&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5, T6>">par&lt;T1, T2, T3, T4, T5, T6&gt;(Action&lt;T1, T2, T3, T4, T5, T6&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5>">par&lt;T1, T2, T3, T4, T5&gt;(Action&lt;T1, T2, T3, T4, T5&gt;, T1, T2, T3, T4)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5>">par&lt;T1, T2, T3, T4, T5&gt;(Action&lt;T1, T2, T3, T4, T5&gt;, T1, T2, T3)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5>">par&lt;T1, T2, T3, T4, T5&gt;(Action&lt;T1, T2, T3, T4, T5&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4, T5>">par&lt;T1, T2, T3, T4, T5&gt;(Action&lt;T1, T2, T3, T4, T5&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4>">par&lt;T1, T2, T3, T4&gt;(Action&lt;T1, T2, T3, T4&gt;, T1, T2, T3)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4>">par&lt;T1, T2, T3, T4&gt;(Action&lt;T1, T2, T3, T4&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3, T4>">par&lt;T1, T2, T3, T4&gt;(Action&lt;T1, T2, T3, T4&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2, T3>">par&lt;T1, T2, T3&gt;(Action&lt;T1, T2, T3&gt;, T1, T2)</a><a class="nav-link" href="#par&lt;T1, T2, T3>">par&lt;T1, T2, T3&gt;(Action&lt;T1, T2, T3&gt;, T1)</a><a class="nav-link" href="#par&lt;T1, T2>">par&lt;T1, T2&gt;(Action&lt;T1, T2&gt;, T1)</a><a class="nav-link" href="#parmap&lt;L, T1, T2, R>">parmap&lt;L, T1, T2, R&gt;(Either&lt;L, T1&gt;, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#parmap&lt;L, T1, T2, R>">parmap&lt;L, T1, T2, R&gt;(EitherUnsafe&lt;L, T1&gt;, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#parmap&lt;L, T1, T2, T3, R>">parmap&lt;L, T1, T2, T3, R&gt;(Either&lt;L, T1&gt;, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#parmap&lt;L, T1, T2, T3, R>">parmap&lt;L, T1, T2, T3, R&gt;(EitherUnsafe&lt;L, T1&gt;, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#parmap&lt;T1, T2, R>">parmap&lt;T1, T2, R&gt;(Option&lt;T1&gt;, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#parmap&lt;T1, T2, R>">parmap&lt;T1, T2, R&gt;(OptionUnsafe&lt;T1&gt;, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#parmap&lt;T1, T2, R>">parmap&lt;T1, T2, R&gt;(Try&lt;T1&gt;, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#parmap&lt;T1, T2, R>">parmap&lt;T1, T2, R&gt;(TryAsync&lt;T1&gt;, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#parmap&lt;T1, T2, R>">parmap&lt;T1, T2, R&gt;(TryOption&lt;T1&gt;, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#parmap&lt;T1, T2, R>">parmap&lt;T1, T2, R&gt;(TryOptionAsync&lt;T1&gt;, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#parmap&lt;T1, T2, T3, R>">parmap&lt;T1, T2, T3, R&gt;(Option&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#parmap&lt;T1, T2, T3, R>">parmap&lt;T1, T2, T3, R&gt;(OptionUnsafe&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#parmap&lt;T1, T2, T3, R>">parmap&lt;T1, T2, T3, R&gt;(Try&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#parmap&lt;T1, T2, T3, R>">parmap&lt;T1, T2, T3, R&gt;(TryAsync&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#parmap&lt;T1, T2, T3, R>">parmap&lt;T1, T2, T3, R&gt;(TryOption&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#parmap&lt;T1, T2, T3, R>">parmap&lt;T1, T2, T3, R&gt;(TryOptionAsync&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#parseBool">parseBool(string)</a><a class="nav-link" href="#parseByte">parseByte(string)</a><a class="nav-link" href="#parseChar">parseChar(string)</a><a class="nav-link" href="#parseDateTime">parseDateTime(string)</a><a class="nav-link" href="#parseDecimal">parseDecimal(string)</a><a class="nav-link" href="#parseDouble">parseDouble(string)</a><a class="nav-link" href="#parseFloat">parseFloat(string)</a><a class="nav-link" href="#parseGuid">parseGuid(string)</a><a class="nav-link" href="#parseInt">parseInt(string)</a><a class="nav-link" href="#parseInt">parseInt(string, int)</a><a class="nav-link" href="#parseLong">parseLong(string)</a><a class="nav-link" href="#parseShort">parseShort(string)</a><a class="nav-link" href="#parseUInt">parseUInt(string)</a><a class="nav-link" href="#parseULong">parseULong(string)</a><a class="nav-link" href="#parseUShort">parseUShort(string)</a><a class="nav-link" href="#partition&lt;L, R>">partition&lt;L, R&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;)</a><a class="nav-link" href="#partition&lt;L, R>">partition&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;)</a><a class="nav-link" href="#pass&lt;MonoidW, W, A>">pass&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, ValueTuple&lt;A, Func&lt;W, W&gt;&gt;&gt;)</a><a class="nav-link" href="#plus&lt;NUM, L, R>">plus&lt;NUM, L, R&gt;(Either&lt;L, R&gt;, Either&lt;L, R&gt;)</a><a class="nav-link" href="#plus&lt;NUM, L, R>">plus&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#plus&lt;NUM, T>">plus&lt;NUM, T&gt;(T?, T?)</a><a class="nav-link" href="#product&lt;NUM, A>">product&lt;NUM, A&gt;(Tuple&lt;A&gt;)</a><a class="nav-link" href="#product&lt;NUM, A>">product&lt;NUM, A&gt;(Tuple&lt;A, A&gt;)</a><a class="nav-link" href="#product&lt;NUM, A>">product&lt;NUM, A&gt;(Tuple&lt;A, A, A&gt;)</a><a class="nav-link" href="#product&lt;NUM, A>">product&lt;NUM, A&gt;(Tuple&lt;A, A, A, A&gt;)</a><a class="nav-link" href="#product&lt;NUM, A>">product&lt;NUM, A&gt;(Tuple&lt;A, A, A, A, A&gt;)</a><a class="nav-link" href="#product&lt;NUM, A>">product&lt;NUM, A&gt;(Tuple&lt;A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#product&lt;NUM, A>">product&lt;NUM, A&gt;(Tuple&lt;A, A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#product&lt;NUM, A>">product&lt;NUM, A&gt;(ValueTuple&lt;A&gt;)</a><a class="nav-link" href="#product&lt;NUM, A>">product&lt;NUM, A&gt;(ValueTuple&lt;A, A&gt;)</a><a class="nav-link" href="#product&lt;NUM, A>">product&lt;NUM, A&gt;(ValueTuple&lt;A, A, A&gt;)</a><a class="nav-link" href="#product&lt;NUM, A>">product&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A&gt;)</a><a class="nav-link" href="#product&lt;NUM, A>">product&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A, A&gt;)</a><a class="nav-link" href="#product&lt;NUM, A>">product&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#product&lt;NUM, A>">product&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#product&lt;NUM, L, R>">product&lt;NUM, L, R&gt;(Either&lt;L, R&gt;, Either&lt;L, R&gt;)</a><a class="nav-link" href="#product&lt;NUM, L, R>">product&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#product&lt;NUM, T>">product&lt;NUM, T&gt;(T?, T?)</a><a class="nav-link" href="#product&lt;NUM, T>">product&lt;NUM, T&gt;(Option&lt;T&gt;, Option&lt;T&gt;)</a><a class="nav-link" href="#product&lt;NUM, T>">product&lt;NUM, T&gt;(OptionUnsafe&lt;T&gt;, OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#product&lt;NUM, T>">product&lt;NUM, T&gt;(Try&lt;T&gt;, Try&lt;T&gt;)</a><a class="nav-link" href="#product&lt;NUM, T>">product&lt;NUM, T&gt;(TryAsync&lt;T&gt;, TryAsync&lt;T&gt;)</a><a class="nav-link" href="#product&lt;NUM, T>">product&lt;NUM, T&gt;(TryOption&lt;T&gt;, TryOption&lt;T&gt;)</a><a class="nav-link" href="#product&lt;NUM, T>">product&lt;NUM, T&gt;(TryOptionAsync&lt;T&gt;, TryOptionAsync&lt;T&gt;)</a><a class="nav-link" href="#product&lt;NUMTYPE, NUM, A, PRED>">product&lt;NUMTYPE, NUM, A, PRED&gt;(NumType&lt;NUMTYPE, NUM, A, PRED&gt;, NUMTYPE)</a><a class="nav-link" href="#product&lt;NUMTYPE, NUM, A>">product&lt;NUMTYPE, NUM, A&gt;(NumType&lt;NUMTYPE, NUM, A&gt;, NUMTYPE)</a><a class="nav-link" href="#product&lt;SELF, FLOAT, A, PRED>">product&lt;SELF, FLOAT, A, PRED&gt;(FloatType&lt;SELF, FLOAT, A, PRED&gt;, SELF)</a><a class="nav-link" href="#product&lt;SELF, FLOAT, A>">product&lt;SELF, FLOAT, A&gt;(FloatType&lt;SELF, FLOAT, A&gt;, SELF)</a><a class="nav-link" href="#put&lt;S>">put&lt;S&gt;(S)</a><a class="nav-link" href="#quadFold&lt;A, B, C, D, S>">quadFold&lt;A, B, C, D, S&gt;(Tuple&lt;A, B, C, D&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;)</a><a class="nav-link" href="#quadFold&lt;A, B, C, D, S>">quadFold&lt;A, B, C, D, S&gt;(ValueTuple&lt;A, B, C, D&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;)</a><a class="nav-link" href="#quadFoldBack&lt;A, B, C, D, S>">quadFoldBack&lt;A, B, C, D, S&gt;(Tuple&lt;A, B, C, D&gt;, S, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#quadFoldBack&lt;A, B, C, D, S>">quadFoldBack&lt;A, B, C, D, S&gt;(ValueTuple&lt;A, B, C, D&gt;, S, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#query&lt;T>">query&lt;T&gt;(T)</a><a class="nav-link" href="#Query&lt;T>">Query&lt;T&gt;(T)</a><a class="nav-link" href="#Queue&lt;T>">Queue&lt;T&gt;()</a><a class="nav-link" href="#Queue&lt;T>">Queue&lt;T&gt;(T)</a><a class="nav-link" href="#quintFold&lt;A, B, C, D, E, S>">quintFold&lt;A, B, C, D, E, S&gt;(Tuple&lt;A, B, C, D, E&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, E, S&gt;)</a><a class="nav-link" href="#quintFold&lt;A, B, C, D, E, S>">quintFold&lt;A, B, C, D, E, S&gt;(ValueTuple&lt;A, B, C, D, E&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, E, S&gt;)</a><a class="nav-link" href="#quintFoldBack&lt;A, B, C, D, E, S>">quintFoldBack&lt;A, B, C, D, E, S&gt;(Tuple&lt;A, B, C, D, E&gt;, S, Func&lt;S, E, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#quintFoldBack&lt;A, B, C, D, E, S>">quintFoldBack&lt;A, B, C, D, E, S&gt;(ValueTuple&lt;A, B, C, D, E&gt;, S, Func&lt;S, E, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#raise&lt;R>">raise&lt;R&gt;(Exception)</a><a class="nav-link" href="#raiseapp&lt;R>">raiseapp&lt;R&gt;(string)</a><a class="nav-link" href="#random">random(int)</a><a class="nav-link" href="#randomBase64">randomBase64(int)</a><a class="nav-link" href="#Range">Range(int, int, int)</a><a class="nav-link" href="#Range">Range(char, char)</a><a class="nav-link" href="#Range">Range(IEnumerable&lt;int&gt;)</a><a class="nav-link" href="#Range">Range(IEnumerable&lt;char&gt;)</a><a class="nav-link" href="#Reader&lt;Env, A>">Reader&lt;Env, A&gt;(A)</a><a class="nav-link" href="#Reader&lt;Env, A>">Reader&lt;Env, A&gt;(Func&lt;Env, A&gt;)</a><a class="nav-link" href="#Right&lt;L, R>">Right&lt;L, R&gt;(R)</a><a class="nav-link" href="#Right&lt;L, R>">Right&lt;L, R&gt;(R?)</a><a class="nav-link" href="#rights&lt;L, R>">rights&lt;L, R&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;)</a><a class="nav-link" href="#rights&lt;L, R>">rights&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;)</a><a class="nav-link" href="#rightToArray&lt;L, R>">rightToArray&lt;L, R&gt;(Either&lt;L, R&gt;)</a><a class="nav-link" href="#rightToArray&lt;L, R>">rightToArray&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#rightToList&lt;L, R>">rightToList&lt;L, R&gt;(Either&lt;L, R&gt;)</a><a class="nav-link" href="#rightToList&lt;L, R>">rightToList&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#rightToQuery&lt;L, R>">rightToQuery&lt;L, R&gt;(Either&lt;L, R&gt;)</a><a class="nav-link" href="#rightToQuery&lt;L, R>">rightToQuery&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#RightUnsafe&lt;L, R>">RightUnsafe&lt;L, R&gt;(R)</a><a class="nav-link" href="#septFold&lt;A, B, C, D, E, F, G, S>">septFold&lt;A, B, C, D, E, F, G, S&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, F, S&gt;, Func&lt;S, G, S&gt;)</a><a class="nav-link" href="#septFold&lt;A, B, C, D, E, F, G, S>">septFold&lt;A, B, C, D, E, F, G, S&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, F, S&gt;, Func&lt;S, G, S&gt;)</a><a class="nav-link" href="#septFoldBack&lt;A, B, C, D, E, F, G, S>">septFoldBack&lt;A, B, C, D, E, F, G, S&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, S, Func&lt;S, G, S&gt;, Func&lt;S, F, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#septFoldBack&lt;A, B, C, D, E, F, G, S>">septFoldBack&lt;A, B, C, D, E, F, G, S&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, S, Func&lt;S, G, S&gt;, Func&lt;S, F, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#seq&lt;L, T>">seq&lt;L, T&gt;(Either&lt;L, T&gt;)</a><a class="nav-link" href="#seq&lt;L, T>">seq&lt;L, T&gt;(EitherUnsafe&lt;L, T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(T?)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(Option&lt;T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(Try&lt;T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(TryAsync&lt;T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(TryOptionAsync&lt;T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(Tuple&lt;T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(Tuple&lt;T, T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(Tuple&lt;T, T, T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(Tuple&lt;T, T, T, T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(Tuple&lt;T, T, T, T, T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(Tuple&lt;T, T, T, T, T, T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(Tuple&lt;T, T, T, T, T, T, T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(ValueTuple&lt;T, T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(ValueTuple&lt;T, T, T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(ValueTuple&lt;T, T, T, T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(ValueTuple&lt;T, T, T, T, T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(ValueTuple&lt;T, T, T, T, T, T&gt;)</a><a class="nav-link" href="#seq&lt;T>">seq&lt;T&gt;(ValueTuple&lt;T, T, T, T, T, T, T&gt;)</a><a class="nav-link" href="#seqOne&lt;T>">seqOne&lt;T&gt;(T)</a><a class="nav-link" href="#Set&lt;OrdT, T>">Set&lt;OrdT, T&gt;()</a><a class="nav-link" href="#Set&lt;OrdT, T>">Set&lt;OrdT, T&gt;(T, T)</a><a class="nav-link" href="#set&lt;T>">set&lt;T&gt;()</a><a class="nav-link" href="#set&lt;T>">set&lt;T&gt;(T)</a><a class="nav-link" href="#set&lt;T>">set&lt;T&gt;(T)</a><a class="nav-link" href="#Set&lt;T>">Set&lt;T&gt;()</a><a class="nav-link" href="#Set&lt;T>">Set&lt;T&gt;(T, T)</a><a class="nav-link" href="#sextFold&lt;A, B, C, D, E, F, S>">sextFold&lt;A, B, C, D, E, F, S&gt;(Tuple&lt;A, B, C, D, E, F&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, F, S&gt;)</a><a class="nav-link" href="#sextFold&lt;A, B, C, D, E, F, S>">sextFold&lt;A, B, C, D, E, F, S&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, F, S&gt;)</a><a class="nav-link" href="#sextFoldBack&lt;A, B, C, D, E, F, S>">sextFoldBack&lt;A, B, C, D, E, F, S&gt;(Tuple&lt;A, B, C, D, E, F&gt;, S, Func&lt;S, F, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#sextFoldBack&lt;A, B, C, D, E, F, S>">sextFoldBack&lt;A, B, C, D, E, F, S&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, S, Func&lt;S, F, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#Some&lt;T>">Some&lt;T&gt;(T)</a><a class="nav-link" href="#Some&lt;T>">Some&lt;T&gt;(T?)</a><a class="nav-link" href="#somes&lt;T>">somes&lt;T&gt;(IEnumerable&lt;T?&gt;)</a><a class="nav-link" href="#somes&lt;T>">somes&lt;T&gt;(IEnumerable&lt;Option&lt;T&gt;&gt;)</a><a class="nav-link" href="#somes&lt;T>">somes&lt;T&gt;(IEnumerable&lt;OptionUnsafe&lt;T&gt;&gt;)</a><a class="nav-link" href="#SomeUnsafe&lt;T>">SomeUnsafe&lt;T&gt;(T)</a><a class="nav-link" href="#stack&lt;T>">stack&lt;T&gt;()</a><a class="nav-link" href="#Stack&lt;T>">Stack&lt;T&gt;()</a><a class="nav-link" href="#Stack&lt;T>">Stack&lt;T&gt;(T)</a><a class="nav-link" href="#State&lt;S, A>">State&lt;S, A&gt;(A)</a><a class="nav-link" href="#State&lt;S, A>">State&lt;S, A&gt;(Func&lt;S, ValueTuple&lt;A, S&gt;&gt;)</a><a class="nav-link" href="#Subj&lt;A>">Subj&lt;A&gt;()</a><a class="nav-link" href="#subtract&lt;NUM, L, R>">subtract&lt;NUM, L, R&gt;(Either&lt;L, R&gt;, Either&lt;L, R&gt;)</a><a class="nav-link" href="#subtract&lt;NUM, L, R>">subtract&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#subtract&lt;NUM, T>">subtract&lt;NUM, T&gt;(T?, T?)</a><a class="nav-link" href="#subtract&lt;NUM, T>">subtract&lt;NUM, T&gt;(Option&lt;T&gt;, Option&lt;T&gt;)</a><a class="nav-link" href="#subtract&lt;NUM, T>">subtract&lt;NUM, T&gt;(OptionUnsafe&lt;T&gt;, OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#subtract&lt;NUM, T>">subtract&lt;NUM, T&gt;(Try&lt;T&gt;, Try&lt;T&gt;)</a><a class="nav-link" href="#subtract&lt;NUM, T>">subtract&lt;NUM, T&gt;(TryAsync&lt;T&gt;, TryAsync&lt;T&gt;)</a><a class="nav-link" href="#subtract&lt;NUM, T>">subtract&lt;NUM, T&gt;(TryOption&lt;T&gt;, TryOption&lt;T&gt;)</a><a class="nav-link" href="#subtract&lt;NUM, T>">subtract&lt;NUM, T&gt;(TryOptionAsync&lt;T&gt;, TryOptionAsync&lt;T&gt;)</a><a class="nav-link" href="#subtract&lt;NUMTYPE, NUM, A, PRED>">subtract&lt;NUMTYPE, NUM, A, PRED&gt;(NumType&lt;NUMTYPE, NUM, A, PRED&gt;, NUMTYPE)</a><a class="nav-link" href="#subtract&lt;NUMTYPE, NUM, A>">subtract&lt;NUMTYPE, NUM, A&gt;(NumType&lt;NUMTYPE, NUM, A&gt;, NUMTYPE)</a><a class="nav-link" href="#subtract&lt;SELF, FLOAT, A, PRED>">subtract&lt;SELF, FLOAT, A, PRED&gt;(FloatType&lt;SELF, FLOAT, A, PRED&gt;, SELF)</a><a class="nav-link" href="#subtract&lt;SELF, FLOAT, A>">subtract&lt;SELF, FLOAT, A&gt;(FloatType&lt;SELF, FLOAT, A&gt;, SELF)</a><a class="nav-link" href="#sum">sum(int?)</a><a class="nav-link" href="#sum">sum(Task&lt;int&gt;)</a><a class="nav-link" href="#sum&lt;MonoidW, W>">sum&lt;MonoidW, W&gt;(Writer&lt;MonoidW, W, int&gt;)</a><a class="nav-link" href="#sum&lt;NUM, A>">sum&lt;NUM, A&gt;(Tuple&lt;A&gt;)</a><a class="nav-link" href="#sum&lt;NUM, A>">sum&lt;NUM, A&gt;(Tuple&lt;A, A&gt;)</a><a class="nav-link" href="#sum&lt;NUM, A>">sum&lt;NUM, A&gt;(Tuple&lt;A, A, A&gt;)</a><a class="nav-link" href="#sum&lt;NUM, A>">sum&lt;NUM, A&gt;(Tuple&lt;A, A, A, A&gt;)</a><a class="nav-link" href="#sum&lt;NUM, A>">sum&lt;NUM, A&gt;(Tuple&lt;A, A, A, A, A&gt;)</a><a class="nav-link" href="#sum&lt;NUM, A>">sum&lt;NUM, A&gt;(Tuple&lt;A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#sum&lt;NUM, A>">sum&lt;NUM, A&gt;(Tuple&lt;A, A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#sum&lt;NUM, A>">sum&lt;NUM, A&gt;(ValueTuple&lt;A&gt;)</a><a class="nav-link" href="#sum&lt;NUM, A>">sum&lt;NUM, A&gt;(ValueTuple&lt;A, A&gt;)</a><a class="nav-link" href="#sum&lt;NUM, A>">sum&lt;NUM, A&gt;(ValueTuple&lt;A, A, A&gt;)</a><a class="nav-link" href="#sum&lt;NUM, A>">sum&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A&gt;)</a><a class="nav-link" href="#sum&lt;NUM, A>">sum&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A, A&gt;)</a><a class="nav-link" href="#sum&lt;NUM, A>">sum&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#sum&lt;NUM, A>">sum&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A, A, A, A&gt;)</a><a class="nav-link" href="#sum&lt;NUMTYPE, NUM, A, PRED>">sum&lt;NUMTYPE, NUM, A, PRED&gt;(NumType&lt;NUMTYPE, NUM, A, PRED&gt;)</a><a class="nav-link" href="#sum&lt;NUMTYPE, NUM, A>">sum&lt;NUMTYPE, NUM, A&gt;(NumType&lt;NUMTYPE, NUM, A&gt;)</a><a class="nav-link" href="#sum&lt;SELF, FLOAT, A, PRED>">sum&lt;SELF, FLOAT, A, PRED&gt;(FloatType&lt;SELF, FLOAT, A, PRED&gt;)</a><a class="nav-link" href="#tail&lt;A, B, C, D, E, F, G>">tail&lt;A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;)</a><a class="nav-link" href="#tail&lt;A, B, C, D, E, F, G>">tail&lt;A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;)</a><a class="nav-link" href="#tail&lt;A, B, C, D, E, F>">tail&lt;A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E, F&gt;)</a><a class="nav-link" href="#tail&lt;A, B, C, D, E, F>">tail&lt;A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;)</a><a class="nav-link" href="#tail&lt;A, B, C, D, E>">tail&lt;A, B, C, D, E&gt;(Tuple&lt;A, B, C, D, E&gt;)</a><a class="nav-link" href="#tail&lt;A, B, C, D, E>">tail&lt;A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D, E&gt;)</a><a class="nav-link" href="#tail&lt;A, B, C, D>">tail&lt;A, B, C, D&gt;(Tuple&lt;A, B, C, D&gt;)</a><a class="nav-link" href="#tail&lt;A, B, C, D>">tail&lt;A, B, C, D&gt;(ValueTuple&lt;A, B, C, D&gt;)</a><a class="nav-link" href="#tail&lt;T1, T2, T3>">tail&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2, T3&gt;)</a><a class="nav-link" href="#tail&lt;T1, T2, T3>">tail&lt;T1, T2, T3&gt;(ValueTuple&lt;T1, T2, T3&gt;)</a><a class="nav-link" href="#tail&lt;T1, T2>">tail&lt;T1, T2&gt;(Tuple&lt;T1, T2&gt;)</a><a class="nav-link" href="#tail&lt;T1, T2>">tail&lt;T1, T2&gt;(ValueTuple&lt;T1, T2&gt;)</a><a class="nav-link" href="#tell&lt;MonoidW, W>">tell&lt;MonoidW, W&gt;(W)</a><a class="nav-link" href="#toArray&lt;L, R>">toArray&lt;L, R&gt;(Either&lt;L, R&gt;)</a><a class="nav-link" href="#toArray&lt;T>">toArray&lt;T&gt;(Option&lt;T&gt;)</a><a class="nav-link" href="#toArray&lt;T>">toArray&lt;T&gt;(OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#toArray&lt;T>">toArray&lt;T&gt;(Try&lt;T&gt;)</a><a class="nav-link" href="#toArray&lt;T>">toArray&lt;T&gt;(TryAsync&lt;T&gt;)</a><a class="nav-link" href="#toArray&lt;T>">toArray&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#toArray&lt;T>">toArray&lt;T&gt;(TryOptionAsync&lt;T&gt;)</a><a class="nav-link" href="#toArray&lt;T>">toArray&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#toEither&lt;L, T>">toEither&lt;L, T&gt;(T?, L)</a><a class="nav-link" href="#toEither&lt;L, T>">toEither&lt;L, T&gt;(T?, Func&lt;L&gt;)</a><a class="nav-link" href="#toEitherUnsafe&lt;L, T>">toEitherUnsafe&lt;L, T&gt;(T?, L)</a><a class="nav-link" href="#toEitherUnsafe&lt;L, T>">toEitherUnsafe&lt;L, T&gt;(T?, Func&lt;L&gt;)</a><a class="nav-link" href="#toHashMap&lt;EqK, K, V>">toHashMap&lt;EqK, K, V&gt;(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#toHashMap&lt;EqK, K, V>">toHashMap&lt;EqK, K, V&gt;(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#toHashMap&lt;EqK, K, V>">toHashMap&lt;EqK, K, V&gt;(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#toHashMap&lt;K, V>">toHashMap&lt;K, V&gt;(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#toHashMap&lt;K, V>">toHashMap&lt;K, V&gt;(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#toHashMap&lt;K, V>">toHashMap&lt;K, V&gt;(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#toHashSet&lt;EqT, T>">toHashSet&lt;EqT, T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#toHashSet&lt;T>">toHashSet&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#toList&lt;L, R>">toList&lt;L, R&gt;(Either&lt;L, R&gt;)</a><a class="nav-link" href="#toList&lt;T>">toList&lt;T&gt;(Option&lt;T&gt;)</a><a class="nav-link" href="#toList&lt;T>">toList&lt;T&gt;(OptionUnsafe&lt;T&gt;)</a><a class="nav-link" href="#toList&lt;T>">toList&lt;T&gt;(Try&lt;T&gt;)</a><a class="nav-link" href="#toList&lt;T>">toList&lt;T&gt;(TryAsync&lt;T&gt;)</a><a class="nav-link" href="#toList&lt;T>">toList&lt;T&gt;(TryOption&lt;T&gt;)</a><a class="nav-link" href="#toList&lt;T>">toList&lt;T&gt;(TryOptionAsync&lt;T&gt;)</a><a class="nav-link" href="#toList&lt;T>">toList&lt;T&gt;(Arr&lt;T&gt;)</a><a class="nav-link" href="#toList&lt;T>">toList&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#toMap&lt;K, V>">toMap&lt;K, V&gt;(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#toMap&lt;K, V>">toMap&lt;K, V&gt;(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#toMap&lt;K, V>">toMap&lt;K, V&gt;(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#toMap&lt;OrdK, K, V>">toMap&lt;OrdK, K, V&gt;(KeyValuePair&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)</a><a class="nav-link" href="#toMap&lt;OrdK, K, V>">toMap&lt;OrdK, K, V&gt;(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#toMap&lt;OrdK, K, V>">toMap&lt;OrdK, K, V&gt;(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#toMap&lt;OrdK, K, V>">toMap&lt;OrdK, K, V&gt;(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#toOption&lt;T>">toOption&lt;T&gt;(T?)</a><a class="nav-link" href="#toQuery&lt;L, R>">toQuery&lt;L, R&gt;(Either&lt;L, R&gt;)</a><a class="nav-link" href="#toQuery&lt;L, R>">toQuery&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#toQuery&lt;T>">toQuery&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#toQueue&lt;T>">toQueue&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#toSet&lt;OrdT, T>">toSet&lt;OrdT, T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#toSet&lt;T>">toSet&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#toStack&lt;T>">toStack&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#toString&lt;T>">toString&lt;T&gt;(T)</a><a class="nav-link" href="#toTryOption&lt;L, T>">toTryOption&lt;L, T&gt;(T?, L)</a><a class="nav-link" href="#tribind&lt;T, R>">tribind&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, TryOption&lt;R&gt;&gt;, Func&lt;TryOption&lt;R&gt;&gt;, Func&lt;Exception, TryOption&lt;R&gt;&gt;)</a><a class="nav-link" href="#trifold&lt;S, T>">trifold&lt;S, T&gt;(TryOption&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#trifold&lt;T1, T2, T3, S>">trifold&lt;T1, T2, T3, S&gt;(Tuple&lt;T1, T2, T3&gt;, S, Func&lt;S, T1, S&gt;, Func&lt;S, T2, S&gt;, Func&lt;S, T3, S&gt;)</a><a class="nav-link" href="#trifold&lt;T1, T2, T3, S>">trifold&lt;T1, T2, T3, S&gt;(ValueTuple&lt;T1, T2, T3&gt;, S, Func&lt;S, T1, S&gt;, Func&lt;S, T2, S&gt;, Func&lt;S, T3, S&gt;)</a><a class="nav-link" href="#trifoldBack&lt;T1, T2, T3, S>">trifoldBack&lt;T1, T2, T3, S&gt;(Tuple&lt;T1, T2, T3&gt;, S, Func&lt;S, T3, S&gt;, Func&lt;S, T2, S&gt;, Func&lt;S, T1, S&gt;)</a><a class="nav-link" href="#trifoldBack&lt;T1, T2, T3, S>">trifoldBack&lt;T1, T2, T3, S&gt;(ValueTuple&lt;T1, T2, T3&gt;, S, Func&lt;S, T3, S&gt;, Func&lt;S, T2, S&gt;, Func&lt;S, T1, S&gt;)</a><a class="nav-link" href="#trimap&lt;T, R>">trimap&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#trimap&lt;T1, T2, T3, R1, R2, R3>">trimap&lt;T1, T2, T3, R1, R2, R3&gt;(Tuple&lt;T1, T2, T3&gt;, Func&lt;T1, R1&gt;, Func&lt;T2, R2&gt;, Func&lt;T3, R3&gt;)</a><a class="nav-link" href="#trimap&lt;T1, T2, T3, R1, R2, R3>">trimap&lt;T1, T2, T3, R1, R2, R3&gt;(ValueTuple&lt;T1, T2, T3&gt;, Func&lt;T1, R1&gt;, Func&lt;T2, R2&gt;, Func&lt;T3, R3&gt;)</a><a class="nav-link" href="#Try&lt;A>">Try&lt;A&gt;(Func&lt;A&gt;)</a><a class="nav-link" href="#Try&lt;A>">Try&lt;A&gt;(A)</a><a class="nav-link" href="#Try&lt;A>">Try&lt;A&gt;(Exception)</a><a class="nav-link" href="#TryAsync&lt;A>">TryAsync&lt;A&gt;(Func&lt;A&gt;)</a><a class="nav-link" href="#TryAsync&lt;A>">TryAsync&lt;A&gt;(A)</a><a class="nav-link" href="#TryAsync&lt;A>">TryAsync&lt;A&gt;(Exception)</a><a class="nav-link" href="#tryfun&lt;Env, A>">tryfun&lt;Env, A&gt;(Reader&lt;Env, A&gt;)</a><a class="nav-link" href="#tryfun&lt;MonoidW, W, A>">tryfun&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;)</a><a class="nav-link" href="#tryfun&lt;S, A>">tryfun&lt;S, A&gt;(State&lt;S, A&gt;)</a><a class="nav-link" href="#tryfun&lt;T>">tryfun&lt;T&gt;(Func&lt;Try&lt;T&gt;&gt;)</a><a class="nav-link" href="#tryfun&lt;T>">tryfun&lt;T&gt;(Func&lt;TryAsync&lt;T&gt;&gt;)</a><a class="nav-link" href="#tryfun&lt;T>">tryfun&lt;T&gt;(Func&lt;TryOption&lt;T&gt;&gt;)</a><a class="nav-link" href="#tryfun&lt;T>">tryfun&lt;T&gt;(Func&lt;TryOptionAsync&lt;T&gt;&gt;)</a><a class="nav-link" href="#TryOption&lt;T>">TryOption&lt;T&gt;(Func&lt;Option&lt;T&gt;&gt;)</a><a class="nav-link" href="#TryOption&lt;T>">TryOption&lt;T&gt;(Func&lt;T&gt;)</a><a class="nav-link" href="#TryOption&lt;T>">TryOption&lt;T&gt;(T)</a><a class="nav-link" href="#TryOption&lt;T>">TryOption&lt;T&gt;(Option&lt;T&gt;)</a><a class="nav-link" href="#TryOption&lt;T>">TryOption&lt;T&gt;(Exception)</a><a class="nav-link" href="#TryOptionAsync&lt;A>">TryOptionAsync&lt;A&gt;(Func&lt;A&gt;)</a><a class="nav-link" href="#TryOptionAsync&lt;A>">TryOptionAsync&lt;A&gt;(Func&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#TryOptionAsync&lt;A>">TryOptionAsync&lt;A&gt;(A)</a><a class="nav-link" href="#TryOptionAsync&lt;A>">TryOptionAsync&lt;A&gt;(Option&lt;A&gt;)</a><a class="nav-link" href="#TryOptionAsync&lt;A>">TryOptionAsync&lt;A&gt;(Exception)</a><a class="nav-link" href="#tryread&lt;Env, A>">tryread&lt;Env, A&gt;(Reader&lt;Env, A&gt;)</a><a class="nav-link" href="#trystate&lt;S, A>">trystate&lt;S, A&gt;(State&lt;S, A&gt;)</a><a class="nav-link" href="#tryuse&lt;T, R>">tryuse&lt;T, R&gt;(Func&lt;T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#tryuse&lt;T, R>">tryuse&lt;T, R&gt;(T, Func&lt;T, R&gt;)</a><a class="nav-link" href="#trywrite&lt;MonoidW, W, A>">trywrite&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;)</a><a class="nav-link" href="#tuple&lt;T1, T2, T3, T4, T5, T6, T7>">tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;(T1, T2, T3, T4, T5, T6, T7)</a><a class="nav-link" href="#Tuple&lt;T1, T2, T3, T4, T5, T6, T7>">Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;(T1, T2, T3, T4, T5, T6, T7)</a><a class="nav-link" href="#tuple&lt;T1, T2, T3, T4, T5, T6>">tuple&lt;T1, T2, T3, T4, T5, T6&gt;(T1, T2, T3, T4, T5, T6)</a><a class="nav-link" href="#Tuple&lt;T1, T2, T3, T4, T5, T6>">Tuple&lt;T1, T2, T3, T4, T5, T6&gt;(T1, T2, T3, T4, T5, T6)</a><a class="nav-link" href="#tuple&lt;T1, T2, T3, T4, T5>">tuple&lt;T1, T2, T3, T4, T5&gt;(T1, T2, T3, T4, T5)</a><a class="nav-link" href="#Tuple&lt;T1, T2, T3, T4, T5>">Tuple&lt;T1, T2, T3, T4, T5&gt;(T1, T2, T3, T4, T5)</a><a class="nav-link" href="#tuple&lt;T1, T2, T3, T4>">tuple&lt;T1, T2, T3, T4&gt;(T1, T2, T3, T4)</a><a class="nav-link" href="#Tuple&lt;T1, T2, T3, T4>">Tuple&lt;T1, T2, T3, T4&gt;(T1, T2, T3, T4)</a><a class="nav-link" href="#tuple&lt;T1, T2, T3>">tuple&lt;T1, T2, T3&gt;(T1, T2, T3)</a><a class="nav-link" href="#Tuple&lt;T1, T2, T3>">Tuple&lt;T1, T2, T3&gt;(T1, T2, T3)</a><a class="nav-link" href="#tuple&lt;T1, T2>">tuple&lt;T1, T2&gt;(T1, T2)</a><a class="nav-link" href="#Tuple&lt;T1, T2>">Tuple&lt;T1, T2&gt;(T1, T2)</a><a class="nav-link" href="#Tuple&lt;T1>">Tuple&lt;T1&gt;(T1)</a><a class="nav-link" href="#uncurry&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult>">uncurry&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, Func&lt;T8, TResult&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#Uncurry&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult>">Uncurry&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, Func&lt;T8, TResult&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#uncurry&lt;T1, T2, T3, T4, T5, T6, T7, TResult>">uncurry&lt;T1, T2, T3, T4, T5, T6, T7, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, TResult&gt;&gt;&gt;&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#Uncurry&lt;T1, T2, T3, T4, T5, T6, T7, TResult>">Uncurry&lt;T1, T2, T3, T4, T5, T6, T7, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, TResult&gt;&gt;&gt;&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#uncurry&lt;T1, T2, T3, T4, T5, T6, TResult>">uncurry&lt;T1, T2, T3, T4, T5, T6, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, TResult&gt;&gt;&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#Uncurry&lt;T1, T2, T3, T4, T5, T6, TResult>">Uncurry&lt;T1, T2, T3, T4, T5, T6, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, TResult&gt;&gt;&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#uncurry&lt;T1, T2, T3, T4, T5, TResult>">uncurry&lt;T1, T2, T3, T4, T5, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, TResult&gt;&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#Uncurry&lt;T1, T2, T3, T4, T5, TResult>">Uncurry&lt;T1, T2, T3, T4, T5, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, TResult&gt;&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#uncurry&lt;T1, T2, T3, T4, TResult>">uncurry&lt;T1, T2, T3, T4, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, TResult&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#Uncurry&lt;T1, T2, T3, T4, TResult>">Uncurry&lt;T1, T2, T3, T4, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, TResult&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#uncurry&lt;T1, T2, T3, TResult>">uncurry&lt;T1, T2, T3, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, TResult&gt;&gt;&gt;)</a><a class="nav-link" href="#Uncurry&lt;T1, T2, T3, TResult>">Uncurry&lt;T1, T2, T3, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, TResult&gt;&gt;&gt;)</a><a class="nav-link" href="#uncurry&lt;T1, T2, TResult>">uncurry&lt;T1, T2, TResult&gt;(Func&lt;T1, Func&lt;T2, TResult&gt;&gt;)</a><a class="nav-link" href="#Uncurry&lt;T1, T2, TResult>">Uncurry&lt;T1, T2, TResult&gt;(Func&lt;T1, Func&lt;T2, TResult&gt;&gt;)</a><a class="nav-link" href="#use&lt;T, R>">use&lt;T, R&gt;(Func&lt;T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#use&lt;T, R>">use&lt;T, R&gt;(T, Func&lt;T, R&gt;)</a><a class="nav-link" href="#use&lt;T, U>">use&lt;T, U&gt;(Try&lt;T&gt;, Func&lt;T, U&gt;)</a><a class="nav-link" href="#use&lt;T, U>">use&lt;T, U&gt;(Try&lt;T&gt;, Func&lt;T, Try&lt;U&gt;&gt;)</a><a class="nav-link" href="#use&lt;T, U>">use&lt;T, U&gt;(Task&lt;T&gt;, Func&lt;T, U&gt;)</a><a class="nav-link" href="#use&lt;T, U>">use&lt;T, U&gt;(Task&lt;T&gt;, Func&lt;T, Task&lt;U&gt;&gt;)</a><a class="nav-link" href="#VTuple">VTuple()</a><a class="nav-link" href="#VTuple&lt;T1, T2, T3, T4, T5, T6, T7>">VTuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;(T1, T2, T3, T4, T5, T6, T7)</a><a class="nav-link" href="#VTuple&lt;T1, T2, T3, T4, T5, T6>">VTuple&lt;T1, T2, T3, T4, T5, T6&gt;(T1, T2, T3, T4, T5, T6)</a><a class="nav-link" href="#VTuple&lt;T1, T2, T3, T4, T5>">VTuple&lt;T1, T2, T3, T4, T5&gt;(T1, T2, T3, T4, T5)</a><a class="nav-link" href="#VTuple&lt;T1, T2, T3, T4>">VTuple&lt;T1, T2, T3, T4&gt;(T1, T2, T3, T4)</a><a class="nav-link" href="#VTuple&lt;T1, T2, T3>">VTuple&lt;T1, T2, T3&gt;(T1, T2, T3)</a><a class="nav-link" href="#VTuple&lt;T1, T2>">VTuple&lt;T1, T2&gt;(T1, T2)</a><a class="nav-link" href="#VTuple&lt;T1>">VTuple&lt;T1&gt;(T1)</a><a class="nav-link" href="#with&lt;T, R>">with&lt;T, R&gt;(T, Func&lt;T, R&gt;)</a><a class="nav-link" href="#with&lt;T, R>">with&lt;T, R&gt;(Func&lt;T, R&gt;)</a><a class="nav-link" href="#with&lt;T1, T2, R>">with&lt;T1, T2, R&gt;(Tuple&lt;T1, T2&gt;, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#with&lt;T1, T2, R>">with&lt;T1, T2, R&gt;(T1, T2, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#With&lt;T1, T2, R>">With&lt;T1, T2, R&gt;(Tuple&lt;T1, T2&gt;, Func&lt;T1, T2, R&gt;)</a><a class="nav-link" href="#with&lt;T1, T2, T3, R>">with&lt;T1, T2, T3, R&gt;(Tuple&lt;T1, T2, T3&gt;, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#with&lt;T1, T2, T3, R>">with&lt;T1, T2, T3, R&gt;(T1, T2, T3, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#With&lt;T1, T2, T3, R>">With&lt;T1, T2, T3, R&gt;(Tuple&lt;T1, T2, T3&gt;, Func&lt;T1, T2, T3, R&gt;)</a><a class="nav-link" href="#with&lt;T1, T2, T3, T4, R>">with&lt;T1, T2, T3, T4, R&gt;(Tuple&lt;T1, T2, T3, T4&gt;, Func&lt;T1, T2, T3, T4, R&gt;)</a><a class="nav-link" href="#With&lt;T1, T2, T3, T4, R>">With&lt;T1, T2, T3, T4, R&gt;(Tuple&lt;T1, T2, T3, T4&gt;, Func&lt;T1, T2, T3, T4, R&gt;)</a><a class="nav-link" href="#with&lt;T1, T2, T3, T4, T5, R>">with&lt;T1, T2, T3, T4, T5, R&gt;(Tuple&lt;T1, T2, T3, T4, T5&gt;, Func&lt;T1, T2, T3, T4, T5, R&gt;)</a><a class="nav-link" href="#With&lt;T1, T2, T3, T4, T5, R>">With&lt;T1, T2, T3, T4, T5, R&gt;(Tuple&lt;T1, T2, T3, T4, T5&gt;, Func&lt;T1, T2, T3, T4, T5, R&gt;)</a><a class="nav-link" href="#with&lt;T1, T2, T3, T4, T5, T6, R>">with&lt;T1, T2, T3, T4, T5, T6, R&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6&gt;, Func&lt;T1, T2, T3, T4, T5, T6, R&gt;)</a><a class="nav-link" href="#With&lt;T1, T2, T3, T4, T5, T6, R>">With&lt;T1, T2, T3, T4, T5, T6, R&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6&gt;, Func&lt;T1, T2, T3, T4, T5, T6, R&gt;)</a><a class="nav-link" href="#with&lt;T1, T2, T3, T4, T5, T6, T7, R>">with&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;, Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;)</a><a class="nav-link" href="#With&lt;T1, T2, T3, T4, T5, T6, T7, R>">With&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;, Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;)</a><a class="nav-link" href="#with&lt;T1, T2, T3, T4, T5, T6, T7>">with&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;, Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;)</a><a class="nav-link" href="#With&lt;T1, T2, T3, T4, T5, T6, T7>">With&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;, Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;)</a><a class="nav-link" href="#with&lt;T1, T2, T3, T4, T5, T6>">with&lt;T1, T2, T3, T4, T5, T6&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6&gt;, Action&lt;T1, T2, T3, T4, T5, T6&gt;)</a><a class="nav-link" href="#With&lt;T1, T2, T3, T4, T5, T6>">With&lt;T1, T2, T3, T4, T5, T6&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6&gt;, Action&lt;T1, T2, T3, T4, T5, T6&gt;)</a><a class="nav-link" href="#with&lt;T1, T2, T3, T4, T5>">with&lt;T1, T2, T3, T4, T5&gt;(Tuple&lt;T1, T2, T3, T4, T5&gt;, Action&lt;T1, T2, T3, T4, T5&gt;)</a><a class="nav-link" href="#With&lt;T1, T2, T3, T4, T5>">With&lt;T1, T2, T3, T4, T5&gt;(Tuple&lt;T1, T2, T3, T4, T5&gt;, Action&lt;T1, T2, T3, T4, T5&gt;)</a><a class="nav-link" href="#with&lt;T1, T2, T3, T4>">with&lt;T1, T2, T3, T4&gt;(Tuple&lt;T1, T2, T3, T4&gt;, Action&lt;T1, T2, T3, T4&gt;)</a><a class="nav-link" href="#With&lt;T1, T2, T3, T4>">With&lt;T1, T2, T3, T4&gt;(Tuple&lt;T1, T2, T3, T4&gt;, Action&lt;T1, T2, T3, T4&gt;)</a><a class="nav-link" href="#with&lt;T1, T2, T3>">with&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2, T3&gt;, Action&lt;T1, T2, T3&gt;)</a><a class="nav-link" href="#With&lt;T1, T2, T3>">With&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2, T3&gt;, Action&lt;T1, T2, T3&gt;)</a><a class="nav-link" href="#with&lt;T1, T2>">with&lt;T1, T2&gt;(Tuple&lt;T1, T2&gt;, Action&lt;T1, T2&gt;)</a><a class="nav-link" href="#With&lt;T1, T2>">With&lt;T1, T2&gt;(Tuple&lt;T1, T2&gt;, Action&lt;T1, T2&gt;)</a><a class="nav-link" href="#Writer&lt;MonoidW, W, A>">Writer&lt;MonoidW, W, A&gt;(A)</a></div><div class="content-panel"><h1 >Prelude Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">Prelude</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Fields</h2><div class="member-title"><a name="centimeter"></a>centimeter</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Centimeter </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">centimeter</span></div></div></div><div class="member-title"><a name="centimeter2"></a>centimeter2</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Centimeter squared </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Area</span> <span class="ident">centimeter2</span></div></div></div><div class="member-title"><a name="centimeters"></a>centimeters</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Centimeters </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">centimeters</span></div></div></div><div class="member-title"><a name="centimetre"></a>centimetre</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Centimetre </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">centimetre</span></div></div></div><div class="member-title"><a name="centimetre2"></a>centimetre2</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Centimetre squared </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Area</span> <span class="ident">centimetre2</span></div></div></div><div class="member-title"><a name="centimetres"></a>centimetres</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Centimetres </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">centimetres</span></div></div></div><div class="member-title"><a name="cm"></a>cm</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Centimetre </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">cm</span></div></div></div><div class="member-title"><a name="cm2"></a>cm2</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Centimetre squared </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Area</span> <span class="ident">cm2</span></div></div></div><div class="member-title"><a name="day"></a>day</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Day </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">day</span></div></div></div><div class="member-title"><a name="days"></a>days</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Day </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">days</span></div></div></div><div class="member-title"><a name="feet"></a>feet</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Feet </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">feet</span></div></div></div><div class="member-title"><a name="foot"></a>foot</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Feet </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">foot</span></div></div></div><div class="member-title"><a name="ft"></a>ft</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Feet </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">ft</span></div></div></div><div class="member-title"><a name="hour"></a>hour</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Hour </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">hour</span></div></div></div><div class="member-title"><a name="hours"></a>hours</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Hour </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">hours</span></div></div></div><div class="member-title"><a name="hr"></a>hr</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Hour </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">hr</span></div></div></div><div class="member-title"><a name="hrs"></a>hrs</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Hour </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">hrs</span></div></div></div><div class="member-title"><a name="inch"></a>inch</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Inch </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">inch</span></div></div></div><div class="member-title"><a name="inches"></a>inches</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Inch </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">inches</span></div></div></div><div class="member-title"><a name="kilometer"></a>kilometer</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Kilometer </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">kilometer</span></div></div></div><div class="member-title"><a name="kilometer2"></a>kilometer2</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Kilometer squared </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Area</span> <span class="ident">kilometer2</span></div></div></div><div class="member-title"><a name="kilometers"></a>kilometers</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Kilometers </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">kilometers</span></div></div></div><div class="member-title"><a name="kilometre"></a>kilometre</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Kilometre </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">kilometre</span></div></div></div><div class="member-title"><a name="kilometre2"></a>kilometre2</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Kilometre squared </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Area</span> <span class="ident">kilometre2</span></div></div></div><div class="member-title"><a name="kilometres"></a>kilometres</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Kilometres </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">kilometres</span></div></div></div><div class="member-title"><a name="km"></a>km</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Kilometre </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">km</span></div></div></div><div class="member-title"><a name="km2"></a>km2</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Kilometre squared </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Area</span> <span class="ident">km2</span></div></div></div><div class="member-title"><a name="kph"></a>kph</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Kilometres per hour </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Velocity</span> <span class="ident">kph</span></div></div></div><div class="member-title"><a name="m"></a>m</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Metre </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">m</span></div></div></div><div class="member-title"><a name="m2"></a>m2</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Metre squared </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Area</span> <span class="ident">m2</span></div></div></div><div class="member-title"><a name="meter"></a>meter</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Meter </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">meter</span></div></div></div><div class="member-title"><a name="meter2"></a>meter2</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Meter squared </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Area</span> <span class="ident">meter2</span></div></div></div><div class="member-title"><a name="meters"></a>meters</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Meters </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">meters</span></div></div></div><div class="member-title"><a name="metre"></a>metre</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Metre </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">metre</span></div></div></div><div class="member-title"><a name="metre2"></a>metre2</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Metre squared </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Area</span> <span class="ident">metre2</span></div></div></div><div class="member-title"><a name="metres"></a>metres</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Metres </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">metres</span></div></div></div><div class="member-title"><a name="mile"></a>mile</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Mile </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">mile</span></div></div></div><div class="member-title"><a name="miles"></a>miles</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Mile </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">miles</span></div></div></div><div class="member-title"><a name="millimeter"></a>millimeter</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Millimeter </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">millimeter</span></div></div></div><div class="member-title"><a name="millimeter2"></a>millimeter2</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Millimeter squared </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Area</span> <span class="ident">millimeter2</span></div></div></div><div class="member-title"><a name="millimeters"></a>millimeters</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Millimeters </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">millimeters</span></div></div></div><div class="member-title"><a name="millimetre"></a>millimetre</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Millimetre </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">millimetre</span></div></div></div><div class="member-title"><a name="millimetre2"></a>millimetre2</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Millimetre squared </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Area</span> <span class="ident">millimetre2</span></div></div></div><div class="member-title"><a name="millimetres"></a>millimetres</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Millimetre </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">millimetres</span></div></div></div><div class="member-title"><a name="millisecond"></a>millisecond</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Millisecond </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">millisecond</span></div></div></div><div class="member-title"><a name="milliseconds"></a>milliseconds</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Millisecond </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">milliseconds</span></div></div></div><div class="member-title"><a name="min"></a>min</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Minute </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">min</span></div></div></div><div class="member-title"><a name="mins"></a>mins</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Minute </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">mins</span></div></div></div><div class="member-title"><a name="minute"></a>minute</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Minute </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">minute</span></div></div></div><div class="member-title"><a name="minutes"></a>minutes</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Minute </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">minutes</span></div></div></div><div class="member-title"><a name="mm"></a>mm</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Millimetre </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">mm</span></div></div></div><div class="member-title"><a name="mm2"></a>mm2</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Millimetre squared </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Area</span> <span class="ident">mm2</span></div></div></div><div class="member-title"><a name="mph"></a>mph</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Miles per hour </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Velocity</span> <span class="ident">mph</span></div></div></div><div class="member-title"><a name="ms"></a>ms</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Millisecond </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">ms</span></div></div></div><div class="member-title"><a name="ms2"></a>ms2</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Metres per-second squared </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Accel</span> <span class="ident">ms2</span></div></div></div><div class="member-title"><a name="s"></a>s</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">s</span></div></div></div><div class="member-title"><a name="sec"></a>sec</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">sec</span></div></div></div><div class="member-title"><a name="second"></a>second</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">second</span></div></div></div><div class="member-title"><a name="seconds"></a>seconds</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Time</span> <span class="ident">seconds</span></div></div></div><div class="member-title"><a name="yard"></a>yard</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Yard </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">yard</span></div></div></div><div class="member-title"><a name="yards"></a>yards</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Yard </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">yards</span></div></div></div><div class="member-title"><a name="yd"></a>yd</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Yard </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Length</span> <span class="ident">yd</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="None"></a>None</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >&#39;No value&#39; state of Option T. </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionNone</span> <span class="ident">None</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionNone</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="unit"></a>unit</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Unit constructor </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">unit</span>  { <span class="keyword">get</span>; }</div></div></div><h2 >Methods</h2><div class="member-title"><a name="act"></a>act(Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act__Action__f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Action&lt;string&gt; putStr = (string x) =&gt; Console.WriteLine(x);</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = act((string x) =&gt; Console.WriteLine(x));</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >Action to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span> <span class="ident">act</span>(<span class="ident">Action</span> f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span></div><div class="normal"><span >The same Action you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-act__Action__f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="act&lt;R>"></a>act&lt;R&gt;(Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act_R_Func_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper; converts it to an Action by dropping the return value<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string, string&gt; thereIs = ...</div><br/><br/><div class='code-line'>     Action&lt;string,Unit&gt; thereIsNoReturn = (string x) =&gt; { thereis(x); };</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var thereIsNoReturn = act(thereIs);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span> <span class="ident">act</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span></div><div class="normal"><span >Action that is the same as the Func passed in, but with the return type dropped</span></div></div></div><div style="display:none" id="code-act_R_Func_R_f_"><div class="section_title">SOURCE</div><div class="code"> () =&gt; f()</div></div></div><div class="member-title"><a name="act&lt;T1, R>"></a>act&lt;T1, R&gt;(Func&lt;T1, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act_T1_R_Func_T1_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper; converts it to an Action by dropping the return value<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string, string&gt; thereIs = ...</div><br/><br/><div class='code-line'>     Action&lt;string,Unit&gt; thereIsNoReturn = (string x) =&gt; { thereis(x); };</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var thereIsNoReturn = act(thereIs);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt; <span class="ident">act</span>&lt;<span class="ident">T1</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt;</div><div class="normal"><span >Action that is the same as the Func passed in, but with the return type dropped</span></div></div></div><div style="display:none" id="code-act_T1_R_Func_T1_R_f_"><div class="section_title">SOURCE</div><div class="code"> a1 =&gt; f(a1)</div></div></div><div class="member-title"><a name="act&lt;T1, T2, R>"></a>act&lt;T1, T2, R&gt;(Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act_T1_T2_R_Func_T1_T2_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper; converts it to an Action by dropping the return value<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string, string&gt; thereIs = ...</div><br/><br/><div class='code-line'>     Action&lt;string,Unit&gt; thereIsNoReturn = (string x) =&gt; { thereis(x); };</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var thereIsNoReturn = act(thereIs);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; <span class="ident">act</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div><div class="normal"><span >Action that is the same as the Func passed in, but with the return type dropped</span></div></div></div><div style="display:none" id="code-act_T1_T2_R_Func_T1_T2_R_f_"><div class="section_title">SOURCE</div><div class="code"> (a1, a2) =&gt; f(a1, a2)</div></div></div><div class="member-title"><a name="act&lt;T1, T2, T3, R>"></a>act&lt;T1, T2, T3, R&gt;(Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act_T1_T2_T3_R_Func_T1_T2_T3_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper; converts it to an Action by dropping the return value<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string, string&gt; thereIs = ...</div><br/><br/><div class='code-line'>     Action&lt;string,Unit&gt; thereIsNoReturn = (string x) =&gt; { thereis(x); };</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var thereIsNoReturn = act(thereIs);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; <span class="ident">act</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div><div class="normal"><span >Action that is the same as the Func passed in, but with the return type dropped</span></div></div></div><div style="display:none" id="code-act_T1_T2_T3_R_Func_T1_T2_T3_R_f_"><div class="section_title">SOURCE</div><div class="code"> (a1, a2, a3) =&gt; f(a1, a2, a3)</div></div></div><div class="member-title"><a name="act&lt;T1, T2, T3, T4, R>"></a>act&lt;T1, T2, T3, T4, R&gt;(Func&lt;T1, T2, T3, T4, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act_T1_T2_T3_T4_R_Func_T1_T2_T3_T4_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper; converts it to an Action by dropping the return value<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string, string&gt; thereIs = ...</div><br/><br/><div class='code-line'>     Action&lt;string,Unit&gt; thereIsNoReturn = (string x) =&gt; { thereis(x); };</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var thereIsNoReturn = act(thereIs);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; <span class="ident">act</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div><div class="normal"><span >Action that is the same as the Func passed in, but with the return type dropped</span></div></div></div><div style="display:none" id="code-act_T1_T2_T3_T4_R_Func_T1_T2_T3_T4_R_f_"><div class="section_title">SOURCE</div><div class="code"> (a1, a2, a3, a4) =&gt; f(a1, a2, a3, a4)</div></div></div><div class="member-title"><a name="act&lt;T1, T2, T3, T4, T5, R>"></a>act&lt;T1, T2, T3, T4, T5, R&gt;(Func&lt;T1, T2, T3, T4, T5, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act_T1_T2_T3_T4_T5_R_Func_T1_T2_T3_T4_T5_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper; converts it to an Action by dropping the return value<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string, string&gt; thereIs = ...</div><br/><br/><div class='code-line'>     Action&lt;string,Unit&gt; thereIsNoReturn = (string x) =&gt; { thereis(x); };</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var thereIsNoReturn = act(thereIs);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; <span class="ident">act</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div><div class="normal"><span >Action that is the same as the Func passed in, but with the return type dropped</span></div></div></div><div style="display:none" id="code-act_T1_T2_T3_T4_T5_R_Func_T1_T2_T3_T4_T5_R_f_"><div class="section_title">SOURCE</div><div class="code"> (a1, a2, a3, a4, a5) =&gt; f(a1, a2, a3, a4, a5)</div></div></div><div class="member-title"><a name="act&lt;T1, T2, T3, T4, T5, T6, R>"></a>act&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper; converts it to an Action by dropping the return value<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string, string&gt; thereIs = ...</div><br/><br/><div class='code-line'>     Action&lt;string,Unit&gt; thereIsNoReturn = (string x) =&gt; { thereis(x); };</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var thereIsNoReturn = act(thereIs);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; <span class="ident">act</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div><div class="normal"><span >Action that is the same as the Func passed in, but with the return type dropped</span></div></div></div><div style="display:none" id="code-act_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_f_"><div class="section_title">SOURCE</div><div class="code"> (a1, a2, a3, a4, a5, a6) =&gt; f(a1, a2, a3, a4, a5, a6)</div></div></div><div class="member-title"><a name="act&lt;T1, T2, T3, T4, T5, T6, T7, R>"></a>act&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper; converts it to an Action by dropping the return value<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string, string&gt; thereIs = ...</div><br/><br/><div class='code-line'>     Action&lt;string,Unit&gt; thereIsNoReturn = (string x) =&gt; { thereis(x); };</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var thereIsNoReturn = act(thereIs);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; <span class="ident">act</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div><div class="normal"><span >Action that is the same as the Func passed in, but with the return type dropped</span></div></div></div><div style="display:none" id="code-act_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_f_"><div class="section_title">SOURCE</div><div class="code"> (a1, a2, a3, a4, a5, a6, a7) =&gt; f(a1, a2, a3, a4, a5, a6, a7)</div></div></div><div class="member-title"><a name="act&lt;T1, T2, T3, T4, T5, T6, T7>"></a>act&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Action&lt;string&gt; putStr = (string x) =&gt; Console.WriteLine(x);</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = act((string x) =&gt; Console.WriteLine(x));</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div></div><div class="arg-desc"><span >Action to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; <span class="ident">act</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div><div class="normal"><span >The same Action you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-act_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="act&lt;T1, T2, T3, T4, T5, T6>"></a>act&lt;T1, T2, T3, T4, T5, T6&gt;(Action&lt;T1, T2, T3, T4, T5, T6&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act_T1_T2_T3_T4_T5_T6_Action_T1_T2_T3_T4_T5_T6_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Action&lt;string&gt; putStr = (string x) =&gt; Console.WriteLine(x);</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = act((string x) =&gt; Console.WriteLine(x));</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div></div><div class="arg-desc"><span >Action to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; <span class="ident">act</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div><div class="normal"><span >The same Action you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-act_T1_T2_T3_T4_T5_T6_Action_T1_T2_T3_T4_T5_T6_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="act&lt;T1, T2, T3, T4, T5>"></a>act&lt;T1, T2, T3, T4, T5&gt;(Action&lt;T1, T2, T3, T4, T5&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act_T1_T2_T3_T4_T5_Action_T1_T2_T3_T4_T5_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Action&lt;string&gt; putStr = (string x) =&gt; Console.WriteLine(x);</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = act((string x) =&gt; Console.WriteLine(x));</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div></div><div class="arg-desc"><span >Action to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; <span class="ident">act</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div><div class="normal"><span >The same Action you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-act_T1_T2_T3_T4_T5_Action_T1_T2_T3_T4_T5_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="act&lt;T1, T2, T3, T4>"></a>act&lt;T1, T2, T3, T4&gt;(Action&lt;T1, T2, T3, T4&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act_T1_T2_T3_T4_Action_T1_T2_T3_T4_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Action&lt;string&gt; putStr = (string x) =&gt; Console.WriteLine(x);</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = act((string x) =&gt; Console.WriteLine(x));</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div></div><div class="arg-desc"><span >Action to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; <span class="ident">act</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div><div class="normal"><span >The same Action you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-act_T1_T2_T3_T4_Action_T1_T2_T3_T4_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="act&lt;T1, T2, T3>"></a>act&lt;T1, T2, T3&gt;(Action&lt;T1, T2, T3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act_T1_T2_T3_Action_T1_T2_T3_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Action&lt;string&gt; putStr = (string x) =&gt; Console.WriteLine(x);</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = act((string x) =&gt; Console.WriteLine(x));</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div><div class="arg-desc"><span >Action to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; <span class="ident">act</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div><div class="normal"><span >The same Action you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-act_T1_T2_T3_Action_T1_T2_T3_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="act&lt;T1, T2>"></a>act&lt;T1, T2&gt;(Action&lt;T1, T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act_T1_T2_Action_T1_T2_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Action&lt;string&gt; putStr = (string x) =&gt; Console.WriteLine(x);</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = act((string x) =&gt; Console.WriteLine(x));</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div><div class="arg-desc"><span >Action to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; <span class="ident">act</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div><div class="normal"><span >The same Action you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-act_T1_T2_Action_T1_T2_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="act&lt;T1>"></a>act&lt;T1&gt;(Action&lt;T1&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-act_T1_Action_T1_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Action&lt;string&gt; putStr = (string x) =&gt; Console.WriteLine(x);</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = act((string x) =&gt; Console.WriteLine(x));</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt;</div></div><div class="arg-desc"><span >Action to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt; <span class="ident">act</span>&lt;<span class="ident">T1</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt;</div><div class="normal"><span >The same Action you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-act_T1_Action_T1_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="action&lt;A, B>"></a>action&lt;A, B&gt;(Option&lt;A&gt;, Option&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-action_A_B_Option_A_fa__Option_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Evaluate fa, then fb, ignoring the result of fa </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate first</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate second and then return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; <span class="ident">action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type Option&lt;B&gt;</span></div></div></div><div style="display:none" id="code-action_A_B_Option_A_fa__Option_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FOption&lt;A, B&gt;.Inst.Action(fa, fb)</div></div></div><div class="member-title"><a name="action&lt;A, B>"></a>action&lt;A, B&gt;(OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-action_A_B_OptionUnsafe_A_fa__OptionUnsafe_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Evaluate fa, then fb, ignoring the result of fa </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate first</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate second and then return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; <span class="ident">action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type Option&lt;B&gt;</span></div></div></div><div style="display:none" id="code-action_A_B_OptionUnsafe_A_fa__OptionUnsafe_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FOptionUnsafe&lt;A, B&gt;.Inst.Action(fa, fb)</div></div></div><div class="member-title"><a name="action&lt;A, B>"></a>action&lt;A, B&gt;(Try&lt;A&gt;, Try&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-action_A_B_Try_A_fa__Try_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Evaluate fa, then fb, ignoring the result of fa </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate first</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate second and then return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">B</span>&gt; <span class="ident">action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Try</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type Option&lt;B&gt;</span></div></div></div><div style="display:none" id="code-action_A_B_Try_A_fa__Try_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FTry&lt;A, B&gt;.Inst.Action(fa, fb)</div></div></div><div class="member-title"><a name="action&lt;A, B>"></a>action&lt;A, B&gt;(TryAsync&lt;A&gt;, TryAsync&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-action_A_B_TryAsync_A_fa__TryAsync_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Evaluate fa, then fb, ignoring the result of fa </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate first</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate second and then return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type Option&lt;B&gt;</span></div></div></div><div style="display:none" id="code-action_A_B_TryAsync_A_fa__TryAsync_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FTryAsync&lt;A, B&gt;.Inst.Action(fa, fb)</div></div></div><div class="member-title"><a name="action&lt;A, B>"></a>action&lt;A, B&gt;(TryOption&lt;A&gt;, TryOption&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-action_A_B_TryOption_A_fa__TryOption_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Evaluate fa, then fb, ignoring the result of fa </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate first</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate second and then return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; <span class="ident">action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type Option&lt;B&gt;</span></div></div></div><div style="display:none" id="code-action_A_B_TryOption_A_fa__TryOption_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FTryOption&lt;A, B&gt;.Inst.Action(fa, fb)</div></div></div><div class="member-title"><a name="action&lt;A, B>"></a>action&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-action_A_B_TryOptionAsync_A_fa__TryOptionAsync_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Evaluate fa, then fb, ignoring the result of fa </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate first</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate second and then return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type Option&lt;B&gt;</span></div></div></div><div style="display:none" id="code-action_A_B_TryOptionAsync_A_fa__TryOptionAsync_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FTryOptionAsync&lt;A, B&gt;.Inst.Action(fa, fb)</div></div></div><div class="member-title"><a name="action&lt;L, A, B>"></a>action&lt;L, A, B&gt;(Either&lt;L, A&gt;, Either&lt;L, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-action_L_A_B_Either_L_A_fa__Either_L_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Evaluate fa, then fb, ignoring the result of fa </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate first</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate second and then return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; <span class="ident">action</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type Option&lt;B&gt;</span></div></div></div><div style="display:none" id="code-action_L_A_B_Either_L_A_fa__Either_L_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FEither&lt;L, A, B&gt;.Inst.Action(fa, fb)</div></div></div><div class="member-title"><a name="action&lt;L, A, B>"></a>action&lt;L, A, B&gt;(EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-action_L_A_B_EitherUnsafe_L_A_fa__EitherUnsafe_L_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Evaluate fa, then fb, ignoring the result of fa </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate first</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate second and then return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; <span class="ident">action</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type Option&lt;B&gt;</span></div></div></div><div style="display:none" id="code-action_L_A_B_EitherUnsafe_L_A_fa__EitherUnsafe_L_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FEitherUnsafe&lt;L, A, B&gt;.Inst.Action(fa, fb)</div></div></div><div class="member-title"><a name="ad&lt;T1, T2, T3>"></a>ad&lt;T1, T2, T3&gt;(ValueTuple&lt;T1, T2&gt;, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ad_T1_T2_T3_ValueTuple_T1_T2_self__T3__third_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append an extra item to the tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">third</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; <span class="ident">ad</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">T3</span> third)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ad_T1_T2_T3_ValueTuple_T1_T2_self__T3__third_"><div class="section_title">SOURCE</div><div class="code">
            self.Add(third)</div></div></div><div class="member-title"><a name="add&lt;A, B, C, D, E, F, G, H>"></a>add&lt;A, B, C, D, E, F, G, H&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, H)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_A_B_C_D_E_F_G_H_ValueTuple_A_B_C_D_E_F_G_self__H__eighth_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append an extra item to the tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">eighth</div><div class="arg-type"><span class="ident">H</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">H</span>&gt; <span class="ident">add</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">H</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">H</span> eighth)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">H</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-add_A_B_C_D_E_F_G_H_ValueTuple_A_B_C_D_E_F_G_self__H__eighth_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7, eighth)</div></div></div><div class="member-title"><a name="add&lt;A, B, C, D, E, F, G>"></a>add&lt;A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F&gt;, G)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_self__G__seventh_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append an extra item to the tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">seventh</div><div class="arg-type"><span class="ident">G</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">add</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">G</span> seventh)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-add_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_self__G__seventh_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, seventh)</div></div></div><div class="member-title"><a name="add&lt;A, B, C, D, E, F, G>"></a>add&lt;A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, G)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_self__G__seventh_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append an extra item to the tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">seventh</div><div class="arg-type"><span class="ident">G</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">add</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">G</span> seventh)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-add_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_self__G__seventh_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, seventh)</div></div></div><div class="member-title"><a name="add&lt;A, B, C, D, E, F>"></a>add&lt;A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E&gt;, F)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_A_B_C_D_E_F_Tuple_A_B_C_D_E_self__F__sixth_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append an extra item to the tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixth</div><div class="arg-type"><span class="ident">F</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">add</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">F</span> sixth)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-add_A_B_C_D_E_F_Tuple_A_B_C_D_E_self__F__sixth_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, sixth)</div></div></div><div class="member-title"><a name="add&lt;A, B, C, D, E, F>"></a>add&lt;A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E&gt;, F)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_self__F__sixth_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append an extra item to the tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixth</div><div class="arg-type"><span class="ident">F</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">add</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="keyword">this</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">F</span> sixth)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-add_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_self__F__sixth_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, sixth)</div></div></div><div class="member-title"><a name="add&lt;A, B, C, D, E>"></a>add&lt;A, B, C, D, E&gt;(Tuple&lt;A, B, C, D&gt;, E)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_A_B_C_D_E_Tuple_A_B_C_D_self__E__fifth_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append an extra item to the tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifth</div><div class="arg-type"><span class="ident">E</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; <span class="ident">add</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">E</span> fifth)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-add_A_B_C_D_E_Tuple_A_B_C_D_self__E__fifth_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, self.Item3, self.Item4, fifth)</div></div></div><div class="member-title"><a name="add&lt;A, B, C, D, E>"></a>add&lt;A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D&gt;, E)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_A_B_C_D_E_ValueTuple_A_B_C_D_self__E__fifth_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append an extra item to the tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifth</div><div class="arg-type"><span class="ident">E</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; <span class="ident">add</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">E</span> fifth)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-add_A_B_C_D_E_ValueTuple_A_B_C_D_self__E__fifth_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, self.Item3, self.Item4, fifth)</div></div></div><div class="member-title"><a name="add&lt;A, B>"></a>add&lt;A, B&gt;(Tuple&lt;A&gt;, B)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_A_B_Tuple_A_self__B__second_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append an extra item to the tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">second</div><div class="arg-type"><span class="ident">B</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">add</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">B</span> second)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-add_A_B_Tuple_A_self__B__second_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, second)</div></div></div><div class="member-title"><a name="add&lt;A, B>"></a>add&lt;A, B&gt;(ValueTuple&lt;A&gt;, B)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_A_B_ValueTuple_A_self__B__second_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append an extra item to the tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">second</div><div class="arg-type"><span class="ident">B</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">add</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">B</span> second)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-add_A_B_ValueTuple_A_self__B__second_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, second)</div></div></div><div class="member-title"><a name="add&lt;NUM, A>"></a>add&lt;NUM, A&gt;(Try&lt;A&gt;, Try&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_NUM_A_Try_A_lhs__Try_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound value of Try(x) to Try(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; <span class="ident">add</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-add_NUM_A_Try_A_lhs__Try_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Add&lt;NUM, A&gt;(rhs)</div></div></div><div class="member-title"><a name="add&lt;NUM, A>"></a>add&lt;NUM, A&gt;(TryAsync&lt;A&gt;, TryAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_NUM_A_TryAsync_A_lhs__TryAsync_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound value of TryAsync(x) to TryAsync(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">add</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-add_NUM_A_TryAsync_A_lhs__TryAsync_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Add&lt;NUM, A&gt;(rhs)</div></div></div><div class="member-title"><a name="add&lt;NUM, A>"></a>add&lt;NUM, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_NUM_A_TryOption_A_lhs__TryOption_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound value of Try(x) to Try(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; <span class="ident">add</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-add_NUM_A_TryOption_A_lhs__TryOption_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Add&lt;NUM, A&gt;(rhs)</div></div></div><div class="member-title"><a name="add&lt;NUM, A>"></a>add&lt;NUM, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_NUM_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound value of TryOptionAsync(x) to TryOptionAsync(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">add</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-add_NUM_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Add&lt;NUM, A&gt;(rhs)</div></div></div><div class="member-title"><a name="add&lt;NUM, T>"></a>add&lt;NUM, T&gt;(Option&lt;T&gt;, Option&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_NUM_T_Option_T_lhs__Option_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the Ts </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">add</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs / rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-add_NUM_T_Option_T_lhs__Option_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Add&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="add&lt;NUM, T>"></a>add&lt;NUM, T&gt;(OptionUnsafe&lt;T&gt;, OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_NUM_T_OptionUnsafe_T_lhs__OptionUnsafe_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the Ts </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; <span class="ident">add</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs / rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-add_NUM_T_OptionUnsafe_T_lhs__OptionUnsafe_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Add&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="add&lt;NUMTYPE, NUM, A, PRED>"></a>add&lt;NUMTYPE, NUM, A, PRED&gt;(NumType&lt;NUMTYPE, NUM, A, PRED&gt;, NUMTYPE)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_NUMTYPE_NUM_A_PRED_NumType_NUMTYPE_NUM_A_PRED_x__NUMTYPE__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound values of x and y, uses an Add type-class to provide the add operation for type A.  For example x.Add&lt;Metres, TInt, int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">NUMTYPE</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NUMTYPE</span> <span class="ident">add</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; x, <span class="ident">NUMTYPE</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NUMTYPE</span></div><div class="normal"><span >An NewType with y added to x</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-add_NUMTYPE_NUM_A_PRED_NumType_NUMTYPE_NUM_A_PRED_x__NUMTYPE__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Plus(a, b)</div></div></div><div class="member-title"><a name="add&lt;NUMTYPE, NUM, A>"></a>add&lt;NUMTYPE, NUM, A&gt;(NumType&lt;NUMTYPE, NUM, A&gt;, NUMTYPE)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_NUMTYPE_NUM_A_NumType_NUMTYPE_NUM_A_x__NUMTYPE__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound values of x and y, uses an Add type-class to provide the add operation for type A.  For example x.Add&lt;Metres, TInt, int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">NUMTYPE</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NUMTYPE</span> <span class="ident">add</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt; x, <span class="ident">NUMTYPE</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NUMTYPE</span></div><div class="normal"><span >An NewType with y added to x</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-add_NUMTYPE_NUM_A_NumType_NUMTYPE_NUM_A_x__NUMTYPE__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Plus(a, b)</div></div></div><div class="member-title"><a name="add&lt;SELF, FLOAT, A, PRED>"></a>add&lt;SELF, FLOAT, A, PRED&gt;(FloatType&lt;SELF, FLOAT, A, PRED&gt;, SELF)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_SELF_FLOAT_A_PRED_FloatType_SELF_FLOAT_A_PRED_x__SELF__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound values of x and y, uses an Add type-class to provide the add operation for type A.  For example x.Add&lt;Metres, TInt, int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">SELF</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SELF</span> <span class="ident">add</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; x, <span class="ident">SELF</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SELF</span></div><div class="normal"><span >An NewType with y added to x</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-add_SELF_FLOAT_A_PRED_FloatType_SELF_FLOAT_A_PRED_x__SELF__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(FLOAT).Plus(a, b)</div></div></div><div class="member-title"><a name="add&lt;SELF, FLOAT, A>"></a>add&lt;SELF, FLOAT, A&gt;(FloatType&lt;SELF, FLOAT, A&gt;, SELF)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_SELF_FLOAT_A_FloatType_SELF_FLOAT_A_x__SELF__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound values of x and y, uses an Add type-class to provide the add operation for type A.  For example x.Add&lt;Metres, TInt, int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">SELF</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SELF</span> <span class="ident">add</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt; x, <span class="ident">SELF</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SELF</span></div><div class="normal"><span >An NewType with y added to x</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-add_SELF_FLOAT_A_FloatType_SELF_FLOAT_A_x__SELF__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(FLOAT).Plus(a, b)</div></div></div><div class="member-title"><a name="add&lt;T1, T2, T3, T4>"></a>add&lt;T1, T2, T3, T4&gt;(ValueTuple&lt;T1, T2, T3&gt;, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_T1_T2_T3_T4_ValueTuple_T1_T2_T3_self__T4__fourth_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append an extra item to the tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourth</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; <span class="ident">add</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">T4</span> fourth)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-add_T1_T2_T3_T4_ValueTuple_T1_T2_T3_self__T4__fourth_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, self.Item3, fourth)</div></div></div><div class="member-title"><a name="add&lt;T1, T2, T3>"></a>add&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2&gt;, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_T1_T2_T3_Tuple_T1_T2_self__T3__third_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append an extra item to the tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">third</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; <span class="ident">add</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">T3</span> third)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-add_T1_T2_T3_Tuple_T1_T2_self__T3__third_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, third)</div></div></div><div class="member-title"><a name="append&lt;SEMI, A>"></a>append&lt;SEMI, A&gt;(Try&lt;A&gt;, Try&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SEMI_A_Try_A_lhs__Try_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append the bound value of Try(x) to Try(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SEMI</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs ++ rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SEMI_A_Try_A_lhs__Try_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Append&lt;SEMI, A&gt;(rhs)</div></div></div><div class="member-title"><a name="Append&lt;SEMI, A>"></a>Append&lt;SEMI, A&gt;(TryAsync&lt;A&gt;, TryAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Append_SEMI_A_TryAsync_A_lhs__TryAsync_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append the bound value of TryAsync(x) to TryAsync(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Append</span>&lt;<span class="ident">SEMI</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs ++ rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Append_SEMI_A_TryAsync_A_lhs__TryAsync_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Append&lt;SEMI, A&gt;(rhs)</div></div></div><div class="member-title"><a name="Append&lt;SEMI, A>"></a>Append&lt;SEMI, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Append_SEMI_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append the bound value of TryOptionAsync(x) to TryOptionAsync(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Append</span>&lt;<span class="ident">SEMI</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs ++ rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Append_SEMI_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Append&lt;SEMI, A&gt;(rhs)</div></div></div><div class="member-title"><a name="append&lt;SEMI, T>"></a>append&lt;SEMI, T&gt;(T?, T?)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SEMI_T_T__lhs__T__rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append the Some(x) of one option to the Some(y) of another. For numeric values the behaviour is to sum the Somes (lhs + rhs) For string values the behaviour is to concatenate the strings For Lst/Stck/Que values the behaviour is to concatenate the lists For Map or Set values the behaviour is to merge the sets Otherwise if the T type derives from IAppendable then the behaviour is to call lhs.Append(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span>? <span class="ident">append</span>&lt;<span class="ident">SEMI</span>, <span class="ident">T</span>&gt;(<span class="ident">T</span>? lhs, <span class="ident">T</span>? rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>?</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-append_SEMI_T_T__lhs__T__rhs_"><div class="section_title">SOURCE</div><div class="code">
            if (!lhs.HasValue &amp;&amp; !rhs.HasValue) return lhs;  // None  + None  = None
            if (!rhs.HasValue) return lhs;                   // Value + None  = Value
            if (!lhs.HasValue) return rhs;                   // None  + Value = Value
            return default(SEMI).Append(lhs.Value, rhs.Value);
        </div></div></div><div class="member-title"><a name="append&lt;SemiA, A>"></a>append&lt;SemiA, A&gt;(Tuple&lt;A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_A_Tuple_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_A_Tuple_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            default(SemiA).Append(a.Item1, a.Item2)</div></div></div><div class="member-title"><a name="append&lt;SemiA, A>"></a>append&lt;SemiA, A&gt;(Tuple&lt;A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_A_Tuple_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_A_Tuple_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            default(SemiA).Append(a.Item1,
                default(SemiA).Append(a.Item2, a.Item3))</div></div></div><div class="member-title"><a name="append&lt;SemiA, A>"></a>append&lt;SemiA, A&gt;(Tuple&lt;A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_A_Tuple_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_A_Tuple_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            default(SemiA).Append(a.Item1,
                default(SemiA).Append(a.Item2,
                    default(SemiA).Append(a.Item3, a.Item4)))</div></div></div><div class="member-title"><a name="append&lt;SemiA, A>"></a>append&lt;SemiA, A&gt;(Tuple&lt;A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_A_Tuple_A_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_A_Tuple_A_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            default(SemiA).Append(a.Item1,
                default(SemiA).Append(a.Item2,
                    default(SemiA).Append(a.Item3,
                        default(SemiA).Append(a.Item4, a.Item5))))</div></div></div><div class="member-title"><a name="append&lt;SemiA, A>"></a>append&lt;SemiA, A&gt;(Tuple&lt;A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_A_Tuple_A_A_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_A_Tuple_A_A_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            default(SemiA).Append(a.Item1,
                default(SemiA).Append(a.Item2,
                    default(SemiA).Append(a.Item3,
                        default(SemiA).Append(a.Item4,
                            default(SemiA).Append(a.Item5, a.Item6)))))</div></div></div><div class="member-title"><a name="append&lt;SemiA, A>"></a>append&lt;SemiA, A&gt;(Tuple&lt;A, A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_A_Tuple_A_A_A_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_A_Tuple_A_A_A_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            default(SemiA).Append(a.Item1,
                default(SemiA).Append(a.Item2,
                    default(SemiA).Append(a.Item3,
                        default(SemiA).Append(a.Item4,
                            default(SemiA).Append(a.Item5,
                                default(SemiA).Append(a.Item6, a.Item7))))))</div></div></div><div class="member-title"><a name="append&lt;SemiA, A>"></a>append&lt;SemiA, A&gt;(ValueTuple&lt;A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_A_ValueTuple_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_A_ValueTuple_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            default(SemiA).Append(a.Item1, a.Item2)</div></div></div><div class="member-title"><a name="append&lt;SemiA, A>"></a>append&lt;SemiA, A&gt;(ValueTuple&lt;A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_A_ValueTuple_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_A_ValueTuple_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            default(SemiA).Append(a.Item1,
                default(SemiA).Append(a.Item2, a.Item3))</div></div></div><div class="member-title"><a name="append&lt;SemiA, A>"></a>append&lt;SemiA, A&gt;(ValueTuple&lt;A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_A_ValueTuple_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_A_ValueTuple_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            default(SemiA).Append(a.Item1,
                default(SemiA).Append(a.Item2,
                    default(SemiA).Append(a.Item3, a.Item4)))</div></div></div><div class="member-title"><a name="append&lt;SemiA, A>"></a>append&lt;SemiA, A&gt;(ValueTuple&lt;A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_A_ValueTuple_A_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_A_ValueTuple_A_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            default(SemiA).Append(a.Item1,
                default(SemiA).Append(a.Item2,
                    default(SemiA).Append(a.Item3,
                        default(SemiA).Append(a.Item4, a.Item5))))</div></div></div><div class="member-title"><a name="append&lt;SemiA, A>"></a>append&lt;SemiA, A&gt;(ValueTuple&lt;A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_A_ValueTuple_A_A_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_A_ValueTuple_A_A_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            default(SemiA).Append(a.Item1,
                default(SemiA).Append(a.Item2,
                    default(SemiA).Append(a.Item3,
                        default(SemiA).Append(a.Item4,
                            default(SemiA).Append(a.Item5, a.Item6)))))</div></div></div><div class="member-title"><a name="append&lt;SemiA, A>"></a>append&lt;SemiA, A&gt;(ValueTuple&lt;A, A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_A_ValueTuple_A_A_A_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_A_ValueTuple_A_A_A_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            default(SemiA).Append(a.Item1,
                default(SemiA).Append(a.Item2,
                    default(SemiA).Append(a.Item3,
                        default(SemiA).Append(a.Item4,
                            default(SemiA).Append(a.Item5,
                                default(SemiA).Append(a.Item6, a.Item7))))))</div></div></div><div class="member-title"><a name="append&lt;SemiA, SemiB, A, B>"></a>append&lt;SemiA, SemiB, A, B&gt;(Tuple&lt;A&gt;, Tuple&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_SemiB_A_B_Tuple_A_a__Tuple_A_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">SemiB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt; a, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_SemiB_A_B_Tuple_A_a__Tuple_A_b_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(default(SemiA).Append(a.Item1, b.Item1))</div></div></div><div class="member-title"><a name="append&lt;SemiA, SemiB, A, B>"></a>append&lt;SemiA, SemiB, A, B&gt;(Tuple&lt;A, B&gt;, Tuple&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_SemiB_A_B_Tuple_A_B_a__Tuple_A_B_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">SemiB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; a, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiB</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_SemiB_A_B_Tuple_A_B_a__Tuple_A_B_b_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(default(SemiA).Append(a.Item1, b.Item1),
                  default(SemiB).Append(a.Item2, b.Item2))</div></div></div><div class="member-title"><a name="append&lt;SemiA, SemiB, A, B>"></a>append&lt;SemiA, SemiB, A, B&gt;(ValueTuple&lt;A&gt;, ValueTuple&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_SemiB_A_B_ValueTuple_A_a__ValueTuple_A_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">SemiB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt; a, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_SemiB_A_B_ValueTuple_A_a__ValueTuple_A_b_"><div class="section_title">SOURCE</div><div class="code">
            VTuple(default(SemiA).Append(a.Item1, b.Item1))</div></div></div><div class="member-title"><a name="append&lt;SemiA, SemiB, A, B>"></a>append&lt;SemiA, SemiB, A, B&gt;(ValueTuple&lt;A, B&gt;, ValueTuple&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_SemiB_A_B_ValueTuple_A_B_a__ValueTuple_A_B_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">SemiB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; a, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiB</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_SemiB_A_B_ValueTuple_A_B_a__ValueTuple_A_B_b_"><div class="section_title">SOURCE</div><div class="code">
            (default(SemiA).Append(a.Item1, b.Item1),
             default(SemiB).Append(a.Item2, b.Item2))</div></div></div><div class="member-title"><a name="append&lt;SemiA, SemiB, SemiC, A, B, C>"></a>append&lt;SemiA, SemiB, SemiC, A, B, C&gt;(Tuple&lt;A, B, C&gt;, Tuple&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_SemiB_SemiC_A_B_C_Tuple_A_B_C_a__Tuple_A_B_C_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">SemiB</span>, <span class="ident">SemiC</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; a, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiB</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiC</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">C</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_SemiB_SemiC_A_B_C_Tuple_A_B_C_a__Tuple_A_B_C_b_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(default(SemiA).Append(a.Item1, b.Item1),
                  default(SemiB).Append(a.Item2, b.Item2),
                  default(SemiC).Append(a.Item3, b.Item3))</div></div></div><div class="member-title"><a name="append&lt;SemiA, SemiB, SemiC, A, B, C>"></a>append&lt;SemiA, SemiB, SemiC, A, B, C&gt;(ValueTuple&lt;A, B, C&gt;, ValueTuple&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_SemiB_SemiC_A_B_C_ValueTuple_A_B_C_a__ValueTuple_A_B_C_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">SemiB</span>, <span class="ident">SemiC</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; a, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiB</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiC</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">C</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_SemiB_SemiC_A_B_C_ValueTuple_A_B_C_a__ValueTuple_A_B_C_b_"><div class="section_title">SOURCE</div><div class="code">
            (default(SemiA).Append(a.Item1, b.Item1),
             default(SemiB).Append(a.Item2, b.Item2),
             default(SemiC).Append(a.Item3, b.Item3))</div></div></div><div class="member-title"><a name="append&lt;SemiA, SemiB, SemiC, SemiD, A, B, C, D>"></a>append&lt;SemiA, SemiB, SemiC, SemiD, A, B, C, D&gt;(Tuple&lt;A, B, C, D&gt;, Tuple&lt;A, B, C, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_SemiB_SemiC_SemiD_A_B_C_D_Tuple_A_B_C_D_a__Tuple_A_B_C_D_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">SemiB</span>, <span class="ident">SemiC</span>, <span class="ident">SemiD</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; a, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiB</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiC</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiD</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">D</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_SemiB_SemiC_SemiD_A_B_C_D_Tuple_A_B_C_D_a__Tuple_A_B_C_D_b_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(default(SemiA).Append(a.Item1, b.Item1),
                  default(SemiB).Append(a.Item2, b.Item2),
                  default(SemiC).Append(a.Item3, b.Item3),
                  default(SemiD).Append(a.Item4, b.Item4))</div></div></div><div class="member-title"><a name="append&lt;SemiA, SemiB, SemiC, SemiD, A, B, C, D>"></a>append&lt;SemiA, SemiB, SemiC, SemiD, A, B, C, D&gt;(ValueTuple&lt;A, B, C, D&gt;, ValueTuple&lt;A, B, C, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_SemiB_SemiC_SemiD_A_B_C_D_ValueTuple_A_B_C_D_a__ValueTuple_A_B_C_D_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">SemiB</span>, <span class="ident">SemiC</span>, <span class="ident">SemiD</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; a, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiB</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiC</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiD</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">D</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_SemiB_SemiC_SemiD_A_B_C_D_ValueTuple_A_B_C_D_a__ValueTuple_A_B_C_D_b_"><div class="section_title">SOURCE</div><div class="code">
            (default(SemiA).Append(a.Item1, b.Item1),
             default(SemiB).Append(a.Item2, b.Item2),
             default(SemiC).Append(a.Item3, b.Item3),
             default(SemiD).Append(a.Item4, b.Item4))</div></div></div><div class="member-title"><a name="append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, A, B, C, D, E>"></a>append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, A, B, C, D, E&gt;(Tuple&lt;A, B, C, D, E&gt;, Tuple&lt;A, B, C, D, E&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_SemiB_SemiC_SemiD_SemiE_A_B_C_D_E_Tuple_A_B_C_D_E_a__Tuple_A_B_C_D_E_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">SemiB</span>, <span class="ident">SemiC</span>, <span class="ident">SemiD</span>, <span class="ident">SemiE</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; a, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiB</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiC</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiD</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">D</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiE</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">E</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_SemiB_SemiC_SemiD_SemiE_A_B_C_D_E_Tuple_A_B_C_D_E_a__Tuple_A_B_C_D_E_b_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(default(SemiA).Append(a.Item1, b.Item1),
                  default(SemiB).Append(a.Item2, b.Item2),
                  default(SemiC).Append(a.Item3, b.Item3),
                  default(SemiD).Append(a.Item4, b.Item4),
                  default(SemiE).Append(a.Item5, b.Item5))</div></div></div><div class="member-title"><a name="append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, A, B, C, D, E>"></a>append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D, E&gt;, ValueTuple&lt;A, B, C, D, E&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_SemiB_SemiC_SemiD_SemiE_A_B_C_D_E_ValueTuple_A_B_C_D_E_a__ValueTuple_A_B_C_D_E_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">SemiB</span>, <span class="ident">SemiC</span>, <span class="ident">SemiD</span>, <span class="ident">SemiE</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="keyword">this</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; a, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiB</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiC</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiD</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">D</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiE</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">E</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_SemiB_SemiC_SemiD_SemiE_A_B_C_D_E_ValueTuple_A_B_C_D_E_a__ValueTuple_A_B_C_D_E_b_"><div class="section_title">SOURCE</div><div class="code">
            (default(SemiA).Append(a.Item1, b.Item1),
             default(SemiB).Append(a.Item2, b.Item2),
             default(SemiC).Append(a.Item3, b.Item3),
             default(SemiD).Append(a.Item4, b.Item4),
             default(SemiE).Append(a.Item5, b.Item5))</div></div></div><div class="member-title"><a name="append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, A, B, C, D, E, F>"></a>append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Tuple&lt;A, B, C, D, E, F&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_SemiB_SemiC_SemiD_SemiE_SemiF_A_B_C_D_E_F_Tuple_A_B_C_D_E_F_a__Tuple_A_B_C_D_E_F_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">SemiB</span>, <span class="ident">SemiC</span>, <span class="ident">SemiD</span>, <span class="ident">SemiE</span>, <span class="ident">SemiF</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; a, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiB</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiC</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiD</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">D</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiE</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">E</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiF</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">F</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_SemiB_SemiC_SemiD_SemiE_SemiF_A_B_C_D_E_F_Tuple_A_B_C_D_E_F_a__Tuple_A_B_C_D_E_F_b_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(default(SemiA).Append(a.Item1, b.Item1),
                  default(SemiB).Append(a.Item2, b.Item2),
                  default(SemiC).Append(a.Item3, b.Item3),
                  default(SemiD).Append(a.Item4, b.Item4),
                  default(SemiE).Append(a.Item5, b.Item5),
                  default(SemiF).Append(a.Item6, b.Item6))</div></div></div><div class="member-title"><a name="append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, A, B, C, D, E, F>"></a>append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, ValueTuple&lt;A, B, C, D, E, F&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_SemiB_SemiC_SemiD_SemiE_SemiF_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_F_a__ValueTuple_A_B_C_D_E_F_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">SemiB</span>, <span class="ident">SemiC</span>, <span class="ident">SemiD</span>, <span class="ident">SemiE</span>, <span class="ident">SemiF</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; a, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiB</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiC</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiD</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">D</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiE</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">E</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiF</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">F</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_SemiB_SemiC_SemiD_SemiE_SemiF_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_F_a__ValueTuple_A_B_C_D_E_F_b_"><div class="section_title">SOURCE</div><div class="code">
            (default(SemiA).Append(a.Item1, b.Item1),
             default(SemiB).Append(a.Item2, b.Item2),
             default(SemiC).Append(a.Item3, b.Item3),
             default(SemiD).Append(a.Item4, b.Item4),
             default(SemiE).Append(a.Item5, b.Item5),
             default(SemiF).Append(a.Item6, b.Item6))</div></div></div><div class="member-title"><a name="append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, SemiG, A, B, C, D, E, F, G>"></a>append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, SemiG, A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Tuple&lt;A, B, C, D, E, F, G&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_SemiB_SemiC_SemiD_SemiE_SemiF_SemiG_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_G_a__Tuple_A_B_C_D_E_F_G_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">SemiB</span>, <span class="ident">SemiC</span>, <span class="ident">SemiD</span>, <span class="ident">SemiE</span>, <span class="ident">SemiF</span>, <span class="ident">SemiG</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; a, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiB</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiC</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiD</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">D</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiE</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">E</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiF</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">F</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiG</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">G</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_SemiB_SemiC_SemiD_SemiE_SemiF_SemiG_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_G_a__Tuple_A_B_C_D_E_F_G_b_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(default(SemiA).Append(a.Item1, b.Item1),
                  default(SemiB).Append(a.Item2, b.Item2),
                  default(SemiC).Append(a.Item3, b.Item3),
                  default(SemiD).Append(a.Item4, b.Item4),
                  default(SemiE).Append(a.Item5, b.Item5),
                  default(SemiF).Append(a.Item6, b.Item6),
                  default(SemiG).Append(a.Item7, b.Item7))</div></div></div><div class="member-title"><a name="append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, SemiG, A, B, C, D, E, F, G>"></a>append&lt;SemiA, SemiB, SemiC, SemiD, SemiE, SemiF, SemiG, A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, ValueTuple&lt;A, B, C, D, E, F, G&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SemiA_SemiB_SemiC_SemiD_SemiE_SemiF_SemiG_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_G_a__ValueTuple_A_B_C_D_E_F_G_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SemiA</span>, <span class="ident">SemiB</span>, <span class="ident">SemiC</span>, <span class="ident">SemiD</span>, <span class="ident">SemiE</span>, <span class="ident">SemiF</span>, <span class="ident">SemiG</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; a, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiA</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiB</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiC</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiD</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">D</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiE</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">E</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiF</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">F</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SemiG</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">G</span>&gt;</div></div><div style="display:none" id="code-append_SemiA_SemiB_SemiC_SemiD_SemiE_SemiF_SemiG_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_G_a__ValueTuple_A_B_C_D_E_F_G_b_"><div class="section_title">SOURCE</div><div class="code">
            (default(SemiA).Append(a.Item1, b.Item1),
             default(SemiB).Append(a.Item2, b.Item2),
             default(SemiC).Append(a.Item3, b.Item3),
             default(SemiD).Append(a.Item4, b.Item4),
             default(SemiE).Append(a.Item5, b.Item5),
             default(SemiF).Append(a.Item6, b.Item6),
             default(SemiG).Append(a.Item7, b.Item7))</div></div></div><div class="member-title"><a name="append&lt;T1, T2, T3, T4>"></a>append&lt;T1, T2, T3, T4&gt;(Tuple&lt;T1, T2, T3&gt;, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_T1_T2_T3_T4_Tuple_T1_T2_T3_self__T4__fourth_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append an extra item to the tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourth</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; <span class="ident">append</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">T4</span> fourth)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-append_T1_T2_T3_T4_Tuple_T1_T2_T3_self__T4__fourth_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, self.Item3, fourth)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Option&lt;Func&lt;A, B, C&gt;&gt;, Option&lt;A&gt;, Option&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Option_Func&lt;A, B, C>_fabc__Option_A_fa__Option_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Option_Func&lt;A, B, C>_fabc__Option_A_fa__Option_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            from x in fabc
            from y in FOption&lt;A, B, C&gt;.Inst.Apply(curry(x), fa, fb)
            select y</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Option&lt;A&gt;, Option&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_B_C_fabc__Option_A_fa__Option_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_B_C_fabc__Option_A_fa__Option_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FOption&lt;A, B, C&gt;.Inst.Apply(curry(fabc), fa, fb)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Option&lt;Func&lt;A, B, C&gt;&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Option_Func&lt;A, B, C>_fabc__Option_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Option_Func&lt;A, B, C>_fabc__Option_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            from x in fabc
            from y in FOption&lt;A, B, C&gt;.Inst.Apply(curry(x), fa)
            select y</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_B_C_fabc__Option_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_B_C_fabc__Option_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FOption&lt;A, B, C&gt;.Inst.Apply(curry(fabc), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Option&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Option_Func&lt;A, Func&lt;B, C>>_fabc__Option_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Option_Func&lt;A, Func&lt;B, C>>_fabc__Option_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FOption&lt;A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__Option_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__Option_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FOption&lt;A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(OptionUnsafe&lt;Func&lt;A, B, C&gt;&gt;, OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_OptionUnsafe_Func&lt;A, B, C>_fabc__OptionUnsafe_A_fa__OptionUnsafe_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_A_B_C_OptionUnsafe_Func&lt;A, B, C>_fabc__OptionUnsafe_A_fa__OptionUnsafe_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            from x in fabc
            from y in FOptionUnsafe&lt;A, B, C&gt;.Inst.Apply(curry(x), fa, fb)
            select y</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_B_C_fabc__OptionUnsafe_A_fa__OptionUnsafe_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_B_C_fabc__OptionUnsafe_A_fa__OptionUnsafe_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FOptionUnsafe&lt;A, B, C&gt;.Inst.Apply(curry(fabc), fa, fb)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(OptionUnsafe&lt;Func&lt;A, B, C&gt;&gt;, OptionUnsafe&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_OptionUnsafe_Func&lt;A, B, C>_fabc__OptionUnsafe_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_OptionUnsafe_Func&lt;A, B, C>_fabc__OptionUnsafe_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            from x in fabc
            from y in FOptionUnsafe&lt;A, B, C&gt;.Inst.Apply(curry(x), fa)
            select y</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, OptionUnsafe&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_B_C_fabc__OptionUnsafe_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_B_C_fabc__OptionUnsafe_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FOptionUnsafe&lt;A, B, C&gt;.Inst.Apply(curry(fabc), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(OptionUnsafe&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, OptionUnsafe&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_OptionUnsafe_Func&lt;A, Func&lt;B, C>>_fabc__OptionUnsafe_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_OptionUnsafe_Func&lt;A, Func&lt;B, C>>_fabc__OptionUnsafe_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FOptionUnsafe&lt;A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, OptionUnsafe&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__OptionUnsafe_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__OptionUnsafe_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FOptionUnsafe&lt;A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Try&lt;Func&lt;A, B, C&gt;&gt;, Try&lt;A&gt;, Try&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Try_Func&lt;A, B, C>_fabc__Try_A_fa__Try_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Try</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Try_Func&lt;A, B, C>_fabc__Try_A_fa__Try_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            fabc.Bind(f =&gt; FTry&lt;A, B, C&gt;.Inst.Apply(MTry&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(f)), fa, fb))</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Try&lt;A&gt;, Try&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_B_C_fabc__Try_A_fa__Try_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Try</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_B_C_fabc__Try_A_fa__Try_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FTry&lt;A, B, C&gt;.Inst.Apply(MTry&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), fa, fb)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Try&lt;Func&lt;A, B, C&gt;&gt;, Try&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Try_Func&lt;A, B, C>_fabc__Try_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Try_Func&lt;A, B, C>_fabc__Try_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            fabc.Bind(f =&gt; FTry&lt;A, B, C&gt;.Inst.Apply(MTry&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(f)), fa))</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Try&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_B_C_fabc__Try_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_B_C_fabc__Try_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTry&lt;A, B, C&gt;.Inst.Apply(MTry&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Try&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Try&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Try_Func&lt;A, Func&lt;B, C>>_fabc__Try_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Try_Func&lt;A, Func&lt;B, C>>_fabc__Try_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTry&lt;A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Try&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__Try_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__Try_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTry&lt;A, B, C&gt;.Inst.Apply(Try(fabc), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(TryAsync&lt;Func&lt;A, B, C&gt;&gt;, TryAsync&lt;A&gt;, TryAsync&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_TryAsync_Func&lt;A, B, C>_fabc__TryAsync_A_fa__TryAsync_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_A_B_C_TryAsync_Func&lt;A, B, C>_fabc__TryAsync_A_fa__TryAsync_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            fabc.Bind(f =&gt; FTryAsync&lt;A, B, C&gt;.Inst.Apply(MTryAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(f)), fa, fb))</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryAsync&lt;A&gt;, TryAsync&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_B_C_fabc__TryAsync_A_fa__TryAsync_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_B_C_fabc__TryAsync_A_fa__TryAsync_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FTryAsync&lt;A, B, C&gt;.Inst.Apply(MTryAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), fa, fb)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(TryAsync&lt;Func&lt;A, B, C&gt;&gt;, TryAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_TryAsync_Func&lt;A, B, C>_fabc__TryAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_TryAsync_Func&lt;A, B, C>_fabc__TryAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            fabc.Bind(f =&gt; FTryAsync&lt;A, B, C&gt;.Inst.Apply(MTryAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(f)), fa))</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_B_C_fabc__TryAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_B_C_fabc__TryAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryAsync&lt;A, B, C&gt;.Inst.Apply(MTryAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(TryAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, TryAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_TryAsync_Func&lt;A, Func&lt;B, C>>_fabc__TryAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_TryAsync_Func&lt;A, Func&lt;B, C>>_fabc__TryAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryAsync&lt;A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, TryAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__TryAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__TryAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryAsync&lt;A, B, C&gt;.Inst.Apply(TryAsync(fabc), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(TryOption&lt;Func&lt;A, B, C&gt;&gt;, TryOption&lt;A&gt;, TryOption&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_TryOption_Func&lt;A, B, C>_fabc__TryOption_A_fa__TryOption_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_A_B_C_TryOption_Func&lt;A, B, C>_fabc__TryOption_A_fa__TryOption_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            fabc.Bind(f =&gt; FTryOption&lt;A, B, C&gt;.Inst.Apply(MTryOption&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(f)), fa, fb))</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOption&lt;A&gt;, TryOption&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_B_C_fabc__TryOption_A_fa__TryOption_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_B_C_fabc__TryOption_A_fa__TryOption_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FTryOption&lt;A, B, C&gt;.Inst.Apply(MTryOption&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), fa, fb)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(TryOption&lt;Func&lt;A, B, C&gt;&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_TryOption_Func&lt;A, B, C>_fabc__TryOption_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_TryOption_Func&lt;A, B, C>_fabc__TryOption_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            fabc.Bind(f =&gt; FTryOption&lt;A, B, C&gt;.Inst.Apply(MTryOption&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(f)), fa))</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_B_C_fabc__TryOption_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_B_C_fabc__TryOption_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryOption&lt;A, B, C&gt;.Inst.Apply(MTryOption&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(TryOption&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_TryOption_Func&lt;A, Func&lt;B, C>>_fabc__TryOption_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_TryOption_Func&lt;A, Func&lt;B, C>>_fabc__TryOption_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryOption&lt;A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__TryOption_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__TryOption_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryOption&lt;A, B, C&gt;.Inst.Apply(TryOption(fabc), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(TryOptionAsync&lt;Func&lt;A, B, C&gt;&gt;, TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_TryOptionAsync_Func&lt;A, B, C>_fabc__TryOptionAsync_A_fa__TryOptionAsync_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_A_B_C_TryOptionAsync_Func&lt;A, B, C>_fabc__TryOptionAsync_A_fa__TryOptionAsync_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            fabc.Bind(f =&gt; FTryOptionAsync&lt;A, B, C&gt;.Inst.Apply(MTryOptionAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(f)), fa, fb))</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_B_C_fabc__TryOptionAsync_A_fa__TryOptionAsync_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_B_C_fabc__TryOptionAsync_A_fa__TryOptionAsync_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FTryOptionAsync&lt;A, B, C&gt;.Inst.Apply(MTryOptionAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), fa, fb)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(TryOptionAsync&lt;Func&lt;A, B, C&gt;&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_TryOptionAsync_Func&lt;A, B, C>_fabc__TryOptionAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_TryOptionAsync_Func&lt;A, B, C>_fabc__TryOptionAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            fabc.Bind(f =&gt; FTryOptionAsync&lt;A, B, C&gt;.Inst.Apply(MTryOptionAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(f)), fa))</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_B_C_fabc__TryOptionAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_B_C_fabc__TryOptionAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryOptionAsync&lt;A, B, C&gt;.Inst.Apply(MTryOptionAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(TryOptionAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_TryOptionAsync_Func&lt;A, Func&lt;B, C>>_fabc__TryOptionAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_TryOptionAsync_Func&lt;A, Func&lt;B, C>>_fabc__TryOptionAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryOptionAsync&lt;A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__TryOptionAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__TryOptionAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryOptionAsync&lt;A, B, C&gt;.Inst.Apply(TryOptionAsync(fabc), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B>"></a>apply&lt;A, B&gt;(Option&lt;Func&lt;A, B&gt;&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_Option_Func&lt;A, B>_fab__Option_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; fab, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_A_B_Option_Func&lt;A, B>_fab__Option_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FOption&lt;A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B>"></a>apply&lt;A, B&gt;(Func&lt;A, B&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_Func_A_B_fab__Option_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_A_B_Func_A_B_fab__Option_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FOption&lt;A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B>"></a>apply&lt;A, B&gt;(OptionUnsafe&lt;Func&lt;A, B&gt;&gt;, OptionUnsafe&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_OptionUnsafe_Func&lt;A, B>_fab__OptionUnsafe_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; fab, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_A_B_OptionUnsafe_Func&lt;A, B>_fab__OptionUnsafe_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FOptionUnsafe&lt;A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B>"></a>apply&lt;A, B&gt;(Func&lt;A, B&gt;, OptionUnsafe&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_Func_A_B_fab__OptionUnsafe_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_A_B_Func_A_B_fab__OptionUnsafe_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FOptionUnsafe&lt;A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B>"></a>apply&lt;A, B&gt;(Try&lt;Func&lt;A, B&gt;&gt;, Try&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_Try_Func&lt;A, B>_fab__Try_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; fab, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_A_B_Try_Func&lt;A, B>_fab__Try_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTry&lt;A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B>"></a>apply&lt;A, B&gt;(Func&lt;A, B&gt;, Try&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_Func_A_B_fab__Try_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_A_B_Func_A_B_fab__Try_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTry&lt;A, B&gt;.Inst.Apply(Try(fab), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B>"></a>apply&lt;A, B&gt;(TryAsync&lt;Func&lt;A, B&gt;&gt;, TryAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_TryAsync_Func&lt;A, B>_fab__TryAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; fab, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_A_B_TryAsync_Func&lt;A, B>_fab__TryAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryAsync&lt;A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B>"></a>apply&lt;A, B&gt;(Func&lt;A, B&gt;, TryAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_Func_A_B_fab__TryAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_A_B_Func_A_B_fab__TryAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryAsync&lt;A, B&gt;.Inst.Apply(TryAsync(fab), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B>"></a>apply&lt;A, B&gt;(TryOption&lt;Func&lt;A, B&gt;&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_TryOption_Func&lt;A, B>_fab__TryOption_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; fab, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_A_B_TryOption_Func&lt;A, B>_fab__TryOption_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryOption&lt;A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B>"></a>apply&lt;A, B&gt;(Func&lt;A, B&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_Func_A_B_fab__TryOption_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_A_B_Func_A_B_fab__TryOption_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryOption&lt;A, B&gt;.Inst.Apply(TryOption(fab), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B>"></a>apply&lt;A, B&gt;(TryOptionAsync&lt;Func&lt;A, B&gt;&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_TryOptionAsync_Func&lt;A, B>_fab__TryOptionAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; fab, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_A_B_TryOptionAsync_Func&lt;A, B>_fab__TryOptionAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryOptionAsync&lt;A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B>"></a>apply&lt;A, B&gt;(Func&lt;A, B&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_Func_A_B_fab__TryOptionAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_A_B_Func_A_B_fab__TryOptionAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryOptionAsync&lt;A, B&gt;.Inst.Apply(TryOptionAsync(fab), fa)</div></div></div><div class="member-title"><a name="apply&lt;L, A, B, C>"></a>apply&lt;L, A, B, C&gt;(Either&lt;L, Func&lt;A, B, C&gt;&gt;, Either&lt;L, A&gt;, Either&lt;L, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_C_Either_L_Func&lt;A, B, C>_fabc__Either_L_A_fa__Either_L_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_L_A_B_C_Either_L_Func&lt;A, B, C>_fabc__Either_L_A_fa__Either_L_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            from x in fabc
            from y in FEither&lt;L, A, B, C&gt;.Inst.Apply(curry(x), fa, fb)
            select y</div></div></div><div class="member-title"><a name="apply&lt;L, A, B, C>"></a>apply&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Either&lt;L, A&gt;, Either&lt;L, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_C_Func_A_B_C_fabc__Either_L_A_fa__Either_L_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_L_A_B_C_Func_A_B_C_fabc__Either_L_A_fa__Either_L_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FEither&lt;L, A, B, C&gt;.Inst.Apply(curry(fabc), fa, fb)</div></div></div><div class="member-title"><a name="apply&lt;L, A, B, C>"></a>apply&lt;L, A, B, C&gt;(Either&lt;L, Func&lt;A, B, C&gt;&gt;, Either&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_C_Either_L_Func&lt;A, B, C>_fabc__Either_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_L_A_B_C_Either_L_Func&lt;A, B, C>_fabc__Either_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            from x in fabc
            from y in FEither&lt;L, A, B, C&gt;.Inst.Apply(curry(x), fa)
            select y</div></div></div><div class="member-title"><a name="apply&lt;L, A, B, C>"></a>apply&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Either&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_C_Func_A_B_C_fabc__Either_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_L_A_B_C_Func_A_B_C_fabc__Either_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FEither&lt;L, A, B, C&gt;.Inst.Apply(curry(fabc), fa)</div></div></div><div class="member-title"><a name="apply&lt;L, A, B, C>"></a>apply&lt;L, A, B, C&gt;(Either&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Either&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_C_Either_L_Func&lt;A, Func&lt;B, C>>_fabc__Either_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_L_A_B_C_Either_L_Func&lt;A, Func&lt;B, C>>_fabc__Either_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FEither&lt;L, A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="apply&lt;L, A, B, C>"></a>apply&lt;L, A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Either&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_C_Func_A_Func&lt;B, C>_fabc__Either_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_L_A_B_C_Func_A_Func&lt;B, C>_fabc__Either_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FEither&lt;L, A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="apply&lt;L, A, B, C>"></a>apply&lt;L, A, B, C&gt;(EitherUnsafe&lt;L, Func&lt;A, B, C&gt;&gt;, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_C_EitherUnsafe_L_Func&lt;A, B, C>_fabc__EitherUnsafe_L_A_fa__EitherUnsafe_L_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_L_A_B_C_EitherUnsafe_L_Func&lt;A, B, C>_fabc__EitherUnsafe_L_A_fa__EitherUnsafe_L_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            from x in fabc
            from y in FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(curry(x), fa, fb)
            select y</div></div></div><div class="member-title"><a name="apply&lt;L, A, B, C>"></a>apply&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_C_Func_A_B_C_fabc__EitherUnsafe_L_A_fa__EitherUnsafe_L_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-apply_L_A_B_C_Func_A_B_C_fabc__EitherUnsafe_L_A_fa__EitherUnsafe_L_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(curry(fabc), fa, fb)</div></div></div><div class="member-title"><a name="apply&lt;L, A, B, C>"></a>apply&lt;L, A, B, C&gt;(EitherUnsafe&lt;L, Func&lt;A, B, C&gt;&gt;, EitherUnsafe&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_C_EitherUnsafe_L_Func&lt;A, B, C>_fabc__EitherUnsafe_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_L_A_B_C_EitherUnsafe_L_Func&lt;A, B, C>_fabc__EitherUnsafe_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            from x in fabc
            from y in FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(curry(x), fa)
            select y</div></div></div><div class="member-title"><a name="apply&lt;L, A, B, C>"></a>apply&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, EitherUnsafe&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_C_Func_A_B_C_fabc__EitherUnsafe_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_L_A_B_C_Func_A_B_C_fabc__EitherUnsafe_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(curry(fabc), fa)</div></div></div><div class="member-title"><a name="apply&lt;L, A, B, C>"></a>apply&lt;L, A, B, C&gt;(EitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, EitherUnsafe&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_C_EitherUnsafe_L_Func&lt;A, Func&lt;B, C>>_fabc__EitherUnsafe_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_L_A_B_C_EitherUnsafe_L_Func&lt;A, Func&lt;B, C>>_fabc__EitherUnsafe_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="apply&lt;L, A, B, C>"></a>apply&lt;L, A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, EitherUnsafe&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_C_Func_A_Func&lt;B, C>_fabc__EitherUnsafe_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-apply_L_A_B_C_Func_A_Func&lt;B, C>_fabc__EitherUnsafe_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="apply&lt;L, A, B>"></a>apply&lt;L, A, B&gt;(Either&lt;L, Func&lt;A, B&gt;&gt;, Either&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_Either_L_Func&lt;A, B>_fab__Either_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; fab, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_L_A_B_Either_L_Func&lt;A, B>_fab__Either_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FEither&lt;L, A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="apply&lt;L, A, B>"></a>apply&lt;L, A, B&gt;(Func&lt;A, B&gt;, Either&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_Func_A_B_fab__Either_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_L_A_B_Func_A_B_fab__Either_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FEither&lt;L, A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="apply&lt;L, A, B>"></a>apply&lt;L, A, B&gt;(EitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;, EitherUnsafe&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_EitherUnsafe_L_Func&lt;A, B>_fab__EitherUnsafe_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; fab, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_L_A_B_EitherUnsafe_L_Func&lt;A, B>_fab__EitherUnsafe_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="apply&lt;L, A, B>"></a>apply&lt;L, A, B&gt;(Func&lt;A, B&gt;, EitherUnsafe&lt;L, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_L_A_B_Func_A_B_fab__EitherUnsafe_L_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-apply_L_A_B_Func_A_B_fab__EitherUnsafe_L_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="array&lt;T>"></a>array&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-array_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable queue </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Array&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">array</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div><div style="display:none" id="code-array_T_"><div class="section_title">SOURCE</div><div class="code">
            new T[0]</div></div></div><div class="member-title"><a name="array&lt;T>"></a>array&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-array_T_T__item_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable queue </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Array&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">array</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> item)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div><div style="display:none" id="code-array_T_T__item_"><div class="section_title">SOURCE</div><div class="code">
            new T[1] {item}</div></div></div><div class="member-title"><a name="array&lt;T>"></a>array&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-array_T_T__items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable queue </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Array&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">array</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div><div style="display:none" id="code-array_T_T__items_"><div class="section_title">SOURCE</div><div class="code">
            var a = new T[items.Length];
            int i = 0;
            foreach (var item in items)
            {
                a[i] = item;
                i++;
            }
            return a;
        </div></div></div><div class="member-title"><a name="Array&lt;T>"></a>Array&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Array_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable queue </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Array</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Array_T_"><div class="section_title">SOURCE</div><div class="code">
            Arr&lt;T&gt;.Empty</div></div></div><div class="member-title"><a name="Array&lt;T>"></a>Array&lt;T&gt;(T, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Array_T_T__x__T__xs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable queue </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">xs</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Array</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> x, <span class="ident">T</span> xs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Array_T_T__x__T__xs_"><div class="section_title">SOURCE</div><div class="code">
            new Arr&lt;T&gt;(x.Cons(xs).ToArray())</div></div></div><div class="member-title"><a name="ask&lt;Env>"></a>ask&lt;Env&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ask_Env_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieves the reader monad environment. </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">Env</span>&gt; <span class="ident">ask</span>&lt;<span class="ident">Env</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">Env</span>&gt;</div><div class="normal"><span >Reader monad with the environment in as the bound value</span></div></div></div><div style="display:none" id="code-ask_Env_"><div class="section_title">SOURCE</div><div class="code">
            default(MReader&lt;Env, Env&gt;).Ask()</div></div></div><div class="member-title"><a name="asks&lt;Env, R>"></a>asks&lt;Env, R&gt;(Func&lt;Env, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-asks_Env_R_Func_Env_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieves a function of the current environment. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">R</span>&gt; <span class="ident">asks</span>&lt;<span class="ident">Env</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >Reader monad with the mapped environment in as the bound value</span></div></div></div><div style="display:none" id="code-asks_Env_R_Func_Env_R_f_"><div class="section_title">SOURCE</div><div class="code">
            default(MReader&lt;Env, R&gt;).Reader(f)</div></div></div><div class="member-title"><a name="bibind&lt;T, R>"></a>bibind&lt;T, R&gt;(Try&lt;T&gt;, Func&lt;T, Try&lt;R&gt;&gt;, Func&lt;Exception, Try&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bibind_T_R_Try_T_self__Func_T_Try&lt;R>_Succ__Func_Exception_Try&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt; <span class="ident">bibind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bibind_T_R_Try_T_self__Func_T_Try&lt;R>_Succ__Func_Exception_Try&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.BiBind(Succ, Fail)</div></div></div><div class="member-title"><a name="bibind&lt;T, R>"></a>bibind&lt;T, R&gt;(TryAsync&lt;T&gt;, Func&lt;T, TryAsync&lt;R&gt;&gt;, Func&lt;Exception, TryAsync&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bibind_T_R_TryAsync_T_self__Func_T_TryAsync&lt;R>_Succ__Func_Exception_TryAsync&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryAsync</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">TryAsync</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">R</span>&gt; <span class="ident">bibind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryAsync</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">TryAsync</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bibind_T_R_TryAsync_T_self__Func_T_TryAsync&lt;R>_Succ__Func_Exception_TryAsync&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.BiBind(Succ, Fail)</div></div></div><div class="member-title"><a name="bibind&lt;T, R>"></a>bibind&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, TryOption&lt;R&gt;&gt;, Func&lt;TryOption&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bibind_T_R_TryOption_T_self__Func_T_TryOption&lt;R>_Some__Func_TryOption&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">bibind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bibind_T_R_TryOption_T_self__Func_T_TryOption&lt;R>_Some__Func_TryOption&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.BiBind(Some, Fail)</div></div></div><div class="member-title"><a name="bibind&lt;T, R>"></a>bibind&lt;T, R&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, TryOptionAsync&lt;R&gt;&gt;, Func&lt;TryOptionAsync&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bibind_T_R_TryOptionAsync_T_self__Func_T_TryOptionAsync&lt;R>_Succ__Func_TryOptionAsync&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt; <span class="ident">bibind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bibind_T_R_TryOptionAsync_T_self__Func_T_TryOptionAsync&lt;R>_Succ__Func_TryOptionAsync&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.BiBind(Succ, Fail)</div></div></div><div class="member-title"><a name="biexists&lt;A>"></a>biexists&lt;A&gt;(Option&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biexists_A_Option_A_option__Func_A_bool_Some__Func_Unit_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the Option is in a None state then True is returned if invoking None returns True. If the Option is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biexists</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the Option is in a None state then True is returned if  invoking None returns True. If the Option is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-biexists_A_Option_A_option__Func_A_bool_Some__Func_Unit_bool_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiExists(Some, None)</div></div></div><div class="member-title"><a name="biexists&lt;A>"></a>biexists&lt;A&gt;(Option&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biexists_A_Option_A_option__Func_A_bool_Some__Func_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the Option is in a None state then True is returned if invoking None returns True. If the Option is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biexists</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the Option is in a None state then True is returned if  invoking None returns True. If the Option is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-biexists_A_Option_A_option__Func_A_bool_Some__Func_bool_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiExists(Some, None)</div></div></div><div class="member-title"><a name="biexists&lt;A>"></a>biexists&lt;A&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biexists_A_OptionUnsafe_A_option__Func_A_bool_Some__Func_Unit_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the OptionUnsafe is in a None state then True is returned if invoking None returns True. If the OptionUnsafe is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biexists</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the OptionUnsafe is in a None state then True is returned if  invoking None returns True. If the OptionUnsafe is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-biexists_A_OptionUnsafe_A_option__Func_A_bool_Some__Func_Unit_bool_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiExists(Some, None)</div></div></div><div class="member-title"><a name="biexists&lt;A>"></a>biexists&lt;A&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biexists_A_OptionUnsafe_A_option__Func_A_bool_Some__Func_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the OptionUnsafe is in a None state then True is returned if invoking None returns True. If the OptionUnsafe is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biexists</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the OptionUnsafe is in a None state then True is returned if  invoking None returns True. If the OptionUnsafe is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-biexists_A_OptionUnsafe_A_option__Func_A_bool_Some__Func_bool_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiExists(Some, None)</div></div></div><div class="member-title"><a name="biexists&lt;L, R>"></a>biexists&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biexists_L_R_Either_L_R_either__Func_R_bool_Right__Func_L_bool_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes a predicate on the value of the Either </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Right predicate</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Left predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biexists</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the predicate returns True.  False otherwise or if the Either is in a bottom state.</span></div></div></div><div style="display:none" id="code-biexists_L_R_Either_L_R_either__Func_R_bool_Right__Func_L_bool_Left_"><div class="section_title">SOURCE</div><div class="code">
            either.BiExists(Right,Left)</div></div></div><div class="member-title"><a name="biexists&lt;L, R>"></a>biexists&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biexists_L_R_EitherUnsafe_L_R_either__Func_R_bool_Right__Func_L_bool_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes a predicate on the value of the Either </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Right predicate</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Left predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biexists</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the predicate returns True.  False otherwise or if the Either is in a bottom state.</span></div></div></div><div style="display:none" id="code-biexists_L_R_EitherUnsafe_L_R_either__Func_R_bool_Right__Func_L_bool_Left_"><div class="section_title">SOURCE</div><div class="code">
            either.BiExists(Right, Left)</div></div></div><div class="member-title"><a name="biexistsT&lt;L, R>"></a>biexistsT&lt;L, R&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biexistsT_L_R_IEnumerable_Either&lt;L, R>_self__Func_R_bool_Right__Func_L_bool_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biexistsT</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-biexistsT_L_R_IEnumerable_Either&lt;L, R>_self__Func_R_bool_Right__Func_L_bool_Left_"><div class="section_title">SOURCE</div><div class="code">
            self.Exists(x =&gt; x.BiExists(Right, Left))</div></div></div><div class="member-title"><a name="biexistsT&lt;L, R>"></a>biexistsT&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biexistsT_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self__Func_R_bool_Right__Func_L_bool_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biexistsT</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-biexistsT_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self__Func_R_bool_Right__Func_L_bool_Left_"><div class="section_title">SOURCE</div><div class="code">
            self.Exists(x =&gt; x.BiExists(Right, Left))</div></div></div><div class="member-title"><a name="bifilter&lt;T>"></a>bifilter&lt;T&gt;(Try&lt;T&gt;, Func&lt;T, bool&gt;, Func&lt;Exception, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifilter_T_Try_T_self__Func_T_bool_Succ__Func_Exception_bool_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; <span class="ident">bifilter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="keyword">bool</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bifilter_T_Try_T_self__Func_T_bool_Succ__Func_Exception_bool_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.BiFilter(Succ, Fail)</div></div></div><div class="member-title"><a name="bifilter&lt;T>"></a>bifilter&lt;T&gt;(TryAsync&lt;T&gt;, Func&lt;T, bool&gt;, Func&lt;Exception, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifilter_T_TryAsync_T_self__Func_T_bool_Succ__Func_Exception_bool_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">bifilter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="keyword">bool</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bifilter_T_TryAsync_T_self__Func_T_bool_Succ__Func_Exception_bool_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.BiFilter(Succ, Fail)</div></div></div><div class="member-title"><a name="bifilter&lt;T>"></a>bifilter&lt;T&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, bool&gt;, Func&lt;bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifilter_T_TryOptionAsync_T_self__Func_T_bool_Succ__Func_bool_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">bifilter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bifilter_T_TryOptionAsync_T_self__Func_T_bool_Succ__Func_bool_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.BiFilter(Succ, Fail)</div></div></div><div class="member-title"><a name="bifold&lt;L, R, S>"></a>bifold&lt;L, R, S&gt;(Either&lt;L, R&gt;, S, Func&lt;S, R, S&gt;, Func&lt;S, L, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifold_L_R_S_Either_L_R_either__S__state__Func_S_R_S_Right__Func_S_L_S_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Either types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Either is in a Right state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Either is in a Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">bifold</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">S</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-bifold_L_R_S_Either_L_R_either__S__state__Func_S_R_S_Right__Func_S_L_S_Left_"><div class="section_title">SOURCE</div><div class="code">
            either.BiFold(state, Right, Left)</div></div></div><div class="member-title"><a name="bifold&lt;L, R, S>"></a>bifold&lt;L, R, S&gt;(EitherUnsafe&lt;L, R&gt;, S, Func&lt;S, R, S&gt;, Func&lt;S, L, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifold_L_R_S_EitherUnsafe_L_R_either__S__state__Func_S_R_S_Right__Func_S_L_S_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Either types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Either is in a Right state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Either is in a Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">bifold</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">S</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-bifold_L_R_S_EitherUnsafe_L_R_either__S__state__Func_S_R_S_Right__Func_S_L_S_Left_"><div class="section_title">SOURCE</div><div class="code">
            either.BiFold(state, Right, Left)</div></div></div><div class="member-title"><a name="bifold&lt;S, A>"></a>bifold&lt;S, A&gt;(Option&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifold_S_A_Option_A_option__S__state__Func_S_A_S_Some__Func_S_S_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Option types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/> Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">bifold</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-bifold_S_A_Option_A_option__S__state__Func_S_A_S_Some__Func_S_S_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiFold(state, Some, None)</div></div></div><div class="member-title"><a name="bifold&lt;S, A>"></a>bifold&lt;S, A&gt;(Option&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifold_S_A_Option_A_option__S__state__Func_S_A_S_Some__Func_S_Unit_S_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Option types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/> Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">bifold</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-bifold_S_A_Option_A_option__S__state__Func_S_A_S_Some__Func_S_Unit_S_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiFold(state, Some, None)</div></div></div><div class="member-title"><a name="bifold&lt;S, A>"></a>bifold&lt;S, A&gt;(OptionUnsafe&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifold_S_A_OptionUnsafe_A_option__S__state__Func_S_A_S_Some__Func_S_S_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >OptionUnsafe types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/> Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if OptionUnsafe is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if OptionUnsafe is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">bifold</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-bifold_S_A_OptionUnsafe_A_option__S__state__Func_S_A_S_Some__Func_S_S_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiFold(state, Some, None)</div></div></div><div class="member-title"><a name="bifold&lt;S, A>"></a>bifold&lt;S, A&gt;(OptionUnsafe&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifold_S_A_OptionUnsafe_A_option__S__state__Func_S_A_S_Some__Func_S_Unit_S_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >OptionUnsafe types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/> Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if OptionUnsafe is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if OptionUnsafe is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">bifold</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-bifold_S_A_OptionUnsafe_A_option__S__state__Func_S_A_S_Some__Func_S_Unit_S_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiFold(state, Some, None)</div></div></div><div class="member-title"><a name="bifold&lt;S, T>"></a>bifold&lt;S, T&gt;(TryOption&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifold_S_T_TryOption_T_self__S__state__Func_S_T_S_Some__Func_S_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds the result of Try into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function when Try succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function when Try fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">bifold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-bifold_S_T_TryOption_T_self__S__state__Func_S_T_S_Some__Func_S_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.BiFold(state, Some, Fail)</div></div></div><div class="member-title"><a name="bifold&lt;T1, T2, S>"></a>bifold&lt;T1, T2, S&gt;(Tuple&lt;T1, T2&gt;, S, Func&lt;S, T1, S&gt;, Func&lt;S, T2, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifold_T1_T2_S_Tuple_T1_T2_self__S__state__Func_S_T1_S_firstFold__Func_S_T2_S_secondFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Bi-fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">bifold</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt; secondFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-bifold_T1_T2_S_Tuple_T1_T2_self__S__state__Func_S_T1_S_firstFold__Func_S_T2_S_secondFold_"><div class="section_title">SOURCE</div><div class="code">
            self.BiFold(state, firstFold, secondFold)</div></div></div><div class="member-title"><a name="bifold&lt;T1, T2, S>"></a>bifold&lt;T1, T2, S&gt;(ValueTuple&lt;T1, T2&gt;, S, Func&lt;S, T1, S&gt;, Func&lt;S, T2, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifold_T1_T2_S_ValueTuple_T1_T2_self__S__state__Func_S_T1_S_firstFold__Func_S_T2_S_secondFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Bi-fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">bifold</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt; secondFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-bifold_T1_T2_S_ValueTuple_T1_T2_self__S__state__Func_S_T1_S_firstFold__Func_S_T2_S_secondFold_"><div class="section_title">SOURCE</div><div class="code">
            self.BiFold(state, firstFold, secondFold)</div></div></div><div class="member-title"><a name="bifoldBack&lt;T1, T2, S>"></a>bifoldBack&lt;T1, T2, S&gt;(Tuple&lt;T1, T2&gt;, S, Func&lt;S, T2, S&gt;, Func&lt;S, T1, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifoldBack_T1_T2_S_Tuple_T1_T2_self__S__state__Func_S_T2_S_firstFold__Func_S_T1_S_secondFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Bi-fold back </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">bifoldBack</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt; secondFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-bifoldBack_T1_T2_S_Tuple_T1_T2_self__S__state__Func_S_T2_S_firstFold__Func_S_T1_S_secondFold_"><div class="section_title">SOURCE</div><div class="code">
            self.BiFoldBack(state, firstFold, secondFold)</div></div></div><div class="member-title"><a name="bifoldBack&lt;T1, T2, S>"></a>bifoldBack&lt;T1, T2, S&gt;(ValueTuple&lt;T1, T2&gt;, S, Func&lt;S, T2, S&gt;, Func&lt;S, T1, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifoldBack_T1_T2_S_ValueTuple_T1_T2_self__S__state__Func_S_T2_S_firstFold__Func_S_T1_S_secondFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Bi-fold back </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">bifoldBack</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt; secondFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-bifoldBack_T1_T2_S_ValueTuple_T1_T2_self__S__state__Func_S_T2_S_firstFold__Func_S_T1_S_secondFold_"><div class="section_title">SOURCE</div><div class="code">
            self.BiFoldBack(state, firstFold, secondFold)</div></div></div><div class="member-title"><a name="bifoldT&lt;L, R, S>"></a>bifoldT&lt;L, R, S&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;, S, Func&lt;S, R, S&gt;, Func&lt;S, L, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifoldT_L_R_S_IEnumerable_Either&lt;L, R>_self__S__state__Func_S_R_S_Right__Func_S_L_S_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">bifoldT</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">S</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-bifoldT_L_R_S_IEnumerable_Either&lt;L, R>_self__S__state__Func_S_R_S_Right__Func_S_L_S_Left_"><div class="section_title">SOURCE</div><div class="code">
            self.Fold(state, (s, e) =&gt; e.BiFold(s, Right, Left))</div></div></div><div class="member-title"><a name="bifoldT&lt;L, R, S>"></a>bifoldT&lt;L, R, S&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;, S, Func&lt;S, R, S&gt;, Func&lt;S, L, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bifoldT_L_R_S_IEnumerable_EitherUnsafe&lt;L, R>_self__S__state__Func_S_R_S_Right__Func_S_L_S_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">bifoldT</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">S</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-bifoldT_L_R_S_IEnumerable_EitherUnsafe&lt;L, R>_self__S__state__Func_S_R_S_Right__Func_S_L_S_Left_"><div class="section_title">SOURCE</div><div class="code">
            self.Fold(state, (s, e) =&gt; e.BiFold(s, Right, Left))</div></div></div><div class="member-title"><a name="biforall&lt;A>"></a>biforall&lt;A&gt;(Option&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biforall_A_Option_A_option__Func_A_bool_Some__Func_Unit_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the Option is in a None state then True is returned if invoking None returns True. If the Option is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biforall</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the Option is in a None state then True is returned if  invoking None returns True. If the Option is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-biforall_A_Option_A_option__Func_A_bool_Some__Func_Unit_bool_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiForAll(Some, None)</div></div></div><div class="member-title"><a name="biforall&lt;A>"></a>biforall&lt;A&gt;(Option&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biforall_A_Option_A_option__Func_A_bool_Some__Func_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the Option is in a None state then True is returned if invoking None returns True. If the Option is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biforall</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the Option is in a None state then True is returned if  invoking None returns True. If the Option is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-biforall_A_Option_A_option__Func_A_bool_Some__Func_bool_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiForAll(Some, None)</div></div></div><div class="member-title"><a name="biforall&lt;A>"></a>biforall&lt;A&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biforall_A_OptionUnsafe_A_option__Func_A_bool_Some__Func_Unit_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the OptionUnsafe is in a None state then True is returned if invoking None returns True. If the OptionUnsafe is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biforall</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the OptionUnsafe is in a None state then True is returned if  invoking None returns True. If the OptionUnsafe is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-biforall_A_OptionUnsafe_A_option__Func_A_bool_Some__Func_Unit_bool_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiForAll(Some, None)</div></div></div><div class="member-title"><a name="biforall&lt;A>"></a>biforall&lt;A&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biforall_A_OptionUnsafe_A_option__Func_A_bool_Some__Func_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the OptionUnsafe is in a None state then True is returned if invoking None returns True. If the OptionUnsafe is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biforall</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the OptionUnsafe is in a None state then True is returned if  invoking None returns True. If the OptionUnsafe is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-biforall_A_OptionUnsafe_A_option__Func_A_bool_Some__Func_bool_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiForAll(Some, None)</div></div></div><div class="member-title"><a name="biforall&lt;L, R>"></a>biforall&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biforall_L_R_Either_L_R_either__Func_R_bool_Right__Func_L_bool_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes a predicate on the value of the Either if it&#39;s in the Right state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Right predicate</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Left predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biforall</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the predicate returns True.  True if the Either is in a bottom state.</span></div></div></div><div style="display:none" id="code-biforall_L_R_Either_L_R_either__Func_R_bool_Right__Func_L_bool_Left_"><div class="section_title">SOURCE</div><div class="code">
            either.BiForAll(Right, Left)</div></div></div><div class="member-title"><a name="biforall&lt;L, R>"></a>biforall&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biforall_L_R_EitherUnsafe_L_R_either__Func_R_bool_Right__Func_L_bool_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes a predicate on the value of the Either if it&#39;s in the Right state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Right predicate</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Left predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biforall</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the predicate returns True.  True if the Either is in a bottom state.</span></div></div></div><div style="display:none" id="code-biforall_L_R_EitherUnsafe_L_R_either__Func_R_bool_Right__Func_L_bool_Left_"><div class="section_title">SOURCE</div><div class="code">
            either.BiForAll(Right, Left)</div></div></div><div class="member-title"><a name="biforallT&lt;L, R>"></a>biforallT&lt;L, R&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biforallT_L_R_IEnumerable_Either&lt;L, R>_self__Func_R_bool_Right__Func_L_bool_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biforallT</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-biforallT_L_R_IEnumerable_Either&lt;L, R>_self__Func_R_bool_Right__Func_L_bool_Left_"><div class="section_title">SOURCE</div><div class="code">
            self.Map(x =&gt; x.BiForAll(Right, Left)).Any()</div></div></div><div class="member-title"><a name="biforallT&lt;L, R>"></a>biforallT&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, bool&gt;, Func&lt;L, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biforallT_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self__Func_R_bool_Right__Func_L_bool_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biforallT</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="keyword">bool</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-biforallT_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self__Func_R_bool_Right__Func_L_bool_Left_"><div class="section_title">SOURCE</div><div class="code">
            self.Map(x =&gt; x.BiForAll(Right, Left)).Any()</div></div></div><div class="member-title"><a name="bimap&lt;A, B>"></a>bimap&lt;A, B&gt;(Option&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimap_A_B_Option_A_option__Func_A_B_Some__Func_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; <span class="ident">bimap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped functor</span></div></div></div><div style="display:none" id="code-bimap_A_B_Option_A_option__Func_A_B_Some__Func_B_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiMap(Some, None)</div></div></div><div class="member-title"><a name="bimap&lt;A, B>"></a>bimap&lt;A, B&gt;(Option&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Unit, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimap_A_B_Option_A_option__Func_A_B_Some__Func_Unit_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; <span class="ident">bimap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped functor</span></div></div></div><div style="display:none" id="code-bimap_A_B_Option_A_option__Func_A_B_Some__Func_Unit_B_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiMap(Some, None)</div></div></div><div class="member-title"><a name="bimap&lt;A, B>"></a>bimap&lt;A, B&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimap_A_B_OptionUnsafe_A_option__Func_A_B_Some__Func_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; <span class="ident">bimap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped functor</span></div></div></div><div style="display:none" id="code-bimap_A_B_OptionUnsafe_A_option__Func_A_B_Some__Func_B_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiMap(Some, None)</div></div></div><div class="member-title"><a name="bimap&lt;A, B>"></a>bimap&lt;A, B&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Unit, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimap_A_B_OptionUnsafe_A_option__Func_A_B_Some__Func_Unit_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; <span class="ident">bimap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped functor</span></div></div></div><div style="display:none" id="code-bimap_A_B_OptionUnsafe_A_option__Func_A_B_Some__Func_Unit_B_None_"><div class="section_title">SOURCE</div><div class="code">
            option.BiMap(Some, None)</div></div></div><div class="member-title"><a name="bimap&lt;L, R, LRet, RRet>"></a>bimap&lt;L, R, LRet, RRet&gt;(Either&lt;L, R&gt;, Func&lt;R, RRet&gt;, Func&lt;L, LRet&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimap_L_R_LRet_RRet_Either_L_R_either__Func_R_RRet_Right__Func_L_LRet_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Bi-maps the value in the Either if it&#39;s in a Right state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">RRet</span>&gt;</div></div><div class="arg-desc"><span >Right map function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">LRet</span>&gt;</div></div><div class="arg-desc"><span >Left map function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">LRet</span>, <span class="ident">RRet</span>&gt; <span class="ident">bimap</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">LRet</span>, <span class="ident">RRet</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">RRet</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">LRet</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">LRet</span>, <span class="ident">RRet</span>&gt;</div><div class="normal"><span >Mapped Either</span></div></div></div><div style="display:none" id="code-bimap_L_R_LRet_RRet_Either_L_R_either__Func_R_RRet_Right__Func_L_LRet_Left_"><div class="section_title">SOURCE</div><div class="code">
            either.BiMap(Right, Left)</div></div></div><div class="member-title"><a name="bimap&lt;L, R, LRet, RRet>"></a>bimap&lt;L, R, LRet, RRet&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, RRet&gt;, Func&lt;L, LRet&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimap_L_R_LRet_RRet_EitherUnsafe_L_R_either__Func_R_RRet_Right__Func_L_LRet_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Bi-maps the value in the Either if it&#39;s in a Right state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">RRet</span>&gt;</div></div><div class="arg-desc"><span >Right map function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">LRet</span>&gt;</div></div><div class="arg-desc"><span >Left map function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">LRet</span>, <span class="ident">RRet</span>&gt; <span class="ident">bimap</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">LRet</span>, <span class="ident">RRet</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">RRet</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">LRet</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">LRet</span>, <span class="ident">RRet</span>&gt;</div><div class="normal"><span >Mapped EitherUnsafe</span></div></div></div><div style="display:none" id="code-bimap_L_R_LRet_RRet_EitherUnsafe_L_R_either__Func_R_RRet_Right__Func_L_LRet_Left_"><div class="section_title">SOURCE</div><div class="code">
            either.BiMap(Right, Left)</div></div></div><div class="member-title"><a name="bimap&lt;T, R>"></a>bimap&lt;T, R&gt;(Try&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimap_T_R_Try_T_tryDel__Func_T_R_Succ__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt; <span class="ident">bimap</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; tryDel, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-bimap_T_R_Try_T_tryDel__Func_T_R_Succ__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.BiMap(Succ, Fail)</div></div></div><div class="member-title"><a name="bimap&lt;T, R>"></a>bimap&lt;T, R&gt;(TryAsync&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimap_T_R_TryAsync_T_tryDel__Func_T_R_Succ__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">R</span>&gt; <span class="ident">bimap</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; tryDel, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-bimap_T_R_TryAsync_T_tryDel__Func_T_R_Succ__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.BiMap(Succ, Fail)</div></div></div><div class="member-title"><a name="bimap&lt;T, R>"></a>bimap&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimap_T_R_TryOption_T_tryDel__Func_T_R_Some__Func_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">bimap</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; tryDel, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-bimap_T_R_TryOption_T_tryDel__Func_T_R_Some__Func_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.BiMap(Some, Fail)</div></div></div><div class="member-title"><a name="bimap&lt;T, R>"></a>bimap&lt;T, R&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimap_T_R_TryOptionAsync_T_tryDel__Func_T_R_Succ__Func_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt; <span class="ident">bimap</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; tryDel, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-bimap_T_R_TryOptionAsync_T_tryDel__Func_T_R_Succ__Func_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.BiMap(Succ, Fail)</div></div></div><div class="member-title"><a name="bimap&lt;T1, T2, R1, R2>"></a>bimap&lt;T1, T2, R1, R2&gt;(Tuple&lt;T1, T2&gt;, Func&lt;T1, R1&gt;, Func&lt;T2, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimap_T1_T2_R1_R2_Tuple_T1_T2_self__Func_T1_R1_firstMap__Func_T2_R2_secondMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Bi-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">R1</span>, <span class="ident">R2</span>&gt; <span class="ident">bimap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R1</span>, <span class="ident">R2</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R1</span>&gt; firstMap, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R2</span>&gt; secondMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">R1</span>, <span class="ident">R2</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bimap_T1_T2_R1_R2_Tuple_T1_T2_self__Func_T1_R1_firstMap__Func_T2_R2_secondMap_"><div class="section_title">SOURCE</div><div class="code">
            self.BiMap(firstMap, secondMap)</div></div></div><div class="member-title"><a name="bimap&lt;T1, T2, R1, R2>"></a>bimap&lt;T1, T2, R1, R2&gt;(ValueTuple&lt;T1, T2&gt;, Func&lt;T1, R1&gt;, Func&lt;T2, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimap_T1_T2_R1_R2_ValueTuple_T1_T2_self__Func_T1_R1_firstMap__Func_T2_R2_secondMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Bi-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">R1</span>, <span class="ident">R2</span>&gt; <span class="ident">bimap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R1</span>, <span class="ident">R2</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R1</span>&gt; firstMap, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R2</span>&gt; secondMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">R1</span>, <span class="ident">R2</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bimap_T1_T2_R1_R2_ValueTuple_T1_T2_self__Func_T1_R1_firstMap__Func_T2_R2_secondMap_"><div class="section_title">SOURCE</div><div class="code">
            self.BiMap(firstMap, secondMap)</div></div></div><div class="member-title"><a name="bimapT&lt;L, R, LRet, RRet>"></a>bimapT&lt;L, R, LRet, RRet&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;, Func&lt;R, RRet&gt;, Func&lt;L, LRet&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimapT_L_R_LRet_RRet_IEnumerable_Either&lt;L, R>_self__Func_R_RRet_Right__Func_L_LRet_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">RRet</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">LRet</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">LRet</span>, <span class="ident">RRet</span>&gt;&gt; <span class="ident">bimapT</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">LRet</span>, <span class="ident">RRet</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">RRet</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">LRet</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">LRet</span>, <span class="ident">RRet</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bimapT_L_R_LRet_RRet_IEnumerable_Either&lt;L, R>_self__Func_R_RRet_Right__Func_L_LRet_Left_"><div class="section_title">SOURCE</div><div class="code">
            self.Map(x =&gt; x.BiMap(Right, Left))</div></div></div><div class="member-title"><a name="bimapT&lt;L, R, LRet, RRet>"></a>bimapT&lt;L, R, LRet, RRet&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, RRet&gt;, Func&lt;L, LRet&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimapT_L_R_LRet_RRet_IEnumerable_EitherUnsafe&lt;L, R>_self__Func_R_RRet_Right__Func_L_LRet_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">RRet</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">LRet</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">LRet</span>, <span class="ident">RRet</span>&gt;&gt; <span class="ident">bimapT</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">LRet</span>, <span class="ident">RRet</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">RRet</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">LRet</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">LRet</span>, <span class="ident">RRet</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bimapT_L_R_LRet_RRet_IEnumerable_EitherUnsafe&lt;L, R>_self__Func_R_RRet_Right__Func_L_LRet_Left_"><div class="section_title">SOURCE</div><div class="code">
            self.Map(x =&gt; x.BiMap(Right, Left))</div></div></div><div class="member-title"><a name="bind&lt;L, R, Ret>"></a>bind&lt;L, R, Ret&gt;(Either&lt;L, R&gt;, Func&lt;R, Either&lt;L, Ret&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_L_R_Ret_Either_L_R_either__Func_R_Either&lt;L, Ret>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind function https://en.wikipedia.org/wiki/Monad_(functional_programming) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span ></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;&gt;</div></div><div class="arg-desc"><span ></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt; <span class="ident">bind</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;</div><div class="normal"><span >Bound Either</span></div></div></div><div style="display:none" id="code-bind_L_R_Ret_Either_L_R_either__Func_R_Either&lt;L, Ret>_binder_"><div class="section_title">SOURCE</div><div class="code">
            either.Bind(binder)</div></div></div><div class="member-title"><a name="bind&lt;L, R, Ret>"></a>bind&lt;L, R, Ret&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, EitherUnsafe&lt;L, Ret&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_L_R_Ret_EitherUnsafe_L_R_either__Func_R_EitherUnsafe&lt;L, Ret>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind function https://en.wikipedia.org/wiki/Monad_(functional_programming) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span ></span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;&gt;</div></div><div class="arg-desc"><span ></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt; <span class="ident">bind</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;</div><div class="normal"><span >Bound EitherUnsafe</span></div></div></div><div style="display:none" id="code-bind_L_R_Ret_EitherUnsafe_L_R_either__Func_R_EitherUnsafe&lt;L, Ret>_binder_"><div class="section_title">SOURCE</div><div class="code">
            either.Bind(binder)</div></div></div><div class="member-title"><a name="bind&lt;MonoidW, W, A, B>"></a>bind&lt;MonoidW, W, A, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, Writer&lt;MonoidW, W, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_MonoidW_W_A_B_Writer_MonoidW_W_A_self__Func_A_Writer&lt;MonoidW, W, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt; <span class="ident">bind</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-bind_MonoidW_W_A_B_Writer_MonoidW_W_A_self__Func_A_Writer&lt;MonoidW, W, B>_f_"><div class="section_title">SOURCE</div><div class="code">
                self.Bind(f)</div></div></div><div class="member-title"><a name="bind&lt;NEWTYPE, T, PRED>"></a>bind&lt;NEWTYPE, T, PRED&gt;(NewType&lt;NEWTYPE, T, PRED&gt;, Func&lt;T, NEWTYPE&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_NEWTYPE_T_PRED_NewType_NEWTYPE_T_PRED_value__Func_T_NEWTYPE_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">NEWTYPE</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NEWTYPE</span> <span class="ident">bind</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">NEWTYPE</span>&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NEWTYPE</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NEWTYPE</span> : <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-bind_NEWTYPE_T_PRED_NewType_NEWTYPE_T_PRED_value__Func_T_NEWTYPE_bind_"><div class="section_title">SOURCE</div><div class="code">
            value.Bind(bind)</div></div></div><div class="member-title"><a name="bind&lt;NUMTYPE, NUM, T, PRED>"></a>bind&lt;NUMTYPE, NUM, T, PRED&gt;(NumType&lt;NUMTYPE, NUM, T, PRED&gt;, Func&lt;T, NUMTYPE&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_NUMTYPE_NUM_T_PRED_NumType_NUMTYPE_NUM_T_PRED_value__Func_T_NUMTYPE_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">NUMTYPE</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NUMTYPE</span> <span class="ident">bind</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">NUMTYPE</span>&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NUMTYPE</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-bind_NUMTYPE_NUM_T_PRED_NumType_NUMTYPE_NUM_T_PRED_value__Func_T_NUMTYPE_bind_"><div class="section_title">SOURCE</div><div class="code">
            value.Bind(bind)</div></div></div><div class="member-title"><a name="bind&lt;NUMTYPE, NUM, T>"></a>bind&lt;NUMTYPE, NUM, T&gt;(NumType&lt;NUMTYPE, NUM, T&gt;, Func&lt;T, NUMTYPE&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_NUMTYPE_NUM_T_NumType_NUMTYPE_NUM_T_value__Func_T_NUMTYPE_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">NUMTYPE</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NUMTYPE</span> <span class="ident">bind</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">NUMTYPE</span>&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NUMTYPE</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-bind_NUMTYPE_NUM_T_NumType_NUMTYPE_NUM_T_value__Func_T_NUMTYPE_bind_"><div class="section_title">SOURCE</div><div class="code">
            value.Bind(bind)</div></div></div><div class="member-title"><a name="bind&lt;SELF, FLOAT, T, PRED>"></a>bind&lt;SELF, FLOAT, T, PRED&gt;(FloatType&lt;SELF, FLOAT, T, PRED&gt;, Func&lt;T, SELF&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_SELF_FLOAT_T_PRED_FloatType_SELF_FLOAT_T_PRED_value__Func_T_SELF_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">SELF</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SELF</span> <span class="ident">bind</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">SELF</span>&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SELF</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-bind_SELF_FLOAT_T_PRED_FloatType_SELF_FLOAT_T_PRED_value__Func_T_SELF_bind_"><div class="section_title">SOURCE</div><div class="code">
            value.Bind(bind)</div></div></div><div class="member-title"><a name="bind&lt;SELF, FLOAT, T>"></a>bind&lt;SELF, FLOAT, T&gt;(FloatType&lt;SELF, FLOAT, T&gt;, Func&lt;T, SELF&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_SELF_FLOAT_T_FloatType_SELF_FLOAT_T_value__Func_T_SELF_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">SELF</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SELF</span> <span class="ident">bind</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">SELF</span>&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SELF</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-bind_SELF_FLOAT_T_FloatType_SELF_FLOAT_T_value__Func_T_SELF_bind_"><div class="section_title">SOURCE</div><div class="code">
            value.Bind(bind)</div></div></div><div class="member-title"><a name="bind&lt;T, R>"></a>bind&lt;T, R&gt;(T?, Func&lt;T, R?&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_T_R_T__self__Func_T_R_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>?&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span>? <span class="ident">bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>?&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">R</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-bind_T_R_T__self__Func_T_R_binder_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? binder(self.Value)
                : default(R?)</div></div></div><div class="member-title"><a name="bind&lt;T, R>"></a>bind&lt;T, R&gt;(T?, Func&lt;T, R?&gt;, Func&lt;R?&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_T_R_T__self__Func_T_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>?&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>?&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span>? <span class="ident">bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>?&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>?&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">R</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-bind_T_R_T__self__Func_T_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? Some(self.Value)
                : None()</div></div></div><div class="member-title"><a name="bind&lt;T, R>"></a>bind&lt;T, R&gt;(Option&lt;T&gt;, Func&lt;T, Option&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_T_R_Option_T_option__Func_T_Option&lt;R>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt; <span class="ident">bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bind_T_R_Option_T_option__Func_T_Option&lt;R>_binder_"><div class="section_title">SOURCE</div><div class="code">
            option.Bind(binder)</div></div></div><div class="member-title"><a name="bind&lt;T, R>"></a>bind&lt;T, R&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, OptionUnsafe&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_T_R_OptionUnsafe_T_option__Func_T_OptionUnsafe&lt;R>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt; <span class="ident">bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bind_T_R_OptionUnsafe_T_option__Func_T_OptionUnsafe&lt;R>_binder_"><div class="section_title">SOURCE</div><div class="code">
            option.Bind(binder)</div></div></div><div class="member-title"><a name="bind&lt;T, R>"></a>bind&lt;T, R&gt;(Try&lt;T&gt;, Func&lt;T, Try&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_T_R_Try_T_tryDel__Func_T_Try&lt;R>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt; <span class="ident">bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; tryDel, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bind_T_R_Try_T_tryDel__Func_T_Try&lt;R>_binder_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.Bind(binder)</div></div></div><div class="member-title"><a name="bind&lt;T, R>"></a>bind&lt;T, R&gt;(Try&lt;T&gt;, Func&lt;T, Try&lt;R&gt;&gt;, Func&lt;Exception, Try&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_T_R_Try_T_self__Func_T_Try&lt;R>_Succ__Func_Exception_Try&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt; <span class="ident">bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bind_T_R_Try_T_self__Func_T_Try&lt;R>_Succ__Func_Exception_Try&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.BiBind(Succ, Fail)</div></div></div><div class="member-title"><a name="bind&lt;T, R>"></a>bind&lt;T, R&gt;(TryAsync&lt;T&gt;, Func&lt;T, TryAsync&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_T_R_TryAsync_T_tryDel__Func_T_TryAsync&lt;R>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryAsync</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">R</span>&gt; <span class="ident">bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; tryDel, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryAsync</span>&lt;<span class="ident">R</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bind_T_R_TryAsync_T_tryDel__Func_T_TryAsync&lt;R>_binder_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.Bind(binder)</div></div></div><div class="member-title"><a name="bind&lt;T, R>"></a>bind&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, TryOption&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_T_R_TryOption_T_tryDel__Func_T_TryOption&lt;R>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; tryDel, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bind_T_R_TryOption_T_tryDel__Func_T_TryOption&lt;R>_binder_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.Bind(binder)</div></div></div><div class="member-title"><a name="bind&lt;T, R>"></a>bind&lt;T, R&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, TryOptionAsync&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_T_R_TryOptionAsync_T_tryDel__Func_T_TryOptionAsync&lt;R>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt; <span class="ident">bind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; tryDel, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bind_T_R_TryOptionAsync_T_tryDel__Func_T_TryOptionAsync&lt;R>_binder_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.Bind(binder)</div></div></div><div class="member-title"><a name="bind&lt;T, U>"></a>bind&lt;T, U&gt;(Task&lt;T&gt;, Func&lt;T, Task&lt;U&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_T_U_Task_T_self__Func_T_Task&lt;U>_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation for Task </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">U</span>&gt; <span class="ident">bind</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">U</span>&gt;&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">U</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-bind_T_U_Task_T_self__Func_T_Task&lt;U>_bind_"><div class="section_title">SOURCE</div><div class="code">
            self.Bind(bind)</div></div></div><div class="member-title"><a name="censor&lt;MonoidW, W, A>"></a>censor&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;W, W&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-censor_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_W_W_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Censor is an action that executes the writer monad and applies the function f  to its output, leaving the return value, leaving the return value unchanged. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">W</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">censor</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">W</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-censor_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_W_W_f_"><div class="section_title">SOURCE</div><div class="code">
                self.Censor(f)</div></div></div><div class="member-title"><a name="choose&lt;Env, A>"></a>choose&lt;Env, A&gt;(Reader&lt;Env, Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choose_Env_A_Reader_Env_Option&lt;A>_monads_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Chooses the first monad result that has a Some(x) for the value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">monads</div><div class="arg-type"><span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">choose</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;(<span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; monads)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-choose_Env_A_Reader_Env_Option&lt;A>_monads_"><div class="section_title">SOURCE</div><div class="code">
            state =&gt;
            {
                foreach (var monad in monads)
                {
                    var (x, bottom) = monad(state);
                    if (!bottom &amp;&amp; x.IsSome)
                    {
                        return (x, bottom);
                    }
                }
                return (default(A), true);
            }</div></div></div><div class="member-title"><a name="choose&lt;S, A>"></a>choose&lt;S, A&gt;(State&lt;S, Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choose_S_A_State_S_Option&lt;A>_monads_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Chooses the first monad result that has a Some(x) for the value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">monads</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">choose</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; monads)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-choose_S_A_State_S_Option&lt;A>_monads_"><div class="section_title">SOURCE</div><div class="code">
            state =&gt; 
            {
                foreach (var monad in monads)
                {
                    var (x, s, bottom) = monad(state);
                    if (!bottom &amp;&amp; x.IsSome)
                    {
                        return (x, s, bottom);
                    }
                }
                return (default(A), state, true);
            }</div></div></div><div class="member-title"><a name="compose&lt;T1, T2, T3, T4, T5, T6, T7>"></a>compose&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Func&lt;T1, T2&gt;, Func&lt;T2, T3&gt;, Func&lt;T3, T4&gt;, Func&lt;T4, T5&gt;, Func&lt;T5, T6&gt;, Func&lt;T6, T7&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compose_T1_T2_T3_T4_T5_T6_T7_Func_T1_T2_a__Func_T2_T3_b__Func_T3_T4_c__Func_T4_T5_d__Func_T5_T6_e__Func_T6_T7_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Function composition </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T7</span>&gt; <span class="ident">compose</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; a, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt; b, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>&gt; c, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>&gt; d, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>&gt; e, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T7</span>&gt;</div><div class="normal"><span >c(b(a(v)))</span></div></div></div><div style="display:none" id="code-compose_T1_T2_T3_T4_T5_T6_T7_Func_T1_T2_a__Func_T2_T3_b__Func_T3_T4_c__Func_T4_T5_d__Func_T5_T6_e__Func_T6_T7_f_"><div class="section_title">SOURCE</div><div class="code">
            v =&gt; f(e(d(c(b(a(v))))))</div></div></div><div class="member-title"><a name="compose&lt;T1, T2, T3, T4, T5, T6>"></a>compose&lt;T1, T2, T3, T4, T5, T6&gt;(Func&lt;T1, T2&gt;, Func&lt;T2, T3&gt;, Func&lt;T3, T4&gt;, Func&lt;T4, T5&gt;, Func&lt;T5, T6&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compose_T1_T2_T3_T4_T5_T6_Func_T1_T2_a__Func_T2_T3_b__Func_T3_T4_c__Func_T4_T5_d__Func_T5_T6_e_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Function composition </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T6</span>&gt; <span class="ident">compose</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; a, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt; b, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>&gt; c, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>&gt; d, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>&gt; e)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T6</span>&gt;</div><div class="normal"><span >c(b(a(v)))</span></div></div></div><div style="display:none" id="code-compose_T1_T2_T3_T4_T5_T6_Func_T1_T2_a__Func_T2_T3_b__Func_T3_T4_c__Func_T4_T5_d__Func_T5_T6_e_"><div class="section_title">SOURCE</div><div class="code">
            v =&gt; e(d(c(b(a(v)))))</div></div></div><div class="member-title"><a name="compose&lt;T1, T2, T3, T4, T5>"></a>compose&lt;T1, T2, T3, T4, T5&gt;(Func&lt;T1, T2&gt;, Func&lt;T2, T3&gt;, Func&lt;T3, T4&gt;, Func&lt;T4, T5&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compose_T1_T2_T3_T4_T5_Func_T1_T2_a__Func_T2_T3_b__Func_T3_T4_c__Func_T4_T5_d_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Function composition </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T5</span>&gt; <span class="ident">compose</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; a, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt; b, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>&gt; c, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>&gt; d)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T5</span>&gt;</div><div class="normal"><span >c(b(a(v)))</span></div></div></div><div style="display:none" id="code-compose_T1_T2_T3_T4_T5_Func_T1_T2_a__Func_T2_T3_b__Func_T3_T4_c__Func_T4_T5_d_"><div class="section_title">SOURCE</div><div class="code">
            v =&gt; d(c(b(a(v))))</div></div></div><div class="member-title"><a name="compose&lt;T1, T2, T3, T4>"></a>compose&lt;T1, T2, T3, T4&gt;(Func&lt;T1, T2&gt;, Func&lt;T2, T3&gt;, Func&lt;T3, T4&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compose_T1_T2_T3_T4_Func_T1_T2_a__Func_T2_T3_b__Func_T3_T4_c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Function composition </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T4</span>&gt; <span class="ident">compose</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; a, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt; b, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>&gt; c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T4</span>&gt;</div><div class="normal"><span >c(b(a(v)))</span></div></div></div><div style="display:none" id="code-compose_T1_T2_T3_T4_Func_T1_T2_a__Func_T2_T3_b__Func_T3_T4_c_"><div class="section_title">SOURCE</div><div class="code">
            v =&gt; c(b(a(v)))</div></div></div><div class="member-title"><a name="compose&lt;T1, T2, T3>"></a>compose&lt;T1, T2, T3&gt;(Func&lt;T1, T2&gt;, Func&lt;T2, T3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compose_T1_T2_T3_Func_T1_T2_a__Func_T2_T3_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Function composition </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T3</span>&gt; <span class="ident">compose</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; a, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T3</span>&gt;</div><div class="normal"><span >b(a(v))</span></div></div></div><div style="display:none" id="code-compose_T1_T2_T3_Func_T1_T2_a__Func_T2_T3_b_"><div class="section_title">SOURCE</div><div class="code">
            v =&gt; b(a(v))</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, A, B>"></a>concat&lt;MonoidA, A, B&gt;(Tuple&lt;A&gt;, Tuple&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_A_B_Tuple_A_a__Tuple_A_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt; <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt; a, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_A_B_Tuple_A_a__Tuple_A_b_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(mconcat&lt;MonoidA, A&gt;(a.Item1, b.Item1))</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, A>"></a>concat&lt;MonoidA, A&gt;(Tuple&lt;A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_A_Tuple_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_A_Tuple_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            mconcat&lt;MonoidA, A&gt;(a.Item1, a.Item2)</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, A>"></a>concat&lt;MonoidA, A&gt;(Tuple&lt;A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_A_Tuple_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_A_Tuple_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            mconcat&lt;MonoidA, A&gt;(a.Item1, a.Item2, a.Item3)</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, A>"></a>concat&lt;MonoidA, A&gt;(Tuple&lt;A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_A_Tuple_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_A_Tuple_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            mconcat&lt;MonoidA, A&gt;(a.Item1, a.Item2, a.Item3, a.Item4)</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, A>"></a>concat&lt;MonoidA, A&gt;(Tuple&lt;A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_A_Tuple_A_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_A_Tuple_A_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            mconcat&lt;MonoidA, A&gt;(a.Item1, a.Item2, a.Item3, a.Item4, a.Item5)</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, A>"></a>concat&lt;MonoidA, A&gt;(Tuple&lt;A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_A_Tuple_A_A_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_A_Tuple_A_A_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            mconcat&lt;MonoidA, A&gt;(a.Item1, a.Item2, a.Item3, a.Item4, a.Item5, a.Item6)</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, A>"></a>concat&lt;MonoidA, A&gt;(Tuple&lt;A, A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_A_Tuple_A_A_A_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_A_Tuple_A_A_A_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            mconcat&lt;MonoidA, A&gt;(a.Item1, a.Item2, a.Item3, a.Item4, a.Item5, a.Item6, a.Item7)</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, A>"></a>concat&lt;MonoidA, A&gt;(ValueTuple&lt;A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_A_ValueTuple_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_A_ValueTuple_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            mconcat&lt;MonoidA, A&gt;(a.Item1, a.Item2)</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, A>"></a>concat&lt;MonoidA, A&gt;(ValueTuple&lt;A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_A_ValueTuple_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_A_ValueTuple_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            mconcat&lt;MonoidA, A&gt;(a.Item1, a.Item2, a.Item3)</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, A>"></a>concat&lt;MonoidA, A&gt;(ValueTuple&lt;A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_A_ValueTuple_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_A_ValueTuple_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            mconcat&lt;MonoidA, A&gt;(a.Item1, a.Item2, a.Item3, a.Item4)</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, A>"></a>concat&lt;MonoidA, A&gt;(ValueTuple&lt;A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_A_ValueTuple_A_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_A_ValueTuple_A_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            mconcat&lt;MonoidA, A&gt;(a.Item1, a.Item2, a.Item3, a.Item4, a.Item5)</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, A>"></a>concat&lt;MonoidA, A&gt;(ValueTuple&lt;A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_A_ValueTuple_A_A_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_A_ValueTuple_A_A_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            mconcat&lt;MonoidA, A&gt;(a.Item1, a.Item2, a.Item3, a.Item4, a.Item5, a.Item6)</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, A>"></a>concat&lt;MonoidA, A&gt;(ValueTuple&lt;A, A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_A_ValueTuple_A_A_A_A_A_A_A_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_A_ValueTuple_A_A_A_A_A_A_A_a_"><div class="section_title">SOURCE</div><div class="code">
            mconcat&lt;MonoidA, A&gt;(a.Item1, a.Item2, a.Item3, a.Item4, a.Item5, a.Item6, a.Item7)</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, MonoidB, A, B>"></a>concat&lt;MonoidA, MonoidB, A, B&gt;(Tuple&lt;A, B&gt;, Tuple&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_MonoidB_A_B_Tuple_A_B_a__Tuple_A_B_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">MonoidB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; a, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidB</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_MonoidB_A_B_Tuple_A_B_a__Tuple_A_B_b_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(mconcat&lt;MonoidA, A&gt;(a.Item1, b.Item1),
                  mconcat&lt;MonoidB, B&gt;(a.Item2, b.Item2))</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, MonoidB, A, B>"></a>concat&lt;MonoidA, MonoidB, A, B&gt;(ValueTuple&lt;A&gt;, ValueTuple&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_MonoidB_A_B_ValueTuple_A_a__ValueTuple_A_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt; <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">MonoidB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt; a, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidB</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_MonoidB_A_B_ValueTuple_A_a__ValueTuple_A_b_"><div class="section_title">SOURCE</div><div class="code">
            VTuple(mconcat&lt;MonoidA, A&gt;(a.Item1, b.Item1))</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, MonoidB, A, B>"></a>concat&lt;MonoidA, MonoidB, A, B&gt;(ValueTuple&lt;A, B&gt;, ValueTuple&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_MonoidB_A_B_ValueTuple_A_B_a__ValueTuple_A_B_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">MonoidB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; a, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidB</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_MonoidB_A_B_ValueTuple_A_B_a__ValueTuple_A_B_b_"><div class="section_title">SOURCE</div><div class="code">
            (mconcat&lt;MonoidA, A&gt;(a.Item1, b.Item1),
             mconcat&lt;MonoidB, B&gt;(a.Item2, b.Item2))</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, MonoidB, MonoidC, A, B, C>"></a>concat&lt;MonoidA, MonoidB, MonoidC, A, B, C&gt;(Tuple&lt;A, B, C&gt;, Tuple&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_MonoidB_MonoidC_A_B_C_Tuple_A_B_C_a__Tuple_A_B_C_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">MonoidB</span>, <span class="ident">MonoidC</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; a, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidB</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidC</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">C</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_MonoidB_MonoidC_A_B_C_Tuple_A_B_C_a__Tuple_A_B_C_b_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(mconcat&lt;MonoidA, A&gt;(a.Item1, b.Item1),
                  mconcat&lt;MonoidB, B&gt;(a.Item2, b.Item2),
                  mconcat&lt;MonoidC, C&gt;(a.Item3, b.Item3))</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, MonoidB, MonoidC, A, B, C>"></a>concat&lt;MonoidA, MonoidB, MonoidC, A, B, C&gt;(ValueTuple&lt;A, B, C&gt;, ValueTuple&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_MonoidB_MonoidC_A_B_C_ValueTuple_A_B_C_a__ValueTuple_A_B_C_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">MonoidB</span>, <span class="ident">MonoidC</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; a, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidB</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidC</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">C</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_MonoidB_MonoidC_A_B_C_ValueTuple_A_B_C_a__ValueTuple_A_B_C_b_"><div class="section_title">SOURCE</div><div class="code">
            (mconcat&lt;MonoidA, A&gt;(a.Item1, b.Item1),
             mconcat&lt;MonoidB, B&gt;(a.Item2, b.Item2),
             mconcat&lt;MonoidC, C&gt;(a.Item3, b.Item3))</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, A, B, C, D>"></a>concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, A, B, C, D&gt;(Tuple&lt;A, B, C, D&gt;, Tuple&lt;A, B, C, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_MonoidB_MonoidC_MonoidD_A_B_C_D_Tuple_A_B_C_D_a__Tuple_A_B_C_D_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">MonoidB</span>, <span class="ident">MonoidC</span>, <span class="ident">MonoidD</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; a, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidB</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidC</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidD</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">D</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_MonoidB_MonoidC_MonoidD_A_B_C_D_Tuple_A_B_C_D_a__Tuple_A_B_C_D_b_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(mconcat&lt;MonoidA, A&gt;(a.Item1, b.Item1),
                  mconcat&lt;MonoidB, B&gt;(a.Item2, b.Item2),
                  mconcat&lt;MonoidC, C&gt;(a.Item3, b.Item3),
                  mconcat&lt;MonoidD, D&gt;(a.Item4, b.Item4))</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, A, B, C, D>"></a>concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, A, B, C, D&gt;(ValueTuple&lt;A, B, C, D&gt;, ValueTuple&lt;A, B, C, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_MonoidB_MonoidC_MonoidD_A_B_C_D_ValueTuple_A_B_C_D_a__ValueTuple_A_B_C_D_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">MonoidB</span>, <span class="ident">MonoidC</span>, <span class="ident">MonoidD</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; a, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidB</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidC</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidD</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">D</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_MonoidB_MonoidC_MonoidD_A_B_C_D_ValueTuple_A_B_C_D_a__ValueTuple_A_B_C_D_b_"><div class="section_title">SOURCE</div><div class="code">
            (mconcat&lt;MonoidA, A&gt;(a.Item1, b.Item1),
             mconcat&lt;MonoidB, B&gt;(a.Item2, b.Item2),
             mconcat&lt;MonoidC, C&gt;(a.Item3, b.Item3),
             mconcat&lt;MonoidD, D&gt;(a.Item4, b.Item4))</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, A, B, C, D, E>"></a>concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, A, B, C, D, E&gt;(Tuple&lt;A, B, C, D, E&gt;, Tuple&lt;A, B, C, D, E&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_MonoidB_MonoidC_MonoidD_MonoidE_A_B_C_D_E_Tuple_A_B_C_D_E_a__Tuple_A_B_C_D_E_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">MonoidB</span>, <span class="ident">MonoidC</span>, <span class="ident">MonoidD</span>, <span class="ident">MonoidE</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; a, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidB</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidC</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidD</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">D</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidE</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">E</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_MonoidB_MonoidC_MonoidD_MonoidE_A_B_C_D_E_Tuple_A_B_C_D_E_a__Tuple_A_B_C_D_E_b_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(mconcat&lt;MonoidA, A&gt;(a.Item1, b.Item1),
                  mconcat&lt;MonoidB, B&gt;(a.Item2, b.Item2),
                  mconcat&lt;MonoidC, C&gt;(a.Item3, b.Item3),
                  mconcat&lt;MonoidD, D&gt;(a.Item4, b.Item4),
                  mconcat&lt;MonoidE, E&gt;(a.Item5, b.Item5))</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, A, B, C, D, E>"></a>concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D, E&gt;, ValueTuple&lt;A, B, C, D, E&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_MonoidB_MonoidC_MonoidD_MonoidE_A_B_C_D_E_ValueTuple_A_B_C_D_E_a__ValueTuple_A_B_C_D_E_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">MonoidB</span>, <span class="ident">MonoidC</span>, <span class="ident">MonoidD</span>, <span class="ident">MonoidE</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="keyword">this</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; a, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidB</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidC</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidD</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">D</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidE</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">E</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_MonoidB_MonoidC_MonoidD_MonoidE_A_B_C_D_E_ValueTuple_A_B_C_D_E_a__ValueTuple_A_B_C_D_E_b_"><div class="section_title">SOURCE</div><div class="code">
            (mconcat&lt;MonoidA, A&gt;(a.Item1, b.Item1),
             mconcat&lt;MonoidB, B&gt;(a.Item2, b.Item2),
             mconcat&lt;MonoidC, C&gt;(a.Item3, b.Item3),
             mconcat&lt;MonoidD, D&gt;(a.Item4, b.Item4),
             mconcat&lt;MonoidE, E&gt;(a.Item5, b.Item5))</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, A, B, C, D, E, F>"></a>concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Tuple&lt;A, B, C, D, E, F&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_MonoidB_MonoidC_MonoidD_MonoidE_MonoidF_A_B_C_D_E_F_Tuple_A_B_C_D_E_F_a__Tuple_A_B_C_D_E_F_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">MonoidB</span>, <span class="ident">MonoidC</span>, <span class="ident">MonoidD</span>, <span class="ident">MonoidE</span>, <span class="ident">MonoidF</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; a, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidB</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidC</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidD</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">D</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidE</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">E</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidF</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">F</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_MonoidB_MonoidC_MonoidD_MonoidE_MonoidF_A_B_C_D_E_F_Tuple_A_B_C_D_E_F_a__Tuple_A_B_C_D_E_F_b_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(mconcat&lt;MonoidA, A&gt;(a.Item1, b.Item1),
                  mconcat&lt;MonoidB, B&gt;(a.Item2, b.Item2),
                  mconcat&lt;MonoidC, C&gt;(a.Item3, b.Item3),
                  mconcat&lt;MonoidD, D&gt;(a.Item4, b.Item4),
                  mconcat&lt;MonoidE, E&gt;(a.Item5, b.Item5),
                  mconcat&lt;MonoidF, F&gt;(a.Item6, b.Item6))</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, A, B, C, D, E, F>"></a>concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, ValueTuple&lt;A, B, C, D, E, F&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_MonoidB_MonoidC_MonoidD_MonoidE_MonoidF_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_F_a__ValueTuple_A_B_C_D_E_F_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">MonoidB</span>, <span class="ident">MonoidC</span>, <span class="ident">MonoidD</span>, <span class="ident">MonoidE</span>, <span class="ident">MonoidF</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; a, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidB</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidC</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidD</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">D</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidE</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">E</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidF</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">F</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_MonoidB_MonoidC_MonoidD_MonoidE_MonoidF_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_F_a__ValueTuple_A_B_C_D_E_F_b_"><div class="section_title">SOURCE</div><div class="code">
            (mconcat&lt;MonoidA, A&gt;(a.Item1, b.Item1),
             mconcat&lt;MonoidB, B&gt;(a.Item2, b.Item2),
             mconcat&lt;MonoidC, C&gt;(a.Item3, b.Item3),
             mconcat&lt;MonoidD, D&gt;(a.Item4, b.Item4),
             mconcat&lt;MonoidE, E&gt;(a.Item5, b.Item5),
             mconcat&lt;MonoidF, F&gt;(a.Item6, b.Item6))</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, MonoidG, A, B, C, D, E, F, G>"></a>concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, MonoidG, A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Tuple&lt;A, B, C, D, E, F, G&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_MonoidB_MonoidC_MonoidD_MonoidE_MonoidF_MonoidG_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_G_a__Tuple_A_B_C_D_E_F_G_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">MonoidB</span>, <span class="ident">MonoidC</span>, <span class="ident">MonoidD</span>, <span class="ident">MonoidE</span>, <span class="ident">MonoidF</span>, <span class="ident">MonoidG</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; a, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidB</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidC</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidD</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">D</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidE</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">E</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidF</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">F</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidG</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">G</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_MonoidB_MonoidC_MonoidD_MonoidE_MonoidF_MonoidG_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_G_a__Tuple_A_B_C_D_E_F_G_b_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(mconcat&lt;MonoidA, A&gt;(a.Item1, b.Item1),
                  mconcat&lt;MonoidB, B&gt;(a.Item2, b.Item2),
                  mconcat&lt;MonoidC, C&gt;(a.Item3, b.Item3),
                  mconcat&lt;MonoidD, D&gt;(a.Item4, b.Item4),
                  mconcat&lt;MonoidE, E&gt;(a.Item5, b.Item5),
                  mconcat&lt;MonoidF, F&gt;(a.Item6, b.Item6),
                  mconcat&lt;MonoidG, G&gt;(a.Item7, b.Item7))</div></div></div><div class="member-title"><a name="concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, MonoidG, A, B, C, D, E, F, G>"></a>concat&lt;MonoidA, MonoidB, MonoidC, MonoidD, MonoidE, MonoidF, MonoidG, A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, ValueTuple&lt;A, B, C, D, E, F, G&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-concat_MonoidA_MonoidB_MonoidC_MonoidD_MonoidE_MonoidF_MonoidG_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_G_a__ValueTuple_A_B_C_D_E_F_G_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monoid concat </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">concat</span>&lt;<span class="ident">MonoidA</span>, <span class="ident">MonoidB</span>, <span class="ident">MonoidC</span>, <span class="ident">MonoidD</span>, <span class="ident">MonoidE</span>, <span class="ident">MonoidF</span>, <span class="ident">MonoidG</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; a, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidA</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidB</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidC</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidD</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">D</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidE</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">E</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidF</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">F</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidG</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">G</span>&gt;</div></div><div style="display:none" id="code-concat_MonoidA_MonoidB_MonoidC_MonoidD_MonoidE_MonoidF_MonoidG_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_G_a__ValueTuple_A_B_C_D_E_F_G_b_"><div class="section_title">SOURCE</div><div class="code">
            (mconcat&lt;MonoidA, A&gt;(a.Item1, b.Item1),
             mconcat&lt;MonoidB, B&gt;(a.Item2, b.Item2),
             mconcat&lt;MonoidC, C&gt;(a.Item3, b.Item3),
             mconcat&lt;MonoidD, D&gt;(a.Item4, b.Item4),
             mconcat&lt;MonoidE, E&gt;(a.Item5, b.Item5),
             mconcat&lt;MonoidF, F&gt;(a.Item6, b.Item6),
             mconcat&lt;MonoidG, G&gt;(a.Item7, b.Item7))</div></div></div><div class="member-title"><a name="Cond&lt;A>"></a>Cond&lt;A&gt;(Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Cond_A_Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Conditional computation constructor.  Represents a computation that could  succeed or fail.  The result of the computation is an Option data-type.   Use the fluent API methods of Then and Else to extract the monadic value. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply to the input value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; <span class="ident">Cond</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div><div class="normal"><span >Conditional computation</span></div></div></div><div style="display:none" id="code-Cond_A_Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            input =&gt;
                pred(input)
                    ? Optional(input)
                    : None</div></div></div><div class="member-title"><a name="Cond&lt;A>"></a>Cond&lt;A&gt;(Func&lt;A, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Cond_A_Func_A_Task&lt;bool>_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Conditional asynchronous computation constructor.  Represents a computation  that could succeed or fail.  The result of the computation is an Option  data-type. Use the fluent API methods of Then and Else to extract the monadic  value. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div><div class="arg-desc"><span >Predicate to apply to the input value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; <span class="ident">Cond</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div><div class="normal"><span >Conditional computation</span></div></div></div><div style="display:none" id="code-Cond_A_Func_A_Task&lt;bool>_pred_"><div class="section_title">SOURCE</div><div class="code">
            (A input) =&gt;
                pred(input).ContinueWith(task =&gt;
                    task.Result
                        ? Optional(input)
                        : Option&lt;A&gt;.None)</div></div></div><div class="member-title"><a name="cons&lt;T>"></a>cons&lt;T&gt;(T, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-cons_T_T__head__IEnumerable_T_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Construct a list from head and tail head becomes the first item in the list Is lazy </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Cons&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">cons</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> head, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-cons_T_T__head__IEnumerable_T_tail_"><div class="section_title">SOURCE</div><div class="code">
            yield return head;
            foreach (var item in tail)
            {
                yield return item;
            }
        </div></div></div><div class="member-title"><a name="cons&lt;T>"></a>cons&lt;T&gt;(T, Lst&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-cons_T_T__head__Lst_T_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Construct a list from head and tail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Cons&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">cons</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> head, <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-cons_T_T__head__Lst_T_tail_"><div class="section_title">SOURCE</div><div class="code">
            tail.Insert(0, head)</div></div></div><div class="member-title"><a name="Cons&lt;T>"></a>Cons&lt;T&gt;(T, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Cons_T_T__head__IEnumerable_T_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Construct a list from head and tail head becomes the first item in the list Is lazy </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Cons</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span> head, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Cons_T_T__head__IEnumerable_T_tail_"><div class="section_title">SOURCE</div><div class="code">
            yield return head;
            foreach (var item in tail)
            {
                yield return item;
            }
        </div></div></div><div class="member-title"><a name="Cons&lt;T>"></a>Cons&lt;T&gt;(T, Lst&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Cons_T_T__head__Lst_T_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Construct a list from head and tail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Cons</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">T</span> head, <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Cons_T_T__head__Lst_T_tail_"><div class="section_title">SOURCE</div><div class="code">
            tail.Insert(0, head)</div></div></div><div class="member-title"><a name="contains&lt;EQ, A>"></a>contains&lt;EQ, A&gt;(Tuple&lt;A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_A_Tuple_A_self__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >One of the items matches the value passed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_A_Tuple_A_self__A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(self.Item1, value)</div></div></div><div class="member-title"><a name="contains&lt;EQ, A>"></a>contains&lt;EQ, A&gt;(Tuple&lt;A, A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_A_Tuple_A_A_self__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >One of the items matches the value passed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; self, <span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_A_Tuple_A_A_self__A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(self.Item1, value) ||
            default(EQ).Equals(self.Item2, value)</div></div></div><div class="member-title"><a name="contains&lt;EQ, A>"></a>contains&lt;EQ, A&gt;(Tuple&lt;A, A, A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_A_Tuple_A_A_A_self__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >One of the items matches the value passed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self, <span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_A_Tuple_A_A_A_self__A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(self.Item1, value) ||
            default(EQ).Equals(self.Item2, value) ||
            default(EQ).Equals(self.Item3, value)</div></div></div><div class="member-title"><a name="contains&lt;EQ, A>"></a>contains&lt;EQ, A&gt;(Tuple&lt;A, A, A, A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_A_Tuple_A_A_A_A_self__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >One of the items matches the value passed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self, <span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_A_Tuple_A_A_A_A_self__A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(self.Item1, value) ||
            default(EQ).Equals(self.Item2, value) ||
            default(EQ).Equals(self.Item3, value) ||
            default(EQ).Equals(self.Item4, value)</div></div></div><div class="member-title"><a name="contains&lt;EQ, A>"></a>contains&lt;EQ, A&gt;(Tuple&lt;A, A, A, A, A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_A_Tuple_A_A_A_A_A_self__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >One of the items matches the value passed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self, <span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_A_Tuple_A_A_A_A_A_self__A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(self.Item1, value) ||
            default(EQ).Equals(self.Item2, value) ||
            default(EQ).Equals(self.Item3, value) ||
            default(EQ).Equals(self.Item4, value) ||
            default(EQ).Equals(self.Item5, value)</div></div></div><div class="member-title"><a name="contains&lt;EQ, A>"></a>contains&lt;EQ, A&gt;(Tuple&lt;A, A, A, A, A, A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_A_Tuple_A_A_A_A_A_A_self__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >One of the items matches the value passed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self, <span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_A_Tuple_A_A_A_A_A_A_self__A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(self.Item1, value) ||
            default(EQ).Equals(self.Item2, value) ||
            default(EQ).Equals(self.Item3, value) ||
            default(EQ).Equals(self.Item4, value) ||
            default(EQ).Equals(self.Item5, value) ||
            default(EQ).Equals(self.Item6, value)</div></div></div><div class="member-title"><a name="contains&lt;EQ, A>"></a>contains&lt;EQ, A&gt;(Tuple&lt;A, A, A, A, A, A, A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_A_Tuple_A_A_A_A_A_A_A_self__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >One of the items matches the value passed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self, <span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_A_Tuple_A_A_A_A_A_A_A_self__A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(self.Item1, value) ||
            default(EQ).Equals(self.Item2, value) ||
            default(EQ).Equals(self.Item3, value) ||
            default(EQ).Equals(self.Item4, value) ||
            default(EQ).Equals(self.Item5, value) ||
            default(EQ).Equals(self.Item6, value) ||
            default(EQ).Equals(self.Item7, value)</div></div></div><div class="member-title"><a name="contains&lt;EQ, A>"></a>contains&lt;EQ, A&gt;(ValueTuple&lt;A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_A_ValueTuple_A_self__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >One of the items matches the value passed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_A_ValueTuple_A_self__A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(self.Item1, value)</div></div></div><div class="member-title"><a name="contains&lt;EQ, A>"></a>contains&lt;EQ, A&gt;(ValueTuple&lt;A, A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_A_ValueTuple_A_A_self__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >One of the items matches the value passed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; self, <span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_A_ValueTuple_A_A_self__A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(self.Item1, value) ||
            default(EQ).Equals(self.Item2, value)</div></div></div><div class="member-title"><a name="contains&lt;EQ, A>"></a>contains&lt;EQ, A&gt;(ValueTuple&lt;A, A, A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_A_ValueTuple_A_A_A_self__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >One of the items matches the value passed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self, <span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_A_ValueTuple_A_A_A_self__A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(self.Item1, value) ||
            default(EQ).Equals(self.Item2, value) ||
            default(EQ).Equals(self.Item3, value)</div></div></div><div class="member-title"><a name="contains&lt;EQ, A>"></a>contains&lt;EQ, A&gt;(ValueTuple&lt;A, A, A, A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_A_ValueTuple_A_A_A_A_self__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >One of the items matches the value passed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self, <span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_A_ValueTuple_A_A_A_A_self__A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(self.Item1, value) ||
            default(EQ).Equals(self.Item2, value) ||
            default(EQ).Equals(self.Item3, value) ||
            default(EQ).Equals(self.Item4, value)</div></div></div><div class="member-title"><a name="contains&lt;EQ, A>"></a>contains&lt;EQ, A&gt;(ValueTuple&lt;A, A, A, A, A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_A_ValueTuple_A_A_A_A_A_self__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >One of the items matches the value passed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self, <span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_A_ValueTuple_A_A_A_A_A_self__A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(self.Item1, value) ||
            default(EQ).Equals(self.Item2, value) ||
            default(EQ).Equals(self.Item3, value) ||
            default(EQ).Equals(self.Item4, value) ||
            default(EQ).Equals(self.Item5, value)</div></div></div><div class="member-title"><a name="contains&lt;EQ, A>"></a>contains&lt;EQ, A&gt;(ValueTuple&lt;A, A, A, A, A, A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_A_ValueTuple_A_A_A_A_A_A_self__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >One of the items matches the value passed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self, <span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_A_ValueTuple_A_A_A_A_A_A_self__A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(self.Item1, value) ||
            default(EQ).Equals(self.Item2, value) ||
            default(EQ).Equals(self.Item3, value) ||
            default(EQ).Equals(self.Item4, value) ||
            default(EQ).Equals(self.Item5, value) ||
            default(EQ).Equals(self.Item6, value)</div></div></div><div class="member-title"><a name="contains&lt;EQ, A>"></a>contains&lt;EQ, A&gt;(ValueTuple&lt;A, A, A, A, A, A, A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_A_ValueTuple_A_A_A_A_A_A_A_self__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >One of the items matches the value passed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self, <span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_A_ValueTuple_A_A_A_A_A_A_A_self__A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(self.Item1, value) ||
            default(EQ).Equals(self.Item2, value) ||
            default(EQ).Equals(self.Item3, value) ||
            default(EQ).Equals(self.Item4, value) ||
            default(EQ).Equals(self.Item5, value) ||
            default(EQ).Equals(self.Item6, value) ||
            default(EQ).Equals(self.Item7, value)</div></div></div><div class="member-title"><a name="convert&lt;T>"></a>convert&lt;T&gt;(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-convert_T_string__text_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">text</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">convert</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">string</span> text)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-convert_T_string__text_"><div class="section_title">SOURCE</div><div class="code">
            if (text == null)
            {
                return None;
            }

            try
            {
                var val = (T)Convert.ChangeType(text, typeof(T));
                return val;
            }
            catch
            {
                return None;
            }
        </div></div></div><div class="member-title"><a name="count&lt;A>"></a>count&lt;A&gt;(Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_A_Option_A_option_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return the number of bound values in this structure: <br/><br/> <div class='code-line'>     None = 0</div> <br/><br/> <div class='code-line'>     Some = 1</div> <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">count</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; option)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span ></span></div></div></div><div style="display:none" id="code-count_A_Option_A_option_"><div class="section_title">SOURCE</div><div class="code">
            option.Count()</div></div></div><div class="member-title"><a name="count&lt;A>"></a>count&lt;A&gt;(OptionUnsafe&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_A_OptionUnsafe_A_option_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return the number of bound values in this structure: <br/><br/> <div class='code-line'>     None = 0</div> <br/><br/> <div class='code-line'>     Some = 1</div> <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">count</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; option)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span ></span></div></div></div><div style="display:none" id="code-count_A_OptionUnsafe_A_option_"><div class="section_title">SOURCE</div><div class="code">
            option.Count()</div></div></div><div class="member-title"><a name="count&lt;L, R>"></a>count&lt;L, R&gt;(Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_L_R_Either_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Counts the Either </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to count</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">count</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >1 if the Either is in a Right state, 0 otherwise.</span></div></div></div><div style="display:none" id="code-count_L_R_Either_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.Count()</div></div></div><div class="member-title"><a name="count&lt;L, R>"></a>count&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_L_R_EitherUnsafe_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Counts the Either </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to count</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">count</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >1 if the Either is in a Right state, 0 otherwise.</span></div></div></div><div style="display:none" id="code-count_L_R_EitherUnsafe_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.Count()</div></div></div><div class="member-title"><a name="count&lt;MonoidW, W>"></a>count&lt;MonoidW, W&gt;(Writer&lt;MonoidW, W, int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_MonoidW_W_Writer_MonoidW_W_int_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt; <span class="ident">count</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-count_MonoidW_W_Writer_MonoidW_W_int_self_"><div class="section_title">SOURCE</div><div class="code">
                self.Count()</div></div></div><div class="member-title"><a name="count&lt;NUMTYPE, NUM, T, PRED>"></a>count&lt;NUMTYPE, NUM, T, PRED&gt;(NumType&lt;NUMTYPE, NUM, T, PRED&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_NUMTYPE_NUM_T_PRED_NumType_NUMTYPE_NUM_T_PRED_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">count</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-count_NUMTYPE_NUM_T_PRED_NumType_NUMTYPE_NUM_T_PRED_value_"><div class="section_title">SOURCE</div><div class="code">
            1</div></div></div><div class="member-title"><a name="count&lt;NUMTYPE, NUM, T>"></a>count&lt;NUMTYPE, NUM, T&gt;(NumType&lt;NUMTYPE, NUM, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_NUMTYPE_NUM_T_NumType_NUMTYPE_NUM_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">count</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-count_NUMTYPE_NUM_T_NumType_NUMTYPE_NUM_T_value_"><div class="section_title">SOURCE</div><div class="code">
            1</div></div></div><div class="member-title"><a name="count&lt;SELF, FLOAT, T, PRED>"></a>count&lt;SELF, FLOAT, T, PRED&gt;(FloatType&lt;SELF, FLOAT, T, PRED&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_SELF_FLOAT_T_PRED_FloatType_SELF_FLOAT_T_PRED_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">count</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-count_SELF_FLOAT_T_PRED_FloatType_SELF_FLOAT_T_PRED_value_"><div class="section_title">SOURCE</div><div class="code">
            1</div></div></div><div class="member-title"><a name="count&lt;SELF, FLOAT, T>"></a>count&lt;SELF, FLOAT, T&gt;(FloatType&lt;SELF, FLOAT, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_SELF_FLOAT_T_FloatType_SELF_FLOAT_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">count</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-count_SELF_FLOAT_T_FloatType_SELF_FLOAT_T_value_"><div class="section_title">SOURCE</div><div class="code">
            1</div></div></div><div class="member-title"><a name="count&lt;T>"></a>count&lt;T&gt;(T?)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_T_T__self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns 1 if there is a value, 0 otherwise </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">count</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >1 if there is a value, 0 otherwise</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-count_T_T__self_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? 1
                : 0</div></div></div><div class="member-title"><a name="count&lt;T>"></a>count&lt;T&gt;(Try&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_T_Try_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Counts the number of bound values.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TrTry computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">count</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >1 if the Try computation is successful, 0 otherwise.</span></div></div></div><div style="display:none" id="code-count_T_Try_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Count()</div></div></div><div class="member-title"><a name="count&lt;T>"></a>count&lt;T&gt;(TryAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_T_TryAsync_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Counts the number of bound values.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryAsync computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">count</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"><span >1 if the TryAsync computation is successful, 0 otherwise.</span></div></div></div><div style="display:none" id="code-count_T_TryAsync_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Count()</div></div></div><div class="member-title"><a name="count&lt;T>"></a>count&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_T_TryOption_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Counts the number of bound values.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TrTry computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">count</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >1 if the Try computation is successful, 0 otherwise.</span></div></div></div><div style="display:none" id="code-count_T_TryOption_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Count()</div></div></div><div class="member-title"><a name="count&lt;T>"></a>count&lt;T&gt;(TryOptionAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_T_TryOptionAsync_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Counts the number of bound values.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryOptionAsync computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">count</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"><span >1 if the TryOptionAsync computation is successful, 0 otherwise.</span></div></div></div><div style="display:none" id="code-count_T_TryOptionAsync_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Count()</div></div></div><div class="member-title"><a name="count&lt;T>"></a>count&lt;T&gt;(Task&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_T_Task_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the Count of a Task T.  Returns either 1 or 0 if cancelled or faulted. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">count</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-count_T_Task_T_self_"><div class="section_title">SOURCE</div><div class="code"> self.Count()</div></div></div><div class="member-title"><a name="curry&lt;T1, T2, R>"></a>curry&lt;T1, T2, R&gt;(Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-curry_T1_T2_R_Func_T1_T2_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Curry the function &#39;f&#39; provided. You can then partially apply by calling: <br/><br/><div class='code-line'>     var curried = curry(f);</div><div class='code-line'>     var r = curried(a)(b)</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">curry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-curry_T1_T2_R_Func_T1_T2_R_f_"><div class="section_title">SOURCE</div><div class="code">
            (T1 a) =&gt; (T2 b) =&gt; f(a, b)</div></div></div><div class="member-title"><a name="curry&lt;T1, T2, T3, R>"></a>curry&lt;T1, T2, T3, R&gt;(Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-curry_T1_T2_T3_R_Func_T1_T2_T3_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Curry the function &#39;f&#39; provided. You can then partially apply by calling: <br/><br/><div class='code-line'>     var curried = curry(f);</div><div class='code-line'>     var r = curried(a)(b)(c)</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">curry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-curry_T1_T2_T3_R_Func_T1_T2_T3_R_f_"><div class="section_title">SOURCE</div><div class="code">
            (T1 a) =&gt; (T2 b) =&gt; (T3 c) =&gt; f(a, b, c)</div></div></div><div class="member-title"><a name="curry&lt;T1, T2, T3, T4, R>"></a>curry&lt;T1, T2, T3, T4, R&gt;(Func&lt;T1, T2, T3, T4, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-curry_T1_T2_T3_T4_R_Func_T1_T2_T3_T4_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Curry the function &#39;f&#39; provided. You can then partially apply by calling: <br/><br/><div class='code-line'>     var curried = curry(f);</div><div class='code-line'>     var r = curried(a)(b)(c)(d)</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">R</span>&gt;&gt;&gt;&gt; <span class="ident">curry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">R</span>&gt;&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-curry_T1_T2_T3_T4_R_Func_T1_T2_T3_T4_R_f_"><div class="section_title">SOURCE</div><div class="code">
            (T1 a) =&gt; (T2 b) =&gt; (T3 c) =&gt; (T4 d) =&gt; f(a, b, c, d)</div></div></div><div class="member-title"><a name="curry&lt;T1, T2, T3, T4, T5, R>"></a>curry&lt;T1, T2, T3, T4, T5, R&gt;(Func&lt;T1, T2, T3, T4, T5, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-curry_T1_T2_T3_T4_T5_R_Func_T1_T2_T3_T4_T5_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Curry the function &#39;f&#39; provided. You can then partially apply by calling: <br/><br/><div class='code-line'>     var curried = curry(f);</div><div class='code-line'>     var r = curried(a)(b)(c)(d)(e)</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">R</span>&gt;&gt;&gt;&gt;&gt; <span class="ident">curry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">R</span>&gt;&gt;&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-curry_T1_T2_T3_T4_T5_R_Func_T1_T2_T3_T4_T5_R_f_"><div class="section_title">SOURCE</div><div class="code">
            (T1 a) =&gt; (T2 b) =&gt; (T3 c) =&gt; (T4 d) =&gt; (T5 e) =&gt; f(a, b, c, d, e)</div></div></div><div class="member-title"><a name="curry&lt;T1, T2, T3, T4, T5, T6, R>"></a>curry&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-curry_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Curry the function &#39;func&#39; provided. You can then partially apply by calling: <br/><br/><div class='code-line'>     var curried = curry(f);</div><div class='code-line'>     var r = curried(a)(b)(c)(d)(e)(f)</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">R</span>&gt;&gt;&gt;&gt;&gt;&gt; <span class="ident">curry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">R</span>&gt;&gt;&gt;&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-curry_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_func_"><div class="section_title">SOURCE</div><div class="code">
            (T1 a) =&gt; (T2 b) =&gt; (T3 c) =&gt; (T4 d) =&gt; (T5 e) =&gt; (T6 f) =&gt; func(a, b, c, d, e, f)</div></div></div><div class="member-title"><a name="curry&lt;T1, T2, T3, T4, T5, T6, T7, R>"></a>curry&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-curry_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Curry the function &#39;func&#39; provided. You can then partially apply by calling: <br/><br/><div class='code-line'>     var curried = curry(f);</div><div class='code-line'>     var r = curried(a)(b)(c)(d)(e)(f)(g)</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">R</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="ident">curry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">R</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-curry_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_func_"><div class="section_title">SOURCE</div><div class="code">
            (T1 a) =&gt; (T2 b) =&gt; (T3 c) =&gt; (T4 d) =&gt; (T5 e) =&gt; (T6 f) =&gt; (T7 g) =&gt; func(a, b, c, d, e, f, g)</div></div></div><div class="member-title"><a name="curry&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>"></a>curry&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-curry_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Curry the function &#39;func&#39; provided. You can then partially apply by calling: <br/><br/><div class='code-line'>     var curried = curry(f);</div><div class='code-line'>     var r = curried(a)(b)(c)(d)(e)(f)(g)(h)</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">R</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="ident">curry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">R</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-curry_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func_"><div class="section_title">SOURCE</div><div class="code">
            (T1 a) =&gt; (T2 b) =&gt; (T3 c) =&gt; (T4 d) =&gt; (T5 e) =&gt; (T6 f) =&gt; (T7 g) =&gt; (T8 h) =&gt; func(a, b, c, d, e, f, g, h)</div></div></div><div class="member-title"><a name="curry&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>"></a>curry&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-curry_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Curry the function &#39;func&#39; provided. You can then partially apply by calling: <br/><br/><div class='code-line'>     var curried = curry(f);</div><div class='code-line'>     var r = curried(a)(b)(c)(d)(e)(f)(g)(h)(i)</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">Func</span>&lt;<span class="ident">T9</span>, <span class="ident">R</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="ident">curry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">Func</span>&lt;<span class="ident">T9</span>, <span class="ident">R</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-curry_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func_"><div class="section_title">SOURCE</div><div class="code">
            (T1 a) =&gt; (T2 b) =&gt; (T3 c) =&gt; (T4 d) =&gt; (T5 e) =&gt; (T6 f) =&gt; (T7 g) =&gt; (T8 h) =&gt; (T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="curry&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>"></a>curry&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-curry_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Curry the function &#39;func&#39; provided. You can then partially apply by calling: <br/><br/><div class='code-line'>     var curried = curry(f);</div><div class='code-line'>     var r = curried(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">Func</span>&lt;<span class="ident">T9</span>, <span class="ident">Func</span>&lt;<span class="ident">T10</span>, <span class="ident">R</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="ident">curry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">Func</span>&lt;<span class="ident">T9</span>, <span class="ident">Func</span>&lt;<span class="ident">T10</span>, <span class="ident">R</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-curry_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func_"><div class="section_title">SOURCE</div><div class="code">
            (T1 a) =&gt; (T2 b) =&gt; (T3 c) =&gt; (T4 d) =&gt; (T5 e) =&gt; (T6 f) =&gt; (T7 g) =&gt; (T8 h) =&gt; (T9 i) =&gt; (T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="delay"></a>delay(Action, TimeSpan)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-delay__Action__f__TimeSpan__delayFor_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Execute an action after a specified delay </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >Action to execute</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayFor</div><div class="arg-type"><span class="ident">TimeSpan</span></div></div><div class="arg-desc"><span >Time span to delay for</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">delay</span>(<span class="ident">Action</span> f, <span class="ident">TimeSpan</span> delayFor)</div></div><div style="display:none" id="code-delay__Action__f__TimeSpan__delayFor_"><div class="section_title">SOURCE</div><div class="code">
            if (delayFor.TotalMilliseconds &lt; 1)
            {
                f();
            }
            else
            {
                Task.Delay(delayFor).ContinueWith(_ =&gt; f());
            }
            return unit;
        </div></div></div><div class="member-title"><a name="delay"></a>delay(Action, DateTime)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-delay__Action__f__DateTime__delayUntil_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Execute a function at a specific time </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >Action to execute</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayUntil</div><div class="arg-type"><span class="ident">DateTime</span></div></div><div class="arg-desc"><span >DateTime to wake up at.</span></div></div><div class="section_title">REMARKS</div><span >This will fail to be accurate across a Daylight Saving Time boundary </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">delay</span>(<span class="ident">Action</span> f, <span class="ident">DateTime</span> delayUntil)</div></div><div style="display:none" id="code-delay__Action__f__DateTime__delayUntil_"><div class="section_title">SOURCE</div><div class="code">
            delay(f, delayUntil.ToUniversalTime() - DateTime.UtcNow)</div></div></div><div class="member-title"><a name="delay&lt;T>"></a>delay&lt;T&gt;(Func&lt;T&gt;, TimeSpan)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-delay_T_Func_T_f__TimeSpan__delayFor_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Execute a function after a specified delay </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Function to execute</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayFor</div><div class="arg-type"><span class="ident">TimeSpan</span></div></div><div class="arg-desc"><span >Time span to delay for</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">delay</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; f, <span class="ident">TimeSpan</span> delayFor)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >IObservable T with the result</span></div></div></div><div style="display:none" id="code-delay_T_Func_T_f__TimeSpan__delayFor_"><div class="section_title">SOURCE</div><div class="code">
            delayFor.TotalMilliseconds &lt; 1
                ? Observable.Return(f()).Take(1)
                : Task.Delay(delayFor).ContinueWith(_ =&gt; f()).ToObservable().Take(1)</div></div></div><div class="member-title"><a name="delay&lt;T>"></a>delay&lt;T&gt;(Func&lt;T&gt;, DateTime)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-delay_T_Func_T_f__DateTime__delayUntil_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Execute a function at a specific time </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Function to execute</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">delayUntil</div><div class="arg-type"><span class="ident">DateTime</span></div></div><div class="arg-desc"><span >DateTime to wake up at.</span></div></div><div class="section_title">REMARKS</div><span >This will fail to be accurate across a Daylight Saving Time boundary </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">delay</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; f, <span class="ident">DateTime</span> delayUntil)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >IObservable T with the result</span></div></div></div><div style="display:none" id="code-delay_T_Func_T_f__DateTime__delayUntil_"><div class="section_title">SOURCE</div><div class="code">
            delay(f, delayUntil.ToUniversalTime() - DateTime.UtcNow)</div></div></div><div class="member-title"><a name="divide&lt;NUM, L, R>"></a>divide&lt;NUM, L, R&gt;(Either&lt;L, R&gt;, Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divide_NUM_L_R_Either_L_R_x__Either_L_R_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide the two bound values of x and y, uses a Divide type-class to provide the divide operation for type A.  For example x.Divide&lt;TDouble,double&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">divide</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >An option x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-divide_NUM_L_R_Either_L_R_x__Either_L_R_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Divide(a, b)</div></div></div><div class="member-title"><a name="divide&lt;NUM, L, R>"></a>divide&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divide_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide the two bound values of x and y, uses a Divide type-class to provide the divide operation for type A.  For example x.Divide&lt;TDouble,double&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">divide</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >An option x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-divide_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Divide(a, b)</div></div></div><div class="member-title"><a name="divide&lt;NUM, T>"></a>divide&lt;NUM, T&gt;(T?, T?)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divide_NUM_T_T__lhs__T__rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide the Somes. For numeric values the behaviour is to divide the Somes (lhs / rhs) For Lst values the behaviour is to divide all combinations of values in both lists  to produce a new list Otherwise if the T type derives from IDivisible then the behaviour is to call lhs.Divide(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span>? <span class="ident">divide</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">T</span>? lhs, <span class="ident">T</span>? rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>?</div><div class="normal"><span >lhs / rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-divide_NUM_T_T__lhs__T__rhs_"><div class="section_title">SOURCE</div><div class="code">
            if (!lhs.HasValue) return lhs;  // zero / rhs  = zero
            if (!rhs.HasValue) return rhs;  // lhs  / zero = undefined: zero
            return default(NUM).Divide(lhs.Value, rhs.Value);
        </div></div></div><div class="member-title"><a name="divide&lt;NUM, T>"></a>divide&lt;NUM, T&gt;(Option&lt;T&gt;, Option&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divide_NUM_T_Option_T_lhs__Option_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide the Ts </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">divide</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs / rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-divide_NUM_T_Option_T_lhs__Option_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Divide&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="divide&lt;NUM, T>"></a>divide&lt;NUM, T&gt;(OptionUnsafe&lt;T&gt;, OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divide_NUM_T_OptionUnsafe_T_lhs__OptionUnsafe_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide the Ts </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; <span class="ident">divide</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs / rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-divide_NUM_T_OptionUnsafe_T_lhs__OptionUnsafe_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Divide&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="divide&lt;NUM, T>"></a>divide&lt;NUM, T&gt;(Try&lt;T&gt;, Try&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divide_NUM_T_Try_T_lhs__Try_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide Try(x) by Try(y).  If either of the Trys throw then the result is Fail For numeric values the behaviour is to divide the Trys (lhs / rhs) For Lst values the behaviour is to divide all combinations of values in both lists  to produce a new list Otherwise if the R type derives from IDivisible then the behaviour is to call lhs.Divide(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; <span class="ident">divide</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs / rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-divide_NUM_T_Try_T_lhs__Try_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Divide&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="divide&lt;NUM, T>"></a>divide&lt;NUM, T&gt;(TryAsync&lt;T&gt;, TryAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divide_NUM_T_TryAsync_T_lhs__TryAsync_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide Try(x) by Try(y).  If either of the Trys throw then the result is Fail For numeric values the behaviour is to divide the Trys (lhs / rhs) For Lst values the behaviour is to divide all combinations of values in both lists  to produce a new list Otherwise if the R type derives from IDivisible then the behaviour is to call lhs.Divide(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">divide</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs / rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-divide_NUM_T_TryAsync_T_lhs__TryAsync_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Divide&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="divide&lt;NUM, T>"></a>divide&lt;NUM, T&gt;(TryOption&lt;T&gt;, TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divide_NUM_T_TryOption_T_lhs__TryOption_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide Try(x) by Try(y).  If either of the Trys throw then the result is Fail For numeric values the behaviour is to divide the Trys (lhs / rhs) For Lst values the behaviour is to divide all combinations of values in both lists  to produce a new list Otherwise if the R type derives from IDivisible then the behaviour is to call lhs.Divide(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">divide</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs / rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-divide_NUM_T_TryOption_T_lhs__TryOption_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Divide&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="divide&lt;NUM, T>"></a>divide&lt;NUM, T&gt;(TryOptionAsync&lt;T&gt;, TryOptionAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divide_NUM_T_TryOptionAsync_T_lhs__TryOptionAsync_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide Try(x) by Try(y).  If either of the Trys throw then the result is Fail For numeric values the behaviour is to divide the Trys (lhs / rhs) For Lst values the behaviour is to divide all combinations of values in both lists  to produce a new list Otherwise if the R type derives from IDivisible then the behaviour is to call lhs.Divide(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">divide</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs / rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-divide_NUM_T_TryOptionAsync_T_lhs__TryOptionAsync_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Divide&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="divide&lt;NUMTYPE, NUM, A, PRED>"></a>divide&lt;NUMTYPE, NUM, A, PRED&gt;(NumType&lt;NUMTYPE, NUM, A, PRED&gt;, NUMTYPE)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divide_NUMTYPE_NUM_A_PRED_NumType_NUMTYPE_NUM_A_PRED_x__NUMTYPE__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product between the two bound values of x and y, uses a Product type-class  to provide the product operation for type A.  For example x.Product&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">NUMTYPE</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NUMTYPE</span> <span class="ident">divide</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; x, <span class="ident">NUMTYPE</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NUMTYPE</span></div><div class="normal"><span >Product of x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-divide_NUMTYPE_NUM_A_PRED_NumType_NUMTYPE_NUM_A_PRED_x__NUMTYPE__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Divide(a, b)</div></div></div><div class="member-title"><a name="divide&lt;NUMTYPE, NUM, A>"></a>divide&lt;NUMTYPE, NUM, A&gt;(NumType&lt;NUMTYPE, NUM, A&gt;, NUMTYPE)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divide_NUMTYPE_NUM_A_NumType_NUMTYPE_NUM_A_x__NUMTYPE__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product between the two bound values of x and y, uses a Product type-class  to provide the product operation for type A.  For example x.Product&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">NUMTYPE</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NUMTYPE</span> <span class="ident">divide</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt; x, <span class="ident">NUMTYPE</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NUMTYPE</span></div><div class="normal"><span >Product of x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divide_NUMTYPE_NUM_A_NumType_NUMTYPE_NUM_A_x__NUMTYPE__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Divide(a, b)</div></div></div><div class="member-title"><a name="divide&lt;SELF, FLOAT, A, PRED>"></a>divide&lt;SELF, FLOAT, A, PRED&gt;(FloatType&lt;SELF, FLOAT, A, PRED&gt;, SELF)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divide_SELF_FLOAT_A_PRED_FloatType_SELF_FLOAT_A_PRED_x__SELF__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product between the two bound values of x and y, uses a Product type-class  to provide the product operation for type A.  For example x.Product&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">SELF</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SELF</span> <span class="ident">divide</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; x, <span class="ident">SELF</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SELF</span></div><div class="normal"><span >Product of x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-divide_SELF_FLOAT_A_PRED_FloatType_SELF_FLOAT_A_PRED_x__SELF__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(FLOAT).Divide(a, b)</div></div></div><div class="member-title"><a name="divide&lt;SELF, FLOAT, A>"></a>divide&lt;SELF, FLOAT, A&gt;(FloatType&lt;SELF, FLOAT, A&gt;, SELF)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divide_SELF_FLOAT_A_FloatType_SELF_FLOAT_A_x__SELF__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product between the two bound values of x and y, uses a Product type-class  to provide the product operation for type A.  For example x.Product&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">SELF</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SELF</span> <span class="ident">divide</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt; x, <span class="ident">SELF</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SELF</span></div><div class="normal"><span >Product of x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divide_SELF_FLOAT_A_FloatType_SELF_FLOAT_A_x__SELF__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(FLOAT).Divide(a, b)</div></div></div><div class="member-title"><a name="empty&lt;T>"></a>empty&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-empty_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an empty IEnumerable T </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use List.empty&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">empty</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-empty_T_"><div class="section_title">SOURCE</div><div class="code">
            Lst&lt;T&gt;.Empty</div></div></div><div class="member-title"><a name="exceptionIs&lt;E>"></a>exceptionIs&lt;E&gt;(Exception)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exceptionIs_E_Exception__e_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Identifies an exception as being of type E </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">Exception</span></div></div><div class="arg-desc"><span >Exception to test</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exceptionIs</span>&lt;<span class="ident">E</span>&gt;(<span class="ident">Exception</span> e)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if e is of type E</span></div></div></div><div style="display:none" id="code-exceptionIs_E_Exception__e_"><div class="section_title">SOURCE</div><div class="code">
            if (e is E) return true;
            if (e.InnerException == null) return false;
            return exceptionIs&lt;E&gt;(e.InnerException);
        </div></div></div><div class="member-title"><a name="exists&lt;A>"></a>exists&lt;A&gt;(Option&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_A_Option_A_option__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the Option is in a None state then True is returned if invoking None returns True. If the Option is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the Option is in a None state then True is returned if  invoking None returns True. If the Option is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-exists_A_Option_A_option__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            option.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;A>"></a>exists&lt;A&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_A_OptionUnsafe_A_option__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the OptionUnsafe is in a None state then True is returned if invoking None returns True. If the OptionUnsafe is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the OptionUnsafe is in a None state then True is returned if  invoking None returns True. If the OptionUnsafe is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-exists_A_OptionUnsafe_A_option__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            option.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;L, R>"></a>exists&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;R, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_L_R_Either_L_R_either__Func_R_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes a predicate on the value of the Either if it&#39;s in the Right state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to check existence of</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the Either is in a Right state and the predicate returns True.  False otherwise.</span></div></div></div><div style="display:none" id="code-exists_L_R_Either_L_R_either__Func_R_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            either.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;L, R>"></a>exists&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_L_R_EitherUnsafe_L_R_either__Func_R_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes a predicate on the value of the Either if it&#39;s in the Right state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to check existence of</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the Either is in a Right state and the predicate returns True.  False otherwise.</span></div></div></div><div style="display:none" id="code-exists_L_R_EitherUnsafe_L_R_either__Func_R_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            either.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;MonoidW, W, A>"></a>exists&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">bool</span>&gt; <span class="ident">exists</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">bool</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-exists_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
                self.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;NEWTYPE, T, PRED>"></a>exists&lt;NEWTYPE, T, PRED&gt;(NewType&lt;NEWTYPE, T, PRED&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_NEWTYPE_T_PRED_NewType_NEWTYPE_T_PRED_value__Func_T_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NEWTYPE</span> : <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-exists_NEWTYPE_T_PRED_NewType_NEWTYPE_T_PRED_value__Func_T_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            predicate((T)value)</div></div></div><div class="member-title"><a name="exists&lt;NUMTYPE, NUM, T, PRED>"></a>exists&lt;NUMTYPE, NUM, T, PRED&gt;(NumType&lt;NUMTYPE, NUM, T, PRED&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_NUMTYPE_NUM_T_PRED_NumType_NUMTYPE_NUM_T_PRED_value__Func_T_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-exists_NUMTYPE_NUM_T_PRED_NumType_NUMTYPE_NUM_T_PRED_value__Func_T_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            predicate((T)value)</div></div></div><div class="member-title"><a name="exists&lt;NUMTYPE, NUM, T>"></a>exists&lt;NUMTYPE, NUM, T&gt;(NumType&lt;NUMTYPE, NUM, T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_NUMTYPE_NUM_T_NumType_NUMTYPE_NUM_T_value__Func_T_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-exists_NUMTYPE_NUM_T_NumType_NUMTYPE_NUM_T_value__Func_T_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            predicate((T)value)</div></div></div><div class="member-title"><a name="exists&lt;SELF, FLOAT, T, PRED>"></a>exists&lt;SELF, FLOAT, T, PRED&gt;(FloatType&lt;SELF, FLOAT, T, PRED&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_SELF_FLOAT_T_PRED_FloatType_SELF_FLOAT_T_PRED_value__Func_T_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-exists_SELF_FLOAT_T_PRED_FloatType_SELF_FLOAT_T_PRED_value__Func_T_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            predicate((T)value)</div></div></div><div class="member-title"><a name="exists&lt;SELF, FLOAT, T>"></a>exists&lt;SELF, FLOAT, T&gt;(FloatType&lt;SELF, FLOAT, T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_SELF_FLOAT_T_FloatType_SELF_FLOAT_T_value__Func_T_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-exists_SELF_FLOAT_T_FloatType_SELF_FLOAT_T_value__Func_T_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            predicate((T)value)</div></div></div><div class="member-title"><a name="exists&lt;T>"></a>exists&lt;T&gt;(T?, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_T_T__self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Exists Nullable.  Imagine the item has zero or one items depending on whether it&#39;s in a None state or not.  This function runs a predicate against the value if it exists, returns false if it doesn&#39;t. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-exists_T_T__self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? pred(self.Value)
                : false</div></div></div><div class="member-title"><a name="exists&lt;T>"></a>exists&lt;T&gt;(T?, Func&lt;T, bool&gt;, Func&lt;bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_T_T__self__Func_T_bool_Some__Func_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Exists Nullable.  Imagine the item has zero or one items depending on whether it&#39;s in a None state or not.  This function runs a predicate against the value if it exists, returns false if it doesn&#39;t. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Some predicate</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >None predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-exists_T_T__self__Func_T_bool_Some__Func_bool_None_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? Some(self.Value)
                : None()</div></div></div><div class="member-title"><a name="exists&lt;T>"></a>exists&lt;T&gt;(Try&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_T_Try_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for any value of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the predicate holds for the bound value.  False otherwise.</span></div></div></div><div style="display:none" id="code-exists_T_Try_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;T>"></a>exists&lt;T&gt;(TryAsync&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_T_TryAsync_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for any value of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">exists</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value.  False otherwise.</span></div></div></div><div style="display:none" id="code-exists_T_TryAsync_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;T>"></a>exists&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_T_TryOption_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for any value of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the predicate holds for the bound value.  False otherwise.</span></div></div></div><div style="display:none" id="code-exists_T_TryOption_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;T>"></a>exists&lt;T&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_T_TryOptionAsync_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for any value of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">exists</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value.  False otherwise.</span></div></div></div><div style="display:none" id="code-exists_T_TryOptionAsync_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;T>"></a>exists&lt;T&gt;(Task&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_T_Task_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns false if the Task is cancelled or faulted, otherwise it returns the result of pred(Result) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-exists_T_Task_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Exists(pred)</div></div></div><div class="member-title"><a name="expr"></a>expr(Expression&lt;Action&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr__Expression_Action_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Action</span>&gt; <span class="ident">expr</span>(<span class="ident">Expression</span>&lt;<span class="ident">Action</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr__Expression_Action_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="expr&lt;R>"></a>expr&lt;R&gt;(Expression&lt;Func&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr_R_Expression_Func&lt;R>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">expr</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr_R_Expression_Func&lt;R>_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="expr&lt;T1, R>"></a>expr&lt;T1, R&gt;(Expression&lt;Func&lt;T1, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr_T1_R_Expression_Func&lt;T1, R>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">expr</span>&lt;<span class="ident">T1</span>, <span class="ident">R</span>&gt;(<span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr_T1_R_Expression_Func&lt;T1, R>_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="expr&lt;T1, T2, R>"></a>expr&lt;T1, T2, R&gt;(Expression&lt;Func&lt;T1, T2, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr_T1_T2_R_Expression_Func&lt;T1, T2, R>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">expr</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr_T1_T2_R_Expression_Func&lt;T1, T2, R>_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="expr&lt;T1, T2, T3, R>"></a>expr&lt;T1, T2, T3, R&gt;(Expression&lt;Func&lt;T1, T2, T3, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr_T1_T2_T3_R_Expression_Func&lt;T1, T2, T3, R>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">expr</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr_T1_T2_T3_R_Expression_Func&lt;T1, T2, T3, R>_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="expr&lt;T1, T2, T3, T4, R>"></a>expr&lt;T1, T2, T3, T4, R&gt;(Expression&lt;Func&lt;T1, T2, T3, T4, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr_T1_T2_T3_T4_R_Expression_Func&lt;T1, T2, T3, T4, R>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">expr</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;(<span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr_T1_T2_T3_T4_R_Expression_Func&lt;T1, T2, T3, T4, R>_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="expr&lt;T1, T2, T3, T4, T5, R>"></a>expr&lt;T1, T2, T3, T4, T5, R&gt;(Expression&lt;Func&lt;T1, T2, T3, T4, T5, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr_T1_T2_T3_T4_T5_R_Expression_Func&lt;T1, T2, T3, T4, T5, R>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">expr</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;(<span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr_T1_T2_T3_T4_T5_R_Expression_Func&lt;T1, T2, T3, T4, T5, R>_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="expr&lt;T1, T2, T3, T4, T5, T6, R>"></a>expr&lt;T1, T2, T3, T4, T5, T6, R&gt;(Expression&lt;Func&lt;T1, T2, T3, T4, T5, T6, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr_T1_T2_T3_T4_T5_T6_R_Expression_Func&lt;T1, T2, T3, T4, T5, T6, R>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">expr</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;(<span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr_T1_T2_T3_T4_T5_T6_R_Expression_Func&lt;T1, T2, T3, T4, T5, T6, R>_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="expr&lt;T1, T2, T3, T4, T5, T6, T7, R>"></a>expr&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Expression&lt;Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr_T1_T2_T3_T4_T5_T6_T7_R_Expression_Func&lt;T1, T2, T3, T4, T5, T6, T7, R>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">expr</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;(<span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr_T1_T2_T3_T4_T5_T6_T7_R_Expression_Func&lt;T1, T2, T3, T4, T5, T6, T7, R>_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="expr&lt;T1, T2, T3, T4, T5, T6, T7>"></a>expr&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Expression&lt;Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr_T1_T2_T3_T4_T5_T6_T7_Expression_Action&lt;T1, T2, T3, T4, T5, T6, T7>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;&gt; <span class="ident">expr</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;(<span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr_T1_T2_T3_T4_T5_T6_T7_Expression_Action&lt;T1, T2, T3, T4, T5, T6, T7>_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="expr&lt;T1, T2, T3, T4, T5, T6>"></a>expr&lt;T1, T2, T3, T4, T5, T6&gt;(Expression&lt;Action&lt;T1, T2, T3, T4, T5, T6&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr_T1_T2_T3_T4_T5_T6_Expression_Action&lt;T1, T2, T3, T4, T5, T6>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;&gt; <span class="ident">expr</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;(<span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr_T1_T2_T3_T4_T5_T6_Expression_Action&lt;T1, T2, T3, T4, T5, T6>_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="expr&lt;T1, T2, T3, T4, T5>"></a>expr&lt;T1, T2, T3, T4, T5&gt;(Expression&lt;Action&lt;T1, T2, T3, T4, T5&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr_T1_T2_T3_T4_T5_Expression_Action&lt;T1, T2, T3, T4, T5>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;&gt; <span class="ident">expr</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;(<span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr_T1_T2_T3_T4_T5_Expression_Action&lt;T1, T2, T3, T4, T5>_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="expr&lt;T1, T2, T3, T4>"></a>expr&lt;T1, T2, T3, T4&gt;(Expression&lt;Action&lt;T1, T2, T3, T4&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr_T1_T2_T3_T4_Expression_Action&lt;T1, T2, T3, T4>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;&gt; <span class="ident">expr</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;(<span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr_T1_T2_T3_T4_Expression_Action&lt;T1, T2, T3, T4>_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="expr&lt;T1, T2, T3>"></a>expr&lt;T1, T2, T3&gt;(Expression&lt;Action&lt;T1, T2, T3&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr_T1_T2_T3_Expression_Action&lt;T1, T2, T3>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;&gt; <span class="ident">expr</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr_T1_T2_T3_Expression_Action&lt;T1, T2, T3>_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="expr&lt;T1, T2>"></a>expr&lt;T1, T2&gt;(Expression&lt;Action&lt;T1, T2&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr_T1_T2_Expression_Action&lt;T1, T2>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;&gt; <span class="ident">expr</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr_T1_T2_Expression_Action&lt;T1, T2>_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="expr&lt;T1>"></a>expr&lt;T1&gt;(Expression&lt;Action&lt;T1&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-expr_T1_Expression_Action&lt;T1>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Expression inference </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt;&gt; <span class="ident">expr</span>&lt;<span class="ident">T1</span>&gt;(<span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Expression</span>&lt;<span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt;&gt;</div><div class="normal"><span >Same expression passed in, just gives the type system a chance to infer</span></div></div></div><div style="display:none" id="code-expr_T1_Expression_Action&lt;T1>_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="failed&lt;T>"></a>failed&lt;T&gt;(Try&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-failed_T_Try_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value to the resulting exception (if the Try computation fails).   If the Try computation succeeds then a NotSupportedException is used. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">Exception</span>&gt; <span class="ident">failed</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">Exception</span>&gt;</div><div class="normal"><span >Try of Exception</span></div></div></div><div style="display:none" id="code-failed_T_Try_T_self_"><div class="section_title">SOURCE</div><div class="code">
            bimap(self, 
                Succ: _  =&gt; new NotSupportedException(),
                Fail: ex =&gt; ex
                )</div></div></div><div class="member-title"><a name="failed&lt;T>"></a>failed&lt;T&gt;(TryAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-failed_T_TryAsync_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value to the resulting exception (if the TryAsync computation fails).   If the TryAsync computation succeeds then a NotSupportedException is used. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryAsync computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">Exception</span>&gt; <span class="ident">failed</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">Exception</span>&gt;</div><div class="normal"><span >Try of Exception</span></div></div></div><div style="display:none" id="code-failed_T_TryAsync_T_self_"><div class="section_title">SOURCE</div><div class="code">
            bimap(self, 
                Succ: _  =&gt; new NotSupportedException(),
                Fail: ex =&gt; ex
                )</div></div></div><div class="member-title"><a name="failed&lt;T>"></a>failed&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-failed_T_TryOption_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value to the resulting exception (if the Try computation fails).   If the Try computation succeeds then a NotSupportedException is used. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">Exception</span>&gt; <span class="ident">failed</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">Exception</span>&gt;</div><div class="normal"><span >Try of Exception</span></div></div></div><div style="display:none" id="code-failed_T_TryOption_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.TriMap(
                Some: _   =&gt; new NotSupportedException(),
                None: ()  =&gt; new NotSupportedException(),
                Fail: ex  =&gt; ex
                )</div></div></div><div class="member-title"><a name="failwith"></a>failwith(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-failwith__string__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Raises a lazy Exception with the message provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc"><span >Exception message</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span> <span class="ident">failwith</span>(<span class="keyword">string</span> message)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span></div><div class="normal"><span >Action that when executed throws</span></div></div></div><div style="display:none" id="code-failwith__string__message_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt; { throw new Exception(message); }</div></div></div><div class="member-title"><a name="failwith&lt;R>"></a>failwith&lt;R&gt;(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-failwith_R_string__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Raises an Exception with the message provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc"><span >Exception message</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">failwith</span>&lt;<span class="ident">R</span>&gt;(<span class="keyword">string</span> message)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Throws an exception</span></div></div></div><div style="display:none" id="code-failwith_R_string__message_"><div class="section_title">SOURCE</div><div class="code">
            throw new Exception(message);
        </div></div></div><div class="member-title"><a name="filter&lt;L, R>"></a>filter&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;R, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_L_R_Either_L_R_either__Func_R_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter the Either </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div><div class="section_title">REMARKS</div><span >This may give unpredictable results for a filtered value.  The Either won&#39;t return true for IsLeft or IsRight.  IsBottom is True if the value is filtered and that should be checked for. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >If the Either is in the Left state it is returned as-is.   If in the Right state the predicate is applied to the Right value. If the predicate returns True the Either is returned as-is. If the predicate returns False the Either is returned in a &#39;Bottom&#39; state.</span></div></div></div><div style="display:none" id="code-filter_L_R_Either_L_R_either__Func_R_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            either.Filter(pred)</div></div></div><div class="member-title"><a name="filter&lt;L, R>"></a>filter&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_L_R_EitherUnsafe_L_R_either__Func_R_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter the Either </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div><div class="section_title">REMARKS</div><span >This may give unpredictable results for a filtered value.  The Either won&#39;t return true for IsLeft or IsRight.  IsBottom is True if the value is filtered and that should be checked for. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >If the Either is in the Left state it is returned as-is.   If in the Right state the predicate is applied to the Right value. If the predicate returns True the Either is returned as-is. If the predicate returns False the Either is returned in a &#39;Bottom&#39; state.</span></div></div></div><div style="display:none" id="code-filter_L_R_EitherUnsafe_L_R_either__Func_R_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            either.Filter(pred)</div></div></div><div class="member-title"><a name="filter&lt;MonoidW, W, A>"></a>filter&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-filter_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
                self.Filter(pred)</div></div></div><div class="member-title"><a name="filter&lt;T>"></a>filter&lt;T&gt;(T?, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_T_T__self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span>? <span class="ident">filter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-filter_T_T__self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? pred(self.Value)
                    ? self
                    : default(T?)
                : self</div></div></div><div class="member-title"><a name="filter&lt;T>"></a>filter&lt;T&gt;(T?, Func&lt;T, bool&gt;, Func&lt;bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_T_T__self__Func_T_bool_Some__Func_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span>? <span class="ident">filter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-filter_T_T__self__Func_T_bool_Some__Func_bool_None_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? Some(self.Value)
                    ? self
                    : default(T?)
                : None()
                    ? self
                    : default(T?)</div></div></div><div class="member-title"><a name="filter&lt;T>"></a>filter&lt;T&gt;(Option&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_T_Option_T_option__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value (if in a Some state) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Some(x) if the Option is in a Some state and the predicate returns True.  None otherwise.</span></div></div></div><div style="display:none" id="code-filter_T_Option_T_option__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            option.Filter(pred)</div></div></div><div class="member-title"><a name="filter&lt;T>"></a>filter&lt;T&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_T_OptionUnsafe_T_option__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value (if in a Some state) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Some(x) if the OptionUnsafe is in a Some state and the predicate returns True.  None otherwise.</span></div></div></div><div style="display:none" id="code-filter_T_OptionUnsafe_T_option__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            option.Filter(pred)</div></div></div><div class="member-title"><a name="filter&lt;T>"></a>filter&lt;T&gt;(Try&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_T_Try_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-filter_T_Try_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Filter(pred)</div></div></div><div class="member-title"><a name="filter&lt;T>"></a>filter&lt;T&gt;(Try&lt;T&gt;, Func&lt;T, bool&gt;, Func&lt;Exception, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_T_Try_T_self__Func_T_bool_Succ__Func_Exception_bool_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="keyword">bool</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-filter_T_Try_T_self__Func_T_bool_Succ__Func_Exception_bool_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.BiFilter(Succ, Fail)</div></div></div><div class="member-title"><a name="filter&lt;T>"></a>filter&lt;T&gt;(TryAsync&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_T_TryAsync_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-filter_T_TryAsync_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Filter(pred)</div></div></div><div class="member-title"><a name="filter&lt;T>"></a>filter&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_T_TryOption_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-filter_T_TryOption_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Filter(pred)</div></div></div><div class="member-title"><a name="filter&lt;T>"></a>filter&lt;T&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_T_TryOptionAsync_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-filter_T_TryOptionAsync_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Filter(pred)</div></div></div><div class="member-title"><a name="filter&lt;T>"></a>filter&lt;T&gt;(Task&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_T_Task_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filters the task.  This throws a BottomException when pred(Result) returns false </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">T</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-filter_T_Task_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.Filter(pred)</div></div></div><div class="member-title"><a name="flatten&lt;T>"></a>flatten&lt;T&gt;(Try&lt;Try&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flatten_T_Try_Try&lt;T>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Flattens nested Try computations </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; <span class="ident">flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Flattened Try computation</span></div></div></div><div style="display:none" id="code-flatten_T_Try_Try&lt;T>_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Flatten()</div></div></div><div class="member-title"><a name="flatten&lt;T>"></a>flatten&lt;T&gt;(Try&lt;Try&lt;Try&lt;T&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flatten_T_Try_Try&lt;Try&lt;T>>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Flattens nested Try computations </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; <span class="ident">flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Flattened Try computation</span></div></div></div><div style="display:none" id="code-flatten_T_Try_Try&lt;Try&lt;T>>_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Flatten()</div></div></div><div class="member-title"><a name="flatten&lt;T>"></a>flatten&lt;T&gt;(Try&lt;Try&lt;Try&lt;Try&lt;T&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flatten_T_Try_Try&lt;Try&lt;Try&lt;T>>>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Flattens nested Try computations </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; <span class="ident">flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Flattened Try computation</span></div></div></div><div style="display:none" id="code-flatten_T_Try_Try&lt;Try&lt;Try&lt;T>>>_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Flatten()</div></div></div><div class="member-title"><a name="flatten&lt;T>"></a>flatten&lt;T&gt;(TryAsync&lt;TryAsync&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flatten_T_TryAsync_TryAsync&lt;T>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Flattens nested TryAsync computations </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div><div class="arg-desc"><span >TryAsync computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Flattened TryAsync computation</span></div></div></div><div style="display:none" id="code-flatten_T_TryAsync_TryAsync&lt;T>_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Flatten()</div></div></div><div class="member-title"><a name="flatten&lt;T>"></a>flatten&lt;T&gt;(TryAsync&lt;TryAsync&lt;TryAsync&lt;T&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flatten_T_TryAsync_TryAsync&lt;TryAsync&lt;T>>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Flattens nested TryAsync computations </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;</div></div><div class="arg-desc"><span >TryAsync computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Flattened TryAsync computation</span></div></div></div><div style="display:none" id="code-flatten_T_TryAsync_TryAsync&lt;TryAsync&lt;T>>_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Flatten()</div></div></div><div class="member-title"><a name="flatten&lt;T>"></a>flatten&lt;T&gt;(TryAsync&lt;TryAsync&lt;TryAsync&lt;TryAsync&lt;T&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flatten_T_TryAsync_TryAsync&lt;TryAsync&lt;TryAsync&lt;T>>>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Flattens nested TryAsync computations </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;&gt;</div></div><div class="arg-desc"><span >TryAsync computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Flattened TryAsync computation</span></div></div></div><div style="display:none" id="code-flatten_T_TryAsync_TryAsync&lt;TryAsync&lt;TryAsync&lt;T>>>_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Flatten()</div></div></div><div class="member-title"><a name="flatten&lt;T>"></a>flatten&lt;T&gt;(TryOption&lt;TryOption&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flatten_T_TryOption_TryOption&lt;T>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Flattens nested Try computations </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Flattened Try computation</span></div></div></div><div style="display:none" id="code-flatten_T_TryOption_TryOption&lt;T>_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Flatten()</div></div></div><div class="member-title"><a name="flatten&lt;T>"></a>flatten&lt;T&gt;(TryOption&lt;TryOption&lt;TryOption&lt;T&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flatten_T_TryOption_TryOption&lt;TryOption&lt;T>>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Flattens nested Try computations </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Flattened Try computation</span></div></div></div><div style="display:none" id="code-flatten_T_TryOption_TryOption&lt;TryOption&lt;T>>_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Flatten()</div></div></div><div class="member-title"><a name="flatten&lt;T>"></a>flatten&lt;T&gt;(TryOption&lt;TryOption&lt;TryOption&lt;TryOption&lt;T&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flatten_T_TryOption_TryOption&lt;TryOption&lt;TryOption&lt;T>>>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Flattens nested Try computations </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Flattened Try computation</span></div></div></div><div style="display:none" id="code-flatten_T_TryOption_TryOption&lt;TryOption&lt;TryOption&lt;T>>>_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Flatten()</div></div></div><div class="member-title"><a name="flatten&lt;T>"></a>flatten&lt;T&gt;(TryOptionAsync&lt;TryOptionAsync&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flatten_T_TryOptionAsync_TryOptionAsync&lt;T>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Flattens nested TryOptionAsync computations </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div><div class="arg-desc"><span >TryOptionAsync computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Flattened TryOptionAsync computation</span></div></div></div><div style="display:none" id="code-flatten_T_TryOptionAsync_TryOptionAsync&lt;T>_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Flatten()</div></div></div><div class="member-title"><a name="flatten&lt;T>"></a>flatten&lt;T&gt;(TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;T&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flatten_T_TryOptionAsync_TryOptionAsync&lt;TryOptionAsync&lt;T>>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Flattens nested TryOptionAsync computations </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;</div></div><div class="arg-desc"><span >TryOptionAsync computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Flattened TryOptionAsync computation</span></div></div></div><div style="display:none" id="code-flatten_T_TryOptionAsync_TryOptionAsync&lt;TryOptionAsync&lt;T>>_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Flatten()</div></div></div><div class="member-title"><a name="flatten&lt;T>"></a>flatten&lt;T&gt;(TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;T&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flatten_T_TryOptionAsync_TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;T>>>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Flattens nested TryOptionAsync computations </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;&gt;</div></div><div class="arg-desc"><span >TryOptionAsync computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Flattened TryOptionAsync computation</span></div></div></div><div style="display:none" id="code-flatten_T_TryOptionAsync_TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;T>>>_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Flatten()</div></div></div><div class="member-title"><a name="flip&lt;A, B, C, R>"></a>flip&lt;A, B, C, R&gt;(Func&lt;A, Func&lt;B, Func&lt;C, R&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flip_A_B_C_R_Func_A_Func&lt;B, Func&lt;C, R>>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reverse the order of the first and last arguments of a curried function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">flip</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R</span>&gt;&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-flip_A_B_C_R_Func_A_Func&lt;B, Func&lt;C, R>>_f_"><div class="section_title">SOURCE</div><div class="code">
            c =&gt; b =&gt; a =&gt; f(a)(b)(c)</div></div></div><div class="member-title"><a name="flip&lt;A, B, C, R>"></a>flip&lt;A, B, C, R&gt;(Func&lt;A, B, C, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flip_A_B_C_R_Func_A_B_C_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reverse the order of the first and last arguments of a curried function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">B</span>, <span class="ident">A</span>, <span class="ident">R</span>&gt; <span class="ident">flip</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">B</span>, <span class="ident">A</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-flip_A_B_C_R_Func_A_B_C_R_f_"><div class="section_title">SOURCE</div><div class="code">
            (c, b, a) =&gt; f(a, b, c)</div></div></div><div class="member-title"><a name="Flip&lt;A, B, C, R>"></a>Flip&lt;A, B, C, R&gt;(Func&lt;A, Func&lt;B, Func&lt;C, R&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Flip_A_B_C_R_Func_A_Func&lt;B, Func&lt;C, R>>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reverse the order of the first and last arguments of a curried function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">Flip</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R</span>&gt;&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Flip_A_B_C_R_Func_A_Func&lt;B, Func&lt;C, R>>_f_"><div class="section_title">SOURCE</div><div class="code">
            c =&gt; b =&gt; a =&gt; f(a)(b)(c)</div></div></div><div class="member-title"><a name="Flip&lt;A, B, C, R>"></a>Flip&lt;A, B, C, R&gt;(Func&lt;A, B, C, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Flip_A_B_C_R_Func_A_B_C_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reverse the order of the first and last arguments of a curried function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">B</span>, <span class="ident">A</span>, <span class="ident">R</span>&gt; <span class="ident">Flip</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">B</span>, <span class="ident">A</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Flip_A_B_C_R_Func_A_B_C_R_f_"><div class="section_title">SOURCE</div><div class="code">
            (c, b, a) =&gt; f(a, b, c)</div></div></div><div class="member-title"><a name="flip&lt;A, B, C>"></a>flip&lt;A, B, C&gt;(Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flip_A_B_C_Func_A_B_C_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reverse the order of the first two arguments of a curried function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">A</span>, <span class="ident">C</span>&gt; <span class="ident">flip</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">A</span>, <span class="ident">C</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-flip_A_B_C_Func_A_B_C_f_"><div class="section_title">SOURCE</div><div class="code">
            (arg2, arg1) =&gt; f(arg1, arg2)</div></div></div><div class="member-title"><a name="Flip&lt;A, B, C>"></a>Flip&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Flip_A_B_C_Func_A_Func&lt;B, C>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reverse the order of the first two arguments of a curried function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Flip</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Flip_A_B_C_Func_A_Func&lt;B, C>_f_"><div class="section_title">SOURCE</div><div class="code">
            arg2 =&gt; arg1 =&gt; f(arg1)(arg2)</div></div></div><div class="member-title"><a name="Flip&lt;A, B, C>"></a>Flip&lt;A, B, C&gt;(Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Flip_A_B_C_Func_A_B_C_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reverse the order of the first two arguments of a curried function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">A</span>, <span class="ident">C</span>&gt; <span class="ident">Flip</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">A</span>, <span class="ident">C</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Flip_A_B_C_Func_A_B_C_f_"><div class="section_title">SOURCE</div><div class="code">
            (arg2, arg1) =&gt; f(arg1, arg2)</div></div></div><div class="member-title"><a name="flip&lt;A, B, R>"></a>flip&lt;A, B, R&gt;(Func&lt;A, Func&lt;B, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-flip_A_B_R_Func_A_Func&lt;B, R>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reverse the order of the first two arguments of a curried function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">flip</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-flip_A_B_R_Func_A_Func&lt;B, R>_f_"><div class="section_title">SOURCE</div><div class="code">
            b =&gt; a =&gt; f(a)(b)</div></div></div><div class="member-title"><a name="fold&lt;A, B, C, D, E, F, G, S>"></a>fold&lt;A, B, C, D, E, F, G, S&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, S, Func&lt;S, A, B, C, D, E, F, G, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_A_B_C_D_E_F_G_S_Tuple_A_B_C_D_E_F_G_self__S__state__Func_S_A_B_C_D_E_F_G_S_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-fold_A_B_C_D_E_F_G_S_Tuple_A_B_C_D_E_F_G_self__S__state__Func_S_A_B_C_D_E_F_G_S_fold_"><div class="section_title">SOURCE</div><div class="code">
            fold(state, self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="fold&lt;A, B, C, D, E, F, G, S>"></a>fold&lt;A, B, C, D, E, F, G, S&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, S, Func&lt;S, A, B, C, D, E, F, G, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_A_B_C_D_E_F_G_S_ValueTuple_A_B_C_D_E_F_G_self__S__state__Func_S_A_B_C_D_E_F_G_S_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-fold_A_B_C_D_E_F_G_S_ValueTuple_A_B_C_D_E_F_G_self__S__state__Func_S_A_B_C_D_E_F_G_S_fold_"><div class="section_title">SOURCE</div><div class="code">
            fold(state, self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="fold&lt;A, B, C, D, E, F, S>"></a>fold&lt;A, B, C, D, E, F, S&gt;(Tuple&lt;A, B, C, D, E, F&gt;, S, Func&lt;S, A, B, C, D, E, F, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_A_B_C_D_E_F_S_Tuple_A_B_C_D_E_F_self__S__state__Func_S_A_B_C_D_E_F_S_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-fold_A_B_C_D_E_F_S_Tuple_A_B_C_D_E_F_self__S__state__Func_S_A_B_C_D_E_F_S_fold_"><div class="section_title">SOURCE</div><div class="code">
            fold(state, self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6)</div></div></div><div class="member-title"><a name="fold&lt;A, B, C, D, E, F, S>"></a>fold&lt;A, B, C, D, E, F, S&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, S, Func&lt;S, A, B, C, D, E, F, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_A_B_C_D_E_F_S_ValueTuple_A_B_C_D_E_F_self__S__state__Func_S_A_B_C_D_E_F_S_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-fold_A_B_C_D_E_F_S_ValueTuple_A_B_C_D_E_F_self__S__state__Func_S_A_B_C_D_E_F_S_fold_"><div class="section_title">SOURCE</div><div class="code">
            fold(state, self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6)</div></div></div><div class="member-title"><a name="fold&lt;A, B, C, D, E, S>"></a>fold&lt;A, B, C, D, E, S&gt;(Tuple&lt;A, B, C, D, E&gt;, S, Func&lt;S, A, B, C, D, E, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_A_B_C_D_E_S_Tuple_A_B_C_D_E_self__S__state__Func_S_A_B_C_D_E_S_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-fold_A_B_C_D_E_S_Tuple_A_B_C_D_E_self__S__state__Func_S_A_B_C_D_E_S_fold_"><div class="section_title">SOURCE</div><div class="code">
            fold(state, self.Item1, self.Item2, self.Item3, self.Item4, self.Item5)</div></div></div><div class="member-title"><a name="fold&lt;A, B, C, D, E, S>"></a>fold&lt;A, B, C, D, E, S&gt;(ValueTuple&lt;A, B, C, D, E&gt;, S, Func&lt;S, A, B, C, D, E, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_A_B_C_D_E_S_ValueTuple_A_B_C_D_E_self__S__state__Func_S_A_B_C_D_E_S_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-fold_A_B_C_D_E_S_ValueTuple_A_B_C_D_E_self__S__state__Func_S_A_B_C_D_E_S_fold_"><div class="section_title">SOURCE</div><div class="code">
            fold(state, self.Item1, self.Item2, self.Item3, self.Item4, self.Item5)</div></div></div><div class="member-title"><a name="fold&lt;A, B, C, D, S>"></a>fold&lt;A, B, C, D, S&gt;(Tuple&lt;A, B, C, D&gt;, S, Func&lt;S, A, B, C, D, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_A_B_C_D_S_Tuple_A_B_C_D_self__S__state__Func_S_A_B_C_D_S_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-fold_A_B_C_D_S_Tuple_A_B_C_D_self__S__state__Func_S_A_B_C_D_S_fold_"><div class="section_title">SOURCE</div><div class="code">
            fold(state, self.Item1, self.Item2, self.Item3, self.Item4)</div></div></div><div class="member-title"><a name="fold&lt;A, B, C, D, S>"></a>fold&lt;A, B, C, D, S&gt;(ValueTuple&lt;A, B, C, D&gt;, S, Func&lt;S, A, B, C, D, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_A_B_C_D_S_ValueTuple_A_B_C_D_self__S__state__Func_S_A_B_C_D_S_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-fold_A_B_C_D_S_ValueTuple_A_B_C_D_self__S__state__Func_S_A_B_C_D_S_fold_"><div class="section_title">SOURCE</div><div class="code">
            fold(state, self.Item1, self.Item2, self.Item3, self.Item4)</div></div></div><div class="member-title"><a name="fold&lt;A, S>"></a>fold&lt;A, S&gt;(Tuple&lt;A&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_A_S_Tuple_A_self__S__state__Func_S_A_S_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-fold_A_S_Tuple_A_self__S__state__Func_S_A_S_fold_"><div class="section_title">SOURCE</div><div class="code">
            fold(state, self.Item1)</div></div></div><div class="member-title"><a name="fold&lt;A, S>"></a>fold&lt;A, S&gt;(ValueTuple&lt;A&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_A_S_ValueTuple_A_self__S__state__Func_S_A_S_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-fold_A_S_ValueTuple_A_self__S__state__Func_S_A_S_fold_"><div class="section_title">SOURCE</div><div class="code">
            fold(state, self.Item1)</div></div></div><div class="member-title"><a name="fold&lt;FState, MonoidW, W, A>"></a>fold&lt;FState, MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, FState, Func&lt;FState, A, FState&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_FState_MonoidW_W_A_Writer_MonoidW_W_A_self__FState__initialState__Func_FState_A_FState_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">initialState</div><div class="arg-type"><span class="ident">FState</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">FState</span>, <span class="ident">A</span>, <span class="ident">FState</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">FState</span>&gt; <span class="ident">fold</span>&lt;<span class="ident">FState</span>, <span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">FState</span> initialState, <span class="ident">Func</span>&lt;<span class="ident">FState</span>, <span class="ident">A</span>, <span class="ident">FState</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">FState</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-fold_FState_MonoidW_W_A_Writer_MonoidW_W_A_self__FState__initialState__Func_FState_A_FState_f_"><div class="section_title">SOURCE</div><div class="code">
                self.Fold(initialState, f)</div></div></div><div class="member-title"><a name="fold&lt;MonoidW, W, A>"></a>fold&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;W, A, W&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_W_A_W_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">A</span>, <span class="ident">W</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">W</span>&gt; <span class="ident">fold</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">A</span>, <span class="ident">W</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">W</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-fold_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_W_A_W_f_"><div class="section_title">SOURCE</div><div class="code">
                self.Fold(f)</div></div></div><div class="member-title"><a name="fold&lt;NEWTYPE, T, S, PRED>"></a>fold&lt;NEWTYPE, T, S, PRED&gt;(NewType&lt;NEWTYPE, T, PRED&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_NEWTYPE_T_S_PRED_NewType_NEWTYPE_T_PRED_value__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">S</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NEWTYPE</span> : <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-fold_NEWTYPE_T_S_PRED_NewType_NEWTYPE_T_PRED_value__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            value.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;NUMTYPE, NUM, T, S, PRED>"></a>fold&lt;NUMTYPE, NUM, T, S, PRED&gt;(NumType&lt;NUMTYPE, NUM, T, PRED&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_NUMTYPE_NUM_T_S_PRED_NumType_NUMTYPE_NUM_T_PRED_value__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">S</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-fold_NUMTYPE_NUM_T_S_PRED_NumType_NUMTYPE_NUM_T_PRED_value__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            value.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;NUMTYPE, NUM, T, S>"></a>fold&lt;NUMTYPE, NUM, T, S&gt;(NumType&lt;NUMTYPE, NUM, T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_NUMTYPE_NUM_T_S_NumType_NUMTYPE_NUM_T_value__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt; value, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-fold_NUMTYPE_NUM_T_S_NumType_NUMTYPE_NUM_T_value__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            value.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;S, A>"></a>fold&lt;S, A&gt;(Option&lt;A&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_S_A_Option_A_option__S__state__Func_S_A_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Option types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/>  Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if Option is in a Some state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-fold_S_A_Option_A_option__S__state__Func_S_A_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            option.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;S, A>"></a>fold&lt;S, A&gt;(OptionUnsafe&lt;A&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_S_A_OptionUnsafe_A_option__S__state__Func_S_A_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >OptionUnsafe types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/> Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if OptionUnsafe is in a Some state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-fold_S_A_OptionUnsafe_A_option__S__state__Func_S_A_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            option.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;S, L, R>"></a>fold&lt;S, L, R&gt;(Either&lt;L, R&gt;, S, Func&lt;S, R, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_S_L_R_Either_L_R_either__S__state__Func_S_R_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Either types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if structure is in a Right state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-fold_S_L_R_Either_L_R_either__S__state__Func_S_R_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            either.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;S, L, R>"></a>fold&lt;S, L, R&gt;(EitherUnsafe&lt;L, R&gt;, S, Func&lt;S, R, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_S_L_R_EitherUnsafe_L_R_either__S__state__Func_S_R_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Either types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if structure is in a Right state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">R</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-fold_S_L_R_EitherUnsafe_L_R_either__S__state__Func_S_R_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            either.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;S, T>"></a>fold&lt;S, T&gt;(T?, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_S_T_T__self__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Nullable into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-fold_S_T_T__self__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? folder(state, self.Value)
                : state</div></div></div><div class="member-title"><a name="fold&lt;S, T>"></a>fold&lt;S, T&gt;(T?, S, Func&lt;S, T, S&gt;, Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_S_T_T__self__S__state__Func_S_T_S_Some__Func_S_S_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Nullable into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Some</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for None</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-fold_S_T_T__self__S__state__Func_S_T_S_Some__Func_S_S_None_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? Some(state, self.Value)
                : None(state)</div></div></div><div class="member-title"><a name="fold&lt;S, T>"></a>fold&lt;S, T&gt;(Try&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_S_T_Try_T_self__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds the value of Try into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-fold_S_T_Try_T_self__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            self.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;S, T>"></a>fold&lt;S, T&gt;(Try&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_S_T_Try_T_self__S__state__Func_S_T_S_Succ__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds the result of Try into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function when Try succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function when Try fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-fold_S_T_Try_T_self__S__state__Func_S_T_S_Succ__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.BiFold(state, Succ, Fail)</div></div></div><div class="member-title"><a name="fold&lt;S, T>"></a>fold&lt;S, T&gt;(TryAsync&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_S_T_TryAsync_T_self__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds the value of TryAsync into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryAsync to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-fold_S_T_TryAsync_T_self__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            self.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;S, T>"></a>fold&lt;S, T&gt;(TryAsync&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_S_T_TryAsync_T_self__S__state__Func_S_T_S_Succ__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds the result of TryAsync into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function when TryAsync succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function when TryAsync fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-fold_S_T_TryAsync_T_self__S__state__Func_S_T_S_Succ__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.BiFold(state, Succ, Fail)</div></div></div><div class="member-title"><a name="fold&lt;S, T>"></a>fold&lt;S, T&gt;(TryOption&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_S_T_TryOption_T_self__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds the value of Try into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-fold_S_T_TryOption_T_self__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            self.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;S, T>"></a>fold&lt;S, T&gt;(TryOptionAsync&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_S_T_TryOptionAsync_T_self__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds the value of TryOptionAsync into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryOptionAsync to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-fold_S_T_TryOptionAsync_T_self__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            self.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;SELF, FLOAT, T, S, PRED>"></a>fold&lt;SELF, FLOAT, T, S, PRED&gt;(FloatType&lt;SELF, FLOAT, T, PRED&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_SELF_FLOAT_T_S_PRED_FloatType_SELF_FLOAT_T_PRED_value__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">S</span>, <span class="ident">PRED</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-fold_SELF_FLOAT_T_S_PRED_FloatType_SELF_FLOAT_T_PRED_value__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            value.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;SELF, FLOAT, T, S>"></a>fold&lt;SELF, FLOAT, T, S&gt;(FloatType&lt;SELF, FLOAT, T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_SELF_FLOAT_T_S_FloatType_SELF_FLOAT_T_value__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt; value, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-fold_SELF_FLOAT_T_S_FloatType_SELF_FLOAT_T_value__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            value.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;T, S>"></a>fold&lt;T, S&gt;(Task&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_T_S_Task_T_self__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds the Task.  Returns folder(state,Result) if not faulted or cancelled.  Returns state otherwise. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">T</span>, <span class="ident">S</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-fold_T_S_Task_T_self__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            self.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;T1, T2, S>"></a>fold&lt;T1, T2, S&gt;(Tuple&lt;T1, T2&gt;, S, Func&lt;S, T1, T2, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_T1_T2_S_Tuple_T1_T2_self__S__state__Func_S_T1_T2_S_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-fold_T1_T2_S_Tuple_T1_T2_self__S__state__Func_S_T1_T2_S_fold_"><div class="section_title">SOURCE</div><div class="code">
            self.Fold(state, fold)</div></div></div><div class="member-title"><a name="fold&lt;T1, T2, S>"></a>fold&lt;T1, T2, S&gt;(ValueTuple&lt;T1, T2&gt;, S, Func&lt;S, T1, T2, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_T1_T2_S_ValueTuple_T1_T2_self__S__state__Func_S_T1_T2_S_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-fold_T1_T2_S_ValueTuple_T1_T2_self__S__state__Func_S_T1_T2_S_fold_"><div class="section_title">SOURCE</div><div class="code">
            self.Fold(state, fold)</div></div></div><div class="member-title"><a name="fold&lt;T1, T2, T3, S>"></a>fold&lt;T1, T2, T3, S&gt;(Tuple&lt;T1, T2, T3&gt;, S, Func&lt;S, T1, T2, T3, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_T1_T2_T3_S_Tuple_T1_T2_T3_self__S__state__Func_S_T1_T2_T3_S_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-fold_T1_T2_T3_S_Tuple_T1_T2_T3_self__S__state__Func_S_T1_T2_T3_S_fold_"><div class="section_title">SOURCE</div><div class="code">
            fold(state, self.Item1, self.Item2, self.Item3)</div></div></div><div class="member-title"><a name="fold&lt;T1, T2, T3, S>"></a>fold&lt;T1, T2, T3, S&gt;(ValueTuple&lt;T1, T2, T3&gt;, S, Func&lt;S, T1, T2, T3, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_T1_T2_T3_S_ValueTuple_T1_T2_T3_self__S__state__Func_S_T1_T2_T3_S_fold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt; fold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-fold_T1_T2_T3_S_ValueTuple_T1_T2_T3_self__S__state__Func_S_T1_T2_T3_S_fold_"><div class="section_title">SOURCE</div><div class="code">
            fold(state, self.Item1, self.Item2, self.Item3)</div></div></div><div class="member-title"><a name="forall&lt;A>"></a>forall&lt;A&gt;(Option&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_A_Option_A_option__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the Option is in a None state then True is returned (because the predicate applies for-all values). If the Option is in a Some state the value is the result of running  applying the bound value to the predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the Option is in a None state then True is returned (because  the predicate applies for-all values).  If the Option is in a Some state the value is the result of running applying the bound value to the  predicate supplied.</span></div></div></div><div style="display:none" id="code-forall_A_Option_A_option__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            option.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;A>"></a>forall&lt;A&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_A_OptionUnsafe_A_option__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the OptionUnsafe is in a None state then True is returned (because the predicate applies for-all values). If the OptionUnsafe is in a Some state the value is the result of running  applying the bound value to the predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the OptionUnsafe is in a None state then True is returned (because  the predicate applies for-all values).  If the OptionUnsafe is in a Some state the value is the result of running applying the bound value to the  predicate supplied.</span></div></div></div><div style="display:none" id="code-forall_A_OptionUnsafe_A_option__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            option.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;L, R>"></a>forall&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;R, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_L_R_Either_L_R_either__Func_R_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes a predicate on the value of the Either if it&#39;s in the Right state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to forall</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the Either is in a Left state.   True if the Either is in a Right state and the predicate returns True.   False otherwise.</span></div></div></div><div style="display:none" id="code-forall_L_R_Either_L_R_either__Func_R_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            either.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;L, R>"></a>forall&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_L_R_EitherUnsafe_L_R_either__Func_R_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes a predicate on the value of the Either if it&#39;s in the Right state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to forall</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the Either is in a Left state.   True if the Either is in a Right state and the predicate returns True.   False otherwise.</span></div></div></div><div style="display:none" id="code-forall_L_R_EitherUnsafe_L_R_either__Func_R_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            either.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;MonoidW, W, A>"></a>forall&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">bool</span>&gt; <span class="ident">forall</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">bool</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-forall_MonoidW_W_A_Writer_MonoidW_W_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
                self.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;NEWTYPE, T, PRED>"></a>forall&lt;NEWTYPE, T, PRED&gt;(NewType&lt;NEWTYPE, T, PRED&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_NEWTYPE_T_PRED_NewType_NEWTYPE_T_PRED_value__Func_T_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NEWTYPE</span> : <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-forall_NEWTYPE_T_PRED_NewType_NEWTYPE_T_PRED_value__Func_T_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            predicate((T)value)</div></div></div><div class="member-title"><a name="forall&lt;NUMTYPE, NUM, T, PRED>"></a>forall&lt;NUMTYPE, NUM, T, PRED&gt;(NumType&lt;NUMTYPE, NUM, T, PRED&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_NUMTYPE_NUM_T_PRED_NumType_NUMTYPE_NUM_T_PRED_value__Func_T_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-forall_NUMTYPE_NUM_T_PRED_NumType_NUMTYPE_NUM_T_PRED_value__Func_T_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            predicate((T)value)</div></div></div><div class="member-title"><a name="forall&lt;NUMTYPE, NUM, T>"></a>forall&lt;NUMTYPE, NUM, T&gt;(NumType&lt;NUMTYPE, NUM, T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_NUMTYPE_NUM_T_NumType_NUMTYPE_NUM_T_value__Func_T_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-forall_NUMTYPE_NUM_T_NumType_NUMTYPE_NUM_T_value__Func_T_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            predicate((T)value)</div></div></div><div class="member-title"><a name="forall&lt;SELF, FLOAT, T, PRED>"></a>forall&lt;SELF, FLOAT, T, PRED&gt;(FloatType&lt;SELF, FLOAT, T, PRED&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_SELF_FLOAT_T_PRED_FloatType_SELF_FLOAT_T_PRED_value__Func_T_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-forall_SELF_FLOAT_T_PRED_FloatType_SELF_FLOAT_T_PRED_value__Func_T_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            predicate((T)value)</div></div></div><div class="member-title"><a name="forall&lt;SELF, FLOAT, T>"></a>forall&lt;SELF, FLOAT, T&gt;(FloatType&lt;SELF, FLOAT, T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_SELF_FLOAT_T_FloatType_SELF_FLOAT_T_value__Func_T_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-forall_SELF_FLOAT_T_FloatType_SELF_FLOAT_T_value__Func_T_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            predicate((T)value)</div></div></div><div class="member-title"><a name="forall&lt;T>"></a>forall&lt;T&gt;(T?, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_T_T__self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >ForAll Nullable.  Imagine the item has zero or one items depending on whether it&#39;s in a None state or not.  This function runs a predicate against the value if it exists, returns true if it doesn&#39;t (because the predicate holds &#39;for all&#39; items). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-forall_T_T__self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? pred(self.Value)
                : true</div></div></div><div class="member-title"><a name="forall&lt;T>"></a>forall&lt;T&gt;(T?, Func&lt;T, bool&gt;, Func&lt;bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_T_T__self__Func_T_bool_Some__Func_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >ForAll Nullable.  Imagine the item has zero or one items depending on whether it&#39;s in a None state or not.  This function runs a predicate against the value if it exists, returns true if it doesn&#39;t (because the predicate holds &#39;for all&#39; items). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Some predicate</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >None predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-forall_T_T__self__Func_T_bool_Some__Func_bool_None_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? Some(self.Value)
                : None()</div></div></div><div class="member-title"><a name="forall&lt;T>"></a>forall&lt;T&gt;(Try&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_T_Try_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for all values of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the predicate holds for the bound value, or if the Try computation fails.  False otherwise.</span></div></div></div><div style="display:none" id="code-forall_T_Try_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;T>"></a>forall&lt;T&gt;(TryAsync&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_T_TryAsync_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for all values of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryAsync computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">forall</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value, or if the TryAsync computation fails.  False otherwise.</span></div></div></div><div style="display:none" id="code-forall_T_TryAsync_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;T>"></a>forall&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_T_TryOption_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for all values of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the predicate holds for the bound value, or if the Try computation fails.  False otherwise.</span></div></div></div><div style="display:none" id="code-forall_T_TryOption_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;T>"></a>forall&lt;T&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_T_TryOptionAsync_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for all values of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryOptionAsync computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">forall</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value, or if the TryOptionAsync computation fails.  False otherwise.</span></div></div></div><div style="display:none" id="code-forall_T_TryOptionAsync_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;T>"></a>forall&lt;T&gt;(Task&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_T_Task_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns false if the Task is cancelled or faulted, otherwise it returns the result of pred(Result) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-forall_T_Task_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            self.ForAll(pred)</div></div></div><div class="member-title"><a name="fun"></a>fun(Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun__Action__f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper and converts it to a Func that returns a Unit instead of void<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string,Unit&gt; putStr = (string x) =&gt; { Console.WriteLine(x); return unit; }</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = fun((string x) =&gt; Console.WriteLine(x) );</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">fun</span>(<span class="ident">Action</span> f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"><span >Func that returns a Unit</span></div></div></div><div style="display:none" id="code-fun__Action__f_"><div class="section_title">SOURCE</div><div class="code"> () =&gt; { f(); return unit; }</div></div></div><div class="member-title"><a name="fun&lt;R>"></a>fun&lt;R&gt;(Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun_R_Func_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;int,int,int&gt; add = (int x, int y) =&gt; x + y;</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var add = fun((int x, int y) =&gt; x + y);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; <span class="ident">fun</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The same func you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-fun_R_Func_R_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="fun&lt;T1, R>"></a>fun&lt;T1, R&gt;(Func&lt;T1, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun_T1_R_Func_T1_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;int,int,int&gt; add = (int x, int y) =&gt; x + y;</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var add = fun((int x, int y) =&gt; x + y);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R</span>&gt; <span class="ident">fun</span>&lt;<span class="ident">T1</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >The same func you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-fun_T1_R_Func_T1_R_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="fun&lt;T1, T2, R>"></a>fun&lt;T1, T2, R&gt;(Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun_T1_T2_R_Func_T1_T2_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;int,int,int&gt; add = (int x, int y) =&gt; x + y;</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var add = fun((int x, int y) =&gt; x + y);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; <span class="ident">fun</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >The same func you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-fun_T1_T2_R_Func_T1_T2_R_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="fun&lt;T1, T2, T3, R>"></a>fun&lt;T1, T2, T3, R&gt;(Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun_T1_T2_T3_R_Func_T1_T2_T3_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;int,int,int&gt; add = (int x, int y) =&gt; x + y;</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var add = fun((int x, int y) =&gt; x + y);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; <span class="ident">fun</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >The same func you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-fun_T1_T2_T3_R_Func_T1_T2_T3_R_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="fun&lt;T1, T2, T3, T4, R>"></a>fun&lt;T1, T2, T3, T4, R&gt;(Func&lt;T1, T2, T3, T4, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun_T1_T2_T3_T4_R_Func_T1_T2_T3_T4_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;int,int,int&gt; add = (int x, int y) =&gt; x + y;</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var add = fun((int x, int y) =&gt; x + y);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt; <span class="ident">fun</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >The same func you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-fun_T1_T2_T3_T4_R_Func_T1_T2_T3_T4_R_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="fun&lt;T1, T2, T3, T4, T5, R>"></a>fun&lt;T1, T2, T3, T4, T5, R&gt;(Func&lt;T1, T2, T3, T4, T5, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun_T1_T2_T3_T4_T5_R_Func_T1_T2_T3_T4_T5_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;int,int,int&gt; add = (int x, int y) =&gt; x + y;</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var add = fun((int x, int y) =&gt; x + y);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt; <span class="ident">fun</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >The same func you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-fun_T1_T2_T3_T4_T5_R_Func_T1_T2_T3_T4_T5_R_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="fun&lt;T1, T2, T3, T4, T5, T6, R>"></a>fun&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;int,int,int&gt; add = (int x, int y) =&gt; x + y;</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var add = fun((int x, int y) =&gt; x + y);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt; <span class="ident">fun</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >The same func you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-fun_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="fun&lt;T1, T2, T3, T4, T5, T6, T7, R>"></a>fun&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Func type inference helper<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;int,int,int&gt; add = (int x, int y) =&gt; x + y;</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var add = fun((int x, int y) =&gt; x + y);</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; <span class="ident">fun</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >The same func you gave it, but allows the type system to work out what f is</span></div></div></div><div style="display:none" id="code-fun_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_f_"><div class="section_title">SOURCE</div><div class="code"> f</div></div></div><div class="member-title"><a name="fun&lt;T1, T2, T3, T4, T5, T6, T7>"></a>fun&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper and converts it to a Func that returns a Unit instead of void<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string,Unit&gt; putStr = (string x) =&gt; { Console.WriteLine(x); return unit; }</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = fun((string x) =&gt; Console.WriteLine(x) );</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">Unit</span>&gt; <span class="ident">fun</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Func that returns a Unit</span></div></div></div><div style="display:none" id="code-fun_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_f_"><div class="section_title">SOURCE</div><div class="code"> (a1, a2, a3, a4, a5, a6, a7) =&gt; { f(a1, a2, a3, a4, a5, a6, a7); return unit; }</div></div></div><div class="member-title"><a name="fun&lt;T1, T2, T3, T4, T5, T6>"></a>fun&lt;T1, T2, T3, T4, T5, T6&gt;(Action&lt;T1, T2, T3, T4, T5, T6&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun_T1_T2_T3_T4_T5_T6_Action_T1_T2_T3_T4_T5_T6_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper and converts it to a Func that returns a Unit instead of void<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string,Unit&gt; putStr = (string x) =&gt; { Console.WriteLine(x); return unit; }</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = fun((string x) =&gt; Console.WriteLine(x) );</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">Unit</span>&gt; <span class="ident">fun</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Func that returns a Unit</span></div></div></div><div style="display:none" id="code-fun_T1_T2_T3_T4_T5_T6_Action_T1_T2_T3_T4_T5_T6_f_"><div class="section_title">SOURCE</div><div class="code"> (a1, a2, a3, a4, a5, a6) =&gt; { f(a1, a2, a3, a4, a5, a6); return unit; }</div></div></div><div class="member-title"><a name="fun&lt;T1, T2, T3, T4, T5>"></a>fun&lt;T1, T2, T3, T4, T5&gt;(Action&lt;T1, T2, T3, T4, T5&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun_T1_T2_T3_T4_T5_Action_T1_T2_T3_T4_T5_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper and converts it to a Func that returns a Unit instead of void<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string,Unit&gt; putStr = (string x) =&gt; { Console.WriteLine(x); return unit; }</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = fun((string x) =&gt; Console.WriteLine(x) );</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">Unit</span>&gt; <span class="ident">fun</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Func that returns a Unit</span></div></div></div><div style="display:none" id="code-fun_T1_T2_T3_T4_T5_Action_T1_T2_T3_T4_T5_f_"><div class="section_title">SOURCE</div><div class="code"> (a1, a2, a3, a4, a5) =&gt; { f(a1, a2, a3, a4, a5); return unit; }</div></div></div><div class="member-title"><a name="fun&lt;T1, T2, T3, T4>"></a>fun&lt;T1, T2, T3, T4&gt;(Action&lt;T1, T2, T3, T4&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun_T1_T2_T3_T4_Action_T1_T2_T3_T4_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper and converts it to a Func that returns a Unit instead of void<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string,Unit&gt; putStr = (string x) =&gt; { Console.WriteLine(x); return unit; }</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = fun((string x) =&gt; Console.WriteLine(x) );</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">Unit</span>&gt; <span class="ident">fun</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Func that returns a Unit</span></div></div></div><div style="display:none" id="code-fun_T1_T2_T3_T4_Action_T1_T2_T3_T4_f_"><div class="section_title">SOURCE</div><div class="code"> (a1, a2, a3, a4) =&gt; { f(a1, a2, a3, a4); return unit; }</div></div></div><div class="member-title"><a name="fun&lt;T1, T2, T3>"></a>fun&lt;T1, T2, T3&gt;(Action&lt;T1, T2, T3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun_T1_T2_T3_Action_T1_T2_T3_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper and converts it to a Func that returns a Unit instead of void<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string,Unit&gt; putStr = (string x) =&gt; { Console.WriteLine(x); return unit; }</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = fun((string x) =&gt; Console.WriteLine(x) );</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">Unit</span>&gt; <span class="ident">fun</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Func that returns a Unit</span></div></div></div><div style="display:none" id="code-fun_T1_T2_T3_Action_T1_T2_T3_f_"><div class="section_title">SOURCE</div><div class="code"> (a1, a2, a3) =&gt; { f(a1, a2, a3); return unit; }</div></div></div><div class="member-title"><a name="fun&lt;T1, T2>"></a>fun&lt;T1, T2&gt;(Action&lt;T1, T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun_T1_T2_Action_T1_T2_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper and converts it to a Func that returns a Unit instead of void<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string,Unit&gt; putStr = (string x) =&gt; { Console.WriteLine(x); return unit; }</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = fun((string x) =&gt; Console.WriteLine(x) );</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">Unit</span>&gt; <span class="ident">fun</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Func that returns a Unit</span></div></div></div><div style="display:none" id="code-fun_T1_T2_Action_T1_T2_f_"><div class="section_title">SOURCE</div><div class="code"> (a1, a2) =&gt; { f(a1, a2); return unit; }</div></div></div><div class="member-title"><a name="fun&lt;T1>"></a>fun&lt;T1&gt;(Action&lt;T1&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fun_T1_Action_T1_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Action type inference helper and converts it to a Func that returns a Unit instead of void<br/><br/> Try it with lambdas, instead of doing:<br/><br/><div class='code-line'>     Func&lt;string,Unit&gt; putStr = (string x) =&gt; { Console.WriteLine(x); return unit; }</div><br/><br/> You can use this function and do:<br/><br/><div class='code-line'>     var putStr = fun((string x) =&gt; Console.WriteLine(x) );</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt;</div></div><div class="arg-desc"><span >Function to infer</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Unit</span>&gt; <span class="ident">fun</span>&lt;<span class="ident">T1</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Func that returns a Unit</span></div></div></div><div style="display:none" id="code-fun_T1_Action_T1_f_"><div class="section_title">SOURCE</div><div class="code"> (a1) =&gt; { f(a1); return unit; }</div></div></div><div class="member-title"><a name="function&lt;T, R>"></a>function&lt;T, R&gt;(Func&lt;T, Option&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-function_T_R_Func_T_Option&lt;R>_clauses_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matching for values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">clauses</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Clauses to test</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">function</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt; clauses)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >Result</span></div></div></div><div style="display:none" id="code-function_T_R_Func_T_Option&lt;R>_clauses_"><div class="section_title">SOURCE</div><div class="code"> (T value) =&gt;
         {
             foreach (var clause in clauses)
             {
                 var res = clause(value);
                 if (res.IsSome) return res.IfNone(default(R));
             }
             throw new Exception(&quot;Match not exhaustive&quot;);
         }</div></div></div><div class="member-title"><a name="get&lt;S>"></a>get&lt;S&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-get_S_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the state from monad into its wrapped value </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; <span class="ident">get</span>&lt;<span class="ident">S</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div><div class="normal"><span >State monad with state in the value</span></div></div></div><div style="display:none" id="code-get_S_"><div class="section_title">SOURCE</div><div class="code">
            default(MState&lt;S, S&gt;).Get()</div></div></div><div class="member-title"><a name="gets&lt;S, A>"></a>gets&lt;S, A&gt;(Func&lt;S, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-gets_S_A_Func_S_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >gets :: MonadState s m =&gt; (s -&gt; a) -&gt; m a<br/><br/> Gets specific component of the state, using a projection function supplied. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt; <span class="ident">gets</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-gets_S_A_Func_S_A_f_"><div class="section_title">SOURCE</div><div class="code">
            default(MState&lt;S, A&gt;).Return(s =&gt; f(s))</div></div></div><div class="member-title"><a name="hash&lt;T>"></a>hash&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-hash_T_IEnumerable_T_xs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculate a hash-code for an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">xs</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">hash</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; xs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-hash_T_IEnumerable_T_xs_"><div class="section_title">SOURCE</div><div class="code">
            if (xs == null) return 0;
            unchecked
            {
                int hash = 1;
                foreach(var x in xs)
                {
                    hash = ReferenceEquals(x, null)
                        ? hash * 31
                        : hash * 31 + x.GetHashCode();
                }
                return hash;
            }
        </div></div></div><div class="member-title"><a name="HashMap&lt;EqK, K, V>"></a>HashMap&lt;EqK, K, V&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-HashMap_EqK_K_V_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-map </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EqK</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-HashMap_EqK_K_V_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashMap.empty&lt;EqK, K, V&gt;()</div></div></div><div class="member-title"><a name="HashMap&lt;EqK, K, V>"></a>HashMap&lt;EqK, K, V&gt;(Tuple&lt;K, V&gt;, Tuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-HashMap_EqK_K_V_Tuple_K_V_head__Tuple_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EqK</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-HashMap_EqK_K_V_Tuple_K_V_head__Tuple_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashMap.create&lt;EqK, K, V&gt;(head, tail)</div></div></div><div class="member-title"><a name="HashMap&lt;EqK, K, V>"></a>HashMap&lt;EqK, K, V&gt;(ValueTuple&lt;K, V&gt;, ValueTuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-HashMap_EqK_K_V_ValueTuple_K_V_head__ValueTuple_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EqK</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-HashMap_EqK_K_V_ValueTuple_K_V_head__ValueTuple_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashMap.create&lt;EqK, K, V&gt;(head, tail)</div></div></div><div class="member-title"><a name="HashMap&lt;EqK, K, V>"></a>HashMap&lt;EqK, K, V&gt;(KeyValuePair&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-HashMap_EqK_K_V_KeyValuePair_K_V_head__KeyValuePair_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EqK</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-HashMap_EqK_K_V_KeyValuePair_K_V_head__KeyValuePair_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashMap.create&lt;EqK, K, V&gt;(head, tail)</div></div></div><div class="member-title"><a name="HashMap&lt;K, V>"></a>HashMap&lt;K, V&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-HashMap_K_V_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-map </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-HashMap_K_V_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashMap.empty&lt;K, V&gt;()</div></div></div><div class="member-title"><a name="HashMap&lt;K, V>"></a>HashMap&lt;K, V&gt;(Tuple&lt;K, V&gt;, Tuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-HashMap_K_V_Tuple_K_V_head__Tuple_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-HashMap_K_V_Tuple_K_V_head__Tuple_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashMap.create(head, tail)</div></div></div><div class="member-title"><a name="HashMap&lt;K, V>"></a>HashMap&lt;K, V&gt;(ValueTuple&lt;K, V&gt;, ValueTuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-HashMap_K_V_ValueTuple_K_V_head__ValueTuple_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-HashMap_K_V_ValueTuple_K_V_head__ValueTuple_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashMap.create(head, tail)</div></div></div><div class="member-title"><a name="HashMap&lt;K, V>"></a>HashMap&lt;K, V&gt;(KeyValuePair&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-HashMap_K_V_KeyValuePair_K_V_head__KeyValuePair_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-HashMap_K_V_KeyValuePair_K_V_head__KeyValuePair_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashMap.create(head, tail)</div></div></div><div class="member-title"><a name="HashSet&lt;EqT, T>"></a>HashSet&lt;EqT, T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-HashSet_EqT_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-set </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EqT</span>, <span class="ident">T</span>&gt; <span class="ident">HashSet</span>&lt;<span class="ident">EqT</span>, <span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EqT</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EqT</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-HashSet_EqT_T_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashSet.create&lt;EqT, T&gt;()</div></div></div><div class="member-title"><a name="HashSet&lt;EqT, T>"></a>HashSet&lt;EqT, T&gt;(T, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-HashSet_EqT_T_T__head__T__tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EqT</span>, <span class="ident">T</span>&gt; <span class="ident">HashSet</span>&lt;<span class="ident">EqT</span>, <span class="ident">T</span>&gt;(<span class="ident">T</span> head, <span class="ident">T</span> tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EqT</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EqT</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-HashSet_EqT_T_T__head__T__tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashSet.createRange&lt;EqT, T&gt;(head.Cons(tail))</div></div></div><div class="member-title"><a name="HashSet&lt;T>"></a>HashSet&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-HashSet_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-set </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">T</span>&gt; <span class="ident">HashSet</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-HashSet_T_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashSet.create&lt;T&gt;()</div></div></div><div class="member-title"><a name="HashSet&lt;T>"></a>HashSet&lt;T&gt;(T, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-HashSet_T_T__head__T__tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">T</span>&gt; <span class="ident">HashSet</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> head, <span class="ident">T</span> tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-HashSet_T_T__head__T__tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashSet.createRange(head.Cons(tail))</div></div></div><div class="member-title"><a name="head&lt;A, B, C, D, E, F, G>"></a>head&lt;A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_G_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the first item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">head</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-head_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_G_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="head&lt;A, B, C, D, E, F, G>"></a>head&lt;A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_G_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the first item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">head</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-head_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_G_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="head&lt;A, B, C, D, E, F>"></a>head&lt;A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E, F&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_A_B_C_D_E_F_Tuple_A_B_C_D_E_F_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the first item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">head</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-head_A_B_C_D_E_F_Tuple_A_B_C_D_E_F_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="head&lt;A, B, C, D, E, F>"></a>head&lt;A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_F_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the first item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">head</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-head_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_F_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="head&lt;A, B, C, D, E>"></a>head&lt;A, B, C, D, E&gt;(Tuple&lt;A, B, C, D, E&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_A_B_C_D_E_Tuple_A_B_C_D_E_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the first item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">head</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-head_A_B_C_D_E_Tuple_A_B_C_D_E_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="head&lt;A, B, C, D, E>"></a>head&lt;A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D, E&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_A_B_C_D_E_ValueTuple_A_B_C_D_E_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the first item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">head</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-head_A_B_C_D_E_ValueTuple_A_B_C_D_E_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="head&lt;A, B, C, D>"></a>head&lt;A, B, C, D&gt;(Tuple&lt;A, B, C, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_A_B_C_D_Tuple_A_B_C_D_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the first item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">head</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-head_A_B_C_D_Tuple_A_B_C_D_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="head&lt;A, B, C, D>"></a>head&lt;A, B, C, D&gt;(ValueTuple&lt;A, B, C, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_A_B_C_D_ValueTuple_A_B_C_D_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the first item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">head</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-head_A_B_C_D_ValueTuple_A_B_C_D_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="head&lt;A>"></a>head&lt;A&gt;(Tuple&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_A_Tuple_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the first item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">head</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-head_A_Tuple_A_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="head&lt;A>"></a>head&lt;A&gt;(ValueTuple&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_A_ValueTuple_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the first item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">head</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-head_A_ValueTuple_A_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="head&lt;T1, T2, T3>"></a>head&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2, T3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_T1_T2_T3_Tuple_T1_T2_T3_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the first item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T1</span> <span class="ident">head</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T1</span></div><div class="normal"></div></div></div><div style="display:none" id="code-head_T1_T2_T3_Tuple_T1_T2_T3_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="head&lt;T1, T2, T3>"></a>head&lt;T1, T2, T3&gt;(ValueTuple&lt;T1, T2, T3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_T1_T2_T3_ValueTuple_T1_T2_T3_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the first item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T1</span> <span class="ident">head</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T1</span></div><div class="normal"></div></div></div><div style="display:none" id="code-head_T1_T2_T3_ValueTuple_T1_T2_T3_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="head&lt;T1, T2>"></a>head&lt;T1, T2&gt;(Tuple&lt;T1, T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_T1_T2_Tuple_T1_T2_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the first item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T1</span> <span class="ident">head</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T1</span></div><div class="normal"></div></div></div><div style="display:none" id="code-head_T1_T2_Tuple_T1_T2_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="head&lt;T1, T2>"></a>head&lt;T1, T2&gt;(ValueTuple&lt;T1, T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_T1_T2_ValueTuple_T1_T2_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the first item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T1</span> <span class="ident">head</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T1</span></div><div class="normal"></div></div></div><div style="display:none" id="code-head_T1_T2_ValueTuple_T1_T2_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="identity&lt;T>"></a>identity&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-identity_T_T__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Identity function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">identity</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div></div><div style="display:none" id="code-identity_T_T__x_"><div class="section_title">SOURCE</div><div class="code"> x</div></div></div><div class="member-title"><a name="ifFail&lt;T>"></a>ifFail&lt;T&gt;(Try&lt;T&gt;, Func&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifFail_T_Try_T_self__Func_T_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the Try fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke on failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ifFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Result of the invocation of Fail on failure, the result of the Try otherwise</span></div></div></div><div style="display:none" id="code-ifFail_T_Try_T_self__Func_T_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.IfFail(Fail)</div></div></div><div class="member-title"><a name="ifFail&lt;T>"></a>ifFail&lt;T&gt;(Try&lt;T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifFail_T_Try_T_self__T__failValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return a default value if the Try fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">failValue</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Default value to use on failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ifFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">T</span> failValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >failValue on failure, the result of the Try otherwise</span></div></div></div><div style="display:none" id="code-ifFail_T_Try_T_self__T__failValue_"><div class="section_title">SOURCE</div><div class="code">
            self.IfFail(failValue)</div></div></div><div class="member-title"><a name="ifFail&lt;T>"></a>ifFail&lt;T&gt;(Try&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifFail_T_Try_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Provides a fluent exception matching interface which is invoked when the Try fails. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ExceptionMatch</span>&lt;<span class="ident">T</span>&gt; <span class="ident">ifFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ExceptionMatch</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Fluent exception matcher</span></div></div></div><div style="display:none" id="code-ifFail_T_Try_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.IfFail()</div></div></div><div class="member-title"><a name="ifFail&lt;T>"></a>ifFail&lt;T&gt;(TryAsync&lt;T&gt;, Func&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifFail_T_TryAsync_T_self__Func_T_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the TryAsync fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke on failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">T</span>&gt; <span class="ident">ifFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Result of the invocation of Fail on failure, the result of the TryAsync otherwise</span></div></div></div><div style="display:none" id="code-ifFail_T_TryAsync_T_self__Func_T_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.IfFail(Fail)</div></div></div><div class="member-title"><a name="ifFail&lt;T>"></a>ifFail&lt;T&gt;(TryAsync&lt;T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifFail_T_TryAsync_T_self__T__failValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return a default value if the TryAsync fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryAsync computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">failValue</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Default value to use on failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">T</span>&gt; <span class="ident">ifFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">T</span> failValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >failValue on failure, the result of the TryAsync otherwise</span></div></div></div><div style="display:none" id="code-ifFail_T_TryAsync_T_self__T__failValue_"><div class="section_title">SOURCE</div><div class="code">
            self.IfFail(failValue)</div></div></div><div class="member-title"><a name="ifFail&lt;T>"></a>ifFail&lt;T&gt;(TryAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifFail_T_TryAsync_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Provides a fluent exception matching interface which is invoked when the Try fails. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryAsync computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ExceptionMatchAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">ifFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ExceptionMatchAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Fluent exception matcher</span></div></div></div><div style="display:none" id="code-ifFail_T_TryAsync_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.IfFail()</div></div></div><div class="member-title"><a name="ifFail&lt;T>"></a>ifFail&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifFail_T_TryOption_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Provides a fluent exception matching interface which is invoked when the Try fails. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ExceptionMatch</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">ifFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ExceptionMatch</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >Fluent exception matcher</span></div></div></div><div style="display:none" id="code-ifFail_T_TryOption_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.IfFail()</div></div></div><div class="member-title"><a name="ifFail&lt;T>"></a>ifFail&lt;T&gt;(TryOptionAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifFail_T_TryOptionAsync_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Provides a fluent exception matching interface which is invoked when the Try fails. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryOptionAsync computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ExceptionMatchOptionalAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">ifFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ExceptionMatchOptionalAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Fluent exception matcher</span></div></div></div><div style="display:none" id="code-ifFail_T_TryOptionAsync_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.IfFail()</div></div></div><div class="member-title"><a name="ifFailOrNone&lt;T>"></a>ifFailOrNone&lt;T&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifFailOrNone_T_TryOptionAsync_T_self__Func_T_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the TryOptionAsync fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke on failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">T</span>&gt; <span class="ident">ifFailOrNone</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Result of the invocation of Fail on failure, the result of the TryOptionAsync otherwise</span></div></div></div><div style="display:none" id="code-ifFailOrNone_T_TryOptionAsync_T_self__Func_T_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.IfNoneOrFail(Fail)</div></div></div><div class="member-title"><a name="ifLeft&lt;L, R>"></a>ifLeft&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifLeft_L_R_Either_L_R_either__Func_R_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Executes the Left function if the Either is in a Left state. Returns the Right value if the Either is in a Right state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to generate a Right value if in the Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">ifLeft</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Returns an unwrapped Right value</span></div></div></div><div style="display:none" id="code-ifLeft_L_R_Either_L_R_either__Func_R_Left_"><div class="section_title">SOURCE</div><div class="code">
           either.IfLeft(Left)</div></div></div><div class="member-title"><a name="ifLeft&lt;L, R>"></a>ifLeft&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifLeft_L_R_Either_L_R_either__Func_L_R_leftMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Executes the leftMap function if the Either is in a Left state. Returns the Right value if the Either is in a Right state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">leftMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to generate a Right value if in the Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">ifLeft</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; leftMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Returns an unwrapped Right value</span></div></div></div><div style="display:none" id="code-ifLeft_L_R_Either_L_R_either__Func_L_R_leftMap_"><div class="section_title">SOURCE</div><div class="code">
           either.IfLeft(leftMap)</div></div></div><div class="member-title"><a name="ifLeft&lt;L, R>"></a>ifLeft&lt;L, R&gt;(Either&lt;L, R&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifLeft_L_R_Either_L_R_either__R__rightValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the rightValue if the Either is in a Left state. Returns the Right value if the Either is in a Right state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rightValue</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Value to return if in the Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">ifLeft</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">R</span> rightValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Returns an unwrapped Right value</span></div></div></div><div style="display:none" id="code-ifLeft_L_R_Either_L_R_either__R__rightValue_"><div class="section_title">SOURCE</div><div class="code">
           either.IfLeft(rightValue)</div></div></div><div class="member-title"><a name="ifLeft&lt;L, R>"></a>ifLeft&lt;L, R&gt;(Either&lt;L, R&gt;, Action&lt;L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifLeft_L_R_Either_L_R_either__Action_L_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Executes the Left action if the Either is in a Left state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">L</span>&gt;</div></div><div class="arg-desc"><span >Function to generate a Right value if in the Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">ifLeft</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Action</span>&lt;<span class="ident">L</span>&gt; Left)</div></div><div style="display:none" id="code-ifLeft_L_R_Either_L_R_either__Action_L_Left_"><div class="section_title">SOURCE</div><div class="code">
           either.IfLeft(Left)</div></div></div><div class="member-title"><a name="ifLeftUnsafe&lt;L, R>"></a>ifLeftUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifLeftUnsafe_L_R_EitherUnsafe_L_R_either__Func_R_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Executes the Left function if the Either is in a Left state. Returns the Right value if the Either is in a Right state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to generate a Right value if in the Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">ifLeftUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Returns an unwrapped Right value</span></div></div></div><div style="display:none" id="code-ifLeftUnsafe_L_R_EitherUnsafe_L_R_either__Func_R_Left_"><div class="section_title">SOURCE</div><div class="code">
           either.IfLeftUnsafe(Left)</div></div></div><div class="member-title"><a name="ifLeftUnsafe&lt;L, R>"></a>ifLeftUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifLeftUnsafe_L_R_EitherUnsafe_L_R_either__Func_L_R_leftMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Executes the leftMap function if the Either is in a Left state. Returns the Right value if the Either is in a Right state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">leftMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to generate a Right value if in the Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">ifLeftUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; leftMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Returns an unwrapped Right value</span></div></div></div><div style="display:none" id="code-ifLeftUnsafe_L_R_EitherUnsafe_L_R_either__Func_L_R_leftMap_"><div class="section_title">SOURCE</div><div class="code">
           either.IfLeftUnsafe(leftMap)</div></div></div><div class="member-title"><a name="ifLeftUnsafe&lt;L, R>"></a>ifLeftUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifLeftUnsafe_L_R_EitherUnsafe_L_R_either__R__rightValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the rightValue if the Either is in a Left state. Returns the Right value if the Either is in a Right state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rightValue</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Value to return if in the Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">ifLeftUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">R</span> rightValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Returns an unwrapped Right value</span></div></div></div><div style="display:none" id="code-ifLeftUnsafe_L_R_EitherUnsafe_L_R_either__R__rightValue_"><div class="section_title">SOURCE</div><div class="code">
           either.IfLeftUnsafe(rightValue)</div></div></div><div class="member-title"><a name="ifLeftUnsafe&lt;L, R>"></a>ifLeftUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Action&lt;L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifLeftUnsafe_L_R_EitherUnsafe_L_R_either__Action_L_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Executes the Left action if the Either is in a Left state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">L</span>&gt;</div></div><div class="arg-desc"><span >Function to generate a Right value if in the Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">ifLeftUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Action</span>&lt;<span class="ident">L</span>&gt; Left)</div></div><div style="display:none" id="code-ifLeftUnsafe_L_R_EitherUnsafe_L_R_either__Action_L_Left_"><div class="section_title">SOURCE</div><div class="code">
           either.IfLeftUnsafe(Left)</div></div></div><div class="member-title"><a name="ifNone&lt;T>"></a>ifNone&lt;T&gt;(T?, Func&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNone_T_T__self__Func_T_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ifNone</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-ifNone_T_T__self__Func_T_None_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(identity, None)</div></div></div><div class="member-title"><a name="ifNone&lt;T>"></a>ifNone&lt;T&gt;(T?, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNone_T_T__self__T__noneValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ifNone</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">T</span> noneValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-ifNone_T_T__self__T__noneValue_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(identity, () =&gt; noneValue)</div></div></div><div class="member-title"><a name="ifNone&lt;T>"></a>ifNone&lt;T&gt;(Option&lt;T&gt;, Func&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNone_T_Option_T_option__Func_T_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Operation to invoke if the structure is in a None state</span></div></div><div class="section_title">REMARKS</div><span >Will not accept a null return value from the None operation</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ifNone</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Tesult of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned.</span></div></div></div><div style="display:none" id="code-ifNone_T_Option_T_option__Func_T_None_"><div class="section_title">SOURCE</div><div class="code">
            option.IfNone(None)</div></div></div><div class="member-title"><a name="ifNone&lt;T>"></a>ifNone&lt;T&gt;(Option&lt;T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNone_T_Option_T_option__T__noneValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to return if in a None state</span></div></div><div class="section_title">REMARKS</div><span >Will not accept a null noneValue</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ifNone</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">T</span> noneValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned</span></div></div></div><div style="display:none" id="code-ifNone_T_Option_T_option__T__noneValue_"><div class="section_title">SOURCE</div><div class="code">
            option.IfNone(noneValue)</div></div></div><div class="member-title"><a name="ifNoneOrFail&lt;T>"></a>ifNoneOrFail&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T&gt;, Func&lt;Exception, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNoneOrFail_T_TryOption_T_self__Func_T_None__Func_Exception_T_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke delegates based on None or Failed stateds </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the result is None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the result is Fail</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ifNoneOrFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">T</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Success value, or the result of the None or Failed delegate</span></div></div></div><div style="display:none" id="code-ifNoneOrFail_T_TryOption_T_self__Func_T_None__Func_Exception_T_Fail_"><div class="section_title">SOURCE</div><div class="code"> 
            self.IfNoneOrFail(None, Fail)</div></div></div><div class="member-title"><a name="ifNoneOrFail&lt;T>"></a>ifNoneOrFail&lt;T&gt;(TryOption&lt;T&gt;, Func&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNoneOrFail_T_TryOption_T_self__Func_T_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the Try fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke on failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ifNoneOrFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Result of the invocation of Fail on failure, the result of the Try otherwise</span></div></div></div><div style="display:none" id="code-ifNoneOrFail_T_TryOption_T_self__Func_T_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.IfNoneOrFail(Fail)</div></div></div><div class="member-title"><a name="ifNoneOrFail&lt;T>"></a>ifNoneOrFail&lt;T&gt;(TryOption&lt;T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNoneOrFail_T_TryOption_T_self__T__defaultValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return a default value if the Try fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultValue</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Default value to use on failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ifNoneOrFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">T</span> defaultValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >failValue on failure, the result of the Try otherwise</span></div></div></div><div style="display:none" id="code-ifNoneOrFail_T_TryOption_T_self__T__defaultValue_"><div class="section_title">SOURCE</div><div class="code">
            self.IfNoneOrFail(defaultValue)</div></div></div><div class="member-title"><a name="ifNoneOrFail&lt;T>"></a>ifNoneOrFail&lt;T&gt;(TryOptionAsync&lt;T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNoneOrFail_T_TryOptionAsync_T_self__T__failValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return a default value if the TryOptionAsync fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryOptionAsync computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">failValue</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Default value to use on failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">T</span>&gt; <span class="ident">ifNoneOrFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">T</span> failValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >failValue on failure, the result of the TryOptionAsync otherwise</span></div></div></div><div style="display:none" id="code-ifNoneOrFail_T_TryOptionAsync_T_self__T__failValue_"><div class="section_title">SOURCE</div><div class="code">
            self.IfNoneOrFail(failValue)</div></div></div><div class="member-title"><a name="ifNoneUnsafe&lt;T>"></a>ifNoneUnsafe&lt;T&gt;(Option&lt;T&gt;, Func&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNoneUnsafe_T_Option_T_option__Func_T_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Operation to invoke if the structure is in a None state</span></div></div><div class="section_title">REMARKS</div><span >Will allow null the be returned from the None operation</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ifNoneUnsafe</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Tesult of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned.</span></div></div></div><div style="display:none" id="code-ifNoneUnsafe_T_Option_T_option__Func_T_None_"><div class="section_title">SOURCE</div><div class="code">
            option.IfNoneUnsafe(None)</div></div></div><div class="member-title"><a name="ifNoneUnsafe&lt;T>"></a>ifNoneUnsafe&lt;T&gt;(Option&lt;T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNoneUnsafe_T_Option_T_option__T__noneValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to return if in a None state</span></div></div><div class="section_title">REMARKS</div><span >Will allow noneValue to be null</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ifNoneUnsafe</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">T</span> noneValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned</span></div></div></div><div style="display:none" id="code-ifNoneUnsafe_T_Option_T_option__T__noneValue_"><div class="section_title">SOURCE</div><div class="code">
            option.IfNoneUnsafe(noneValue)</div></div></div><div class="member-title"><a name="ifNoneUnsafe&lt;T>"></a>ifNoneUnsafe&lt;T&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNoneUnsafe_T_OptionUnsafe_T_option__Func_T_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Operation to invoke if the structure is in a None state</span></div></div><div class="section_title">REMARKS</div><span >Will not accept a null return value from the None operation</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ifNoneUnsafe</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Tesult of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned.</span></div></div></div><div style="display:none" id="code-ifNoneUnsafe_T_OptionUnsafe_T_option__Func_T_None_"><div class="section_title">SOURCE</div><div class="code">
            option.IfNoneUnsafe(None)</div></div></div><div class="member-title"><a name="ifNoneUnsafe&lt;T>"></a>ifNoneUnsafe&lt;T&gt;(OptionUnsafe&lt;T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNoneUnsafe_T_OptionUnsafe_T_option__T__noneValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to return if in a None state</span></div></div><div class="section_title">REMARKS</div><span >Will not accept a null noneValue</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ifNoneUnsafe</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">T</span> noneValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned</span></div></div></div><div style="display:none" id="code-ifNoneUnsafe_T_OptionUnsafe_T_option__T__noneValue_"><div class="section_title">SOURCE</div><div class="code">
            option.IfNoneUnsafe(noneValue)</div></div></div><div class="member-title"><a name="ifRight&lt;L, R>"></a>ifRight&lt;L, R&gt;(Either&lt;L, R&gt;, Action&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifRight_L_R_Either_L_R_either__Action_R_Right_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the Right action if the Either is in a Right state, otherwise does nothing </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">ifRight</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Action</span>&lt;<span class="ident">R</span>&gt; Right)</div></div><div style="display:none" id="code-ifRight_L_R_Either_L_R_either__Action_R_Right_"><div class="section_title">SOURCE</div><div class="code">
           either.IfRight(Right)</div></div></div><div class="member-title"><a name="ifRight&lt;L, R>"></a>ifRight&lt;L, R&gt;(Either&lt;L, R&gt;, L)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifRight_L_R_Either_L_R_either__L__leftValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the leftValue if the Either is in a Right state. Returns the Left value if the Either is in a Left state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">leftValue</div><div class="arg-type"><span class="ident">L</span></div></div><div class="arg-desc"><span >Value to return if in the Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">L</span> <span class="ident">ifRight</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">L</span> leftValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">L</span></div><div class="normal"><span >Returns an unwrapped Left value</span></div></div></div><div style="display:none" id="code-ifRight_L_R_Either_L_R_either__L__leftValue_"><div class="section_title">SOURCE</div><div class="code">
           either.IfRight(leftValue)</div></div></div><div class="member-title"><a name="ifRight&lt;L, R>"></a>ifRight&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifRight_L_R_Either_L_R_either__Func_L_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of Left() if the Either is in a Right state. Returns the Left value if the Either is in a Left state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div><div class="arg-desc"><span >Function to generate a Left value if in the Right state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">L</span> <span class="ident">ifRight</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">L</span></div><div class="normal"><span >Returns an unwrapped Left value</span></div></div></div><div style="display:none" id="code-ifRight_L_R_Either_L_R_either__Func_L_Left_"><div class="section_title">SOURCE</div><div class="code">
           either.IfRight(Left)</div></div></div><div class="member-title"><a name="ifRight&lt;L, R>"></a>ifRight&lt;L, R&gt;(Either&lt;L, R&gt;, Func&lt;R, L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifRight_L_R_Either_L_R_either__Func_R_L_leftMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of leftMap if the Either is in a Right state. Returns the Left value if the Either is in a Left state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">leftMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">L</span>&gt;</div></div><div class="arg-desc"><span >Function to generate a Left value if in the Right state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">L</span> <span class="ident">ifRight</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">L</span>&gt; leftMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">L</span></div><div class="normal"><span >Returns an unwrapped Left value</span></div></div></div><div style="display:none" id="code-ifRight_L_R_Either_L_R_either__Func_R_L_leftMap_"><div class="section_title">SOURCE</div><div class="code">
           either.IfRight(leftMap)</div></div></div><div class="member-title"><a name="ifRightUnsafe&lt;L, R>"></a>ifRightUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Action&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifRightUnsafe_L_R_EitherUnsafe_L_R_either__Action_R_Right_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the Right action if the Either is in a Right state, otherwise does nothing </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">ifRightUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Action</span>&lt;<span class="ident">R</span>&gt; Right)</div></div><div style="display:none" id="code-ifRightUnsafe_L_R_EitherUnsafe_L_R_either__Action_R_Right_"><div class="section_title">SOURCE</div><div class="code">
           either.IfRightUnsafe(Right)</div></div></div><div class="member-title"><a name="ifRightUnsafe&lt;L, R>"></a>ifRightUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, L)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifRightUnsafe_L_R_EitherUnsafe_L_R_either__L__leftValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the leftValue if the Either is in a Right state. Returns the Left value if the Either is in a Left state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">leftValue</div><div class="arg-type"><span class="ident">L</span></div></div><div class="arg-desc"><span >Value to return if in the Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">L</span> <span class="ident">ifRightUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">L</span> leftValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">L</span></div><div class="normal"><span >Returns an unwrapped Left value</span></div></div></div><div style="display:none" id="code-ifRightUnsafe_L_R_EitherUnsafe_L_R_either__L__leftValue_"><div class="section_title">SOURCE</div><div class="code">
           either.IfRightUnsafe(leftValue)</div></div></div><div class="member-title"><a name="ifRightUnsafe&lt;L, R>"></a>ifRightUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifRightUnsafe_L_R_EitherUnsafe_L_R_either__Func_L_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of Left() if the Either is in a Right state. Returns the Left value if the Either is in a Left state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div><div class="arg-desc"><span >Function to generate a Left value if in the Right state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">L</span> <span class="ident">ifRightUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">L</span></div><div class="normal"><span >Returns an unwrapped Left value</span></div></div></div><div style="display:none" id="code-ifRightUnsafe_L_R_EitherUnsafe_L_R_either__Func_L_Left_"><div class="section_title">SOURCE</div><div class="code">
           either.IfRightUnsafe(Left)</div></div></div><div class="member-title"><a name="ifRightUnsafe&lt;L, R>"></a>ifRightUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifRightUnsafe_L_R_EitherUnsafe_L_R_either__Func_R_L_leftMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of leftMap if the Either is in a Right state. Returns the Left value if the Either is in a Left state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">leftMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">L</span>&gt;</div></div><div class="arg-desc"><span >Function to generate a Left value if in the Right state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">L</span> <span class="ident">ifRightUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">L</span>&gt; leftMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">L</span></div><div class="normal"><span >Returns an unwrapped Left value</span></div></div></div><div style="display:none" id="code-ifRightUnsafe_L_R_EitherUnsafe_L_R_either__Func_R_L_leftMap_"><div class="section_title">SOURCE</div><div class="code">
           either.IfRightUnsafe(leftMap)</div></div></div><div class="member-title"><a name="ifSome&lt;T>"></a>ifSome&lt;T&gt;(T?, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifSome_T_T__self__Action_T_someHandler_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the someHandler if Nullable is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">ifSome</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; someHandler)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-ifSome_T_T__self__Action_T_someHandler_"><div class="section_title">SOURCE</div><div class="code">
            if (self.HasValue)
            {
                someHandler(self.Value);
            }
            return unit;
        </div></div></div><div class="member-title"><a name="ifSome&lt;T>"></a>ifSome&lt;T&gt;(T?, Func&lt;T, Unit&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifSome_T_T__self__Func_T_Unit_someHandler_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the someHandler if Nullable is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">someHandler</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Unit</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">ifSome</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Unit</span>&gt; someHandler)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-ifSome_T_T__self__Func_T_Unit_someHandler_"><div class="section_title">SOURCE</div><div class="code">
            if (self.HasValue)
            {
                someHandler(self.Value);
            }
            return unit;
        </div></div></div><div class="member-title"><a name="ifSome&lt;T>"></a>ifSome&lt;T&gt;(Option&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifSome_T_Option_T_option__Action_T_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the action if Option is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">ifSome</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Some)</div></div><div style="display:none" id="code-ifSome_T_Option_T_option__Action_T_Some_"><div class="section_title">SOURCE</div><div class="code"> 
            option.IfSome(Some)</div></div></div><div class="member-title"><a name="ifSome&lt;T>"></a>ifSome&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifSome_T_TryOption_T_self__Action_T_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the Try returns a value successfully </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if successful</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">ifSome</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Some)</div></div><div style="display:none" id="code-ifSome_T_TryOption_T_self__Action_T_Some_"><div class="section_title">SOURCE</div><div class="code">
            self.IfSome(Some)</div></div></div><div class="member-title"><a name="ifSome&lt;T>"></a>ifSome&lt;T&gt;(TryOptionAsync&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifSome_T_TryOptionAsync_T_self__Action_T_Succ_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the TryOptionAsync returns a value successfully </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryOptionAsync computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if successful</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">ifSome</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Succ)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ifSome_T_TryOptionAsync_T_self__Action_T_Succ_"><div class="section_title">SOURCE</div><div class="code">
            self.IfSome(Succ)</div></div></div><div class="member-title"><a name="ifSomeUnsafe&lt;T>"></a>ifSomeUnsafe&lt;T&gt;(OptionUnsafe&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifSomeUnsafe_T_OptionUnsafe_T_option__Action_T_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the action if OptionUnsafe is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">ifSomeUnsafe</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Some)</div></div><div style="display:none" id="code-ifSomeUnsafe_T_OptionUnsafe_T_option__Action_T_Some_"><div class="section_title">SOURCE</div><div class="code">
            option.IfSomeUnsafe(Some)</div></div></div><div class="member-title"><a name="ifSucc&lt;T>"></a>ifSucc&lt;T&gt;(Try&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifSucc_T_Try_T_self__Action_T_Succ_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the Try returns a value successfully </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if successful</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">ifSucc</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Succ)</div></div><div style="display:none" id="code-ifSucc_T_Try_T_self__Action_T_Succ_"><div class="section_title">SOURCE</div><div class="code">
            self.IfSucc(Succ)</div></div></div><div class="member-title"><a name="ifSucc&lt;T>"></a>ifSucc&lt;T&gt;(TryAsync&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifSucc_T_TryAsync_T_self__Action_T_Succ_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the TryAsync returns a value successfully </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryAsync computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if successful</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">ifSucc</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Succ)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ifSucc_T_TryAsync_T_self__Action_T_Succ_"><div class="section_title">SOURCE</div><div class="code">
            self.IfSucc(Succ)</div></div></div><div class="member-title"><a name="ignore&lt;T>"></a>ignore&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ignore_T_T__anything_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Takes any value, ignores it, returns a unit </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">anything</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to ignore</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">ignore</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> anything)</div></div><div style="display:none" id="code-ignore_T_T__anything_"><div class="section_title">SOURCE</div><div class="code">
            unit</div></div></div><div class="member-title"><a name="isDefault&lt;T>"></a>isDefault&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isDefault_T_T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if the value is equal to this type&#39;s default value. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[MethodImpl(MethodImplOptions.AggressiveInlining)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isDefault</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the value is equal to this type&#39;s default value</span></div></div></div><div style="display:none" id="code-isDefault_T_T__value_"><div class="section_title">SOURCE</div><div class="code">
            EqualityComparer&lt;T&gt;.Default.Equals(value, default(T))</div></div></div><div class="member-title"><a name="isFail&lt;T>"></a>isFail&lt;T&gt;(Try&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isFail_T_Try_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Test if the Try computation fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation to test</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if fails</span></div></div></div><div style="display:none" id="code-isFail_T_Try_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Try().IsFaulted</div></div></div><div class="member-title"><a name="isFail&lt;T>"></a>isFail&lt;T&gt;(TryAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isFail_T_TryAsync_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Test if the TryAsync computation fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryAsync computation to test</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">isFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if fails</span></div></div></div><div style="display:none" id="code-isFail_T_TryAsync_T_self_"><div class="section_title">SOURCE</div><div class="code"> async () =&gt;
            (await self.Try()).IsFaulted</div></div></div><div class="member-title"><a name="isFail&lt;T>"></a>isFail&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isFail_T_TryOption_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Test if the Try computation fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation to test</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if fails</span></div></div></div><div style="display:none" id="code-isFail_T_TryOption_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Try().IsFaulted</div></div></div><div class="member-title"><a name="isFail&lt;T>"></a>isFail&lt;T&gt;(TryOptionAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isFail_T_TryOptionAsync_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Test if the TryOptionAsync computation fails </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryOptionAsync computation to test</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">isFail</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if fails</span></div></div></div><div style="display:none" id="code-isFail_T_TryOptionAsync_T_self_"><div class="section_title">SOURCE</div><div class="code"> async () =&gt;
            (await self.Try()).IsFaultedOrNone</div></div></div><div class="member-title"><a name="isLeft&lt;L, R>"></a>isLeft&lt;L, R&gt;(Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isLeft_L_R_Either_L_R_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the state of the Either provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to check</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isLeft</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the Either is in a Left state</span></div></div></div><div style="display:none" id="code-isLeft_L_R_Either_L_R_value_"><div class="section_title">SOURCE</div><div class="code">
            value.IsLeft</div></div></div><div class="member-title"><a name="isLeft&lt;L, R>"></a>isLeft&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isLeft_L_R_EitherUnsafe_L_R_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the state of the Either provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to check</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isLeft</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the Either is in a Left state</span></div></div></div><div style="display:none" id="code-isLeft_L_R_EitherUnsafe_L_R_value_"><div class="section_title">SOURCE</div><div class="code">
            value.IsLeft</div></div></div><div class="member-title"><a name="isNone&lt;T>"></a>isNone&lt;T&gt;(Option&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isNone_T_Option_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Check if Option is in a None state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Option</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isNone</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if value is in a None state</span></div></div></div><div style="display:none" id="code-isNone_T_Option_T_value_"><div class="section_title">SOURCE</div><div class="code">
            value.IsNone</div></div></div><div class="member-title"><a name="isNone&lt;T>"></a>isNone&lt;T&gt;(OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isNone_T_OptionUnsafe_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Check if OptionUnsafe is in a None state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >OptionUnsafe</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isNone</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if value is in a None state</span></div></div></div><div style="display:none" id="code-isNone_T_OptionUnsafe_T_value_"><div class="section_title">SOURCE</div><div class="code">
            value.IsNone</div></div></div><div class="member-title"><a name="isNone&lt;T>"></a>isNone&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isNone_T_TryOption_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Test if the Try computation is none </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation to test</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isNone</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if result is a None</span></div></div></div><div style="display:none" id="code-isNone_T_TryOption_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Try().Value.IsNone</div></div></div><div class="member-title"><a name="isnull&lt;T>"></a>isnull&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isnull_T_T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if the value is null, and does so without boxing of any value-types.  Value-types will always return false. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[MethodImpl(MethodImplOptions.AggressiveInlining)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isnull</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the value is null, and does so without boxing of any value-types.  Value-types will always return false.</span></div></div></div><div style="display:none" id="code-isnull_T_T__value_"><div class="section_title">SOURCE</div><div class="code">
            Check&lt;T&gt;.IsNull(value)</div></div></div><div class="member-title"><a name="isRight&lt;L, R>"></a>isRight&lt;L, R&gt;(Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isRight_L_R_Either_L_R_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the state of the Either provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to check</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isRight</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the Either is in a Right state</span></div></div></div><div style="display:none" id="code-isRight_L_R_Either_L_R_value_"><div class="section_title">SOURCE</div><div class="code">
            value.IsRight</div></div></div><div class="member-title"><a name="isRight&lt;L, R>"></a>isRight&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isRight_L_R_EitherUnsafe_L_R_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the state of the Either provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to check</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isRight</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the Either is in a Right state</span></div></div></div><div style="display:none" id="code-isRight_L_R_EitherUnsafe_L_R_value_"><div class="section_title">SOURCE</div><div class="code">
            value.IsRight</div></div></div><div class="member-title"><a name="isSome&lt;T>"></a>isSome&lt;T&gt;(Option&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isSome_T_Option_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Check if Option is in a Some state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Option</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isSome</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if value is in a Some state</span></div></div></div><div style="display:none" id="code-isSome_T_Option_T_value_"><div class="section_title">SOURCE</div><div class="code">
            value.IsSome</div></div></div><div class="member-title"><a name="isSome&lt;T>"></a>isSome&lt;T&gt;(OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isSome_T_OptionUnsafe_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Check if OptionUnsafe is in a Some state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >OptionUnsafe</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isSome</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if value is in a Some state</span></div></div></div><div style="display:none" id="code-isSome_T_OptionUnsafe_T_value_"><div class="section_title">SOURCE</div><div class="code">
            value.IsSome</div></div></div><div class="member-title"><a name="isSome&lt;T>"></a>isSome&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isSome_T_TryOption_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Test if the Try computation is successful </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation to test</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isSome</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if successful</span></div></div></div><div style="display:none" id="code-isSome_T_TryOption_T_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Try().Value.IsSome</div></div></div><div class="member-title"><a name="isSome&lt;T>"></a>isSome&lt;T&gt;(TryOptionAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isSome_T_TryOptionAsync_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Test if the TryOptionAsync computation is successful </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryOptionAsync computation to test</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">isSome</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if successful</span></div></div></div><div style="display:none" id="code-isSome_T_TryOptionAsync_T_self_"><div class="section_title">SOURCE</div><div class="code">
            from x in isFail(self)
            select !x</div></div></div><div class="member-title"><a name="isSucc&lt;T>"></a>isSucc&lt;T&gt;(Try&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isSucc_T_Try_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Test if the Try computation is successful </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation to test</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isSucc</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if successful</span></div></div></div><div style="display:none" id="code-isSucc_T_Try_T_self_"><div class="section_title">SOURCE</div><div class="code">
            !isFail(self)</div></div></div><div class="member-title"><a name="isSucc&lt;T>"></a>isSucc&lt;T&gt;(TryAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isSucc_T_TryAsync_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Test if the TryAsync computation is successful </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryAsync computation to test</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">isSucc</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if successful</span></div></div></div><div style="display:none" id="code-isSucc_T_TryAsync_T_self_"><div class="section_title">SOURCE</div><div class="code">
            from x in isFail(self)
            select !x</div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D, E, F, G>"></a>iter&lt;A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Action&lt;A, B, C, D, E, F, G&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_G_self__Action_A_B_C_D_E_F_G_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; func)</div></div><div style="display:none" id="code-iter_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_G_self__Action_A_B_C_D_E_F_G_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D, E, F, G>"></a>iter&lt;A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;, Action&lt;E&gt;, Action&lt;F&gt;, Action&lt;G&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_G_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth__Action_E_fifth__Action_F_sixth__Action_G_seventh_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">first</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">second</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">third</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">seventh</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">G</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; first, <span class="ident">Action</span>&lt;<span class="ident">B</span>&gt; second, <span class="ident">Action</span>&lt;<span class="ident">C</span>&gt; third, <span class="ident">Action</span>&lt;<span class="ident">D</span>&gt; fourth, <span class="ident">Action</span>&lt;<span class="ident">E</span>&gt; fifth, <span class="ident">Action</span>&lt;<span class="ident">F</span>&gt; sixth, <span class="ident">Action</span>&lt;<span class="ident">G</span>&gt; seventh)</div></div><div style="display:none" id="code-iter_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_G_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth__Action_E_fifth__Action_F_sixth__Action_G_seventh_"><div class="section_title">SOURCE</div><div class="code">
            first(self.Item1);
            second(self.Item2);
            third(self.Item3);
            fourth(self.Item4);
            fifth(self.Item5);
            sixth(self.Item6);
            seventh(self.Item7);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D, E, F, G>"></a>iter&lt;A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Action&lt;A, B, C, D, E, F, G&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_G_self__Action_A_B_C_D_E_F_G_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; func)</div></div><div style="display:none" id="code-iter_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_G_self__Action_A_B_C_D_E_F_G_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D, E, F, G>"></a>iter&lt;A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;, Action&lt;E&gt;, Action&lt;F&gt;, Action&lt;G&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_G_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth__Action_E_fifth__Action_F_sixth__Action_G_seventh_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">first</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">second</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">third</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">seventh</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">G</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; first, <span class="ident">Action</span>&lt;<span class="ident">B</span>&gt; second, <span class="ident">Action</span>&lt;<span class="ident">C</span>&gt; third, <span class="ident">Action</span>&lt;<span class="ident">D</span>&gt; fourth, <span class="ident">Action</span>&lt;<span class="ident">E</span>&gt; fifth, <span class="ident">Action</span>&lt;<span class="ident">F</span>&gt; sixth, <span class="ident">Action</span>&lt;<span class="ident">G</span>&gt; seventh)</div></div><div style="display:none" id="code-iter_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_G_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth__Action_E_fifth__Action_F_sixth__Action_G_seventh_"><div class="section_title">SOURCE</div><div class="code">
            first(self.Item1);
            second(self.Item2);
            third(self.Item3);
            fourth(self.Item4);
            fifth(self.Item5);
            sixth(self.Item6);
            seventh(self.Item7);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D, E, F>"></a>iter&lt;A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Action&lt;A, B, C, D, E, F&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_E_F_Tuple_A_B_C_D_E_F_self__Action_A_B_C_D_E_F_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; func)</div></div><div style="display:none" id="code-iter_A_B_C_D_E_F_Tuple_A_B_C_D_E_F_self__Action_A_B_C_D_E_F_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D, E, F>"></a>iter&lt;A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;, Action&lt;E&gt;, Action&lt;F&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_E_F_Tuple_A_B_C_D_E_F_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth__Action_E_fifth__Action_F_sixth_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">first</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">second</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">third</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">F</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; first, <span class="ident">Action</span>&lt;<span class="ident">B</span>&gt; second, <span class="ident">Action</span>&lt;<span class="ident">C</span>&gt; third, <span class="ident">Action</span>&lt;<span class="ident">D</span>&gt; fourth, <span class="ident">Action</span>&lt;<span class="ident">E</span>&gt; fifth, <span class="ident">Action</span>&lt;<span class="ident">F</span>&gt; sixth)</div></div><div style="display:none" id="code-iter_A_B_C_D_E_F_Tuple_A_B_C_D_E_F_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth__Action_E_fifth__Action_F_sixth_"><div class="section_title">SOURCE</div><div class="code">
            first(self.Item1);
            second(self.Item2);
            third(self.Item3);
            fourth(self.Item4);
            fifth(self.Item5);
            sixth(self.Item6);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D, E, F>"></a>iter&lt;A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Action&lt;A, B, C, D, E, F&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_F_self__Action_A_B_C_D_E_F_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; func)</div></div><div style="display:none" id="code-iter_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_F_self__Action_A_B_C_D_E_F_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D, E, F>"></a>iter&lt;A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;, Action&lt;E&gt;, Action&lt;F&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_F_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth__Action_E_fifth__Action_F_sixth_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">first</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">second</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">third</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">F</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; first, <span class="ident">Action</span>&lt;<span class="ident">B</span>&gt; second, <span class="ident">Action</span>&lt;<span class="ident">C</span>&gt; third, <span class="ident">Action</span>&lt;<span class="ident">D</span>&gt; fourth, <span class="ident">Action</span>&lt;<span class="ident">E</span>&gt; fifth, <span class="ident">Action</span>&lt;<span class="ident">F</span>&gt; sixth)</div></div><div style="display:none" id="code-iter_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_F_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth__Action_E_fifth__Action_F_sixth_"><div class="section_title">SOURCE</div><div class="code">
            first(self.Item1);
            second(self.Item2);
            third(self.Item3);
            fourth(self.Item4);
            fifth(self.Item5);
            sixth(self.Item6);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D, E>"></a>iter&lt;A, B, C, D, E&gt;(Tuple&lt;A, B, C, D, E&gt;, Action&lt;A, B, C, D, E&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_E_Tuple_A_B_C_D_E_self__Action_A_B_C_D_E_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; func)</div></div><div style="display:none" id="code-iter_A_B_C_D_E_Tuple_A_B_C_D_E_self__Action_A_B_C_D_E_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D, E>"></a>iter&lt;A, B, C, D, E&gt;(Tuple&lt;A, B, C, D, E&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;, Action&lt;E&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_E_Tuple_A_B_C_D_E_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth__Action_E_fifth_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">first</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">second</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">third</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">E</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; first, <span class="ident">Action</span>&lt;<span class="ident">B</span>&gt; second, <span class="ident">Action</span>&lt;<span class="ident">C</span>&gt; third, <span class="ident">Action</span>&lt;<span class="ident">D</span>&gt; fourth, <span class="ident">Action</span>&lt;<span class="ident">E</span>&gt; fifth)</div></div><div style="display:none" id="code-iter_A_B_C_D_E_Tuple_A_B_C_D_E_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth__Action_E_fifth_"><div class="section_title">SOURCE</div><div class="code">
            first(self.Item1);
            second(self.Item2);
            third(self.Item3);
            fourth(self.Item4);
            fifth(self.Item5);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D, E>"></a>iter&lt;A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Action&lt;A, B, C, D, E&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_E_ValueTuple_A_B_C_D_E_self__Action_A_B_C_D_E_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; func)</div></div><div style="display:none" id="code-iter_A_B_C_D_E_ValueTuple_A_B_C_D_E_self__Action_A_B_C_D_E_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D, E>"></a>iter&lt;A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;, Action&lt;E&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_E_ValueTuple_A_B_C_D_E_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth__Action_E_fifth_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">first</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">second</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">third</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">E</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; first, <span class="ident">Action</span>&lt;<span class="ident">B</span>&gt; second, <span class="ident">Action</span>&lt;<span class="ident">C</span>&gt; third, <span class="ident">Action</span>&lt;<span class="ident">D</span>&gt; fourth, <span class="ident">Action</span>&lt;<span class="ident">E</span>&gt; fifth)</div></div><div style="display:none" id="code-iter_A_B_C_D_E_ValueTuple_A_B_C_D_E_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth__Action_E_fifth_"><div class="section_title">SOURCE</div><div class="code">
            first(self.Item1);
            second(self.Item2);
            third(self.Item3);
            fourth(self.Item4);
            fifth(self.Item5);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D>"></a>iter&lt;A, B, C, D&gt;(Tuple&lt;A, B, C, D&gt;, Action&lt;A, B, C, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_Tuple_A_B_C_D_self__Action_A_B_C_D_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; func)</div></div><div style="display:none" id="code-iter_A_B_C_D_Tuple_A_B_C_D_self__Action_A_B_C_D_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D>"></a>iter&lt;A, B, C, D&gt;(Tuple&lt;A, B, C, D&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_Tuple_A_B_C_D_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">first</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">second</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">third</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; first, <span class="ident">Action</span>&lt;<span class="ident">B</span>&gt; second, <span class="ident">Action</span>&lt;<span class="ident">C</span>&gt; third, <span class="ident">Action</span>&lt;<span class="ident">D</span>&gt; fourth)</div></div><div style="display:none" id="code-iter_A_B_C_D_Tuple_A_B_C_D_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth_"><div class="section_title">SOURCE</div><div class="code">
            first(self.Item1);
            second(self.Item2);
            third(self.Item3);
            fourth(self.Item4);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D>"></a>iter&lt;A, B, C, D&gt;(ValueTuple&lt;A, B, C, D&gt;, Action&lt;A, B, C, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_ValueTuple_A_B_C_D_self__Action_A_B_C_D_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; func)</div></div><div style="display:none" id="code-iter_A_B_C_D_ValueTuple_A_B_C_D_self__Action_A_B_C_D_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A, B, C, D>"></a>iter&lt;A, B, C, D&gt;(ValueTuple&lt;A, B, C, D&gt;, Action&lt;A&gt;, Action&lt;B&gt;, Action&lt;C&gt;, Action&lt;D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_B_C_D_ValueTuple_A_B_C_D_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">first</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">second</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">third</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourth</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; first, <span class="ident">Action</span>&lt;<span class="ident">B</span>&gt; second, <span class="ident">Action</span>&lt;<span class="ident">C</span>&gt; third, <span class="ident">Action</span>&lt;<span class="ident">D</span>&gt; fourth)</div></div><div style="display:none" id="code-iter_A_B_C_D_ValueTuple_A_B_C_D_self__Action_A_first__Action_B_second__Action_C_third__Action_D_fourth_"><div class="section_title">SOURCE</div><div class="code">
            first(self.Item1);
            second(self.Item2);
            third(self.Item3);
            fourth(self.Item4);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A>"></a>iter&lt;A&gt;(Tuple&lt;A&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_Tuple_A_self__Action_A_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; func)</div></div><div style="display:none" id="code-iter_A_Tuple_A_self__Action_A_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;A>"></a>iter&lt;A&gt;(ValueTuple&lt;A&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_A_ValueTuple_A_self__Action_A_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; func)</div></div><div style="display:none" id="code-iter_A_ValueTuple_A_self__Action_A_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;MonoidW, W, A>"></a>iter&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_MonoidW_W_A_Writer_MonoidW_W_A_self__Action_A_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">Unit</span>&gt; <span class="ident">iter</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; action)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-iter_MonoidW_W_A_Writer_MonoidW_W_A_self__Action_A_action_"><div class="section_title">SOURCE</div><div class="code">
                self.Iter(action)</div></div></div><div class="member-title"><a name="iter&lt;NEWTYPE, T, PRED>"></a>iter&lt;NEWTYPE, T, PRED&gt;(NewType&lt;NEWTYPE, T, PRED&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_NEWTYPE_T_PRED_NewType_NEWTYPE_T_PRED_value__Action_T_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; f)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NEWTYPE</span> : <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-iter_NEWTYPE_T_PRED_NewType_NEWTYPE_T_PRED_value__Action_T_f_"><div class="section_title">SOURCE</div><div class="code">
            value.Iter(f)</div></div></div><div class="member-title"><a name="iter&lt;NUMTYPE, NUM, T, PRED>"></a>iter&lt;NUMTYPE, NUM, T, PRED&gt;(NumType&lt;NUMTYPE, NUM, T, PRED&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_NUMTYPE_NUM_T_PRED_NumType_NUMTYPE_NUM_T_PRED_value__Action_T_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; f)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-iter_NUMTYPE_NUM_T_PRED_NumType_NUMTYPE_NUM_T_PRED_value__Action_T_f_"><div class="section_title">SOURCE</div><div class="code">
            value.Iter(f)</div></div></div><div class="member-title"><a name="iter&lt;NUMTYPE, NUM, T>"></a>iter&lt;NUMTYPE, NUM, T&gt;(NumType&lt;NUMTYPE, NUM, T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_NUMTYPE_NUM_T_NumType_NUMTYPE_NUM_T_value__Action_T_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt; value, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; f)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-iter_NUMTYPE_NUM_T_NumType_NUMTYPE_NUM_T_value__Action_T_f_"><div class="section_title">SOURCE</div><div class="code">
            value.Iter(f)</div></div></div><div class="member-title"><a name="iter&lt;SELF, FLOAT, T, PRED>"></a>iter&lt;SELF, FLOAT, T, PRED&gt;(FloatType&lt;SELF, FLOAT, T, PRED&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_SELF_FLOAT_T_PRED_FloatType_SELF_FLOAT_T_PRED_value__Action_T_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; f)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-iter_SELF_FLOAT_T_PRED_FloatType_SELF_FLOAT_T_PRED_value__Action_T_f_"><div class="section_title">SOURCE</div><div class="code">
            value.Iter(f)</div></div></div><div class="member-title"><a name="iter&lt;SELF, FLOAT, T>"></a>iter&lt;SELF, FLOAT, T&gt;(FloatType&lt;SELF, FLOAT, T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_SELF_FLOAT_T_FloatType_SELF_FLOAT_T_value__Action_T_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt; value, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; f)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-iter_SELF_FLOAT_T_FloatType_SELF_FLOAT_T_value__Action_T_f_"><div class="section_title">SOURCE</div><div class="code">
            value.Iter(f)</div></div></div><div class="member-title"><a name="iter&lt;T>"></a>iter&lt;T&gt;(T?, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T_T__self__Action_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate Nullable.  Imagine the item has zero or one items depending on whether it&#39;s in a None state or not. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke with the value if not in None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; action)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-iter_T_T__self__Action_T_action_"><div class="section_title">SOURCE</div><div class="code">
            self.IfSome(action)</div></div></div><div class="member-title"><a name="iter&lt;T>"></a>iter&lt;T&gt;(Try&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T_Try_T_self__Action_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes a delegate with the result of the Try computation if it is successful. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke on successful invocation of the Try computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; action)</div></div><div style="display:none" id="code-iter_T_Try_T_self__Action_T_action_"><div class="section_title">SOURCE</div><div class="code">
            self.Iter(action)</div></div></div><div class="member-title"><a name="iter&lt;T>"></a>iter&lt;T&gt;(TryAsync&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T_TryAsync_T_self__Action_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes a delegate with the result of the TryAsync computation if it is successful. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryAsync computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke on successful invocation of the TryAsync computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">iter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; action)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-iter_T_TryAsync_T_self__Action_T_action_"><div class="section_title">SOURCE</div><div class="code">
            self.Iter(action)</div></div></div><div class="member-title"><a name="iter&lt;T>"></a>iter&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T_TryOption_T_self__Action_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes a delegate with the result of the Try computation if it is successful. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke on successful invocation of the Try computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; action)</div></div><div style="display:none" id="code-iter_T_TryOption_T_self__Action_T_action_"><div class="section_title">SOURCE</div><div class="code">
            self.Iter(action)</div></div></div><div class="member-title"><a name="iter&lt;T>"></a>iter&lt;T&gt;(TryOptionAsync&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T_TryOptionAsync_T_self__Action_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes a delegate with the result of the TryOptionAsync computation if it is successful. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryOptionAsync computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke on successful invocation of the TryOptionAsync computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">iter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; action)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-iter_T_TryOptionAsync_T_self__Action_T_action_"><div class="section_title">SOURCE</div><div class="code">
            self.Iter(action)</div></div></div><div class="member-title"><a name="iter&lt;T>"></a>iter&lt;T&gt;(Task&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T_Task_T_self__Action_T_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterates the Task.  Invokes f(Result) if not faulted or cancelled </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; f)</div></div><div style="display:none" id="code-iter_T_Task_T_self__Action_T_f_"><div class="section_title">SOURCE</div><div class="code">
            self.Iter(f)</div></div></div><div class="member-title"><a name="iter&lt;T1, T2, T3>"></a>iter&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2, T3&gt;, Action&lt;T1, T2, T3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T1_T2_T3_Tuple_T1_T2_T3_self__Action_T1_T2_T3_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; func)</div></div><div style="display:none" id="code-iter_T1_T2_T3_Tuple_T1_T2_T3_self__Action_T1_T2_T3_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;T1, T2, T3>"></a>iter&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2, T3&gt;, Action&lt;T1&gt;, Action&lt;T2&gt;, Action&lt;T3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T1_T2_T3_Tuple_T1_T2_T3_self__Action_T1_first__Action_T2_second__Action_T3_third_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">first</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">second</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">third</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt; first, <span class="ident">Action</span>&lt;<span class="ident">T2</span>&gt; second, <span class="ident">Action</span>&lt;<span class="ident">T3</span>&gt; third)</div></div><div style="display:none" id="code-iter_T1_T2_T3_Tuple_T1_T2_T3_self__Action_T1_first__Action_T2_second__Action_T3_third_"><div class="section_title">SOURCE</div><div class="code">
            first(self.Item1);
            second(self.Item2);
            third(self.Item3);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;T1, T2, T3>"></a>iter&lt;T1, T2, T3&gt;(ValueTuple&lt;T1, T2, T3&gt;, Action&lt;T1, T2, T3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T1_T2_T3_ValueTuple_T1_T2_T3_self__Action_T1_T2_T3_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; func)</div></div><div style="display:none" id="code-iter_T1_T2_T3_ValueTuple_T1_T2_T3_self__Action_T1_T2_T3_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;T1, T2, T3>"></a>iter&lt;T1, T2, T3&gt;(ValueTuple&lt;T1, T2, T3&gt;, Action&lt;T1&gt;, Action&lt;T2&gt;, Action&lt;T3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T1_T2_T3_ValueTuple_T1_T2_T3_self__Action_T1_first__Action_T2_second__Action_T3_third_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">first</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">second</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">third</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt; first, <span class="ident">Action</span>&lt;<span class="ident">T2</span>&gt; second, <span class="ident">Action</span>&lt;<span class="ident">T3</span>&gt; third)</div></div><div style="display:none" id="code-iter_T1_T2_T3_ValueTuple_T1_T2_T3_self__Action_T1_first__Action_T2_second__Action_T3_third_"><div class="section_title">SOURCE</div><div class="code">
            first(self.Item1);
            second(self.Item2);
            third(self.Item3);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;T1, T2>"></a>iter&lt;T1, T2&gt;(Tuple&lt;T1, T2&gt;, Action&lt;T1&gt;, Action&lt;T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T1_T2_Tuple_T1_T2_self__Action_T1_first__Action_T2_second_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">first</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">second</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt; first, <span class="ident">Action</span>&lt;<span class="ident">T2</span>&gt; second)</div></div><div style="display:none" id="code-iter_T1_T2_Tuple_T1_T2_self__Action_T1_first__Action_T2_second_"><div class="section_title">SOURCE</div><div class="code">
            self.Iter(first, second)</div></div></div><div class="member-title"><a name="iter&lt;T1, T2>"></a>iter&lt;T1, T2&gt;(Tuple&lt;T1, T2&gt;, Action&lt;T1, T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T1_T2_Tuple_T1_T2_self__Action_T1_T2_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; func)</div></div><div style="display:none" id="code-iter_T1_T2_Tuple_T1_T2_self__Action_T1_T2_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="iter&lt;T1, T2>"></a>iter&lt;T1, T2&gt;(ValueTuple&lt;T1, T2&gt;, Action&lt;T1&gt;, Action&lt;T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T1_T2_ValueTuple_T1_T2_self__Action_T1_first__Action_T2_second_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">first</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">second</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>&gt; first, <span class="ident">Action</span>&lt;<span class="ident">T2</span>&gt; second)</div></div><div style="display:none" id="code-iter_T1_T2_ValueTuple_T1_T2_self__Action_T1_first__Action_T2_second_"><div class="section_title">SOURCE</div><div class="code">
            self.Iter(first, second)</div></div></div><div class="member-title"><a name="iter&lt;T1, T2>"></a>iter&lt;T1, T2&gt;(ValueTuple&lt;T1, T2&gt;, Action&lt;T1, T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T1_T2_ValueTuple_T1_T2_self__Action_T1_T2_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; func)</div></div><div style="display:none" id="code-iter_T1_T2_ValueTuple_T1_T2_self__Action_T1_T2_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="last&lt;A, B, C, D, E, F, G>"></a>last&lt;A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-last_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_G_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the last item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">G</span> <span class="ident">last</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">G</span></div><div class="normal"></div></div></div><div style="display:none" id="code-last_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_G_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item7</div></div></div><div class="member-title"><a name="last&lt;A, B, C, D, E, F, G>"></a>last&lt;A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-last_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_G_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the last item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">G</span> <span class="ident">last</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">G</span></div><div class="normal"></div></div></div><div style="display:none" id="code-last_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_G_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item7</div></div></div><div class="member-title"><a name="last&lt;A, B, C, D, E, F>"></a>last&lt;A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E, F&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-last_A_B_C_D_E_F_Tuple_A_B_C_D_E_F_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the last item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">F</span> <span class="ident">last</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">F</span></div><div class="normal"></div></div></div><div style="display:none" id="code-last_A_B_C_D_E_F_Tuple_A_B_C_D_E_F_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item6</div></div></div><div class="member-title"><a name="last&lt;A, B, C, D, E, F>"></a>last&lt;A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-last_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_F_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the last item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">F</span> <span class="ident">last</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">F</span></div><div class="normal"></div></div></div><div style="display:none" id="code-last_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_F_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item6</div></div></div><div class="member-title"><a name="last&lt;A, B, C, D, E>"></a>last&lt;A, B, C, D, E&gt;(Tuple&lt;A, B, C, D, E&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-last_A_B_C_D_E_Tuple_A_B_C_D_E_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the last item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">E</span> <span class="ident">last</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">E</span></div><div class="normal"></div></div></div><div style="display:none" id="code-last_A_B_C_D_E_Tuple_A_B_C_D_E_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item5</div></div></div><div class="member-title"><a name="last&lt;A, B, C, D, E>"></a>last&lt;A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D, E&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-last_A_B_C_D_E_ValueTuple_A_B_C_D_E_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the last item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">E</span> <span class="ident">last</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">E</span></div><div class="normal"></div></div></div><div style="display:none" id="code-last_A_B_C_D_E_ValueTuple_A_B_C_D_E_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item5</div></div></div><div class="member-title"><a name="last&lt;A, B, C, D>"></a>last&lt;A, B, C, D&gt;(Tuple&lt;A, B, C, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-last_A_B_C_D_Tuple_A_B_C_D_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the last item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">D</span> <span class="ident">last</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">D</span></div><div class="normal"></div></div></div><div style="display:none" id="code-last_A_B_C_D_Tuple_A_B_C_D_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item4</div></div></div><div class="member-title"><a name="last&lt;A, B, C, D>"></a>last&lt;A, B, C, D&gt;(ValueTuple&lt;A, B, C, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-last_A_B_C_D_ValueTuple_A_B_C_D_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the last item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">D</span> <span class="ident">last</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">D</span></div><div class="normal"></div></div></div><div style="display:none" id="code-last_A_B_C_D_ValueTuple_A_B_C_D_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item4</div></div></div><div class="member-title"><a name="last&lt;A>"></a>last&lt;A&gt;(Tuple&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-last_A_Tuple_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the last item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">last</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-last_A_Tuple_A_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="last&lt;A>"></a>last&lt;A&gt;(ValueTuple&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-last_A_ValueTuple_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the last item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">last</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-last_A_ValueTuple_A_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="last&lt;T1, T2, T3>"></a>last&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2, T3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-last_T1_T2_T3_Tuple_T1_T2_T3_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the last item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T3</span> <span class="ident">last</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T3</span></div><div class="normal"></div></div></div><div style="display:none" id="code-last_T1_T2_T3_Tuple_T1_T2_T3_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item3</div></div></div><div class="member-title"><a name="last&lt;T1, T2, T3>"></a>last&lt;T1, T2, T3&gt;(ValueTuple&lt;T1, T2, T3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-last_T1_T2_T3_ValueTuple_T1_T2_T3_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the last item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T3</span> <span class="ident">last</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T3</span></div><div class="normal"></div></div></div><div style="display:none" id="code-last_T1_T2_T3_ValueTuple_T1_T2_T3_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item3</div></div></div><div class="member-title"><a name="last&lt;T1, T2>"></a>last&lt;T1, T2&gt;(Tuple&lt;T1, T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-last_T1_T2_Tuple_T1_T2_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the last item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T2</span> <span class="ident">last</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T2</span></div><div class="normal"></div></div></div><div style="display:none" id="code-last_T1_T2_Tuple_T1_T2_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item2</div></div></div><div class="member-title"><a name="last&lt;T1, T2>"></a>last&lt;T1, T2&gt;(ValueTuple&lt;T1, T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-last_T1_T2_ValueTuple_T1_T2_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the last item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T2</span> <span class="ident">last</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T2</span></div><div class="normal"></div></div></div><div style="display:none" id="code-last_T1_T2_ValueTuple_T1_T2_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item2</div></div></div><div class="member-title"><a name="Left&lt;L, R>"></a>Left&lt;L, R&gt;(L)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Left_L_R_L__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Either constructor Constructs an Either in a Left state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">L</span></div></div><div class="arg-desc"><span >Left value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">Left</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">L</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >A new Either instance</span></div></div></div><div style="display:none" id="code-Left_L_R_L__value_"><div class="section_title">SOURCE</div><div class="code">
            Either&lt;L, R&gt;.Left(value)</div></div></div><div class="member-title"><a name="Left&lt;L, R>"></a>Left&lt;L, R&gt;(L?)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Left_L_R_L__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Either constructor from Nullable Constructs an Either in a Left state or throws a ValueIsNullException if the value is null </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">L</span>?</div></div><div class="arg-desc"><span >Left value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">Left</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">L</span>? value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >A new Either instance</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">L</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-Left_L_R_L__value_"><div class="section_title">SOURCE</div><div class="code">
            isnull(value)
                ? raise&lt;Either&lt;L, R&gt;&gt;(new ValueIsNullException())
                : Either&lt;L, R&gt;.Left(value.Value)</div></div></div><div class="member-title"><a name="lefts&lt;L, R>"></a>lefts&lt;L, R&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-lefts_L_R_IEnumerable_Either&lt;L, R>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Extracts from a list of &#39;Either&#39; all the &#39;Left&#39; elements. All the &#39;Left&#39; elements are extracted in order. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Either list</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">L</span>&gt; <span class="ident">lefts</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">L</span>&gt;</div><div class="normal"><span >An enumerable of L</span></div></div></div><div style="display:none" id="code-lefts_L_R_IEnumerable_Either&lt;L, R>_self_"><div class="section_title">SOURCE</div><div class="code">
            choice1s&lt;MEither&lt;L, R&gt;, Either&lt;L, R&gt;, L, R&gt;(self)</div></div></div><div class="member-title"><a name="lefts&lt;L, R>"></a>lefts&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-lefts_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Extracts from a list of &#39;Either&#39; all the &#39;Left&#39; elements. All the &#39;Left&#39; elements are extracted in order. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Either list</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">L</span>&gt; <span class="ident">lefts</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">L</span>&gt;</div><div class="normal"><span >An enumerable of L</span></div></div></div><div style="display:none" id="code-lefts_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self_"><div class="section_title">SOURCE</div><div class="code">
            choice1s&lt;MEitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;, L, R&gt;(self)</div></div></div><div class="member-title"><a name="leftToArray&lt;L, R>"></a>leftToArray&lt;L, R&gt;(Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-leftToArray_L_R_Either_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into an array of L </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">L</span>&gt; <span class="ident">leftToArray</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">L</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, an array of L with one item.  A zero length array of L otherwise</span></div></div></div><div style="display:none" id="code-leftToArray_L_R_Either_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.LeftToArray()</div></div></div><div class="member-title"><a name="leftToArray&lt;L, R>"></a>leftToArray&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-leftToArray_L_R_EitherUnsafe_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into an array of L </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">L</span>&gt; <span class="ident">leftToArray</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">L</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, an array of L with one item.  A zero length array of L otherwise</span></div></div></div><div style="display:none" id="code-leftToArray_L_R_EitherUnsafe_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.LeftToArray()</div></div></div><div class="member-title"><a name="leftToList&lt;L, R>"></a>leftToList&lt;L, R&gt;(Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-leftToList_L_R_Either_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into a Lst L </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">L</span>&gt; <span class="ident">leftToList</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">L</span>&gt;</div><div class="normal"><span >If the Either is in a Left state, a Lst of L with one item.  A zero length Lst L otherwise</span></div></div></div><div style="display:none" id="code-leftToList_L_R_Either_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.LeftToList()</div></div></div><div class="member-title"><a name="leftToList&lt;L, R>"></a>leftToList&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-leftToList_L_R_EitherUnsafe_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into a Lst L </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">L</span>&gt; <span class="ident">leftToList</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">L</span>&gt;</div><div class="normal"><span >If the Either is in a Left state, a Lst of L with one item.  A zero length Lst L otherwise</span></div></div></div><div style="display:none" id="code-leftToList_L_R_EitherUnsafe_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.LeftToList()</div></div></div><div class="member-title"><a name="leftToQuery&lt;L, R>"></a>leftToQuery&lt;L, R&gt;(Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-leftToQuery_L_R_Either_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into an IQueryable of L </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IQueryable</span>&lt;<span class="ident">L</span>&gt; <span class="ident">leftToQuery</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IQueryable</span>&lt;<span class="ident">L</span>&gt;</div><div class="normal"><span >If the Either is in a Left state, an IQueryable of L with one item.  A zero length IQueryable L otherwise</span></div></div></div><div style="display:none" id="code-leftToQuery_L_R_Either_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.LeftAsEnumerable().AsQueryable()</div></div></div><div class="member-title"><a name="leftToQuery&lt;L, R>"></a>leftToQuery&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-leftToQuery_L_R_EitherUnsafe_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into an IQueryable of L </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IQueryable</span>&lt;<span class="ident">L</span>&gt; <span class="ident">leftToQuery</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IQueryable</span>&lt;<span class="ident">L</span>&gt;</div><div class="normal"><span >If the Either is in a Left state, an IQueryable of L with one item.  A zero length IQueryable L otherwise</span></div></div></div><div style="display:none" id="code-leftToQuery_L_R_EitherUnsafe_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.LeftAsEnumerable().AsQueryable()</div></div></div><div class="member-title"><a name="LeftUnsafe&lt;L, R>"></a>LeftUnsafe&lt;L, R&gt;(L)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-LeftUnsafe_L_R_L__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Either constructor Constructs an Either in a Left state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">L</span></div></div><div class="arg-desc"><span >Left value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">LeftUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">L</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >A new Either instance</span></div></div></div><div style="display:none" id="code-LeftUnsafe_L_R_L__value_"><div class="section_title">SOURCE</div><div class="code">
            EitherUnsafe&lt;L, R&gt;.Left(value)</div></div></div><div class="member-title"><a name="list&lt;T>"></a>list&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-list_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable list </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;List&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">list</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-list_T_"><div class="section_title">SOURCE</div><div class="code">
            Lst&lt;T&gt;.Empty</div></div></div><div class="member-title"><a name="list&lt;T>"></a>list&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-list_T_T__items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable list </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;List&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">list</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-list_T_T__items_"><div class="section_title">SOURCE</div><div class="code">
            new Lst&lt;T&gt;(items)</div></div></div><div class="member-title"><a name="List&lt;T>"></a>List&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-List_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable list </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">List</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-List_T_"><div class="section_title">SOURCE</div><div class="code">
            Lst&lt;T&gt;.Empty</div></div></div><div class="member-title"><a name="List&lt;T>"></a>List&lt;T&gt;(T, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-List_T_T__x__T__xs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable list </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">xs</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">List</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> x, <span class="ident">T</span> xs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-List_T_T__x__T__xs_"><div class="section_title">SOURCE</div><div class="code">
            new Lst&lt;T&gt;(x.Cons(xs))</div></div></div><div class="member-title"><a name="listen&lt;MonoidW, W, A, B>"></a>listen&lt;MonoidW, W, A, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;W, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-listen_MonoidW_W_A_B_Writer_MonoidW_W_A_self__Func_W_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >listen is an action that executes the monad and adds its output to the value of the computation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">listen</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-listen_MonoidW_W_A_B_Writer_MonoidW_W_A_self__Func_W_B_f_"><div class="section_title">SOURCE</div><div class="code">
                self.Listen(f)</div></div></div><div class="member-title"><a name="local&lt;Env, A>"></a>local&lt;Env, A&gt;(Reader&lt;Env, A&gt;, Func&lt;Env, Env&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-local_Env_A_Reader_Env_A_ma__Func_Env_Env_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Executes a computation in a modified environment </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">Env</span>&gt;</div></div><div class="arg-desc"><span >The function to modify the environment.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt; <span class="ident">local</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;(<span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">Env</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;</div><div class="normal"><span >Modified reader</span></div></div></div><div style="display:none" id="code-local_Env_A_Reader_Env_A_ma__Func_Env_Env_f_"><div class="section_title">SOURCE</div><div class="code">
            default(MReader&lt;Env, A&gt;).Local(ma, f)</div></div></div><div class="member-title"><a name="lpar&lt;T1, T2, R>"></a>lpar&lt;T1, T2, R&gt;(Func&lt;T1, T2, R&gt;, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-lpar_T1_T2_R_Func_T1_T2_R_func__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Left partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R</span>&gt; <span class="ident">lpar</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; func, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-lpar_T1_T2_R_Func_T1_T2_R_func__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T1 a) =&gt; func(a, b)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, F, G, R>"></a>map&lt;A, B, C, D, E, F, G, R&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;Tuple&lt;A, B, C, D, E, F, G&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_F_G_R_Tuple_A_B_C_D_E_F_G_self__Func_Tuple&lt;A, B, C, D, E, F, G>_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_F_G_R_Tuple_A_B_C_D_E_F_G_self__Func_Tuple&lt;A, B, C, D, E, F, G>_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, F, G, R>"></a>map&lt;A, B, C, D, E, F, G, R&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;A, B, C, D, E, F, G, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_F_G_R_Tuple_A_B_C_D_E_F_G_self__Func_A_B_C_D_E_F_G_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_F_G_R_Tuple_A_B_C_D_E_F_G_self__Func_A_B_C_D_E_F_G_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, F, G, R>"></a>map&lt;A, B, C, D, E, F, G, R&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;ValueTuple&lt;A, B, C, D, E, F, G&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_F_G_R_ValueTuple_A_B_C_D_E_F_G_self__Func_ValueTuple&lt;A, B, C, D, E, F, G>_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_F_G_R_ValueTuple_A_B_C_D_E_F_G_self__Func_ValueTuple&lt;A, B, C, D, E, F, G>_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, F, G, R>"></a>map&lt;A, B, C, D, E, F, G, R&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;A, B, C, D, E, F, G, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_F_G_R_ValueTuple_A_B_C_D_E_F_G_self__Func_A_B_C_D_E_F_G_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_F_G_R_ValueTuple_A_B_C_D_E_F_G_self__Func_A_B_C_D_E_F_G_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, F, G, T, U, V, W, X, Y, Z>"></a>map&lt;A, B, C, D, E, F, G, T, U, V, W, X, Y, Z&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;A, T&gt;, Func&lt;B, U&gt;, Func&lt;C, V&gt;, Func&lt;D, W&gt;, Func&lt;E, X&gt;, Func&lt;F, Y&gt;, Func&lt;G, Z&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_F_G_T_U_V_W_X_Y_Z_Tuple_A_B_C_D_E_F_G_self__Func_A_T_firstMap__Func_B_U_secondMap__Func_C_V_thirdMap__Func_D_W_fourthMap__Func_E_X_fifthMap__Func_F_Y_sixthMap__Func_G_Z_seventhMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tri-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">W</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">X</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">Y</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">seventhMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">G</span>, <span class="ident">Z</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt; <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">T</span>&gt; firstMap, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">U</span>&gt; secondMap, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">V</span>&gt; thirdMap, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">W</span>&gt; fourthMap, <span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">X</span>&gt; fifthMap, <span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">Y</span>&gt; sixthMap, <span class="ident">Func</span>&lt;<span class="ident">G</span>, <span class="ident">Z</span>&gt; seventhMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_F_G_T_U_V_W_X_Y_Z_Tuple_A_B_C_D_E_F_G_self__Func_A_T_firstMap__Func_B_U_secondMap__Func_C_V_thirdMap__Func_D_W_fourthMap__Func_E_X_fifthMap__Func_F_Y_sixthMap__Func_G_Z_seventhMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(firstMap(self.Item1), secondMap(self.Item2), thirdMap(self.Item3), fourthMap(self.Item4), fifthMap(self.Item5), sixthMap(self.Item6), seventhMap(self.Item7))</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, F, G, T, U, V, W, X, Y, Z>"></a>map&lt;A, B, C, D, E, F, G, T, U, V, W, X, Y, Z&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;A, T&gt;, Func&lt;B, U&gt;, Func&lt;C, V&gt;, Func&lt;D, W&gt;, Func&lt;E, X&gt;, Func&lt;F, Y&gt;, Func&lt;G, Z&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_F_G_T_U_V_W_X_Y_Z_ValueTuple_A_B_C_D_E_F_G_self__Func_A_T_firstMap__Func_B_U_secondMap__Func_C_V_thirdMap__Func_D_W_fourthMap__Func_E_X_fifthMap__Func_F_Y_sixthMap__Func_G_Z_seventhMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tri-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">W</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">X</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">Y</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">seventhMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">G</span>, <span class="ident">Z</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt; <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">T</span>&gt; firstMap, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">U</span>&gt; secondMap, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">V</span>&gt; thirdMap, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">W</span>&gt; fourthMap, <span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">X</span>&gt; fifthMap, <span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">Y</span>&gt; sixthMap, <span class="ident">Func</span>&lt;<span class="ident">G</span>, <span class="ident">Z</span>&gt; seventhMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_F_G_T_U_V_W_X_Y_Z_ValueTuple_A_B_C_D_E_F_G_self__Func_A_T_firstMap__Func_B_U_secondMap__Func_C_V_thirdMap__Func_D_W_fourthMap__Func_E_X_fifthMap__Func_F_Y_sixthMap__Func_G_Z_seventhMap_"><div class="section_title">SOURCE</div><div class="code">
            (firstMap(self.Item1), secondMap(self.Item2), thirdMap(self.Item3), fourthMap(self.Item4), fifthMap(self.Item5), sixthMap(self.Item6), seventhMap(self.Item7))</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, F, R>"></a>map&lt;A, B, C, D, E, F, R&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;Tuple&lt;A, B, C, D, E, F&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_F_R_Tuple_A_B_C_D_E_F_self__Func_Tuple&lt;A, B, C, D, E, F>_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_F_R_Tuple_A_B_C_D_E_F_self__Func_Tuple&lt;A, B, C, D, E, F>_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, F, R>"></a>map&lt;A, B, C, D, E, F, R&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;A, B, C, D, E, F, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_F_R_Tuple_A_B_C_D_E_F_self__Func_A_B_C_D_E_F_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_F_R_Tuple_A_B_C_D_E_F_self__Func_A_B_C_D_E_F_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, F, R>"></a>map&lt;A, B, C, D, E, F, R&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;ValueTuple&lt;A, B, C, D, E, F&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_F_R_ValueTuple_A_B_C_D_E_F_self__Func_ValueTuple&lt;A, B, C, D, E, F>_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_F_R_ValueTuple_A_B_C_D_E_F_self__Func_ValueTuple&lt;A, B, C, D, E, F>_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, F, R>"></a>map&lt;A, B, C, D, E, F, R&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;A, B, C, D, E, F, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_F_R_ValueTuple_A_B_C_D_E_F_self__Func_A_B_C_D_E_F_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_F_R_ValueTuple_A_B_C_D_E_F_self__Func_A_B_C_D_E_F_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, F, U, V, W, X, Y, Z>"></a>map&lt;A, B, C, D, E, F, U, V, W, X, Y, Z&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;A, U&gt;, Func&lt;B, V&gt;, Func&lt;C, W&gt;, Func&lt;D, X&gt;, Func&lt;E, Y&gt;, Func&lt;F, Z&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_F_U_V_W_X_Y_Z_Tuple_A_B_C_D_E_F_self__Func_A_U_firstMap__Func_B_V_secondMap__Func_C_W_thirdMap__Func_D_X_fourthMap__Func_E_Y_fifthMap__Func_F_Z_sixthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tri-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">W</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">X</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">Y</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">Z</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">U</span>, <span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt; <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">U</span>, <span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">U</span>&gt; firstMap, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">V</span>&gt; secondMap, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">W</span>&gt; thirdMap, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">X</span>&gt; fourthMap, <span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">Y</span>&gt; fifthMap, <span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">Z</span>&gt; sixthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">U</span>, <span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_F_U_V_W_X_Y_Z_Tuple_A_B_C_D_E_F_self__Func_A_U_firstMap__Func_B_V_secondMap__Func_C_W_thirdMap__Func_D_X_fourthMap__Func_E_Y_fifthMap__Func_F_Z_sixthMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(firstMap(self.Item1), secondMap(self.Item2), thirdMap(self.Item3), fourthMap(self.Item4), fifthMap(self.Item5), sixthMap(self.Item6))</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, F, U, V, W, X, Y, Z>"></a>map&lt;A, B, C, D, E, F, U, V, W, X, Y, Z&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;A, U&gt;, Func&lt;B, V&gt;, Func&lt;C, W&gt;, Func&lt;D, X&gt;, Func&lt;E, Y&gt;, Func&lt;F, Z&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_F_U_V_W_X_Y_Z_ValueTuple_A_B_C_D_E_F_self__Func_A_U_firstMap__Func_B_V_secondMap__Func_C_W_thirdMap__Func_D_X_fourthMap__Func_E_Y_fifthMap__Func_F_Z_sixthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tri-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">U</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">W</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">X</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">Y</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">Z</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">U</span>, <span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt; <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">U</span>, <span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">U</span>&gt; firstMap, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">V</span>&gt; secondMap, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">W</span>&gt; thirdMap, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">X</span>&gt; fourthMap, <span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">Y</span>&gt; fifthMap, <span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">Z</span>&gt; sixthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">U</span>, <span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_F_U_V_W_X_Y_Z_ValueTuple_A_B_C_D_E_F_self__Func_A_U_firstMap__Func_B_V_secondMap__Func_C_W_thirdMap__Func_D_X_fourthMap__Func_E_Y_fifthMap__Func_F_Z_sixthMap_"><div class="section_title">SOURCE</div><div class="code">
            (firstMap(self.Item1), secondMap(self.Item2), thirdMap(self.Item3), fourthMap(self.Item4), fifthMap(self.Item5), sixthMap(self.Item6))</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, R>"></a>map&lt;A, B, C, D, E, R&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;Tuple&lt;A, B, C, D, E&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_R_Tuple_A_B_C_D_E_self__Func_Tuple&lt;A, B, C, D, E>_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_R_Tuple_A_B_C_D_E_self__Func_Tuple&lt;A, B, C, D, E>_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, R>"></a>map&lt;A, B, C, D, E, R&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;A, B, C, D, E, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_R_Tuple_A_B_C_D_E_self__Func_A_B_C_D_E_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_R_Tuple_A_B_C_D_E_self__Func_A_B_C_D_E_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, R>"></a>map&lt;A, B, C, D, E, R&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;ValueTuple&lt;A, B, C, D, E&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_R_ValueTuple_A_B_C_D_E_self__Func_ValueTuple&lt;A, B, C, D, E>_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_R_ValueTuple_A_B_C_D_E_self__Func_ValueTuple&lt;A, B, C, D, E>_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, R>"></a>map&lt;A, B, C, D, E, R&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;A, B, C, D, E, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_R_ValueTuple_A_B_C_D_E_self__Func_A_B_C_D_E_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_R_ValueTuple_A_B_C_D_E_self__Func_A_B_C_D_E_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, V, W, X, Y, Z>"></a>map&lt;A, B, C, D, E, V, W, X, Y, Z&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;A, V&gt;, Func&lt;B, W&gt;, Func&lt;C, X&gt;, Func&lt;D, Y&gt;, Func&lt;E, Z&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_V_W_X_Y_Z_Tuple_A_B_C_D_E_self__Func_A_V_firstMap__Func_B_W_secondMap__Func_C_X_thirdMap__Func_D_Y_fourthMap__Func_E_Z_fifthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tri-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">W</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">X</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">Y</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">Z</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt; <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">V</span>&gt; firstMap, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">W</span>&gt; secondMap, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">X</span>&gt; thirdMap, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">Y</span>&gt; fourthMap, <span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">Z</span>&gt; fifthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_V_W_X_Y_Z_Tuple_A_B_C_D_E_self__Func_A_V_firstMap__Func_B_W_secondMap__Func_C_X_thirdMap__Func_D_Y_fourthMap__Func_E_Z_fifthMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(firstMap(self.Item1), secondMap(self.Item2), thirdMap(self.Item3), fourthMap(self.Item4), fifthMap(self.Item5))</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, E, V, W, X, Y, Z>"></a>map&lt;A, B, C, D, E, V, W, X, Y, Z&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;A, V&gt;, Func&lt;B, W&gt;, Func&lt;C, X&gt;, Func&lt;D, Y&gt;, Func&lt;E, Z&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_E_V_W_X_Y_Z_ValueTuple_A_B_C_D_E_self__Func_A_V_firstMap__Func_B_W_secondMap__Func_C_X_thirdMap__Func_D_Y_fourthMap__Func_E_Z_fifthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tri-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">W</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">X</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">Y</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">Z</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt; <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">V</span>&gt; firstMap, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">W</span>&gt; secondMap, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">X</span>&gt; thirdMap, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">Y</span>&gt; fourthMap, <span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">Z</span>&gt; fifthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">V</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_E_V_W_X_Y_Z_ValueTuple_A_B_C_D_E_self__Func_A_V_firstMap__Func_B_W_secondMap__Func_C_X_thirdMap__Func_D_Y_fourthMap__Func_E_Z_fifthMap_"><div class="section_title">SOURCE</div><div class="code">
            (firstMap(self.Item1), secondMap(self.Item2), thirdMap(self.Item3), fourthMap(self.Item4), fifthMap(self.Item5))</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, R>"></a>map&lt;A, B, C, D, R&gt;(Tuple&lt;A, B, C, D&gt;, Func&lt;Tuple&lt;A, B, C, D&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_R_Tuple_A_B_C_D_self__Func_Tuple&lt;A, B, C, D>_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_R_Tuple_A_B_C_D_self__Func_Tuple&lt;A, B, C, D>_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, R>"></a>map&lt;A, B, C, D, R&gt;(Tuple&lt;A, B, C, D&gt;, Func&lt;A, B, C, D, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_R_Tuple_A_B_C_D_self__Func_A_B_C_D_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_R_Tuple_A_B_C_D_self__Func_A_B_C_D_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self.Item1, self.Item2, self.Item3, self.Item4)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, R>"></a>map&lt;A, B, C, D, R&gt;(ValueTuple&lt;A, B, C, D&gt;, Func&lt;ValueTuple&lt;A, B, C, D&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_R_ValueTuple_A_B_C_D_self__Func_ValueTuple&lt;A, B, C, D>_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_R_ValueTuple_A_B_C_D_self__Func_ValueTuple&lt;A, B, C, D>_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, R>"></a>map&lt;A, B, C, D, R&gt;(ValueTuple&lt;A, B, C, D&gt;, Func&lt;A, B, C, D, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_R_ValueTuple_A_B_C_D_self__Func_A_B_C_D_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_R_ValueTuple_A_B_C_D_self__Func_A_B_C_D_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self.Item1, self.Item2, self.Item3, self.Item4)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, W, X, Y, Z>"></a>map&lt;A, B, C, D, W, X, Y, Z&gt;(Tuple&lt;A, B, C, D&gt;, Func&lt;A, W&gt;, Func&lt;B, X&gt;, Func&lt;C, Y&gt;, Func&lt;D, Z&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_W_X_Y_Z_Tuple_A_B_C_D_self__Func_A_W_firstMap__Func_B_X_secondMap__Func_C_Y_thirdMap__Func_D_Z_fourthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tri-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">W</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">X</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">Y</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">Z</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt; <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">W</span>&gt; firstMap, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">X</span>&gt; secondMap, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">Y</span>&gt; thirdMap, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">Z</span>&gt; fourthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_W_X_Y_Z_Tuple_A_B_C_D_self__Func_A_W_firstMap__Func_B_X_secondMap__Func_C_Y_thirdMap__Func_D_Z_fourthMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(firstMap(self.Item1), secondMap(self.Item2), thirdMap(self.Item3), fourthMap(self.Item4))</div></div></div><div class="member-title"><a name="map&lt;A, B, C, D, W, X, Y, Z>"></a>map&lt;A, B, C, D, W, X, Y, Z&gt;(ValueTuple&lt;A, B, C, D&gt;, Func&lt;A, W&gt;, Func&lt;B, X&gt;, Func&lt;C, Y&gt;, Func&lt;D, Z&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_D_W_X_Y_Z_ValueTuple_A_B_C_D_self__Func_A_W_firstMap__Func_B_X_secondMap__Func_C_Y_thirdMap__Func_D_Z_fourthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tri-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">W</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">X</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">Y</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">Z</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt; <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">W</span>&gt; firstMap, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">X</span>&gt; secondMap, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">Y</span>&gt; thirdMap, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">Z</span>&gt; fourthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">W</span>, <span class="ident">X</span>, <span class="ident">Y</span>, <span class="ident">Z</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_D_W_X_Y_Z_ValueTuple_A_B_C_D_self__Func_A_W_firstMap__Func_B_X_secondMap__Func_C_Y_thirdMap__Func_D_Z_fourthMap_"><div class="section_title">SOURCE</div><div class="code">
            (firstMap(self.Item1), secondMap(self.Item2), thirdMap(self.Item3), fourthMap(self.Item4))</div></div></div><div class="member-title"><a name="map&lt;A, B, C, R>"></a>map&lt;A, B, C, R&gt;(Tuple&lt;A, B, C&gt;, Func&lt;Tuple&lt;A, B, C&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_R_Tuple_A_B_C_self__Func_Tuple&lt;A, B, C>_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_R_Tuple_A_B_C_self__Func_Tuple&lt;A, B, C>_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, R>"></a>map&lt;A, B, C, R&gt;(Tuple&lt;A, B, C&gt;, Func&lt;A, B, C, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_R_Tuple_A_B_C_self__Func_A_B_C_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_R_Tuple_A_B_C_self__Func_A_B_C_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self.Item1, self.Item2, self.Item3)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, R>"></a>map&lt;A, B, C, R&gt;(ValueTuple&lt;A, B, C&gt;, Func&lt;ValueTuple&lt;A, B, C&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_R_ValueTuple_A_B_C_self__Func_ValueTuple&lt;A, B, C>_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_R_ValueTuple_A_B_C_self__Func_ValueTuple&lt;A, B, C>_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self)</div></div></div><div class="member-title"><a name="map&lt;A, B, C, R>"></a>map&lt;A, B, C, R&gt;(ValueTuple&lt;A, B, C&gt;, Func&lt;A, B, C, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_C_R_ValueTuple_A_B_C_self__Func_A_B_C_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_C_R_ValueTuple_A_B_C_self__Func_A_B_C_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self.Item1, self.Item2, self.Item3)</div></div></div><div class="member-title"><a name="map&lt;A, B, R>"></a>map&lt;A, B, R&gt;(Tuple&lt;A, B&gt;, Func&lt;Tuple&lt;A, B&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_R_Tuple_A_B_self__Func_Tuple&lt;A, B>_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_R_Tuple_A_B_self__Func_Tuple&lt;A, B>_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self)</div></div></div><div class="member-title"><a name="map&lt;A, B, R>"></a>map&lt;A, B, R&gt;(ValueTuple&lt;A, B&gt;, Func&lt;ValueTuple&lt;A, B&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_R_ValueTuple_A_B_self__Func_ValueTuple&lt;A, B>_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_R_ValueTuple_A_B_self__Func_ValueTuple&lt;A, B>_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self)</div></div></div><div class="member-title"><a name="map&lt;A, B, R>"></a>map&lt;A, B, R&gt;(ValueTuple&lt;A, B&gt;, Func&lt;A, B, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_R_ValueTuple_A_B_self__Func_A_B_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_B_R_ValueTuple_A_B_self__Func_A_B_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self.Item1, self.Item2)</div></div></div><div class="member-title"><a name="map&lt;A, B>"></a>map&lt;A, B&gt;(Option&lt;A&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_Option_A_option__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped functor</span></div></div></div><div style="display:none" id="code-map_A_B_Option_A_option__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            option.Map(f)</div></div></div><div class="member-title"><a name="map&lt;A, B>"></a>map&lt;A, B&gt;(OptionUnsafe&lt;A&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_OptionUnsafe_A_option__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped functor</span></div></div></div><div style="display:none" id="code-map_A_B_OptionUnsafe_A_option__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            option.Map(f)</div></div></div><div class="member-title"><a name="map&lt;A, R>"></a>map&lt;A, R&gt;(Tuple&lt;A&gt;, Func&lt;A, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_R_Tuple_A_self__Func_A_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map to R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">R</span>&gt; <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_R_Tuple_A_self__Func_A_R_map_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(map(self.Item1))</div></div></div><div class="member-title"><a name="map&lt;A, R>"></a>map&lt;A, R&gt;(ValueTuple&lt;A&gt;, Func&lt;A, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_R_ValueTuple_A_self__Func_A_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map to R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">R</span>&gt; <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-map_A_R_ValueTuple_A_self__Func_A_R_map_"><div class="section_title">SOURCE</div><div class="code">
            VTuple(map(self.Item1))</div></div></div><div class="member-title"><a name="map&lt;K, V>"></a>map&lt;K, V&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_K_V_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Map&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-map_K_V_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.empty&lt;K, V&gt;()</div></div></div><div class="member-title"><a name="map&lt;K, V>"></a>map&lt;K, V&gt;(Tuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_K_V_Tuple_K_V_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Map&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-map_K_V_Tuple_K_V_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.createRange(items)</div></div></div><div class="member-title"><a name="map&lt;K, V>"></a>map&lt;K, V&gt;(KeyValuePair&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_K_V_KeyValuePair_K_V_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Map&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-map_K_V_KeyValuePair_K_V_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.createRange(from x in items
                                        select Tuple(x.Key, x.Value))</div></div></div><div class="member-title"><a name="Map&lt;K, V>"></a>Map&lt;K, V&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_K_V_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Map_K_V_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.empty&lt;K, V&gt;()</div></div></div><div class="member-title"><a name="Map&lt;K, V>"></a>Map&lt;K, V&gt;(Tuple&lt;K, V&gt;, Tuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_K_V_Tuple_K_V_head__Tuple_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Map_K_V_Tuple_K_V_head__Tuple_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.create(head, tail)</div></div></div><div class="member-title"><a name="Map&lt;K, V>"></a>Map&lt;K, V&gt;(ValueTuple&lt;K, V&gt;, ValueTuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_K_V_ValueTuple_K_V_head__ValueTuple_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Map_K_V_ValueTuple_K_V_head__ValueTuple_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.create(head, tail)</div></div></div><div class="member-title"><a name="Map&lt;K, V>"></a>Map&lt;K, V&gt;(KeyValuePair&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_K_V_KeyValuePair_K_V_head__KeyValuePair_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Map_K_V_KeyValuePair_K_V_head__KeyValuePair_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.create(head, tail)</div></div></div><div class="member-title"><a name="map&lt;L, R, Ret>"></a>map&lt;L, R, Ret&gt;(Either&lt;L, R&gt;, Func&lt;R, Ret&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_L_R_Ret_Either_L_R_either__Func_R_Ret_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the value in the Either if it&#39;s in a Right state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to map</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc"><span >Map function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt; <span class="ident">map</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;</div><div class="normal"><span >Mapped Either</span></div></div></div><div style="display:none" id="code-map_L_R_Ret_Either_L_R_either__Func_R_Ret_mapper_"><div class="section_title">SOURCE</div><div class="code">
            either.Map(mapper)</div></div></div><div class="member-title"><a name="map&lt;L, R, Ret>"></a>map&lt;L, R, Ret&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, Ret&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_L_R_Ret_EitherUnsafe_L_R_either__Func_R_Ret_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the value in the Either if it&#39;s in a Right state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to map</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc"><span >Map function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt; <span class="ident">map</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;</div><div class="normal"><span >Mapped EitherUnsafe</span></div></div></div><div style="display:none" id="code-map_L_R_Ret_EitherUnsafe_L_R_either__Func_R_Ret_mapper_"><div class="section_title">SOURCE</div><div class="code">
            either.Map(mapper)</div></div></div><div class="member-title"><a name="map&lt;MonoidW, W, A, B>"></a>map&lt;MonoidW, W, A, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_MonoidW_W_A_B_Writer_MonoidW_W_A_self__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt; <span class="ident">map</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">B</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-map_MonoidW_W_A_B_Writer_MonoidW_W_A_self__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
                self.Map(f)</div></div></div><div class="member-title"><a name="map&lt;NEWTYPE, T, PRED>"></a>map&lt;NEWTYPE, T, PRED&gt;(NewType&lt;NEWTYPE, T, PRED&gt;, Func&lt;T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_NEWTYPE_T_PRED_NewType_NEWTYPE_T_PRED_value__Func_T_T_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NEWTYPE</span> <span class="ident">map</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NEWTYPE</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NEWTYPE</span> : <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-map_NEWTYPE_T_PRED_NewType_NEWTYPE_T_PRED_value__Func_T_T_map_"><div class="section_title">SOURCE</div><div class="code">
            value.Map(map)</div></div></div><div class="member-title"><a name="map&lt;NUMTYPE, NUM, T, PRED>"></a>map&lt;NUMTYPE, NUM, T, PRED&gt;(NumType&lt;NUMTYPE, NUM, T, PRED&gt;, Func&lt;T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_NUMTYPE_NUM_T_PRED_NumType_NUMTYPE_NUM_T_PRED_value__Func_T_T_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NUMTYPE</span> <span class="ident">map</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NUMTYPE</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-map_NUMTYPE_NUM_T_PRED_NumType_NUMTYPE_NUM_T_PRED_value__Func_T_T_map_"><div class="section_title">SOURCE</div><div class="code">
            value.Map(map)</div></div></div><div class="member-title"><a name="map&lt;NUMTYPE, NUM, T>"></a>map&lt;NUMTYPE, NUM, T&gt;(NumType&lt;NUMTYPE, NUM, T&gt;, Func&lt;T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_NUMTYPE_NUM_T_NumType_NUMTYPE_NUM_T_value__Func_T_T_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NUMTYPE</span> <span class="ident">map</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NUMTYPE</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-map_NUMTYPE_NUM_T_NumType_NUMTYPE_NUM_T_value__Func_T_T_map_"><div class="section_title">SOURCE</div><div class="code">
            value.Map(map)</div></div></div><div class="member-title"><a name="Map&lt;OrdK, K, V>"></a>Map&lt;OrdK, K, V&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_OrdK_K_V_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-Map_OrdK_K_V_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.empty&lt;OrdK, K, V&gt;()</div></div></div><div class="member-title"><a name="Map&lt;OrdK, K, V>"></a>Map&lt;OrdK, K, V&gt;(Tuple&lt;K, V&gt;, Tuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_OrdK_K_V_Tuple_K_V_head__Tuple_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-Map_OrdK_K_V_Tuple_K_V_head__Tuple_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.create&lt;OrdK, K, V&gt;(head, tail)</div></div></div><div class="member-title"><a name="Map&lt;OrdK, K, V>"></a>Map&lt;OrdK, K, V&gt;(ValueTuple&lt;K, V&gt;, ValueTuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_OrdK_K_V_ValueTuple_K_V_head__ValueTuple_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-Map_OrdK_K_V_ValueTuple_K_V_head__ValueTuple_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.create&lt;OrdK, K, V&gt;(head, tail)</div></div></div><div class="member-title"><a name="map&lt;SELF, FLOAT, T, PRED>"></a>map&lt;SELF, FLOAT, T, PRED&gt;(FloatType&lt;SELF, FLOAT, T, PRED&gt;, Func&lt;T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_SELF_FLOAT_T_PRED_FloatType_SELF_FLOAT_T_PRED_value__Func_T_T_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SELF</span> <span class="ident">map</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SELF</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-map_SELF_FLOAT_T_PRED_FloatType_SELF_FLOAT_T_PRED_value__Func_T_T_map_"><div class="section_title">SOURCE</div><div class="code">
            value.Map(map)</div></div></div><div class="member-title"><a name="map&lt;SELF, FLOAT, T>"></a>map&lt;SELF, FLOAT, T&gt;(FloatType&lt;SELF, FLOAT, T&gt;, Func&lt;T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_SELF_FLOAT_T_FloatType_SELF_FLOAT_T_value__Func_T_T_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SELF</span> <span class="ident">map</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt; value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SELF</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-map_SELF_FLOAT_T_FloatType_SELF_FLOAT_T_value__Func_T_T_map_"><div class="section_title">SOURCE</div><div class="code">
            value.Map(map)</div></div></div><div class="member-title"><a name="map&lt;T, R>"></a>map&lt;T, R&gt;(T?, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_T_R_T__self__Func_T_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span>? <span class="ident">map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">R</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-map_T_R_T__self__Func_T_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? mapper(self.Value)
                : default(R?)</div></div></div><div class="member-title"><a name="map&lt;T, R>"></a>map&lt;T, R&gt;(T?, Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_T_R_T__self__Func_T_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span>? <span class="ident">map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span>?</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">R</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-map_T_R_T__self__Func_T_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? Some(self.Value)
                : default(R?)</div></div></div><div class="member-title"><a name="map&lt;T, R>"></a>map&lt;T, R&gt;(Try&lt;T&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_T_R_Try_T_self__Func_T_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt; <span class="ident">map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-map_T_R_Try_T_self__Func_T_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
            self.Map(mapper)</div></div></div><div class="member-title"><a name="map&lt;T, R>"></a>map&lt;T, R&gt;(TryAsync&lt;T&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_T_R_TryAsync_T_self__Func_T_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryAsync computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">R</span>&gt; <span class="ident">map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-map_T_R_TryAsync_T_self__Func_T_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
            self.Map(mapper)</div></div></div><div class="member-title"><a name="map&lt;T, R>"></a>map&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_T_R_TryOption_T_self__Func_T_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-map_T_R_TryOption_T_self__Func_T_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
            self.Map(mapper)</div></div></div><div class="member-title"><a name="map&lt;T, R>"></a>map&lt;T, R&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_T_R_TryOptionAsync_T_self__Func_T_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryOptionAsync computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt; <span class="ident">map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-map_T_R_TryOptionAsync_T_self__Func_T_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
            self.Map(mapper)</div></div></div><div class="member-title"><a name="map&lt;T, R>"></a>map&lt;T, R&gt;(T, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_T_R_T__value__Func_T_R_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projects a value into a lambda Useful when one needs to declare a local variable which breaks your expression.  This allows you to keep the expression going. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">T</span> value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_T_R_T__value__Func_T_R_project_"><div class="section_title">SOURCE</div><div class="code">
            project(value)</div></div></div><div class="member-title"><a name="map&lt;T, U>"></a>map&lt;T, U&gt;(Task&lt;T&gt;, Func&lt;T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_T_U_Task_T_self__Func_T_U_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns map(Result) if not faulted or cancelled. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">U</span>&gt; <span class="ident">map</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">U</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-map_T_U_Task_T_self__Func_T_U_map_"><div class="section_title">SOURCE</div><div class="code">
            self.Select(map)</div></div></div><div class="member-title"><a name="map&lt;T1, T2, R>"></a>map&lt;T1, T2, R&gt;(Tuple&lt;T1, T2&gt;, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_T1_T2_R_Tuple_T1_T2_self__Func_T1_T2_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Map  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_T1_T2_R_Tuple_T1_T2_self__Func_T1_T2_R_map_"><div class="section_title">SOURCE</div><div class="code">
            map(self.Item1, self.Item2)</div></div></div><div class="member-title"><a name="map&lt;T1, T2, R>"></a>map&lt;T1, T2, R&gt;(T1, T2, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_T1_T2_R_T1__value1__T2__value2__Func_T1_T2_R_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projects values into a lambda Useful when one needs to declare a local variable which breaks your expression.  This allows you to keep the expression going. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">T1</span> value1, <span class="ident">T2</span> value2, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_T1_T2_R_T1__value1__T2__value2__Func_T1_T2_R_project_"><div class="section_title">SOURCE</div><div class="code">
            project(value1, value2)</div></div></div><div class="member-title"><a name="map&lt;T1, T2, T3, R>"></a>map&lt;T1, T2, T3, R&gt;(T1, T2, T3, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_T1_T2_T3_R_T1__value1__T2__value2__T3__value3__Func_T1_T2_T3_R_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projects values into a lambda Useful when one needs to declare a local variable which breaks your expression.  This allows you to keep the expression going. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">T1</span> value1, <span class="ident">T2</span> value2, <span class="ident">T3</span> value3, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_T1_T2_T3_R_T1__value1__T2__value2__T3__value3__Func_T1_T2_T3_R_project_"><div class="section_title">SOURCE</div><div class="code">
            project(value1, value2, value3)</div></div></div><div class="member-title"><a name="map&lt;T1, T2, T3, T4, R>"></a>map&lt;T1, T2, T3, T4, R&gt;(T1, T2, T3, T4, Func&lt;T1, T2, T3, T4, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_T1_T2_T3_T4_R_T1__value1__T2__value2__T3__value3__T4__value4__Func_T1_T2_T3_T4_R_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projects values into a lambda Useful when one needs to declare a local variable which breaks your expression.  This allows you to keep the expression going. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value4</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;(<span class="ident">T1</span> value1, <span class="ident">T2</span> value2, <span class="ident">T3</span> value3, <span class="ident">T4</span> value4, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_T1_T2_T3_T4_R_T1__value1__T2__value2__T3__value3__T4__value4__Func_T1_T2_T3_T4_R_project_"><div class="section_title">SOURCE</div><div class="code">
            project(value1, value2, value3, value4)</div></div></div><div class="member-title"><a name="map&lt;T1, T2, T3, T4, T5, R>"></a>map&lt;T1, T2, T3, T4, T5, R&gt;(T1, T2, T3, T4, T5, Func&lt;T1, T2, T3, T4, T5, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_T1_T2_T3_T4_T5_R_T1__value1__T2__value2__T3__value3__T4__value4__T5__value5__Func_T1_T2_T3_T4_T5_R_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projects values into a lambda Useful when one needs to declare a local variable which breaks your expression.  This allows you to keep the expression going. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value4</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value5</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">map</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;(<span class="ident">T1</span> value1, <span class="ident">T2</span> value2, <span class="ident">T3</span> value3, <span class="ident">T4</span> value4, <span class="ident">T5</span> value5, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-map_T1_T2_T3_T4_T5_R_T1__value1__T2__value2__T3__value3__T4__value4__T5__value5__Func_T1_T2_T3_T4_T5_R_project_"><div class="section_title">SOURCE</div><div class="code">
            project(value1, value2, value3, value4, value5)</div></div></div><div class="member-title"><a name="mapFifth&lt;A, B, C, D, E, F, G, R5>"></a>mapFifth&lt;A, B, C, D, E, F, G, R5&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;E, R5&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFifth_A_B_C_D_E_F_G_R5_Tuple_A_B_C_D_E_F_G_self__Func_E_R5_fifthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fifth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">R5</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R5</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">mapFifth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R5</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">R5</span>&gt; fifthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R5</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFifth_A_B_C_D_E_F_G_R5_Tuple_A_B_C_D_E_F_G_self__Func_E_R5_fifthMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, self.Item3, self.Item4, fifthMap(self.Item5), self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="mapFifth&lt;A, B, C, D, E, F, G, R5>"></a>mapFifth&lt;A, B, C, D, E, F, G, R5&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;E, R5&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFifth_A_B_C_D_E_F_G_R5_ValueTuple_A_B_C_D_E_F_G_self__Func_E_R5_fifthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fifth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">R5</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R5</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">mapFifth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R5</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">R5</span>&gt; fifthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R5</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFifth_A_B_C_D_E_F_G_R5_ValueTuple_A_B_C_D_E_F_G_self__Func_E_R5_fifthMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, self.Item3, self.Item4, fifthMap(self.Item5), self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="mapFifth&lt;A, B, C, D, E, F, R5>"></a>mapFifth&lt;A, B, C, D, E, F, R5&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;E, R5&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFifth_A_B_C_D_E_F_R5_Tuple_A_B_C_D_E_F_self__Func_E_R5_fifthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fifth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">R5</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R5</span>, <span class="ident">F</span>&gt; <span class="ident">mapFifth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R5</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">R5</span>&gt; fifthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R5</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFifth_A_B_C_D_E_F_R5_Tuple_A_B_C_D_E_F_self__Func_E_R5_fifthMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, self.Item3, self.Item4, fifthMap(self.Item5), self.Item6)</div></div></div><div class="member-title"><a name="mapFifth&lt;A, B, C, D, E, F, R5>"></a>mapFifth&lt;A, B, C, D, E, F, R5&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;E, R5&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFifth_A_B_C_D_E_F_R5_ValueTuple_A_B_C_D_E_F_self__Func_E_R5_fifthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fifth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">R5</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R5</span>, <span class="ident">F</span>&gt; <span class="ident">mapFifth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R5</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">R5</span>&gt; fifthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R5</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFifth_A_B_C_D_E_F_R5_ValueTuple_A_B_C_D_E_F_self__Func_E_R5_fifthMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, self.Item3, self.Item4, fifthMap(self.Item5), self.Item6)</div></div></div><div class="member-title"><a name="mapFifth&lt;A, B, C, D, E, R5>"></a>mapFifth&lt;A, B, C, D, E, R5&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;E, R5&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFifth_A_B_C_D_E_R5_Tuple_A_B_C_D_E_self__Func_E_R5_fifthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fifth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">R5</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R5</span>&gt; <span class="ident">mapFifth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R5</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">R5</span>&gt; fifthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R5</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFifth_A_B_C_D_E_R5_Tuple_A_B_C_D_E_self__Func_E_R5_fifthMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, self.Item3, self.Item4, fifthMap(self.Item5))</div></div></div><div class="member-title"><a name="mapFifth&lt;A, B, C, D, E, R5>"></a>mapFifth&lt;A, B, C, D, E, R5&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;E, R5&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFifth_A_B_C_D_E_R5_ValueTuple_A_B_C_D_E_self__Func_E_R5_fifthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fifth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">R5</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R5</span>&gt; <span class="ident">mapFifth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R5</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">E</span>, <span class="ident">R5</span>&gt; fifthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R5</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFifth_A_B_C_D_E_R5_ValueTuple_A_B_C_D_E_self__Func_E_R5_fifthMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, self.Item3, self.Item4, fifthMap(self.Item5))</div></div></div><div class="member-title"><a name="mapFirst&lt;A, B, C, D, E, F, G, R1>"></a>mapFirst&lt;A, B, C, D, E, F, G, R1&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;A, R1&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFirst_A_B_C_D_E_F_G_R1_Tuple_A_B_C_D_E_F_G_self__Func_A_R1_firstMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >First item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">mapFirst</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R1</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt; firstMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFirst_A_B_C_D_E_F_G_R1_Tuple_A_B_C_D_E_F_G_self__Func_A_R1_firstMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(firstMap(self.Item1), self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="mapFirst&lt;A, B, C, D, E, F, G, R1>"></a>mapFirst&lt;A, B, C, D, E, F, G, R1&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;A, R1&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFirst_A_B_C_D_E_F_G_R1_ValueTuple_A_B_C_D_E_F_G_self__Func_A_R1_firstMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >First item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">mapFirst</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R1</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt; firstMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFirst_A_B_C_D_E_F_G_R1_ValueTuple_A_B_C_D_E_F_G_self__Func_A_R1_firstMap_"><div class="section_title">SOURCE</div><div class="code">
            (firstMap(self.Item1), self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="mapFirst&lt;A, B, C, D, E, F, R1>"></a>mapFirst&lt;A, B, C, D, E, F, R1&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;A, R1&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFirst_A_B_C_D_E_F_R1_Tuple_A_B_C_D_E_F_self__Func_A_R1_firstMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >First item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">mapFirst</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R1</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt; firstMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFirst_A_B_C_D_E_F_R1_Tuple_A_B_C_D_E_F_self__Func_A_R1_firstMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(firstMap(self.Item1), self.Item2, self.Item3, self.Item4, self.Item5, self.Item6)</div></div></div><div class="member-title"><a name="mapFirst&lt;A, B, C, D, E, F, R1>"></a>mapFirst&lt;A, B, C, D, E, F, R1&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;A, R1&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFirst_A_B_C_D_E_F_R1_ValueTuple_A_B_C_D_E_F_self__Func_A_R1_firstMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >First item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">mapFirst</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R1</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt; firstMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFirst_A_B_C_D_E_F_R1_ValueTuple_A_B_C_D_E_F_self__Func_A_R1_firstMap_"><div class="section_title">SOURCE</div><div class="code">
            (firstMap(self.Item1), self.Item2, self.Item3, self.Item4, self.Item5, self.Item6)</div></div></div><div class="member-title"><a name="mapFirst&lt;A, B, C, D, E, R1>"></a>mapFirst&lt;A, B, C, D, E, R1&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;A, R1&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFirst_A_B_C_D_E_R1_Tuple_A_B_C_D_E_self__Func_A_R1_firstMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >First item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; <span class="ident">mapFirst</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R1</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt; firstMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFirst_A_B_C_D_E_R1_Tuple_A_B_C_D_E_self__Func_A_R1_firstMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(firstMap(self.Item1), self.Item2, self.Item3, self.Item4, self.Item5)</div></div></div><div class="member-title"><a name="mapFirst&lt;A, B, C, D, E, R1>"></a>mapFirst&lt;A, B, C, D, E, R1&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;A, R1&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFirst_A_B_C_D_E_R1_ValueTuple_A_B_C_D_E_self__Func_A_R1_firstMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >First item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; <span class="ident">mapFirst</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R1</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt; firstMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFirst_A_B_C_D_E_R1_ValueTuple_A_B_C_D_E_self__Func_A_R1_firstMap_"><div class="section_title">SOURCE</div><div class="code">
            (firstMap(self.Item1), self.Item2, self.Item3, self.Item4, self.Item5)</div></div></div><div class="member-title"><a name="mapFirst&lt;A, B, C, D, R1>"></a>mapFirst&lt;A, B, C, D, R1&gt;(Tuple&lt;A, B, C, D&gt;, Func&lt;A, R1&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFirst_A_B_C_D_R1_Tuple_A_B_C_D_self__Func_A_R1_firstMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >First item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; <span class="ident">mapFirst</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R1</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt; firstMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFirst_A_B_C_D_R1_Tuple_A_B_C_D_self__Func_A_R1_firstMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(firstMap(self.Item1), self.Item2, self.Item3, self.Item4)</div></div></div><div class="member-title"><a name="mapFirst&lt;A, B, C, D, R1>"></a>mapFirst&lt;A, B, C, D, R1&gt;(ValueTuple&lt;A, B, C, D&gt;, Func&lt;A, R1&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFirst_A_B_C_D_R1_ValueTuple_A_B_C_D_self__Func_A_R1_firstMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >First item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; <span class="ident">mapFirst</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R1</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R1</span>&gt; firstMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">R1</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFirst_A_B_C_D_R1_ValueTuple_A_B_C_D_self__Func_A_R1_firstMap_"><div class="section_title">SOURCE</div><div class="code">
            (firstMap(self.Item1), self.Item2, self.Item3, self.Item4)</div></div></div><div class="member-title"><a name="mapFirst&lt;T1, T2, T3, R1>"></a>mapFirst&lt;T1, T2, T3, R1&gt;(Tuple&lt;T1, T2, T3&gt;, Func&lt;T1, R1&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFirst_T1_T2_T3_R1_Tuple_T1_T2_T3_self__Func_T1_R1_firstMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >First item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R1</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">R1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; <span class="ident">mapFirst</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R1</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R1</span>&gt; firstMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">R1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFirst_T1_T2_T3_R1_Tuple_T1_T2_T3_self__Func_T1_R1_firstMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(firstMap(self.Item1), self.Item2, self.Item3)</div></div></div><div class="member-title"><a name="mapFirst&lt;T1, T2, T3, R1>"></a>mapFirst&lt;T1, T2, T3, R1&gt;(ValueTuple&lt;T1, T2, T3&gt;, Func&lt;T1, R1&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFirst_T1_T2_T3_R1_ValueTuple_T1_T2_T3_self__Func_T1_R1_firstMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >First item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R1</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">R1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; <span class="ident">mapFirst</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R1</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R1</span>&gt; firstMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">R1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFirst_T1_T2_T3_R1_ValueTuple_T1_T2_T3_self__Func_T1_R1_firstMap_"><div class="section_title">SOURCE</div><div class="code">
            ValueTuple.Create(firstMap(self.Item1), self.Item2, self.Item3)</div></div></div><div class="member-title"><a name="mapFourth&lt;A, B, C, D, E, F, G, R4>"></a>mapFourth&lt;A, B, C, D, E, F, G, R4&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;D, R4&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFourth_A_B_C_D_E_F_G_R4_Tuple_A_B_C_D_E_F_G_self__Func_D_R4_fourthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fourth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">mapFourth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R4</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt; fourthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFourth_A_B_C_D_E_F_G_R4_Tuple_A_B_C_D_E_F_G_self__Func_D_R4_fourthMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, self.Item3, fourthMap(self.Item4), self.Item5, self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="mapFourth&lt;A, B, C, D, E, F, G, R4>"></a>mapFourth&lt;A, B, C, D, E, F, G, R4&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;D, R4&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFourth_A_B_C_D_E_F_G_R4_ValueTuple_A_B_C_D_E_F_G_self__Func_D_R4_fourthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fourth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">mapFourth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R4</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt; fourthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFourth_A_B_C_D_E_F_G_R4_ValueTuple_A_B_C_D_E_F_G_self__Func_D_R4_fourthMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, self.Item3, fourthMap(self.Item4), self.Item5, self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="mapFourth&lt;A, B, C, D, E, F, R4>"></a>mapFourth&lt;A, B, C, D, E, F, R4&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;D, R4&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFourth_A_B_C_D_E_F_R4_Tuple_A_B_C_D_E_F_self__Func_D_R4_fourthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fourth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">mapFourth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R4</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt; fourthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFourth_A_B_C_D_E_F_R4_Tuple_A_B_C_D_E_F_self__Func_D_R4_fourthMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, self.Item3, fourthMap(self.Item4), self.Item5, self.Item6)</div></div></div><div class="member-title"><a name="mapFourth&lt;A, B, C, D, E, F, R4>"></a>mapFourth&lt;A, B, C, D, E, F, R4&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;D, R4&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFourth_A_B_C_D_E_F_R4_ValueTuple_A_B_C_D_E_F_self__Func_D_R4_fourthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fourth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">mapFourth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R4</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt; fourthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFourth_A_B_C_D_E_F_R4_ValueTuple_A_B_C_D_E_F_self__Func_D_R4_fourthMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, self.Item3, fourthMap(self.Item4), self.Item5, self.Item6)</div></div></div><div class="member-title"><a name="mapFourth&lt;A, B, C, D, E, R4>"></a>mapFourth&lt;A, B, C, D, E, R4&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;D, R4&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFourth_A_B_C_D_E_R4_Tuple_A_B_C_D_E_self__Func_D_R4_fourthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fourth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>, <span class="ident">E</span>&gt; <span class="ident">mapFourth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R4</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt; fourthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFourth_A_B_C_D_E_R4_Tuple_A_B_C_D_E_self__Func_D_R4_fourthMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, self.Item3, fourthMap(self.Item4), self.Item5)</div></div></div><div class="member-title"><a name="mapFourth&lt;A, B, C, D, E, R4>"></a>mapFourth&lt;A, B, C, D, E, R4&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;D, R4&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFourth_A_B_C_D_E_R4_ValueTuple_A_B_C_D_E_self__Func_D_R4_fourthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fourth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>, <span class="ident">E</span>&gt; <span class="ident">mapFourth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R4</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt; fourthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFourth_A_B_C_D_E_R4_ValueTuple_A_B_C_D_E_self__Func_D_R4_fourthMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, self.Item3, fourthMap(self.Item4), self.Item5)</div></div></div><div class="member-title"><a name="mapFourth&lt;A, B, C, D, R4>"></a>mapFourth&lt;A, B, C, D, R4&gt;(Tuple&lt;A, B, C, D&gt;, Func&lt;D, R4&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFourth_A_B_C_D_R4_Tuple_A_B_C_D_self__Func_D_R4_fourthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fourth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>&gt; <span class="ident">mapFourth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R4</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt; fourthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFourth_A_B_C_D_R4_Tuple_A_B_C_D_self__Func_D_R4_fourthMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, self.Item3, fourthMap(self.Item4))</div></div></div><div class="member-title"><a name="mapFourth&lt;A, B, C, D, R4>"></a>mapFourth&lt;A, B, C, D, R4&gt;(ValueTuple&lt;A, B, C, D&gt;, Func&lt;D, R4&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapFourth_A_B_C_D_R4_ValueTuple_A_B_C_D_self__Func_D_R4_fourthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fourth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>&gt; <span class="ident">mapFourth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R4</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">D</span>, <span class="ident">R4</span>&gt; fourthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R4</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapFourth_A_B_C_D_R4_ValueTuple_A_B_C_D_self__Func_D_R4_fourthMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, self.Item3, fourthMap(self.Item4))</div></div></div><div class="member-title"><a name="mapLeftT&lt;L, R, Ret>"></a>mapLeftT&lt;L, R, Ret&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;, Func&lt;L, Ret&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapLeftT_L_R_Ret_IEnumerable_Either&lt;L, R>_self__Func_L_Ret_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">Ret</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">mapLeftT</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">Ret</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapLeftT_L_R_Ret_IEnumerable_Either&lt;L, R>_self__Func_L_Ret_mapper_"><div class="section_title">SOURCE</div><div class="code">
            self.Map(x =&gt; x.MapLeft(mapper))</div></div></div><div class="member-title"><a name="mapLeftT&lt;L, R, Ret>"></a>mapLeftT&lt;L, R, Ret&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;L, Ret&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapLeftT_L_R_Ret_IEnumerable_EitherUnsafe&lt;L, R>_self__Func_L_Ret_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">Ret</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">mapLeftT</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">Ret</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapLeftT_L_R_Ret_IEnumerable_EitherUnsafe&lt;L, R>_self__Func_L_Ret_mapper_"><div class="section_title">SOURCE</div><div class="code">
            self.Map(x =&gt; x.MapLeft(mapper))</div></div></div><div class="member-title"><a name="mapSecond&lt;A, B, C, D, E, F, G, R2>"></a>mapSecond&lt;A, B, C, D, E, F, G, R2&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;B, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSecond_A_B_C_D_E_F_G_R2_Tuple_A_B_C_D_E_F_G_self__Func_B_R2_secondMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">mapSecond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R2</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt; secondMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSecond_A_B_C_D_E_F_G_R2_Tuple_A_B_C_D_E_F_G_self__Func_B_R2_secondMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, secondMap(self.Item2), self.Item3, self.Item4, self.Item5, self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="mapSecond&lt;A, B, C, D, E, F, G, R2>"></a>mapSecond&lt;A, B, C, D, E, F, G, R2&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;B, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSecond_A_B_C_D_E_F_G_R2_ValueTuple_A_B_C_D_E_F_G_self__Func_B_R2_secondMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">mapSecond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R2</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt; secondMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSecond_A_B_C_D_E_F_G_R2_ValueTuple_A_B_C_D_E_F_G_self__Func_B_R2_secondMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, secondMap(self.Item2), self.Item3, self.Item4, self.Item5, self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="mapSecond&lt;A, B, C, D, E, F, R2>"></a>mapSecond&lt;A, B, C, D, E, F, R2&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;B, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSecond_A_B_C_D_E_F_R2_Tuple_A_B_C_D_E_F_self__Func_B_R2_secondMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">mapSecond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R2</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt; secondMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSecond_A_B_C_D_E_F_R2_Tuple_A_B_C_D_E_F_self__Func_B_R2_secondMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, secondMap(self.Item2), self.Item3, self.Item4, self.Item5, self.Item6)</div></div></div><div class="member-title"><a name="mapSecond&lt;A, B, C, D, E, F, R2>"></a>mapSecond&lt;A, B, C, D, E, F, R2&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;B, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSecond_A_B_C_D_E_F_R2_ValueTuple_A_B_C_D_E_F_self__Func_B_R2_secondMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">mapSecond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R2</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt; secondMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSecond_A_B_C_D_E_F_R2_ValueTuple_A_B_C_D_E_F_self__Func_B_R2_secondMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, secondMap(self.Item2), self.Item3, self.Item4, self.Item5, self.Item6)</div></div></div><div class="member-title"><a name="mapSecond&lt;A, B, C, D, E, R2>"></a>mapSecond&lt;A, B, C, D, E, R2&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;B, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSecond_A_B_C_D_E_R2_Tuple_A_B_C_D_E_self__Func_B_R2_secondMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; <span class="ident">mapSecond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R2</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt; secondMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSecond_A_B_C_D_E_R2_Tuple_A_B_C_D_E_self__Func_B_R2_secondMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, secondMap(self.Item2), self.Item3, self.Item4, self.Item5)</div></div></div><div class="member-title"><a name="mapSecond&lt;A, B, C, D, E, R2>"></a>mapSecond&lt;A, B, C, D, E, R2&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;B, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSecond_A_B_C_D_E_R2_ValueTuple_A_B_C_D_E_self__Func_B_R2_secondMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; <span class="ident">mapSecond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R2</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt; secondMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSecond_A_B_C_D_E_R2_ValueTuple_A_B_C_D_E_self__Func_B_R2_secondMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, secondMap(self.Item2), self.Item3, self.Item4, self.Item5)</div></div></div><div class="member-title"><a name="mapSecond&lt;A, B, C, D, R2>"></a>mapSecond&lt;A, B, C, D, R2&gt;(Tuple&lt;A, B, C, D&gt;, Func&lt;B, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSecond_A_B_C_D_R2_Tuple_A_B_C_D_self__Func_B_R2_secondMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; <span class="ident">mapSecond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R2</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt; secondMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSecond_A_B_C_D_R2_Tuple_A_B_C_D_self__Func_B_R2_secondMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, secondMap(self.Item2), self.Item3, self.Item4)</div></div></div><div class="member-title"><a name="mapSecond&lt;A, B, C, D, R2>"></a>mapSecond&lt;A, B, C, D, R2&gt;(ValueTuple&lt;A, B, C, D&gt;, Func&lt;B, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSecond_A_B_C_D_R2_ValueTuple_A_B_C_D_self__Func_B_R2_secondMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; <span class="ident">mapSecond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R2</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R2</span>&gt; secondMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">R2</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSecond_A_B_C_D_R2_ValueTuple_A_B_C_D_self__Func_B_R2_secondMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, secondMap(self.Item2), self.Item3, self.Item4)</div></div></div><div class="member-title"><a name="mapSecond&lt;T1, T2, T3, R2>"></a>mapSecond&lt;T1, T2, T3, R2&gt;(Tuple&lt;T1, T2, T3&gt;, Func&lt;T2, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSecond_T1_T2_T3_R2_Tuple_T1_T2_T3_self__Func_T2_R2_secondMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">R2</span>, <span class="ident">T3</span>&gt; <span class="ident">mapSecond</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R2</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R2</span>&gt; secondMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">R2</span>, <span class="ident">T3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSecond_T1_T2_T3_R2_Tuple_T1_T2_T3_self__Func_T2_R2_secondMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, secondMap(self.Item2), self.Item3)</div></div></div><div class="member-title"><a name="mapSecond&lt;T1, T2, T3, R2>"></a>mapSecond&lt;T1, T2, T3, R2&gt;(ValueTuple&lt;T1, T2, T3&gt;, Func&lt;T2, R2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSecond_T1_T2_T3_R2_ValueTuple_T1_T2_T3_self__Func_T2_R2_secondMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">R2</span>, <span class="ident">T3</span>&gt; <span class="ident">mapSecond</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R2</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R2</span>&gt; secondMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">R2</span>, <span class="ident">T3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSecond_T1_T2_T3_R2_ValueTuple_T1_T2_T3_self__Func_T2_R2_secondMap_"><div class="section_title">SOURCE</div><div class="code">
            ValueTuple.Create(self.Item1, secondMap(self.Item2), self.Item3)</div></div></div><div class="member-title"><a name="mapSeventh&lt;A, B, C, D, E, F, G, R7>"></a>mapSeventh&lt;A, B, C, D, E, F, G, R7&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;G, R7&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSeventh_A_B_C_D_E_F_G_R7_Tuple_A_B_C_D_E_F_G_self__Func_G_R7_seventhMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sixth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">seventhMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">G</span>, <span class="ident">R7</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R7</span>&gt; <span class="ident">mapSeventh</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R7</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">G</span>, <span class="ident">R7</span>&gt; seventhMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R7</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSeventh_A_B_C_D_E_F_G_R7_Tuple_A_B_C_D_E_F_G_self__Func_G_R7_seventhMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, seventhMap(self.Item7))</div></div></div><div class="member-title"><a name="mapSeventh&lt;A, B, C, D, E, F, G, R7>"></a>mapSeventh&lt;A, B, C, D, E, F, G, R7&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;G, R7&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSeventh_A_B_C_D_E_F_G_R7_ValueTuple_A_B_C_D_E_F_G_self__Func_G_R7_seventhMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sixth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">seventhMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">G</span>, <span class="ident">R7</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R7</span>&gt; <span class="ident">mapSeventh</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R7</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">G</span>, <span class="ident">R7</span>&gt; seventhMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R7</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSeventh_A_B_C_D_E_F_G_R7_ValueTuple_A_B_C_D_E_F_G_self__Func_G_R7_seventhMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, seventhMap(self.Item7))</div></div></div><div class="member-title"><a name="mapSixth&lt;A, B, C, D, E, F, G, R6>"></a>mapSixth&lt;A, B, C, D, E, F, G, R6&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;F, R6&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSixth_A_B_C_D_E_F_G_R6_Tuple_A_B_C_D_E_F_G_self__Func_F_R6_sixthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sixth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">R6</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R6</span>, <span class="ident">G</span>&gt; <span class="ident">mapSixth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R6</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">R6</span>&gt; sixthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R6</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSixth_A_B_C_D_E_F_G_R6_Tuple_A_B_C_D_E_F_G_self__Func_F_R6_sixthMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, sixthMap(self.Item6), self.Item7)</div></div></div><div class="member-title"><a name="mapSixth&lt;A, B, C, D, E, F, G, R6>"></a>mapSixth&lt;A, B, C, D, E, F, G, R6&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;F, R6&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSixth_A_B_C_D_E_F_G_R6_ValueTuple_A_B_C_D_E_F_G_self__Func_F_R6_sixthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sixth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">R6</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R6</span>, <span class="ident">G</span>&gt; <span class="ident">mapSixth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R6</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">R6</span>&gt; sixthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R6</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSixth_A_B_C_D_E_F_G_R6_ValueTuple_A_B_C_D_E_F_G_self__Func_F_R6_sixthMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, sixthMap(self.Item6), self.Item7)</div></div></div><div class="member-title"><a name="mapSixth&lt;A, B, C, D, E, F, R6>"></a>mapSixth&lt;A, B, C, D, E, F, R6&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;F, R6&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSixth_A_B_C_D_E_F_R6_Tuple_A_B_C_D_E_F_self__Func_F_R6_sixthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sixth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">R6</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R6</span>&gt; <span class="ident">mapSixth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R6</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">R6</span>&gt; sixthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R6</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSixth_A_B_C_D_E_F_R6_Tuple_A_B_C_D_E_F_self__Func_F_R6_sixthMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, sixthMap(self.Item6))</div></div></div><div class="member-title"><a name="mapSixth&lt;A, B, C, D, E, F, R6>"></a>mapSixth&lt;A, B, C, D, E, F, R6&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;F, R6&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapSixth_A_B_C_D_E_F_R6_ValueTuple_A_B_C_D_E_F_self__Func_F_R6_sixthMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sixth item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">R6</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R6</span>&gt; <span class="ident">mapSixth</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R6</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">F</span>, <span class="ident">R6</span>&gt; sixthMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R6</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapSixth_A_B_C_D_E_F_R6_ValueTuple_A_B_C_D_E_F_self__Func_F_R6_sixthMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, sixthMap(self.Item6))</div></div></div><div class="member-title"><a name="mapThird&lt;A, B, C, D, E, F, G, R3>"></a>mapThird&lt;A, B, C, D, E, F, G, R3&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;C, R3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapThird_A_B_C_D_E_F_G_R3_Tuple_A_B_C_D_E_F_G_self__Func_C_R3_thirdMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Third item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">mapThird</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R3</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt; thirdMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapThird_A_B_C_D_E_F_G_R3_Tuple_A_B_C_D_E_F_G_self__Func_C_R3_thirdMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, thirdMap(self.Item3), self.Item4, self.Item5, self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="mapThird&lt;A, B, C, D, E, F, G, R3>"></a>mapThird&lt;A, B, C, D, E, F, G, R3&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, Func&lt;C, R3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapThird_A_B_C_D_E_F_G_R3_ValueTuple_A_B_C_D_E_F_G_self__Func_C_R3_thirdMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Third item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">mapThird</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">R3</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt; thirdMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapThird_A_B_C_D_E_F_G_R3_ValueTuple_A_B_C_D_E_F_G_self__Func_C_R3_thirdMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, thirdMap(self.Item3), self.Item4, self.Item5, self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="mapThird&lt;A, B, C, D, E, F, R3>"></a>mapThird&lt;A, B, C, D, E, F, R3&gt;(Tuple&lt;A, B, C, D, E, F&gt;, Func&lt;C, R3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapThird_A_B_C_D_E_F_R3_Tuple_A_B_C_D_E_F_self__Func_C_R3_thirdMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Third item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">mapThird</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R3</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt; thirdMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapThird_A_B_C_D_E_F_R3_Tuple_A_B_C_D_E_F_self__Func_C_R3_thirdMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, thirdMap(self.Item3), self.Item4, self.Item5, self.Item6)</div></div></div><div class="member-title"><a name="mapThird&lt;A, B, C, D, E, F, R3>"></a>mapThird&lt;A, B, C, D, E, F, R3&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, Func&lt;C, R3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapThird_A_B_C_D_E_F_R3_ValueTuple_A_B_C_D_E_F_self__Func_C_R3_thirdMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Third item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">mapThird</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">R3</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt; thirdMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapThird_A_B_C_D_E_F_R3_ValueTuple_A_B_C_D_E_F_self__Func_C_R3_thirdMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, thirdMap(self.Item3), self.Item4, self.Item5, self.Item6)</div></div></div><div class="member-title"><a name="mapThird&lt;A, B, C, D, E, R3>"></a>mapThird&lt;A, B, C, D, E, R3&gt;(Tuple&lt;A, B, C, D, E&gt;, Func&lt;C, R3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapThird_A_B_C_D_E_R3_Tuple_A_B_C_D_E_self__Func_C_R3_thirdMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Third item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; <span class="ident">mapThird</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R3</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt; thirdMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapThird_A_B_C_D_E_R3_Tuple_A_B_C_D_E_self__Func_C_R3_thirdMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, thirdMap(self.Item3), self.Item4, self.Item5)</div></div></div><div class="member-title"><a name="mapThird&lt;A, B, C, D, E, R3>"></a>mapThird&lt;A, B, C, D, E, R3&gt;(ValueTuple&lt;A, B, C, D, E&gt;, Func&lt;C, R3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapThird_A_B_C_D_E_R3_ValueTuple_A_B_C_D_E_self__Func_C_R3_thirdMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Third item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; <span class="ident">mapThird</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">R3</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt; thirdMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapThird_A_B_C_D_E_R3_ValueTuple_A_B_C_D_E_self__Func_C_R3_thirdMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, thirdMap(self.Item3), self.Item4, self.Item5)</div></div></div><div class="member-title"><a name="mapThird&lt;A, B, C, D, R3>"></a>mapThird&lt;A, B, C, D, R3&gt;(Tuple&lt;A, B, C, D&gt;, Func&lt;C, R3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapThird_A_B_C_D_R3_Tuple_A_B_C_D_self__Func_C_R3_thirdMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Third item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>&gt; <span class="ident">mapThird</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R3</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt; thirdMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapThird_A_B_C_D_R3_Tuple_A_B_C_D_self__Func_C_R3_thirdMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, thirdMap(self.Item3), self.Item4)</div></div></div><div class="member-title"><a name="mapThird&lt;A, B, C, D, R3>"></a>mapThird&lt;A, B, C, D, R3&gt;(ValueTuple&lt;A, B, C, D&gt;, Func&lt;C, R3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapThird_A_B_C_D_R3_ValueTuple_A_B_C_D_self__Func_C_R3_thirdMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Third item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>&gt; <span class="ident">mapThird</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R3</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R3</span>&gt; thirdMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R3</span>, <span class="ident">D</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapThird_A_B_C_D_R3_ValueTuple_A_B_C_D_self__Func_C_R3_thirdMap_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item1, self.Item2, thirdMap(self.Item3), self.Item4)</div></div></div><div class="member-title"><a name="mapThird&lt;T1, T2, T3, R3>"></a>mapThird&lt;T1, T2, T3, R3&gt;(Tuple&lt;T1, T2, T3&gt;, Func&lt;T3, R3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapThird_T1_T2_T3_R3_Tuple_T1_T2_T3_self__Func_T3_R3_thirdMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R3</span>&gt; <span class="ident">mapThird</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R3</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R3</span>&gt; thirdMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapThird_T1_T2_T3_R3_Tuple_T1_T2_T3_self__Func_T3_R3_thirdMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item1, self.Item2, thirdMap(self.Item3))</div></div></div><div class="member-title"><a name="mapThird&lt;T1, T2, T3, R3>"></a>mapThird&lt;T1, T2, T3, R3&gt;(ValueTuple&lt;T1, T2, T3&gt;, Func&lt;T3, R3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mapThird_T1_T2_T3_R3_ValueTuple_T1_T2_T3_self__Func_T3_R3_thirdMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Second item-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R3</span>&gt; <span class="ident">mapThird</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R3</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R3</span>&gt; thirdMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-mapThird_T1_T2_T3_R3_ValueTuple_T1_T2_T3_self__Func_T3_R3_thirdMap_"><div class="section_title">SOURCE</div><div class="code">
            ValueTuple.Create(self.Item1, self.Item2, thirdMap(self.Item3))</div></div></div><div class="member-title"><a name="match&lt;A, R>"></a>match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="match&lt;A, R>"></a>match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_Task&lt;R>_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_Task&lt;R>_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="match&lt;A, R>"></a>match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="match&lt;A, R>"></a>match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="match&lt;A, R>"></a>match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="match&lt;A, R>"></a>match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="match&lt;A, R>"></a>match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_R_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_R_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="match&lt;A, R>"></a>match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="match&lt;A, R>"></a>match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="match&lt;A, R>"></a>match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_Task&lt;R>_None__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_Task&lt;R>_None__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="match&lt;A, R>"></a>match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_R_None__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_R_None__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="match&lt;A, R>"></a>match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="match&lt;A>"></a>match&lt;A&gt;(TryOptionAsync&lt;A&gt;, Action&lt;A&gt;, Action, Action&lt;Exception&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_A_TryOptionAsync_A_self__Action_A_Some__Action__None__Action_Exception_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">match</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some, <span class="ident">Action</span> None, <span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-match_A_TryOptionAsync_A_self__Action_A_Some__Action__None__Action_Exception_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="match&lt;K, V, R>"></a>match&lt;K, V, R&gt;(Map&lt;K, V&gt;, K, Func&lt;V, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_K_V_R_Map_K_V_map__K__key__Func_V_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">R</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-match_K_V_R_Map_K_V_map__K__key__Func_V_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            match(LanguageExt.Map.find(map, key),
                   Some,
                   None )</div></div></div><div class="member-title"><a name="match&lt;K, V, R>"></a>match&lt;K, V, R&gt;(HashMap&lt;K, V&gt;, K, Func&lt;V, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_K_V_R_HashMap_K_V_map__K__key__Func_V_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">R</span>&gt;(<span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-match_K_V_R_HashMap_K_V_map__K__key__Func_V_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            match(LanguageExt.HashMap.find(map, key),
                   Some,
                   None)</div></div></div><div class="member-title"><a name="match&lt;K, V>"></a>match&lt;K, V&gt;(Map&lt;K, V&gt;, K, Action&lt;V&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_K_V_Map_K_V_map__K__key__Action_V_Some__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">match</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Action</span>&lt;<span class="ident">V</span>&gt; Some, <span class="ident">Action</span> None)</div></div><div style="display:none" id="code-match_K_V_Map_K_V_map__K__key__Action_V_Some__Action__None_"><div class="section_title">SOURCE</div><div class="code">
            match(LanguageExt.Map.find(map, key),
                   Some,
                   None)</div></div></div><div class="member-title"><a name="match&lt;K, V>"></a>match&lt;K, V&gt;(HashMap&lt;K, V&gt;, K, Action&lt;V&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_K_V_HashMap_K_V_map__K__key__Action_V_Some__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">match</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Action</span>&lt;<span class="ident">V</span>&gt; Some, <span class="ident">Action</span> None)</div></div><div style="display:none" id="code-match_K_V_HashMap_K_V_map__K__key__Action_V_Some__Action__None_"><div class="section_title">SOURCE</div><div class="code">
            match(LanguageExt.HashMap.find(map, key),
                   Some,
                   None)</div></div></div><div class="member-title"><a name="match&lt;L, R, Ret>"></a>match&lt;L, R, Ret&gt;(Either&lt;L, R&gt;, Func&lt;R, Ret&gt;, Func&lt;L, Ret&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_L_R_Ret_Either_L_R_either__Func_R_Ret_Right__Func_L_Ret_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the Right or Left function depending on the state of the Either provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to match</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc"><span >Function to invoke if in a Right state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc"><span >Function to invoke if in a Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Ret</span> <span class="ident">match</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Ret</span></div><div class="normal"><span >The return value of the invoked function</span></div></div></div><div style="display:none" id="code-match_L_R_Ret_Either_L_R_either__Func_R_Ret_Right__Func_L_Ret_Left_"><div class="section_title">SOURCE</div><div class="code">
            either.Match(Right, Left)</div></div></div><div class="member-title"><a name="match&lt;L, R, Ret>"></a>match&lt;L, R, Ret&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;, Func&lt;R, Ret&gt;, Func&lt;L, Ret&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_L_R_Ret_IEnumerable_Either&lt;L, R>_list__Func_R_Ret_Right__Func_L_Ret_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match over a sequence of Eithers </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Sequence to match over</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc"><span >Right match function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc"><span >Left match function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Ret</span>&gt; <span class="ident">match</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Ret</span>&gt;</div><div class="normal"><span >Sequence of mapped values</span></div></div></div><div style="display:none" id="code-match_L_R_Ret_IEnumerable_Either&lt;L, R>_list__Func_R_Ret_Right__Func_L_Ret_Left_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in list)
            {
                if (item.IsBottom) continue;
                if (item.IsLeft) yield return Left(item.LeftValue);
                if (item.IsRight) yield return Right(item.RightValue);
            }
        </div></div></div><div class="member-title"><a name="match&lt;L, R, Ret>"></a>match&lt;L, R, Ret&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, Ret&gt;, Func&lt;L, Ret&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_L_R_Ret_IEnumerable_EitherUnsafe&lt;L, R>_list__Func_R_Ret_Right__Func_L_Ret_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match over a sequence of Eithers </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Sequence to match over</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc"><span >Right match function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc"><span >Left match function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Ret</span>&gt; <span class="ident">match</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Ret</span>&gt;</div><div class="normal"><span >Sequence of mapped values</span></div></div></div><div style="display:none" id="code-match_L_R_Ret_IEnumerable_EitherUnsafe&lt;L, R>_list__Func_R_Ret_Right__Func_L_Ret_Left_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in list)
            {
                if (item.IsBottom) continue;
                if (item.IsLeft) yield return Left(item.LeftValue);
                if (item.IsRight) yield return Right(item.RightValue);
            }
        </div></div></div><div class="member-title"><a name="Match&lt;L, R, Ret>"></a>Match&lt;L, R, Ret&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;, Func&lt;R, Ret&gt;, Func&lt;L, Ret&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_L_R_Ret_IEnumerable_Either&lt;L, R>_list__Func_R_Ret_Right__Func_L_Ret_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match over a sequence of Eithers </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Sequence to match over</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc"><span >Right match function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc"><span >Left match function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Ret</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Ret</span>&gt;</div><div class="normal"><span >Sequence of mapped values</span></div></div></div><div style="display:none" id="code-Match_L_R_Ret_IEnumerable_Either&lt;L, R>_list__Func_R_Ret_Right__Func_L_Ret_Left_"><div class="section_title">SOURCE</div><div class="code">
            match(list, Right, Left)</div></div></div><div class="member-title"><a name="Match&lt;L, R, Ret>"></a>Match&lt;L, R, Ret&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;, Func&lt;R, Ret&gt;, Func&lt;L, Ret&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_L_R_Ret_IEnumerable_EitherUnsafe&lt;L, R>_list__Func_R_Ret_Right__Func_L_Ret_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match over a sequence of Eithers </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Sequence to match over</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc"><span >Right match function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc"><span >Left match function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Ret</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Ret</span>&gt;</div><div class="normal"><span >Sequence of mapped values</span></div></div></div><div style="display:none" id="code-Match_L_R_Ret_IEnumerable_EitherUnsafe&lt;L, R>_list__Func_R_Ret_Right__Func_L_Ret_Left_"><div class="section_title">SOURCE</div><div class="code">
            match(list, Right, Left)</div></div></div><div class="member-title"><a name="match&lt;L, R>"></a>match&lt;L, R&gt;(Either&lt;L, R&gt;, Action&lt;R&gt;, Action&lt;L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_L_R_Either_L_R_either__Action_R_Right__Action_L_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the Right or Left action depending on the state of the Either provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to match</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke if in a Right state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">L</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke if in a Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">match</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Action</span>&lt;<span class="ident">R</span>&gt; Right, <span class="ident">Action</span>&lt;<span class="ident">L</span>&gt; Left)</div></div><div style="display:none" id="code-match_L_R_Either_L_R_either__Action_R_Right__Action_L_Left_"><div class="section_title">SOURCE</div><div class="code">
            either.Match(Right, Left)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(T?, Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_T__self__Func_T_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Nullable and return a non-null R. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Some handler</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >None handler</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >A non-null R</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-match_T_R_T__self__Func_T_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? Some(self.Value)
                : None()</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(Option&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_Option_T_option__Func_T_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option and return a non-null R. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Some match operation. Must not return null.</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >None match operation. Must not return null.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >A non-null B</span></div></div></div><div style="display:none" id="code-match_T_R_Option_T_option__Func_T_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            option.Match(Some, None)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(IEnumerable&lt;Option&lt;T&gt;&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;, Func&lt;IEnumerable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_IEnumerable_Option&lt;T>_list__Func_T_IEnumerable&lt;R>_Some__Func_IEnumerable&lt;R>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the list of Options </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Some match operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >None match operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-match_T_R_IEnumerable_Option&lt;T>_list__Func_T_IEnumerable&lt;R>_Some__Func_IEnumerable&lt;R>_None_"><div class="section_title">SOURCE</div><div class="code">
            list.Match(
                None,
                opt     =&gt; match(opt, v =&gt; Some(v), None),
                (x, xs) =&gt; match(x,   v =&gt; Some(v), None).Concat(match(xs, Some, None)) // TODO: Flatten recursion
            )</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(IEnumerable&lt;Option&lt;T&gt;&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;, IEnumerable&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_IEnumerable_Option&lt;T>_list__Func_T_IEnumerable&lt;R>_Some__IEnumerable_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the list of Options </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Some match operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >None match operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-match_T_R_IEnumerable_Option&lt;T>_list__Func_T_IEnumerable&lt;R>_Some__IEnumerable_R_None_"><div class="section_title">SOURCE</div><div class="code">
            match(list, Some, () =&gt; None)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(Try&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_Try_T_self__Func_T_R_Succ__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >The result of either the Succ or Fail delegates</span></div></div></div><div style="display:none" id="code-match_T_R_Try_T_self__Func_T_R_Succ__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Succ, Fail)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(Try&lt;T&gt;, Func&lt;T, R&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_Try_T_self__Func_T_R_Succ__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Default value to use if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >The result of either the Succ delegate or the Fail value</span></div></div></div><div style="display:none" id="code-match_T_R_Try_T_self__Func_T_R_Succ__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Succ, Fail)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(TryAsync&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_TryAsync_T_self__Func_T_R_Succ__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the TryAsync computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the TryAsync computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the TryAsync computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ or Fail delegates</span></div></div></div><div style="display:none" id="code-match_T_R_TryAsync_T_self__Func_T_R_Succ__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Succ, Fail)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(TryAsync&lt;T&gt;, Func&lt;T, R&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_TryAsync_T_self__Func_T_R_Succ__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the TryAsync computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryAsync computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the TryAsync computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Default value to use if the TryAsync computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ delegate or the Fail value</span></div></div></div><div style="display:none" id="code-match_T_R_TryAsync_T_self__Func_T_R_Succ__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Succ, Fail)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_TryOption_T_self__Func_T_R_Some__Func_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >The result of either the Some or Fail delegates</span></div></div></div><div style="display:none" id="code-match_T_R_TryOption_T_self__Func_T_R_Some__Func_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, Fail)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_TryOption_T_self__Func_T_R_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >The result of either the Some or Fail delegates</span></div></div></div><div style="display:none" id="code-match_T_R_TryOption_T_self__Func_T_R_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_TryOption_T_self__Func_T_R_Some__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Default value to use if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >The result of either the Succ delegate or the Fail value</span></div></div></div><div style="display:none" id="code-match_T_R_TryOption_T_self__Func_T_R_Some__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, Fail)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(T, Func&lt;T, Option&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_T__value__Func_T_Option&lt;R>_clauses_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matching for values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to match</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">clauses</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Clauses to test</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">T</span> value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt; clauses)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Result</span></div></div></div><div style="display:none" id="code-match_T_R_T__value__Func_T_Option&lt;R>_clauses_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var clause in clauses)
            {
                var res = clause(value);
                if (res.IsSome) return res.IfNone(default(R));
            }
            throw new Exception(&quot;Match not exhaustive&quot;);
        </div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, IEnumerable&lt;T&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_IEnumerable&lt;T>_R_More_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >List matching </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Empty</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">More</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Empty, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt; More)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_IEnumerable&lt;T>_R_More_"><div class="section_title">SOURCE</div><div class="code">
            list.Match(Empty, More)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, IEnumerable&lt;T&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_IEnumerable&lt;T>_R_More_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >List matching </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Empty</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">One</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">More</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Empty, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; One, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt; More)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_IEnumerable&lt;T>_R_More_"><div class="section_title">SOURCE</div><div class="code">
            list.Match(Empty, One, More)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, IEnumerable&lt;T&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_IEnumerable&lt;T>_R_More_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >List matching </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Empty</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">One</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Two</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">More</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Empty, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; One, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Two, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt; More)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_IEnumerable&lt;T>_R_More_"><div class="section_title">SOURCE</div><div class="code">
            list.Match(Empty, One, Two, More)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, IEnumerable&lt;T&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_IEnumerable&lt;T>_R_More_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >List matching </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Empty</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">One</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Two</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Three</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">More</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Empty, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; One, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Two, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Three, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt; More)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_IEnumerable&lt;T>_R_More_"><div class="section_title">SOURCE</div><div class="code">
            list.Match(Empty, One, Two, Three, More)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, T, R&gt;, Func&lt;T, T, T, T, IEnumerable&lt;T&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_T_R_Four__Func_T_T_T_T_IEnumerable&lt;T>_R_More_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >List matching </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Empty</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">One</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Two</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Three</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Four</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">More</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Empty, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; One, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Two, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Three, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Four, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt; More)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_T_R_Four__Func_T_T_T_T_IEnumerable&lt;T>_R_More_"><div class="section_title">SOURCE</div><div class="code">
            list.Match(Empty, One, Two, Three, Four, More)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, IEnumerable&lt;T&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_T_R_Four__Func_T_T_T_T_T_R_Five__Func_T_T_T_T_T_IEnumerable&lt;T>_R_More_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >List matching </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Empty</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">One</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Two</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Three</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Four</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Five</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">More</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Empty, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; One, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Two, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Three, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Four, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Five, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt; More)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_T_R_Four__Func_T_T_T_T_T_R_Five__Func_T_T_T_T_T_IEnumerable&lt;T>_R_More_"><div class="section_title">SOURCE</div><div class="code">
            list.Match(Empty, One, Two, Three, Four, Five, More)</div></div></div><div class="member-title"><a name="match&lt;T, R>"></a>match&lt;T, R&gt;(IEnumerable&lt;T&gt;, Func&lt;R&gt;, Func&lt;T, R&gt;, Func&lt;T, T, R&gt;, Func&lt;T, T, T, R&gt;, Func&lt;T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, T, R&gt;, Func&lt;T, T, T, T, T, T, IEnumerable&lt;T&gt;, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_T_R_Four__Func_T_T_T_T_T_R_Five__Func_T_T_T_T_T_T_R_Six__Func_T_T_T_T_T_T_IEnumerable&lt;T>_R_More_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >List matching </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Empty</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">One</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Two</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Three</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Four</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Five</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Six</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">More</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Empty, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; One, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Two, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Three, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Four, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Five, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt; Six, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">R</span>&gt; More)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-match_T_R_IEnumerable_T_list__Func_R_Empty__Func_T_R_One__Func_T_T_R_Two__Func_T_T_T_R_Three__Func_T_T_T_T_R_Four__Func_T_T_T_T_T_R_Five__Func_T_T_T_T_T_T_R_Six__Func_T_T_T_T_T_T_IEnumerable&lt;T>_R_More_"><div class="section_title">SOURCE</div><div class="code">
            list.Match(Empty, One, Two, Three, Four, Five, Six, More)</div></div></div><div class="member-title"><a name="match&lt;T>"></a>match&lt;T&gt;(T?, Action&lt;T&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_T__self__Action_T_Some__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Nullable T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Some match</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >None match</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">match</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Some, <span class="ident">Action</span> None)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-match_T_T__self__Action_T_Some__Action__None_"><div class="section_title">SOURCE</div><div class="code">
            if (self.HasValue)
            {
                Some(self.Value);
            }
            else
            {
                None();
            }
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="match&lt;T>"></a>match&lt;T&gt;(Option&lt;T&gt;, Action&lt;T&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_Option_T_option__Action_T_Some__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Some match operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >None match operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">match</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Some, <span class="ident">Action</span> None)</div></div><div style="display:none" id="code-match_T_Option_T_option__Action_T_Some__Action__None_"><div class="section_title">SOURCE</div><div class="code">
            option.Match(Some, None)</div></div></div><div class="member-title"><a name="match&lt;T>"></a>match&lt;T&gt;(Try&lt;T&gt;, Action&lt;T&gt;, Action&lt;Exception&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_Try_T_self__Action_T_Succ__Action_Exception_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">match</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Succ, <span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt; Fail)</div></div><div style="display:none" id="code-match_T_Try_T_self__Action_T_Succ__Action_Exception_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Succ, Fail)</div></div></div><div class="member-title"><a name="match&lt;T>"></a>match&lt;T&gt;(TryAsync&lt;T&gt;, Action&lt;T&gt;, Action&lt;Exception&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_TryAsync_T_self__Action_T_Succ__Action_Exception_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the TryAsync computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >TryAsync computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the TryAsync computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the TryAsync computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">match</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Succ, <span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-match_T_TryAsync_T_self__Action_T_Succ__Action_Exception_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Succ, Fail)</div></div></div><div class="member-title"><a name="match&lt;T>"></a>match&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_TryOption_T_self__Action_T_Some__Action__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">match</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Some, <span class="ident">Action</span> Fail)</div></div><div style="display:none" id="code-match_T_TryOption_T_self__Action_T_Some__Action__Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, Fail)</div></div></div><div class="member-title"><a name="match&lt;T>"></a>match&lt;T&gt;(TryOption&lt;T&gt;, Action&lt;T&gt;, Action, Action&lt;Exception&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-match_T_TryOption_T_self__Action_T_Some__Action__None__Action_Exception_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the two possible states of the Try computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the Try computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">match</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Some, <span class="ident">Action</span> None, <span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt; Fail)</div></div><div style="display:none" id="code-match_T_TryOption_T_self__Action_T_Some__Action__None__Action_Exception_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(Some, None, Fail)</div></div></div><div class="member-title"><a name="matchAsync&lt;T, R>"></a>matchAsync&lt;T, R&gt;(T?, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchAsync_T_R_T__self__Func_T_Task&lt;R>_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Nullable and return a promise for an R. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Some handler</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >None handler</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">matchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >A promise to return an R</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-matchAsync_T_R_T__self__Func_T_Task&lt;R>_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? await Some(self.Value)
                : None()</div></div></div><div class="member-title"><a name="matchAsync&lt;T, R>"></a>matchAsync&lt;T, R&gt;(T?, Func&lt;T, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchAsync_T_R_T__self__Func_T_Task&lt;R>_Some__Func_Task&lt;R>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Nullable and return a promise for an R. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Some handler</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >None handler</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">matchAsync</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >A promise to return an R</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-matchAsync_T_R_T__self__Func_T_Task&lt;R>_Some__Func_Task&lt;R>_None_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? await Some(self.Value)
                : await None()</div></div></div><div class="member-title"><a name="matchObservable&lt;A, B>"></a>matchObservable&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;B&gt;&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchObservable_A_B_TryOptionAsync_A_self__Func_A_IObservable&lt;B>_Some__Func_B_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Turns the computation into an observable stream </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >This</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to call when the operation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt; <span class="ident">matchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >An observable that represents the result of Succ or Fail</span></div></div></div><div style="display:none" id="code-matchObservable_A_B_TryOptionAsync_A_self__Func_A_IObservable&lt;B>_Some__Func_B_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.MatchObservable(Some, None, Fail)</div></div></div><div class="member-title"><a name="matchObservable&lt;A, B>"></a>matchObservable&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;B&gt;&gt;, Func&lt;IObservable&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchObservable_A_B_TryOptionAsync_A_self__Func_A_IObservable&lt;B>_Some__Func_IObservable&lt;B>_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Turns the computation into an observable stream </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >This</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to call when the operation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt; <span class="ident">matchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >An observable that represents the result of Succ or Fail</span></div></div></div><div style="display:none" id="code-matchObservable_A_B_TryOptionAsync_A_self__Func_A_IObservable&lt;B>_Some__Func_IObservable&lt;B>_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.MatchObservable(Some, None, Fail)</div></div></div><div class="member-title"><a name="matchObservable&lt;A, R>"></a>matchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchObservable_A_R_TryOptionAsync_A_self__Func_A_IObservable&lt;R>_Some__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Turns the computation into an observable stream </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >This</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">matchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >An observable that represents the result of Succ or Fail</span></div></div></div><div style="display:none" id="code-matchObservable_A_R_TryOptionAsync_A_self__Func_A_IObservable&lt;R>_Some__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.MatchObservable(Some, None, Fail)</div></div></div><div class="member-title"><a name="matchObservable&lt;A, R>"></a>matchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchObservable_A_R_TryOptionAsync_A_self__Func_A_IObservable&lt;R>_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Turns the computation into an observable stream </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >This</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">matchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >An observable that represents the result of Succ or Fail</span></div></div></div><div style="display:none" id="code-matchObservable_A_R_TryOptionAsync_A_self__Func_A_IObservable&lt;R>_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.MatchObservable(Some, None, Fail)</div></div></div><div class="member-title"><a name="matchObservable&lt;A, R>"></a>matchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchObservable_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Turns the computation into an observable stream </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >This</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">matchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >An observable that represents the result of Succ or Fail</span></div></div></div><div style="display:none" id="code-matchObservable_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.MatchObservable(Some, None, Fail)</div></div></div><div class="member-title"><a name="matchObservable&lt;A, R>"></a>matchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchObservable_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Turns the computation into an observable stream </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >This</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">matchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >An observable that represents the result of Succ or Fail</span></div></div></div><div style="display:none" id="code-matchObservable_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.MatchObservable(Some, None, Fail)</div></div></div><div class="member-title"><a name="matchObservable&lt;T, R>"></a>matchObservable&lt;T, R&gt;(T?, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchObservable_T_R_T__self__Func_T_IObservable&lt;R>_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Nullable and return an observable stream of Rs. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Some handler</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >None handler</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">matchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >A stream of Rs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-matchObservable_T_R_T__self__Func_T_IObservable&lt;R>_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? Some(self.Value)
                : Observable.Return(None())</div></div></div><div class="member-title"><a name="matchObservable&lt;T, R>"></a>matchObservable&lt;T, R&gt;(T?, Func&lt;T, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchObservable_T_R_T__self__Func_T_IObservable&lt;R>_Some__Func_IObservable&lt;R>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Nullable and return an observable stream of Rs. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Some handler</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >None handler</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">matchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >A stream of Rs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-matchObservable_T_R_T__self__Func_T_IObservable&lt;R>_Some__Func_IObservable&lt;R>_None_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? Some(self.Value)
                : None()</div></div></div><div class="member-title"><a name="matchObservable&lt;T, R>"></a>matchObservable&lt;T, R&gt;(IObservable&lt;T?&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchObservable_T_R_IObservable_T_self__Func_T_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the IObservable&lt;Nullable&lt;T&gt;&gt; and return a stream of non-null Rs. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IObservable</span>&lt;<span class="ident">T</span>?&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Some handler</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >None handler</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">matchObservable</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">IObservable</span>&lt;<span class="ident">T</span>?&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >A stream of Rs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-matchObservable_T_R_IObservable_T_self__Func_T_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            self.Select(nullable =&gt; nullable.Match(Some, None))</div></div></div><div class="member-title"><a name="matchUnsafe&lt;L, R, Ret>"></a>matchUnsafe&lt;L, R, Ret&gt;(EitherUnsafe&lt;L, R&gt;, Func&lt;R, Ret&gt;, Func&lt;L, Ret&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchUnsafe_L_R_Ret_EitherUnsafe_L_R_either__Func_R_Ret_Right__Func_L_Ret_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the Right or Left function depending on the state of the Either provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to match</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc"><span >Function to invoke if in a Right state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt;</div></div><div class="arg-desc"><span >Function to invoke if in a Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Ret</span> <span class="ident">matchUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">Ret</span>&gt; Right, <span class="ident">Func</span>&lt;<span class="ident">L</span>, <span class="ident">Ret</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Ret</span></div><div class="normal"><span >The return value of the invoked function</span></div></div></div><div style="display:none" id="code-matchUnsafe_L_R_Ret_EitherUnsafe_L_R_either__Func_R_Ret_Right__Func_L_Ret_Left_"><div class="section_title">SOURCE</div><div class="code">
            either.MatchUnsafe(Right, Left)</div></div></div><div class="member-title"><a name="matchUnsafe&lt;L, R>"></a>matchUnsafe&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;, Action&lt;R&gt;, Action&lt;L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchUnsafe_L_R_EitherUnsafe_L_R_either__Action_R_Right__Action_L_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the Right or Left action depending on the state of the Either provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to match</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke if in a Right state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">L</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke if in a Left state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">matchUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either, <span class="ident">Action</span>&lt;<span class="ident">R</span>&gt; Right, <span class="ident">Action</span>&lt;<span class="ident">L</span>&gt; Left)</div></div><div style="display:none" id="code-matchUnsafe_L_R_EitherUnsafe_L_R_either__Action_R_Right__Action_L_Left_"><div class="section_title">SOURCE</div><div class="code">
            either.MatchUnsafe(Right, Left)</div></div></div><div class="member-title"><a name="matchUnsafe&lt;T, R>"></a>matchUnsafe&lt;T, R&gt;(Option&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchUnsafe_T_R_Option_T_option__Func_T_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option and return a B, which can be null. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Some match operation. May return null.</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >None match operation. May return null.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">matchUnsafe</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >B, or null</span></div></div></div><div style="display:none" id="code-matchUnsafe_T_R_Option_T_option__Func_T_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            option.MatchUnsafe(Some, None)</div></div></div><div class="member-title"><a name="matchUnsafe&lt;T, R>"></a>matchUnsafe&lt;T, R&gt;(OptionUnsafe&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchUnsafe_T_R_OptionUnsafe_T_option__Func_T_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the OptionUnsafe and return a B, which can be null. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Some match operation. May return null.</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >None match operation. May return null.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">matchUnsafe</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >B, or null</span></div></div></div><div style="display:none" id="code-matchUnsafe_T_R_OptionUnsafe_T_option__Func_T_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            option.MatchUnsafe(Some, None)</div></div></div><div class="member-title"><a name="matchUnsafe&lt;T, R>"></a>matchUnsafe&lt;T, R&gt;(IEnumerable&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;, Func&lt;IEnumerable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchUnsafe_T_R_IEnumerable_OptionUnsafe&lt;T>_list__Func_T_IEnumerable&lt;R>_Some__Func_IEnumerable&lt;R>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the list of OptionUnsafes </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Some match operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >None match operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">matchUnsafe</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-matchUnsafe_T_R_IEnumerable_OptionUnsafe&lt;T>_list__Func_T_IEnumerable&lt;R>_Some__Func_IEnumerable&lt;R>_None_"><div class="section_title">SOURCE</div><div class="code">
            list.Match(
                None,
                opt =&gt; matchUnsafe(opt, v =&gt; Some(v), None),
                (x, xs) =&gt; matchUnsafe(x, v =&gt; Some(v), None).Concat(matchUnsafe(xs, Some, None)) // TODO: Flatten recursion
            )</div></div></div><div class="member-title"><a name="matchUnsafe&lt;T, R>"></a>matchUnsafe&lt;T, R&gt;(IEnumerable&lt;OptionUnsafe&lt;T&gt;&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;, IEnumerable&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchUnsafe_T_R_IEnumerable_OptionUnsafe&lt;T>_list__Func_T_IEnumerable&lt;R>_Some__IEnumerable_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the list of OptionUnsafes </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Some match operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >None match operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">matchUnsafe</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-matchUnsafe_T_R_IEnumerable_OptionUnsafe&lt;T>_list__Func_T_IEnumerable&lt;R>_Some__IEnumerable_R_None_"><div class="section_title">SOURCE</div><div class="code">
            matchUnsafe(list, Some, () =&gt; None)</div></div></div><div class="member-title"><a name="matchUnsafe&lt;T>"></a>matchUnsafe&lt;T&gt;(OptionUnsafe&lt;T&gt;, Action&lt;T&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchUnsafe_T_OptionUnsafe_T_option__Action_T_Some__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the OptionUnsafe </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Some match operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >None match operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">matchUnsafe</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; option, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; Some, <span class="ident">Action</span> None)</div></div><div style="display:none" id="code-matchUnsafe_T_OptionUnsafe_T_option__Action_T_Some__Action__None_"><div class="section_title">SOURCE</div><div class="code">
            option.MatchUnsafe(Some, None)</div></div></div><div class="member-title"><a name="memo&lt;T, R>"></a>memo&lt;T, R&gt;(Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-memo_T_R_Func_T_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns a Func&lt;T,R&gt; that wraps func.  Each time the resulting Func&lt;T,R&gt; is called with a new value, its result is memoized (cached). Subsequent calls use the memoized value.  <br/><br/> Remarks: <div class='code-line'>     Thread-safe and memory-leak safe.  </div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">memo</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-memo_T_R_Func_T_R_func_"><div class="section_title">SOURCE</div><div class="code">
            var cache = new WeakDict&lt;T, R&gt;();
            var syncMap = new ConcurrentDictionary&lt;T, object&gt;();

            return inp =&gt;
                matchUnsafe(cache.TryGetValue(inp),
                    Some: x =&gt; x,
                    None: () =&gt;
                    {
                        R res;
                        var sync = syncMap.GetOrAdd(inp, new object());
                        lock (sync)
                        {
                            res = cache.GetOrAdd(inp, func);
                        }
                        syncMap.TryRemove(inp, out sync);
                        return res;
                    });
        </div></div></div><div class="member-title"><a name="memo&lt;T>"></a>memo&lt;T&gt;(Func&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-memo_T_Func_T_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns a Func&lt;T&gt; that wraps func.  The first call to the resulting Func&lt;T&gt; will cache the result. Subsequent calls return the cached item. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; <span class="ident">memo</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-memo_T_Func_T_func_"><div class="section_title">SOURCE</div><div class="code">
            var value = new Lazy&lt;T&gt;(func, true);
            return () =&gt; value.Value;
        </div></div></div><div class="member-title"><a name="memo&lt;T>"></a>memo&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-memo_T_IEnumerable_T_seq_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Enumerable memoization.  As an enumerable is enumerated each item is retained in an internal list, so that future evalation of the enumerable isn&#39;t done.  Only items not seen before are evaluated.  <br/><br/> This minimises one of the major problems with the IEnumerable / yield return  pattern by causing at-most-once evaluation of each item.  <br/><br/> Use the IEnumerable extension method Memo for convenience. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">seq</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Enumerable to memoize</span></div></div><div class="section_title">REMARKS</div><span >Although this allows efficient lazy evaluation, it does come at a memory cost. Each item is cached internally, so this method doesn&#39;t allow for evaluation of infinite sequences. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">memo</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; seq)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >IEnumerable with caching properties</span></div></div></div><div style="display:none" id="code-memo_T_IEnumerable_T_seq_"><div class="section_title">SOURCE</div><div class="code">
            new LanguageExt.MemoEnumerable&lt;T&gt;(seq)</div></div></div><div class="member-title"><a name="memoUnsafe&lt;T, R>"></a>memoUnsafe&lt;T, R&gt;(Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-memoUnsafe_T_R_Func_T_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns a Func&lt;T,R&gt; that wraps func.  Each time the resulting Func&lt;T,R&gt; is called with a new value, its result is memoized (cached). Subsequent calls use the memoized value.  <br/><br/> Remarks: <div class='code-line'>     No mechanism for freeing cached values and therefore can cause a</div><div class='code-line'>     memory leak when holding onto the Func&lt;T,R&gt; reference.</div><div class='code-line'>     Uses a ConcurrentDictionary for the cache and is thread-safe</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; <span class="ident">memoUnsafe</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-memoUnsafe_T_R_Func_T_R_func_"><div class="section_title">SOURCE</div><div class="code">
            var cache = new ConcurrentDictionary&lt;T, R&gt;();
            var syncMap = new ConcurrentDictionary&lt;T, object&gt;();
            return inp =&gt;
            {
                R res;
                if (!cache.TryGetValue(inp, out res))
                {
                    var sync = syncMap.GetOrAdd(inp, new object());
                    lock (sync)
                    {
                        res = cache.GetOrAdd(inp, func);
                    }
                    syncMap.TryRemove(inp, out sync);
                }
                return res;
            };
        </div></div></div><div class="member-title"><a name="modify&lt;S>"></a>modify&lt;S&gt;(Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-modify_S_Func_S_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >modify::MonadState s m =&gt; (s -&gt; s) -&gt; m()<br/><br/> Monadic state transformer.<br/><br/> Maps an old state to a new state inside a state monad.The old state is thrown away. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>&gt; <span class="ident">modify</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-modify_S_Func_S_S_f_"><div class="section_title">SOURCE</div><div class="code">
            s =&gt; (unit, f(s), false)</div></div></div><div class="member-title"><a name="notDefault&lt;T>"></a>notDefault&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-notDefault_T_T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if the value is not equal to this type&#39;s default value. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[MethodImpl(MethodImplOptions.AggressiveInlining)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">notDefault</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the value is not equal to this type&#39;s default value</span></div></div></div><div style="display:none" id="code-notDefault_T_T__value_"><div class="section_title">SOURCE</div><div class="code">
            !isDefault(value)</div></div></div><div class="member-title"><a name="notnull&lt;T>"></a>notnull&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-notnull_T_T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if the value is not null, and does so without boxing of any value-types.  Value-types will always return  true. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><div class="attr">[MethodImpl(MethodImplOptions.AggressiveInlining)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">notnull</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the value is null, and does so without boxing of any value-types.  Value-types will always return false.</span></div></div></div><div style="display:none" id="code-notnull_T_T__value_"><div class="section_title">SOURCE</div><div class="code">
            !Check&lt;T&gt;.IsNull(value)</div></div></div><div class="member-title"><a name="Optional&lt;T>"></a>Optional&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Optional_T_T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an Option </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to be made optional, or null</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Optional</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >If the value is null it will be None else Some(value)</span></div></div></div><div style="display:none" id="code-Optional_T_T__value_"><div class="section_title">SOURCE</div><div class="code">
            MOption&lt;T&gt;.Inst.Return(value)</div></div></div><div class="member-title"><a name="Optional&lt;T>"></a>Optional&lt;T&gt;(Func&lt;Option&lt;T&gt;&gt;, bool)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Optional_T_Func_Option&lt;T>_f__bool__memo_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a lazy Some of T (Option&lt;T&gt;) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div><div class="arg-desc"><span >A function that returns the value to construct the option with</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">memo</div><div class="arg-type"><span class="keyword">bool</span></div></div><div class="arg-desc"><span >True to memoize the value so it&#39;s only fetched once</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Optional</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; f, <span class="keyword">bool</span> memo = true)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A lazy Option&lt;T&gt;</span></div></div></div><div style="display:none" id="code-Optional_T_Func_Option&lt;T>_f__bool__memo_"><div class="section_title">SOURCE</div><div class="code">
            f == null
                ? raise&lt;Option&lt;T&gt;&gt;(new ArgumentNullException(nameof(f)))
                : new Option&lt;T&gt;(new LazyOption2&lt;T&gt;(f, memo))</div></div></div><div class="member-title"><a name="Optional&lt;T>"></a>Optional&lt;T&gt;(T?)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Optional_T_T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an Option </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc"><span >Value to be made optional, or null</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Optional</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >If the value is null it will be None else Some(value)</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-Optional_T_T__value_"><div class="section_title">SOURCE</div><div class="code">
            value.HasValue
                ? MOption&lt;T&gt;.Inst.Return(value.Value)
                : Option&lt;T&gt;.None</div></div></div><div class="member-title"><a name="otherwise&lt;T, R>"></a>otherwise&lt;T, R&gt;(Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-otherwise_T_R_Func_T_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Use with the &#39;match&#39; function to catch a non-matched value and map a result </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">otherwise</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-otherwise_T_R_Func_T_R_map_"><div class="section_title">SOURCE</div><div class="code">
            (T input) =&gt; Some(map(input))</div></div></div><div class="member-title"><a name="par&lt;T1, T2, R>"></a>par&lt;T1, T2, R&gt;(Func&lt;T1, T2, R&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_R_Func_T1_T2_R_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_R_Func_T1_T2_R_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b) =&gt; func(a, b)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, R>"></a>par&lt;T1, T2, T3, R&gt;(Func&lt;T1, T2, T3, R&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_R_Func_T1_T2_T3_R_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_R_Func_T1_T2_T3_R_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c) =&gt; func(a, b, c)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, R>"></a>par&lt;T1, T2, T3, R&gt;(Func&lt;T1, T2, T3, R&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_R_Func_T1_T2_T3_R_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_R_Func_T1_T2_T3_R_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c) =&gt; func(a, b, c)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, R>"></a>par&lt;T1, T2, T3, T4, R&gt;(Func&lt;T1, T2, T3, T4, R&gt;, T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_R_Func_T1_T2_T3_T4_R_func__T1__a__T2__b__T3__c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_R_Func_T1_T2_T3_T4_R_func__T1__a__T2__b__T3__c_"><div class="section_title">SOURCE</div><div class="code">
            (T4 d) =&gt; func(a, b, c, d)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, R>"></a>par&lt;T1, T2, T3, T4, R&gt;(Func&lt;T1, T2, T3, T4, R&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_R_Func_T1_T2_T3_T4_R_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_R_Func_T1_T2_T3_T4_R_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c, T4 d) =&gt; func(a, b, c, d)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, R>"></a>par&lt;T1, T2, T3, T4, R&gt;(Func&lt;T1, T2, T3, T4, R&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_R_Func_T1_T2_T3_T4_R_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_R_Func_T1_T2_T3_T4_R_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c, T4 d) =&gt; func(a, b, c, d)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, R>"></a>par&lt;T1, T2, T3, T4, T5, R&gt;(Func&lt;T1, T2, T3, T4, T5, R&gt;, T1, T2, T3, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_R_Func_T1_T2_T3_T4_T5_R_func__T1__a__T2__b__T3__c__T4__d_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_R_Func_T1_T2_T3_T4_T5_R_func__T1__a__T2__b__T3__c__T4__d_"><div class="section_title">SOURCE</div><div class="code">
            (T5 e) =&gt; func(a, b, c, d, e)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, R>"></a>par&lt;T1, T2, T3, T4, T5, R&gt;(Func&lt;T1, T2, T3, T4, T5, R&gt;, T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_R_Func_T1_T2_T3_T4_T5_R_func__T1__a__T2__b__T3__c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_R_Func_T1_T2_T3_T4_T5_R_func__T1__a__T2__b__T3__c_"><div class="section_title">SOURCE</div><div class="code">
            (T4 d, T5 e) =&gt; func(a, b, c, d, e)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, R>"></a>par&lt;T1, T2, T3, T4, T5, R&gt;(Func&lt;T1, T2, T3, T4, T5, R&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_R_Func_T1_T2_T3_T4_T5_R_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_R_Func_T1_T2_T3_T4_T5_R_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c, T4 d, T5 e) =&gt; func(a, b, c, d, e)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, R>"></a>par&lt;T1, T2, T3, T4, T5, R&gt;(Func&lt;T1, T2, T3, T4, T5, R&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_R_Func_T1_T2_T3_T4_T5_R_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_R_Func_T1_T2_T3_T4_T5_R_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c, T4 d, T5 e) =&gt; func(a, b, c, d, e)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;, T1, T2, T3, T4, T5)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_func__T1__a__T2__b__T3__c__T4__d__T5__e_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_func__T1__a__T2__b__T3__c__T4__d__T5__e_"><div class="section_title">SOURCE</div><div class="code">
            (T6 f) =&gt; func(a, b, c, d, e, f)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;, T1, T2, T3, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_func__T1__a__T2__b__T3__c__T4__d_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_func__T1__a__T2__b__T3__c__T4__d_"><div class="section_title">SOURCE</div><div class="code">
            (T5 e, T6 f) =&gt; func(a, b, c, d, e, f)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;, T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_func__T1__a__T2__b__T3__c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_func__T1__a__T2__b__T3__c_"><div class="section_title">SOURCE</div><div class="code">
            (T4 d, T5 e, T6 f) =&gt; func(a, b, c, d, e, f)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c, T4 d, T5 e, T6 f) =&gt; func(a, b, c, d, e, f)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, R&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_R_Func_T1_T2_T3_T4_T5_T6_R_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c, T4 d, T5 e, T6 f) =&gt; func(a, b, c, d, e, f)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;, T1, T2, T3, T4, T5, T6)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_"><div class="section_title">SOURCE</div><div class="code">
            (T7 g) =&gt; func(a, b, c, d, e, f, g)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;, T1, T2, T3, T4, T5)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_func__T1__a__T2__b__T3__c__T4__d__T5__e_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_func__T1__a__T2__b__T3__c__T4__d__T5__e_"><div class="section_title">SOURCE</div><div class="code">
            (T6 f, T7 g) =&gt; func(a, b, c, d, e, f, g)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;, T1, T2, T3, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_func__T1__a__T2__b__T3__c__T4__d_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_func__T1__a__T2__b__T3__c__T4__d_"><div class="section_title">SOURCE</div><div class="code">
            (T5 e, T6 f, T7 g) =&gt; func(a, b, c, d, e, f, g)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;, T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_func__T1__a__T2__b__T3__c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_func__T1__a__T2__b__T3__c_"><div class="section_title">SOURCE</div><div class="code">
            (T4 d, T5 e, T6 f, T7 g) =&gt; func(a, b, c, d, e, f, g)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c, T4 d, T5 e, T6 f, T7 g) =&gt; func(a, b, c, d, e, f, g)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_R_Func_T1_T2_T3_T4_T5_T6_T7_R_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c, T4 d, T5 e, T6 f, T7 g) =&gt; func(a, b, c, d, e, f, g)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c, T4 d, T5 e, T6 f, T7 g, T8 h) =&gt; func(a, b, c, d, e, f, g, h)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c, T4 d, T5 e, T6 f, T7 g, T8 h) =&gt; func(a, b, c, d, e, f, g, h)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;, T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func__T1__a__T2__b__T3__c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func__T1__a__T2__b__T3__c_"><div class="section_title">SOURCE</div><div class="code">
            (T4 d, T5 e, T6 f, T7 g, T8 h) =&gt; func(a, b, c, d, e, f, g, h)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;, T1, T2, T3, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func__T1__a__T2__b__T3__c__T4__d_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func__T1__a__T2__b__T3__c__T4__d_"><div class="section_title">SOURCE</div><div class="code">
            (T5 e, T6 f, T7 g, T8 h) =&gt; func(a, b, c, d, e, f, g, h)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;, T1, T2, T3, T4, T5)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func__T1__a__T2__b__T3__c__T4__d__T5__e_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func__T1__a__T2__b__T3__c__T4__d__T5__e_"><div class="section_title">SOURCE</div><div class="code">
            (T6 f, T7 g, T8 h) =&gt; func(a, b, c, d, e, f, g, h)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;, T1, T2, T3, T4, T5, T6)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_"><div class="section_title">SOURCE</div><div class="code">
            (T7 g, T8 h) =&gt; func(a, b, c, d, e, f, g, h)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, R&gt;, T1, T2, T3, T4, T5, T6, T7)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">g</div><div class="arg-type"><span class="ident">T7</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f, <span class="ident">T7</span> g)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g_"><div class="section_title">SOURCE</div><div class="code">
            (T8 h) =&gt; func(a, b, c, d, e, f, g, h)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c, T4 d, T5 e, T6 f, T7 g, T8 h, T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c, T4 d, T5 e, T6 f, T7 g, T8 h, T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a__T2__b__T3__c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a__T2__b__T3__c_"><div class="section_title">SOURCE</div><div class="code">
            (T4 d, T5 e, T6 f, T7 g, T8 h, T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1, T2, T3, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a__T2__b__T3__c__T4__d_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a__T2__b__T3__c__T4__d_"><div class="section_title">SOURCE</div><div class="code">
            (T5 e, T6 f, T7 g, T8 h, T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1, T2, T3, T4, T5)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a__T2__b__T3__c__T4__d__T5__e_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a__T2__b__T3__c__T4__d__T5__e_"><div class="section_title">SOURCE</div><div class="code">
            (T6 f, T7 g, T8 h, T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1, T2, T3, T4, T5, T6)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_"><div class="section_title">SOURCE</div><div class="code">
            (T7 g, T8 h, T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1, T2, T3, T4, T5, T6, T7)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">g</div><div class="arg-type"><span class="ident">T7</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f, <span class="ident">T7</span> g)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g_"><div class="section_title">SOURCE</div><div class="code">
            (T8 h, T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, R&gt;, T1, T2, T3, T4, T5, T6, T7, T8)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g__T8__h_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">g</div><div class="arg-type"><span class="ident">T7</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">h</div><div class="arg-type"><span class="ident">T8</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T9</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f, <span class="ident">T7</span> g, <span class="ident">T8</span> h)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T9</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g__T8__h_"><div class="section_title">SOURCE</div><div class="code">
            (T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c, T4 d, T5 e, T6 f, T7 g, T8 h, T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c, T4 d, T5 e, T6 f, T7 g, T8 h, T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b__T3__c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b__T3__c_"><div class="section_title">SOURCE</div><div class="code">
            (T4 d, T5 e, T6 f, T7 g, T8 h, T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2, T3, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b__T3__c__T4__d_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b__T3__c__T4__d_"><div class="section_title">SOURCE</div><div class="code">
            (T5 e, T6 f, T7 g, T8 h, T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2, T3, T4, T5)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b__T3__c__T4__d__T5__e_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b__T3__c__T4__d__T5__e_"><div class="section_title">SOURCE</div><div class="code">
            (T6 f, T7 g, T8 h, T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2, T3, T4, T5, T6)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_"><div class="section_title">SOURCE</div><div class="code">
            (T7 g, T8 h, T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2, T3, T4, T5, T6, T7)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">g</div><div class="arg-type"><span class="ident">T7</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f, <span class="ident">T7</span> g)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g_"><div class="section_title">SOURCE</div><div class="code">
            (T8 h, T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2, T3, T4, T5, T6, T7, T8)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g__T8__h_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">g</div><div class="arg-type"><span class="ident">T7</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">h</div><div class="arg-type"><span class="ident">T8</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f, <span class="ident">T7</span> g, <span class="ident">T8</span> h)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g__T8__h_"><div class="section_title">SOURCE</div><div class="code">
            (T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R&gt;, T1, T2, T3, T4, T5, T6, T7, T8, T9)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g__T8__h__T9__i_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">g</div><div class="arg-type"><span class="ident">T7</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">h</div><div class="arg-type"><span class="ident">T8</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">i</div><div class="arg-type"><span class="ident">T9</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T10</span>, <span class="ident">R</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>, <span class="ident">R</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f, <span class="ident">T7</span> g, <span class="ident">T8</span> h, <span class="ident">T9</span> i)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T10</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_Func_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_R_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g__T8__h__T9__i_"><div class="section_title">SOURCE</div><div class="code">
            (T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c, T4 d, T5 e, T6 f, T7 g, T8 h, T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c, T4 d, T5 e, T6 f, T7 g, T8 h, T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b__T3__c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b__T3__c_"><div class="section_title">SOURCE</div><div class="code">
            (T4 d, T5 e, T6 f, T7 g, T8 h, T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2, T3, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b__T3__c__T4__d_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b__T3__c__T4__d_"><div class="section_title">SOURCE</div><div class="code">
            (T5 e, T6 f, T7 g, T8 h, T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2, T3, T4, T5)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b__T3__c__T4__d__T5__e_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b__T3__c__T4__d__T5__e_"><div class="section_title">SOURCE</div><div class="code">
            (T6 f, T7 g, T8 h, T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2, T3, T4, T5, T6)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_"><div class="section_title">SOURCE</div><div class="code">
            (T7 g, T8 h, T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2, T3, T4, T5, T6, T7)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">g</div><div class="arg-type"><span class="ident">T7</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f, <span class="ident">T7</span> g)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g_"><div class="section_title">SOURCE</div><div class="code">
            (T8 h, T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2, T3, T4, T5, T6, T7, T8)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g__T8__h_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">g</div><div class="arg-type"><span class="ident">T7</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">h</div><div class="arg-type"><span class="ident">T8</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T9</span>, <span class="ident">T10</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f, <span class="ident">T7</span> g, <span class="ident">T8</span> h)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g__T8__h_"><div class="section_title">SOURCE</div><div class="code">
            (T9 i, T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;, T1, T2, T3, T4, T5, T6, T7, T8, T9)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g__T8__h__T9__i_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">g</div><div class="arg-type"><span class="ident">T7</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">h</div><div class="arg-type"><span class="ident">T8</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">i</div><div class="arg-type"><span class="ident">T9</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T10</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>, <span class="ident">T10</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f, <span class="ident">T7</span> g, <span class="ident">T8</span> h, <span class="ident">T9</span> i)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T10</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_T10_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g__T8__h__T9__i_"><div class="section_title">SOURCE</div><div class="code">
            (T10 j) =&gt; func(a, b, c, d, e, f, g, h, i, j)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c, T4 d, T5 e, T6 f, T7 g, T8 h, T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c, T4 d, T5 e, T6 f, T7 g, T8 h, T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a__T2__b__T3__c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a__T2__b__T3__c_"><div class="section_title">SOURCE</div><div class="code">
            (T4 d, T5 e, T6 f, T7 g, T8 h, T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1, T2, T3, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a__T2__b__T3__c__T4__d_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a__T2__b__T3__c__T4__d_"><div class="section_title">SOURCE</div><div class="code">
            (T5 e, T6 f, T7 g, T8 h, T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1, T2, T3, T4, T5)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a__T2__b__T3__c__T4__d__T5__e_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a__T2__b__T3__c__T4__d__T5__e_"><div class="section_title">SOURCE</div><div class="code">
            (T6 f, T7 g, T8 h, T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1, T2, T3, T4, T5, T6)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_"><div class="section_title">SOURCE</div><div class="code">
            (T7 g, T8 h, T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1, T2, T3, T4, T5, T6, T7)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">g</div><div class="arg-type"><span class="ident">T7</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T8</span>, <span class="ident">T9</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f, <span class="ident">T7</span> g)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T8</span>, <span class="ident">T9</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g_"><div class="section_title">SOURCE</div><div class="code">
            (T8 h, T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;, T1, T2, T3, T4, T5, T6, T7, T8)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g__T8__h_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">g</div><div class="arg-type"><span class="ident">T7</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">h</div><div class="arg-type"><span class="ident">T8</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T9</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">T9</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f, <span class="ident">T7</span> g, <span class="ident">T8</span> h)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T9</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_T9_Action_T1_T2_T3_T4_T5_T6_T7_T8_T9_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g__T8__h_"><div class="section_title">SOURCE</div><div class="code">
            (T9 i) =&gt; func(a, b, c, d, e, f, g, h, i)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_Action_T1_T2_T3_T4_T5_T6_T7_T8_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_Action_T1_T2_T3_T4_T5_T6_T7_T8_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c, T4 d, T5 e, T6 f, T7 g, T8 h) =&gt; func(a, b, c, d, e, f, g, h)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_Action_T1_T2_T3_T4_T5_T6_T7_T8_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_Action_T1_T2_T3_T4_T5_T6_T7_T8_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c, T4 d, T5 e, T6 f, T7 g, T8 h) =&gt; func(a, b, c, d, e, f, g, h)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;, T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_Action_T1_T2_T3_T4_T5_T6_T7_T8_func__T1__a__T2__b__T3__c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_Action_T1_T2_T3_T4_T5_T6_T7_T8_func__T1__a__T2__b__T3__c_"><div class="section_title">SOURCE</div><div class="code">
            (T4 d, T5 e, T6 f, T7 g, T8 h) =&gt; func(a, b, c, d, e, f, g, h)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;, T1, T2, T3, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_Action_T1_T2_T3_T4_T5_T6_T7_T8_func__T1__a__T2__b__T3__c__T4__d_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_Action_T1_T2_T3_T4_T5_T6_T7_T8_func__T1__a__T2__b__T3__c__T4__d_"><div class="section_title">SOURCE</div><div class="code">
            (T5 e, T6 f, T7 g, T8 h) =&gt; func(a, b, c, d, e, f, g, h)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;, T1, T2, T3, T4, T5)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_Action_T1_T2_T3_T4_T5_T6_T7_T8_func__T1__a__T2__b__T3__c__T4__d__T5__e_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_Action_T1_T2_T3_T4_T5_T6_T7_T8_func__T1__a__T2__b__T3__c__T4__d__T5__e_"><div class="section_title">SOURCE</div><div class="code">
            (T6 f, T7 g, T8 h) =&gt; func(a, b, c, d, e, f, g, h)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;, T1, T2, T3, T4, T5, T6)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_Action_T1_T2_T3_T4_T5_T6_T7_T8_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T7</span>, <span class="ident">T8</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T7</span>, <span class="ident">T8</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_Action_T1_T2_T3_T4_T5_T6_T7_T8_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_"><div class="section_title">SOURCE</div><div class="code">
            (T7 g, T8 h) =&gt; func(a, b, c, d, e, f, g, h)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7, T8>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;, T1, T2, T3, T4, T5, T6, T7)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_T8_Action_T1_T2_T3_T4_T5_T6_T7_T8_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">g</div><div class="arg-type"><span class="ident">T7</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T8</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f, <span class="ident">T7</span> g)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T8</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_T8_Action_T1_T2_T3_T4_T5_T6_T7_T8_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f__T7__g_"><div class="section_title">SOURCE</div><div class="code">
            (T8 h) =&gt; func(a, b, c, d, e, f, g, h)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;, T1, T2, T3, T4, T5, T6)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">T6</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T7</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e, <span class="ident">T6</span> f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T7</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_func__T1__a__T2__b__T3__c__T4__d__T5__e__T6__f_"><div class="section_title">SOURCE</div><div class="code">
            (T7 g) =&gt; func(a, b, c, d, e, f, g)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;, T1, T2, T3, T4, T5)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_func__T1__a__T2__b__T3__c__T4__d__T5__e_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_func__T1__a__T2__b__T3__c__T4__d__T5__e_"><div class="section_title">SOURCE</div><div class="code">
            (T6 f, T7 g) =&gt; func(a, b, c, d, e, f, g)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;, T1, T2, T3, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_func__T1__a__T2__b__T3__c__T4__d_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_func__T1__a__T2__b__T3__c__T4__d_"><div class="section_title">SOURCE</div><div class="code">
            (T5 e, T6 f, T7 g) =&gt; func(a, b, c, d, e, f, g)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;, T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_func__T1__a__T2__b__T3__c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_func__T1__a__T2__b__T3__c_"><div class="section_title">SOURCE</div><div class="code">
            (T4 d, T5 e, T6 f, T7 g) =&gt; func(a, b, c, d, e, f, g)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c, T4 d, T5 e, T6 f, T7 g) =&gt; func(a, b, c, d, e, f, g)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6, T7>"></a>par&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_T7_Action_T1_T2_T3_T4_T5_T6_T7_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c, T4 d, T5 e, T6 f, T7 g) =&gt; func(a, b, c, d, e, f, g)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6>"></a>par&lt;T1, T2, T3, T4, T5, T6&gt;(Action&lt;T1, T2, T3, T4, T5, T6&gt;, T1, T2, T3, T4, T5)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_Action_T1_T2_T3_T4_T5_T6_func__T1__a__T2__b__T3__c__T4__d__T5__e_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">e</div><div class="arg-type"><span class="ident">T5</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T6</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d, <span class="ident">T5</span> e)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T6</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_Action_T1_T2_T3_T4_T5_T6_func__T1__a__T2__b__T3__c__T4__d__T5__e_"><div class="section_title">SOURCE</div><div class="code">
            (T6 f) =&gt; func(a, b, c, d, e, f)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6>"></a>par&lt;T1, T2, T3, T4, T5, T6&gt;(Action&lt;T1, T2, T3, T4, T5, T6&gt;, T1, T2, T3, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_Action_T1_T2_T3_T4_T5_T6_func__T1__a__T2__b__T3__c__T4__d_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_Action_T1_T2_T3_T4_T5_T6_func__T1__a__T2__b__T3__c__T4__d_"><div class="section_title">SOURCE</div><div class="code">
            (T5 e, T6 f) =&gt; func(a, b, c, d, e, f)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6>"></a>par&lt;T1, T2, T3, T4, T5, T6&gt;(Action&lt;T1, T2, T3, T4, T5, T6&gt;, T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_Action_T1_T2_T3_T4_T5_T6_func__T1__a__T2__b__T3__c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_Action_T1_T2_T3_T4_T5_T6_func__T1__a__T2__b__T3__c_"><div class="section_title">SOURCE</div><div class="code">
            (T4 d, T5 e, T6 f) =&gt; func(a, b, c, d, e, f)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6>"></a>par&lt;T1, T2, T3, T4, T5, T6&gt;(Action&lt;T1, T2, T3, T4, T5, T6&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_Action_T1_T2_T3_T4_T5_T6_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_Action_T1_T2_T3_T4_T5_T6_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c, T4 d, T5 e, T6 f) =&gt; func(a, b, c, d, e, f)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5, T6>"></a>par&lt;T1, T2, T3, T4, T5, T6&gt;(Action&lt;T1, T2, T3, T4, T5, T6&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_T6_Action_T1_T2_T3_T4_T5_T6_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_T6_Action_T1_T2_T3_T4_T5_T6_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c, T4 d, T5 e, T6 f) =&gt; func(a, b, c, d, e, f)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5>"></a>par&lt;T1, T2, T3, T4, T5&gt;(Action&lt;T1, T2, T3, T4, T5&gt;, T1, T2, T3, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_Action_T1_T2_T3_T4_T5_func__T1__a__T2__b__T3__c__T4__d_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">d</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T5</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c, <span class="ident">T4</span> d)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T5</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_Action_T1_T2_T3_T4_T5_func__T1__a__T2__b__T3__c__T4__d_"><div class="section_title">SOURCE</div><div class="code">
            (T5 e) =&gt; func(a, b, c, d, e)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5>"></a>par&lt;T1, T2, T3, T4, T5&gt;(Action&lt;T1, T2, T3, T4, T5&gt;, T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_Action_T1_T2_T3_T4_T5_func__T1__a__T2__b__T3__c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_Action_T1_T2_T3_T4_T5_func__T1__a__T2__b__T3__c_"><div class="section_title">SOURCE</div><div class="code">
            (T4 d, T5 e) =&gt; func(a, b, c, d, e)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5>"></a>par&lt;T1, T2, T3, T4, T5&gt;(Action&lt;T1, T2, T3, T4, T5&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_Action_T1_T2_T3_T4_T5_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_Action_T1_T2_T3_T4_T5_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c, T4 d, T5 e) =&gt; func(a, b, c, d, e)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4, T5>"></a>par&lt;T1, T2, T3, T4, T5&gt;(Action&lt;T1, T2, T3, T4, T5&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_T5_Action_T1_T2_T3_T4_T5_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_T5_Action_T1_T2_T3_T4_T5_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c, T4 d, T5 e) =&gt; func(a, b, c, d, e)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4>"></a>par&lt;T1, T2, T3, T4&gt;(Action&lt;T1, T2, T3, T4&gt;, T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_Action_T1_T2_T3_T4_func__T1__a__T2__b__T3__c_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">c</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T4</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b, <span class="ident">T3</span> c)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T4</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_Action_T1_T2_T3_T4_func__T1__a__T2__b__T3__c_"><div class="section_title">SOURCE</div><div class="code">
            (T4 d) =&gt; func(a, b, c, d)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4>"></a>par&lt;T1, T2, T3, T4&gt;(Action&lt;T1, T2, T3, T4&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_Action_T1_T2_T3_T4_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_Action_T1_T2_T3_T4_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c, T4 d) =&gt; func(a, b, c, d)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3, T4>"></a>par&lt;T1, T2, T3, T4&gt;(Action&lt;T1, T2, T3, T4&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_T4_Action_T1_T2_T3_T4_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_T4_Action_T1_T2_T3_T4_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c, T4 d) =&gt; func(a, b, c, d)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3>"></a>par&lt;T1, T2, T3&gt;(Action&lt;T1, T2, T3&gt;, T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_Action_T1_T2_T3_func__T1__a__T2__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T3</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; func, <span class="ident">T1</span> a, <span class="ident">T2</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_Action_T1_T2_T3_func__T1__a__T2__b_"><div class="section_title">SOURCE</div><div class="code">
            (T3 c) =&gt; func(a, b, c)</div></div></div><div class="member-title"><a name="par&lt;T1, T2, T3>"></a>par&lt;T1, T2, T3&gt;(Action&lt;T1, T2, T3&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_T3_Action_T1_T2_T3_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_T3_Action_T1_T2_T3_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b, T3 c) =&gt; func(a, b, c)</div></div></div><div class="member-title"><a name="par&lt;T1, T2>"></a>par&lt;T1, T2&gt;(Action&lt;T1, T2&gt;, T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-par_T1_T2_Action_T1_T2_func__T1__a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partially apply  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Action</span>&lt;<span class="ident">T2</span>&gt; <span class="ident">par</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; func, <span class="ident">T1</span> a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Action</span>&lt;<span class="ident">T2</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-par_T1_T2_Action_T1_T2_func__T1__a_"><div class="section_title">SOURCE</div><div class="code">
            (T2 b) =&gt; func(a, b)</div></div></div><div class="member-title"><a name="parmap&lt;L, T1, T2, R>"></a>parmap&lt;L, T1, T2, R&gt;(Either&lt;L, T1&gt;, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_L_T1_T2_R_Either_L_T1_either__Func_T1_T2_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_L_T1_T2_R_Either_L_T1_either__Func_T1_T2_R_func_"><div class="section_title">SOURCE</div><div class="code">
            either.ParMap(func)</div></div></div><div class="member-title"><a name="parmap&lt;L, T1, T2, R>"></a>parmap&lt;L, T1, T2, R&gt;(EitherUnsafe&lt;L, T1&gt;, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_L_T1_T2_R_EitherUnsafe_L_T1_either__Func_T1_T2_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_L_T1_T2_R_EitherUnsafe_L_T1_either__Func_T1_T2_R_func_"><div class="section_title">SOURCE</div><div class="code">
            either.ParMap(func)</div></div></div><div class="member-title"><a name="parmap&lt;L, T1, T2, T3, R>"></a>parmap&lt;L, T1, T2, T3, R&gt;(Either&lt;L, T1&gt;, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_L_T1_T2_T3_R_Either_L_T1_either__Func_T1_T2_T3_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_L_T1_T2_T3_R_Either_L_T1_either__Func_T1_T2_T3_R_func_"><div class="section_title">SOURCE</div><div class="code">
            either.ParMap(func)</div></div></div><div class="member-title"><a name="parmap&lt;L, T1, T2, T3, R>"></a>parmap&lt;L, T1, T2, T3, R&gt;(EitherUnsafe&lt;L, T1&gt;, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_L_T1_T2_T3_R_EitherUnsafe_L_T1_either__Func_T1_T2_T3_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T1</span>&gt; either, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_L_T1_T2_T3_R_EitherUnsafe_L_T1_either__Func_T1_T2_T3_R_func_"><div class="section_title">SOURCE</div><div class="code">
            either.ParMap(func)</div></div></div><div class="member-title"><a name="parmap&lt;T1, T2, R>"></a>parmap&lt;T1, T2, R&gt;(Option&lt;T1&gt;, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_T1_T2_R_Option_T1_option__Func_T1_T2_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T1</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_T1_T2_R_Option_T1_option__Func_T1_T2_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
            option.ParMap(mapper)</div></div></div><div class="member-title"><a name="parmap&lt;T1, T2, R>"></a>parmap&lt;T1, T2, R&gt;(OptionUnsafe&lt;T1&gt;, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_T1_T2_R_OptionUnsafe_T1_option__Func_T1_T2_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T1</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_T1_T2_R_OptionUnsafe_T1_option__Func_T1_T2_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
            option.ParMap(mapper)</div></div></div><div class="member-title"><a name="parmap&lt;T1, T2, R>"></a>parmap&lt;T1, T2, R&gt;(Try&lt;T1&gt;, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_T1_T2_R_Try_T1_self__Func_T1_T2_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T1</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_T1_T2_R_Try_T1_self__Func_T1_T2_R_func_"><div class="section_title">SOURCE</div><div class="code">
            self.ParMap(func)</div></div></div><div class="member-title"><a name="parmap&lt;T1, T2, R>"></a>parmap&lt;T1, T2, R&gt;(TryAsync&lt;T1&gt;, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_T1_T2_R_TryAsync_T1_self__Func_T1_T2_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T1</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_T1_T2_R_TryAsync_T1_self__Func_T1_T2_R_func_"><div class="section_title">SOURCE</div><div class="code">
            self.ParMap(func)</div></div></div><div class="member-title"><a name="parmap&lt;T1, T2, R>"></a>parmap&lt;T1, T2, R&gt;(TryOption&lt;T1&gt;, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_T1_T2_R_TryOption_T1_self__Func_T1_T2_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T1</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_T1_T2_R_TryOption_T1_self__Func_T1_T2_R_func_"><div class="section_title">SOURCE</div><div class="code">
            self.ParMap(func)</div></div></div><div class="member-title"><a name="parmap&lt;T1, T2, R>"></a>parmap&lt;T1, T2, R&gt;(TryOptionAsync&lt;T1&gt;, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_T1_T2_R_TryOptionAsync_T1_self__Func_T1_T2_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T1</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_T1_T2_R_TryOptionAsync_T1_self__Func_T1_T2_R_func_"><div class="section_title">SOURCE</div><div class="code">
            self.ParMap(func)</div></div></div><div class="member-title"><a name="parmap&lt;T1, T2, T3, R>"></a>parmap&lt;T1, T2, T3, R&gt;(Option&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_T1_T2_T3_R_Option_T1_option__Func_T1_T2_T3_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T1</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_T1_T2_T3_R_Option_T1_option__Func_T1_T2_T3_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
            option.ParMap(mapper)</div></div></div><div class="member-title"><a name="parmap&lt;T1, T2, T3, R>"></a>parmap&lt;T1, T2, T3, R&gt;(OptionUnsafe&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_T1_T2_T3_R_OptionUnsafe_T1_option__Func_T1_T2_T3_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T1</span>&gt; option, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_T1_T2_T3_R_OptionUnsafe_T1_option__Func_T1_T2_T3_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
            option.ParMap(mapper)</div></div></div><div class="member-title"><a name="parmap&lt;T1, T2, T3, R>"></a>parmap&lt;T1, T2, T3, R&gt;(Try&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_T1_T2_T3_R_Try_T1_self__Func_T1_T2_T3_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T1</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_T1_T2_T3_R_Try_T1_self__Func_T1_T2_T3_R_func_"><div class="section_title">SOURCE</div><div class="code">
            self.ParMap(func)</div></div></div><div class="member-title"><a name="parmap&lt;T1, T2, T3, R>"></a>parmap&lt;T1, T2, T3, R&gt;(TryAsync&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_T1_T2_T3_R_TryAsync_T1_self__Func_T1_T2_T3_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T1</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_T1_T2_T3_R_TryAsync_T1_self__Func_T1_T2_T3_R_func_"><div class="section_title">SOURCE</div><div class="code">
            self.ParMap(func)</div></div></div><div class="member-title"><a name="parmap&lt;T1, T2, T3, R>"></a>parmap&lt;T1, T2, T3, R&gt;(TryOption&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_T1_T2_T3_R_TryOption_T1_self__Func_T1_T2_T3_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T1</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_T1_T2_T3_R_TryOption_T1_self__Func_T1_T2_T3_R_func_"><div class="section_title">SOURCE</div><div class="code">
            self.ParMap(func)</div></div></div><div class="member-title"><a name="parmap&lt;T1, T2, T3, R>"></a>parmap&lt;T1, T2, T3, R&gt;(TryOptionAsync&lt;T1&gt;, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parmap_T1_T2_T3_R_TryOptionAsync_T1_self__Func_T1_T2_T3_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">parmap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T1</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parmap_T1_T2_T3_R_TryOptionAsync_T1_self__Func_T1_T2_T3_R_func_"><div class="section_title">SOURCE</div><div class="code">
            self.ParMap(func)</div></div></div><div class="member-title"><a name="parseBool"></a>parseBool(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parseBool__string__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">parseBool</span>(<span class="keyword">string</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parseBool__string__value_"><div class="section_title">SOURCE</div><div class="code">
            bool result;
            return bool.TryParse(value, out result)
                ? Some(result)
                : None;
        </div></div></div><div class="member-title"><a name="parseByte"></a>parseByte(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parseByte__string__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="keyword">byte</span>&gt; <span class="ident">parseByte</span>(<span class="keyword">string</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="keyword">byte</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parseByte__string__value_"><div class="section_title">SOURCE</div><div class="code">
            byte result;
            return Byte.TryParse(value, out result)
                ? Some(result)
                : None;
        </div></div></div><div class="member-title"><a name="parseChar"></a>parseChar(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parseChar__string__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="keyword">char</span>&gt; <span class="ident">parseChar</span>(<span class="keyword">string</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="keyword">char</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parseChar__string__value_"><div class="section_title">SOURCE</div><div class="code">
            char result;
            return Char.TryParse(value, out result)
                ? Some(result)
                : None;
        </div></div></div><div class="member-title"><a name="parseDateTime"></a>parseDateTime(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parseDateTime__string__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">DateTime</span>&gt; <span class="ident">parseDateTime</span>(<span class="keyword">string</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">DateTime</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parseDateTime__string__value_"><div class="section_title">SOURCE</div><div class="code">
            DateTime result;
            return DateTime.TryParse(value, out result)
                ? Some(result)
                : None;
        </div></div></div><div class="member-title"><a name="parseDecimal"></a>parseDecimal(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parseDecimal__string__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="keyword">decimal</span>&gt; <span class="ident">parseDecimal</span>(<span class="keyword">string</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="keyword">decimal</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parseDecimal__string__value_"><div class="section_title">SOURCE</div><div class="code">
            decimal result;
            return decimal.TryParse(value, out result)
                ? Some(result)
                : None;
        </div></div></div><div class="member-title"><a name="parseDouble"></a>parseDouble(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parseDouble__string__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="keyword">double</span>&gt; <span class="ident">parseDouble</span>(<span class="keyword">string</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="keyword">double</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parseDouble__string__value_"><div class="section_title">SOURCE</div><div class="code">
            double result;
            return double.TryParse(value, out result)
                ? Some(result)
                : None;
        </div></div></div><div class="member-title"><a name="parseFloat"></a>parseFloat(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parseFloat__string__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="keyword">float</span>&gt; <span class="ident">parseFloat</span>(<span class="keyword">string</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="keyword">float</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parseFloat__string__value_"><div class="section_title">SOURCE</div><div class="code">
            float result;
            return float.TryParse(value, out result)
                ? Some(result)
                : None;
        </div></div></div><div class="member-title"><a name="parseGuid"></a>parseGuid(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parseGuid__string__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Guid</span>&gt; <span class="ident">parseGuid</span>(<span class="keyword">string</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Guid</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parseGuid__string__value_"><div class="section_title">SOURCE</div><div class="code">
            Guid result;
            return Guid.TryParse(value, out result)
                ? Some(result)
                : None;
        </div></div></div><div class="member-title"><a name="parseInt"></a>parseInt(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parseInt__string__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">parseInt</span>(<span class="keyword">string</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parseInt__string__value_"><div class="section_title">SOURCE</div><div class="code">
            int result;
            return Int32.TryParse(value, out result)
                ? Some(result)
                : None;
        </div></div></div><div class="member-title"><a name="parseInt"></a>parseInt(string, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parseInt__string__value__int__fromBase_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">string</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fromBase</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">parseInt</span>(<span class="keyword">string</span> value, <span class="keyword">int</span> fromBase)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parseInt__string__value__int__fromBase_"><div class="section_title">SOURCE</div><div class="code">
            try
            {
                return Convert.ToInt32(value, fromBase);
            }
            catch
            {
                return None;
            }
        </div></div></div><div class="member-title"><a name="parseLong"></a>parseLong(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parseLong__string__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="keyword">long</span>&gt; <span class="ident">parseLong</span>(<span class="keyword">string</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="keyword">long</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parseLong__string__value_"><div class="section_title">SOURCE</div><div class="code">
            long result;
            return Int64.TryParse(value, out result)
                ? Some(result)
                : None;
        </div></div></div><div class="member-title"><a name="parseShort"></a>parseShort(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parseShort__string__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="keyword">short</span>&gt; <span class="ident">parseShort</span>(<span class="keyword">string</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="keyword">short</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parseShort__string__value_"><div class="section_title">SOURCE</div><div class="code">
            short result;
            return Int16.TryParse(value, out result)
                ? Some(result)
                : None;
        </div></div></div><div class="member-title"><a name="parseUInt"></a>parseUInt(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parseUInt__string__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="keyword">uint</span>&gt; <span class="ident">parseUInt</span>(<span class="keyword">string</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="keyword">uint</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parseUInt__string__value_"><div class="section_title">SOURCE</div><div class="code">
            uint result;
            return UInt32.TryParse(value, out result)
                ? Some(result)
                : None;
        </div></div></div><div class="member-title"><a name="parseULong"></a>parseULong(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parseULong__string__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="keyword">ulong</span>&gt; <span class="ident">parseULong</span>(<span class="keyword">string</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="keyword">ulong</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parseULong__string__value_"><div class="section_title">SOURCE</div><div class="code">
            ulong result;
            return UInt64.TryParse(value, out result)
                ? Some(result)
                : None;
        </div></div></div><div class="member-title"><a name="parseUShort"></a>parseUShort(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-parseUShort__string__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="keyword">string</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="keyword">ushort</span>&gt; <span class="ident">parseUShort</span>(<span class="keyword">string</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="keyword">ushort</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-parseUShort__string__value_"><div class="section_title">SOURCE</div><div class="code">
            ushort result;
            return UInt16.TryParse(value, out result)
                ? Some(result)
                : None;
        </div></div></div><div class="member-title"><a name="partition&lt;L, R>"></a>partition&lt;L, R&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-partition_L_R_IEnumerable_Either&lt;L, R>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partitions a list of &#39;Either&#39; into two lists. All the &#39;Left&#39; elements are extracted, in order, to the first component of the output.  Similarly the &#39;Right&#39; elements are extracted to the second component of the output. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Either list</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">L</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">partition</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">L</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"><span >A tuple containing the an enumerable of L and an enumerable of R</span></div></div></div><div style="display:none" id="code-partition_L_R_IEnumerable_Either&lt;L, R>_self_"><div class="section_title">SOURCE</div><div class="code">
            partition&lt;MEither&lt;L, R&gt;, Either&lt;L, R&gt;, L, R&gt;(self)</div></div></div><div class="member-title"><a name="partition&lt;L, R>"></a>partition&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-partition_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partitions a list of &#39;Either&#39; into two lists. All the &#39;Left&#39; elements are extracted, in order, to the first component of the output.  Similarly the &#39;Right&#39; elements are extracted to the second component of the output. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Either list</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">L</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">partition</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">L</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"><span >A tuple containing the an enumerable of L and an enumerable of R</span></div></div></div><div style="display:none" id="code-partition_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self_"><div class="section_title">SOURCE</div><div class="code">
            partition&lt;MEitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;, L, R&gt;(self)</div></div></div><div class="member-title"><a name="pass&lt;MonoidW, W, A>"></a>pass&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, ValueTuple&lt;A, Func&lt;W, W&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-pass_MonoidW_W_A_Writer_MonoidW_W_ValueTuple&lt;A, Func&lt;W, W>>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >pass is an action that executes the monad, which returns a value and a function, and returns the value, applying the function to the output. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">W</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">pass</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">W</span>&gt;&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-pass_MonoidW_W_A_Writer_MonoidW_W_ValueTuple&lt;A, Func&lt;W, W>>_self_"><div class="section_title">SOURCE</div><div class="code">
                self.Pass()</div></div></div><div class="member-title"><a name="plus&lt;NUM, L, R>"></a>plus&lt;NUM, L, R&gt;(Either&lt;L, R&gt;, Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plus_NUM_L_R_Either_L_R_x__Either_L_R_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound values of x and y, uses an Add type-class to provide the add operation for type A.  For example x.Add&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">plus</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >An option with y added to x</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-plus_NUM_L_R_Either_L_R_x__Either_L_R_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Plus(a, b)</div></div></div><div class="member-title"><a name="plus&lt;NUM, L, R>"></a>plus&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plus_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound values of x and y, uses an Add type-class to provide the add operation for type A.  For example x.Add&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">plus</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >An option with y added to x</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-plus_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Plus(a, b)</div></div></div><div class="member-title"><a name="plus&lt;NUM, T>"></a>plus&lt;NUM, T&gt;(T?, T?)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plus_NUM_T_T__lhs__T__rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum the Some(x) of one nullable from the Some(y) of another. For numeric values the behaviour is to find the subtract between the Somes (lhs - rhs) For Lst values the behaviour is to remove items in the rhs from the lhs For Map or Set values the behaviour is to remove items in the rhs from the lhs Otherwise if the T type derives from ISubtractable then the behaviour is to call lhs.Plus(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span>? <span class="ident">plus</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">T</span>? lhs, <span class="ident">T</span>? rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>?</div><div class="normal"><span >lhs - rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-plus_NUM_T_T__lhs__T__rhs_"><div class="section_title">SOURCE</div><div class="code">
            if (!lhs.HasValue) return rhs;
            if (!rhs.HasValue) return lhs;
            return default(NUM).Plus(lhs.Value, rhs.Value);
        </div></div></div><div class="member-title"><a name="product&lt;NUM, A>"></a>product&lt;NUM, A&gt;(Tuple&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_A_Tuple_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Product of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_A_Tuple_A_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="product&lt;NUM, A>"></a>product&lt;NUM, A&gt;(Tuple&lt;A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_A_Tuple_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Product of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_A_Tuple_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).Product(self.Item1, self.Item2)</div></div></div><div class="member-title"><a name="product&lt;NUM, A>"></a>product&lt;NUM, A&gt;(Tuple&lt;A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_A_Tuple_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Product of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_A_Tuple_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).Product(self.Item1, default(NUM).Product(self.Item2, self.Item3))</div></div></div><div class="member-title"><a name="product&lt;NUM, A>"></a>product&lt;NUM, A&gt;(Tuple&lt;A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_A_Tuple_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Product of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_A_Tuple_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.product&lt;NUM, FoldTuple&lt;A&gt;, Tuple&lt;A, A, A, A&gt;, A&gt;(self)</div></div></div><div class="member-title"><a name="product&lt;NUM, A>"></a>product&lt;NUM, A&gt;(Tuple&lt;A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_A_Tuple_A_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Product of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_A_Tuple_A_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.product&lt;NUM, FoldTuple&lt;A&gt;, Tuple&lt;A, A, A, A, A&gt;, A&gt;(self)</div></div></div><div class="member-title"><a name="product&lt;NUM, A>"></a>product&lt;NUM, A&gt;(Tuple&lt;A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_A_Tuple_A_A_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Product of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_A_Tuple_A_A_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.product&lt;NUM, FoldTuple&lt;A&gt;, Tuple&lt;A, A, A, A, A, A&gt;, A&gt;(self)</div></div></div><div class="member-title"><a name="product&lt;NUM, A>"></a>product&lt;NUM, A&gt;(Tuple&lt;A, A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_A_Tuple_A_A_A_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Product of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_A_Tuple_A_A_A_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.product&lt;NUM, FoldTuple&lt;A&gt;, Tuple&lt;A, A, A, A, A, A, A&gt;, A&gt;(self)</div></div></div><div class="member-title"><a name="product&lt;NUM, A>"></a>product&lt;NUM, A&gt;(ValueTuple&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_A_ValueTuple_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Product of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_A_ValueTuple_A_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="product&lt;NUM, A>"></a>product&lt;NUM, A&gt;(ValueTuple&lt;A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_A_ValueTuple_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Product of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_A_ValueTuple_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).Product(self.Item1, self.Item2)</div></div></div><div class="member-title"><a name="product&lt;NUM, A>"></a>product&lt;NUM, A&gt;(ValueTuple&lt;A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_A_ValueTuple_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Product of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_A_ValueTuple_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).Product(self.Item1, default(NUM).Product(self.Item2, self.Item3))</div></div></div><div class="member-title"><a name="product&lt;NUM, A>"></a>product&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_A_ValueTuple_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Product of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_A_ValueTuple_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.product&lt;NUM, FoldTuple&lt;A&gt;, (A, A, A, A), A&gt;(self)</div></div></div><div class="member-title"><a name="product&lt;NUM, A>"></a>product&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_A_ValueTuple_A_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Product of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_A_ValueTuple_A_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.product&lt;NUM, FoldTuple&lt;A&gt;, (A, A, A, A, A), A&gt;(self)</div></div></div><div class="member-title"><a name="product&lt;NUM, A>"></a>product&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_A_ValueTuple_A_A_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Product of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_A_ValueTuple_A_A_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.product&lt;NUM, FoldTuple&lt;A&gt;, (A, A, A, A, A, A), A&gt;(self)</div></div></div><div class="member-title"><a name="product&lt;NUM, A>"></a>product&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_A_ValueTuple_A_A_A_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Product of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_A_ValueTuple_A_A_A_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.product&lt;NUM, FoldTuple&lt;A&gt;, (A, A, A, A, A, A, A), A&gt;(self)</div></div></div><div class="member-title"><a name="product&lt;NUM, L, R>"></a>product&lt;NUM, L, R&gt;(Either&lt;L, R&gt;, Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_L_R_Either_L_R_x__Either_L_R_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product between the two bound values of x and y, uses a Product type-class  to provide the product operation for type A.  For example x.Product&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >An option with the product of x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-product_NUM_L_R_Either_L_R_x__Either_L_R_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Product(a, b)</div></div></div><div class="member-title"><a name="product&lt;NUM, L, R>"></a>product&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product between the two bound values of x and y, uses a Product type-class  to provide the product operation for type A.  For example x.Product&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >An option with the product of x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-product_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Product(a, b)</div></div></div><div class="member-title"><a name="product&lt;NUM, T>"></a>product&lt;NUM, T&gt;(T?, T?)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_T_T__lhs__T__rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product of the Somes. For numeric values the behaviour is to multiply the Somes (lhs * rhs) For Lst values the behaviour is to multiply all combinations of values in both lists  to produce a new list Otherwise if the T type derives from IMultiplicable then the behaviour is to call lhs.Product(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span>? <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">T</span>? lhs, <span class="ident">T</span>? rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>?</div><div class="normal"><span >lhs * rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-product_NUM_T_T__lhs__T__rhs_"><div class="section_title">SOURCE</div><div class="code">
            if (!lhs.HasValue) return lhs;  // zero * rhs = zero
            if (!rhs.HasValue) return rhs;  // lhs * zero = zero
            return default(NUM).Product(lhs.Value, rhs.Value);
        </div></div></div><div class="member-title"><a name="product&lt;NUM, T>"></a>product&lt;NUM, T&gt;(Option&lt;T&gt;, Option&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_T_Option_T_lhs__Option_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-product_NUM_T_Option_T_lhs__Option_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Product&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="product&lt;NUM, T>"></a>product&lt;NUM, T&gt;(OptionUnsafe&lt;T&gt;, OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_T_OptionUnsafe_T_lhs__OptionUnsafe_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-product_NUM_T_OptionUnsafe_T_lhs__OptionUnsafe_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Product&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="product&lt;NUM, T>"></a>product&lt;NUM, T&gt;(Try&lt;T&gt;, Try&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_T_Try_T_lhs__Try_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product of Try(x) and Try(y).  If either of the Trys throw then the result is Fail For numeric values the behaviour is to multiply the Trys (lhs * rhs) For Lst values the behaviour is to multiply all combinations of values in both lists  to produce a new list Otherwise if the R type derives from IMultiplicable then the behaviour is to call lhs.Multiply(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs * rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-product_NUM_T_Try_T_lhs__Try_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Product&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="product&lt;NUM, T>"></a>product&lt;NUM, T&gt;(TryAsync&lt;T&gt;, TryAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_T_TryAsync_T_lhs__TryAsync_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product of TryAsync(x) and TryAsync(y).  If either of the Trys throw then the result is Fail For numeric values the behaviour is to multiply the Trys (lhs * rhs) For Lst values the behaviour is to multiply all combinations of values in both lists  to produce a new list Otherwise if the R type derives from IMultiplicable then the behaviour is to call lhs.Multiply(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs * rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-product_NUM_T_TryAsync_T_lhs__TryAsync_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Product&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="product&lt;NUM, T>"></a>product&lt;NUM, T&gt;(TryOption&lt;T&gt;, TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_T_TryOption_T_lhs__TryOption_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product of Try(x) and Try(y).  If either of the Trys throw then the result is Fail For numeric values the behaviour is to multiply the Trys (lhs * rhs) For Lst values the behaviour is to multiply all combinations of values in both lists  to produce a new list Otherwise if the R type derives from IMultiplicable then the behaviour is to call lhs.Multiply(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs * rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-product_NUM_T_TryOption_T_lhs__TryOption_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Product&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="product&lt;NUM, T>"></a>product&lt;NUM, T&gt;(TryOptionAsync&lt;T&gt;, TryOptionAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_T_TryOptionAsync_T_lhs__TryOptionAsync_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product of TryOptionAsync(x) and TryOptionAsync(y).  If either of the Trys throw then the result is Fail For numeric values the behaviour is to multiply the Trys (lhs * rhs) For Lst values the behaviour is to multiply all combinations of values in both lists  to produce a new list Otherwise if the R type derives from IMultiplicable then the behaviour is to call lhs.Multiply(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs * rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-product_NUM_T_TryOptionAsync_T_lhs__TryOptionAsync_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Product&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="product&lt;NUMTYPE, NUM, A, PRED>"></a>product&lt;NUMTYPE, NUM, A, PRED&gt;(NumType&lt;NUMTYPE, NUM, A, PRED&gt;, NUMTYPE)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUMTYPE_NUM_A_PRED_NumType_NUMTYPE_NUM_A_PRED_x__NUMTYPE__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product between the two bound values of x and y, uses a Product type-class  to provide the product operation for type A.  For example x.Product&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">NUMTYPE</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NUMTYPE</span> <span class="ident">product</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; x, <span class="ident">NUMTYPE</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NUMTYPE</span></div><div class="normal"><span >Product of x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-product_NUMTYPE_NUM_A_PRED_NumType_NUMTYPE_NUM_A_PRED_x__NUMTYPE__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Product(a, b)</div></div></div><div class="member-title"><a name="product&lt;NUMTYPE, NUM, A>"></a>product&lt;NUMTYPE, NUM, A&gt;(NumType&lt;NUMTYPE, NUM, A&gt;, NUMTYPE)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUMTYPE_NUM_A_NumType_NUMTYPE_NUM_A_x__NUMTYPE__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product between the two bound values of x and y, uses a Product type-class  to provide the product operation for type A.  For example x.Product&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">NUMTYPE</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NUMTYPE</span> <span class="ident">product</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt; x, <span class="ident">NUMTYPE</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NUMTYPE</span></div><div class="normal"><span >Product of x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUMTYPE_NUM_A_NumType_NUMTYPE_NUM_A_x__NUMTYPE__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Product(a, b)</div></div></div><div class="member-title"><a name="product&lt;SELF, FLOAT, A, PRED>"></a>product&lt;SELF, FLOAT, A, PRED&gt;(FloatType&lt;SELF, FLOAT, A, PRED&gt;, SELF)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_SELF_FLOAT_A_PRED_FloatType_SELF_FLOAT_A_PRED_x__SELF__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product between the two bound values of x and y, uses a Product type-class  to provide the product operation for type A.  For example x.Product&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">SELF</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SELF</span> <span class="ident">product</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; x, <span class="ident">SELF</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SELF</span></div><div class="normal"><span >Product of x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-product_SELF_FLOAT_A_PRED_FloatType_SELF_FLOAT_A_PRED_x__SELF__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(FLOAT).Product(a, b)</div></div></div><div class="member-title"><a name="product&lt;SELF, FLOAT, A>"></a>product&lt;SELF, FLOAT, A&gt;(FloatType&lt;SELF, FLOAT, A&gt;, SELF)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_SELF_FLOAT_A_FloatType_SELF_FLOAT_A_x__SELF__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product between the two bound values of x and y, uses a Product type-class  to provide the product operation for type A.  For example x.Product&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">SELF</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SELF</span> <span class="ident">product</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt; x, <span class="ident">SELF</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SELF</span></div><div class="normal"><span >Product of x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_SELF_FLOAT_A_FloatType_SELF_FLOAT_A_x__SELF__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(FLOAT).Product(a, b)</div></div></div><div class="member-title"><a name="put&lt;S>"></a>put&lt;S&gt;(S)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-put_S_S__state_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Set the state  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>&gt; <span class="ident">put</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">S</span> state)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >State monad with state set and with a Unit value</span></div></div></div><div style="display:none" id="code-put_S_S__state_"><div class="section_title">SOURCE</div><div class="code">
            default(MState&lt;S, Unit&gt;).Put(state)</div></div></div><div class="member-title"><a name="quadFold&lt;A, B, C, D, S>"></a>quadFold&lt;A, B, C, D, S&gt;(Tuple&lt;A, B, C, D&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-quadFold_A_B_C_D_S_Tuple_A_B_C_D_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Quad-fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">quadFold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; fourthFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-quadFold_A_B_C_D_S_Tuple_A_B_C_D_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold_"><div class="section_title">SOURCE</div><div class="code">
            fourthFold(thirdFold(secondFold(firstFold(state, self.Item1), self.Item2), self.Item3), self.Item4)</div></div></div><div class="member-title"><a name="quadFold&lt;A, B, C, D, S>"></a>quadFold&lt;A, B, C, D, S&gt;(ValueTuple&lt;A, B, C, D&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-quadFold_A_B_C_D_S_ValueTuple_A_B_C_D_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Quad-fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">quadFold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; fourthFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-quadFold_A_B_C_D_S_ValueTuple_A_B_C_D_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold_"><div class="section_title">SOURCE</div><div class="code">
            fourthFold(thirdFold(secondFold(firstFold(state, self.Item1), self.Item2), self.Item3), self.Item4)</div></div></div><div class="member-title"><a name="quadFoldBack&lt;A, B, C, D, S>"></a>quadFoldBack&lt;A, B, C, D, S&gt;(Tuple&lt;A, B, C, D&gt;, S, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-quadFoldBack_A_B_C_D_S_Tuple_A_B_C_D_self__S__state__Func_S_D_S_firstFold__Func_S_C_S_secondFold__Func_S_B_S_thirdFold__Func_S_A_S_fourthFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Quad-fold back </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">quadFoldBack</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; fourthFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-quadFoldBack_A_B_C_D_S_Tuple_A_B_C_D_self__S__state__Func_S_D_S_firstFold__Func_S_C_S_secondFold__Func_S_B_S_thirdFold__Func_S_A_S_fourthFold_"><div class="section_title">SOURCE</div><div class="code">
            fourthFold(thirdFold(secondFold(firstFold(state, self.Item4), self.Item3), self.Item2), self.Item1)</div></div></div><div class="member-title"><a name="quadFoldBack&lt;A, B, C, D, S>"></a>quadFoldBack&lt;A, B, C, D, S&gt;(ValueTuple&lt;A, B, C, D&gt;, S, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-quadFoldBack_A_B_C_D_S_ValueTuple_A_B_C_D_self__S__state__Func_S_D_S_firstFold__Func_S_C_S_secondFold__Func_S_B_S_thirdFold__Func_S_A_S_fourthFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Quad-fold back </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">quadFoldBack</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; fourthFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-quadFoldBack_A_B_C_D_S_ValueTuple_A_B_C_D_self__S__state__Func_S_D_S_firstFold__Func_S_C_S_secondFold__Func_S_B_S_thirdFold__Func_S_A_S_fourthFold_"><div class="section_title">SOURCE</div><div class="code">
            fourthFold(thirdFold(secondFold(firstFold(state, self.Item4), self.Item3), self.Item2), self.Item1)</div></div></div><div class="member-title"><a name="query&lt;T>"></a>query&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-query_T_T__items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a queryable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Query&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IQueryable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">query</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IQueryable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-query_T_T__items_"><div class="section_title">SOURCE</div><div class="code">
            toQuery(items)</div></div></div><div class="member-title"><a name="Query&lt;T>"></a>Query&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Query_T_T__items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a queryable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IQueryable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Query</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IQueryable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Query_T_T__items_"><div class="section_title">SOURCE</div><div class="code">
            toQuery(items)</div></div></div><div class="member-title"><a name="Queue&lt;T>"></a>Queue&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Queue_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable queue </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Que</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Queue</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Que</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Queue_T_"><div class="section_title">SOURCE</div><div class="code">
            Que&lt;T&gt;.Empty</div></div></div><div class="member-title"><a name="Queue&lt;T>"></a>Queue&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Queue_T_T__items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable queue </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Que</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Queue</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Que</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Queue_T_T__items_"><div class="section_title">SOURCE</div><div class="code">
            var q = new QueInternal&lt;T&gt;();
            foreach (var item in items)
            {
                q = q.Enqueue(item);
            }
            return new Que&lt;T&gt;(q);
        </div></div></div><div class="member-title"><a name="quintFold&lt;A, B, C, D, E, S>"></a>quintFold&lt;A, B, C, D, E, S&gt;(Tuple&lt;A, B, C, D, E&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, E, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-quintFold_A_B_C_D_E_S_Tuple_A_B_C_D_E_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold__Func_S_E_S_fifthFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">quintFold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; fourthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt; fifthFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-quintFold_A_B_C_D_E_S_Tuple_A_B_C_D_E_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold__Func_S_E_S_fifthFold_"><div class="section_title">SOURCE</div><div class="code">
            fifthFold(fourthFold(thirdFold(secondFold(firstFold(state, self.Item1), self.Item2), self.Item3), self.Item4), self.Item5)</div></div></div><div class="member-title"><a name="quintFold&lt;A, B, C, D, E, S>"></a>quintFold&lt;A, B, C, D, E, S&gt;(ValueTuple&lt;A, B, C, D, E&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, E, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-quintFold_A_B_C_D_E_S_ValueTuple_A_B_C_D_E_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold__Func_S_E_S_fifthFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">quintFold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; fourthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt; fifthFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-quintFold_A_B_C_D_E_S_ValueTuple_A_B_C_D_E_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold__Func_S_E_S_fifthFold_"><div class="section_title">SOURCE</div><div class="code">
            fifthFold(fourthFold(thirdFold(secondFold(firstFold(state, self.Item1), self.Item2), self.Item3), self.Item4), self.Item5)</div></div></div><div class="member-title"><a name="quintFoldBack&lt;A, B, C, D, E, S>"></a>quintFoldBack&lt;A, B, C, D, E, S&gt;(Tuple&lt;A, B, C, D, E&gt;, S, Func&lt;S, E, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-quintFoldBack_A_B_C_D_E_S_Tuple_A_B_C_D_E_self__S__state__Func_S_E_S_firstFold__Func_S_D_S_secondFold__Func_S_C_S_thirdFold__Func_S_B_S_fourthFold__Func_S_A_S_fifthFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold back </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">quintFoldBack</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; fourthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; fifthFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-quintFoldBack_A_B_C_D_E_S_Tuple_A_B_C_D_E_self__S__state__Func_S_E_S_firstFold__Func_S_D_S_secondFold__Func_S_C_S_thirdFold__Func_S_B_S_fourthFold__Func_S_A_S_fifthFold_"><div class="section_title">SOURCE</div><div class="code">
            fifthFold(fourthFold(thirdFold(secondFold(firstFold(state, self.Item5), self.Item4), self.Item3), self.Item2), self.Item1)</div></div></div><div class="member-title"><a name="quintFoldBack&lt;A, B, C, D, E, S>"></a>quintFoldBack&lt;A, B, C, D, E, S&gt;(ValueTuple&lt;A, B, C, D, E&gt;, S, Func&lt;S, E, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-quintFoldBack_A_B_C_D_E_S_ValueTuple_A_B_C_D_E_self__S__state__Func_S_E_S_firstFold__Func_S_D_S_secondFold__Func_S_C_S_thirdFold__Func_S_B_S_fourthFold__Func_S_A_S_fifthFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold back </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">quintFoldBack</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; fourthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; fifthFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-quintFoldBack_A_B_C_D_E_S_ValueTuple_A_B_C_D_E_self__S__state__Func_S_E_S_firstFold__Func_S_D_S_secondFold__Func_S_C_S_thirdFold__Func_S_B_S_fourthFold__Func_S_A_S_fifthFold_"><div class="section_title">SOURCE</div><div class="code">
            fifthFold(fourthFold(thirdFold(secondFold(firstFold(state, self.Item5), self.Item4), self.Item3), self.Item2), self.Item1)</div></div></div><div class="member-title"><a name="raise&lt;R>"></a>raise&lt;R&gt;(Exception)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-raise_R_Exception__ex_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Raise an exception </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ex</div><div class="arg-type"><span class="ident">Exception</span></div></div><div class="arg-desc"><span >Exception to throw</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">raise</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Exception</span> ex)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Throws an exception</span></div></div></div><div style="display:none" id="code-raise_R_Exception__ex_"><div class="section_title">SOURCE</div><div class="code">
            throw ex;
        </div></div></div><div class="member-title"><a name="raiseapp&lt;R>"></a>raiseapp&lt;R&gt;(string)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-raiseapp_R_string__message_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Raises an ApplicationException with the message provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">message</div><div class="arg-type"><span class="keyword">string</span></div></div><div class="arg-desc"><span >ApplicationException message</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">raiseapp</span>&lt;<span class="ident">R</span>&gt;(<span class="keyword">string</span> message)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Throws an ApplicationException</span></div></div></div><div style="display:none" id="code-raiseapp_R_string__message_"><div class="section_title">SOURCE</div><div class="code">
            throw new ApplicationException(message);
        </div></div></div><div class="member-title"><a name="random"></a>random(int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-random__int__max_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Thread-safe cryptographically strong random number generator </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">max</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc"><span >Maximum value to return + 1</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">random</span>(<span class="keyword">int</span> max)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >A non-negative random number, less than the value specified.</span></div></div></div><div style="display:none" id="code-random__int__max_"><div class="section_title">SOURCE</div><div class="code">
            lock (rnd)
            {
                rnd.GetBytes(inttarget);
                return Math.Abs(BitConverter.ToInt32(inttarget, 0)) % max;
            }
        </div></div></div><div class="member-title"><a name="randomBase64"></a>randomBase64(int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-randomBase64__int__bytesCount_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Thread-safe cryptographically strong random base-64 string generator </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">bytesCount</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="ident">randomBase64</span>(<span class="keyword">int</span> bytesCount)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">string</span></div><div class="normal"><span >Base64 encoded random string</span></div></div></div><div style="display:none" id="code-randomBase64__int__bytesCount_"><div class="section_title">SOURCE</div><div class="code">
            if (bytesCount &lt; 1) throw new ArgumentException($&quot;The minimum value for {nameof(bytesCount)} is 1&quot;);

            var bytes = new byte[bytesCount];
            rnd.GetBytes(bytes);
            return Convert.ToBase64String(bytes);
        </div></div></div><div class="member-title"><a name="Range"></a>Range(int, int, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Range__int__from__int__count__int__step_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lazily generate a range of integers.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">from</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">count</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">step</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">Range</span>(<span class="keyword">int</span> from, <span class="keyword">int</span> count, <span class="keyword">int</span> step = 1)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Range__int__from__int__count__int__step_"><div class="section_title">SOURCE</div><div class="code">
            IntegerRange.FromCount(from, count, step)</div></div></div><div class="member-title"><a name="Range"></a>Range(char, char)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Range__char__from__char__to_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lazily generate a range of chars.  <br/><br/>   Remarks:<div class='code-line'>     Can go in a positive direction (&#39;a&#39;..&#39;z&#39;) as well as negative (&#39;z&#39;..&#39;a&#39;)</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">from</div><div class="arg-type"><span class="keyword">char</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">to</div><div class="arg-type"><span class="keyword">char</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt; <span class="ident">Range</span>(<span class="keyword">char</span> from, <span class="keyword">char</span> to)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Range__char__from__char__to_"><div class="section_title">SOURCE</div><div class="code">
            CharRange.FromMinMax(from, to)</div></div></div><div class="member-title"><a name="Range"></a>Range(IEnumerable&lt;int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Range__IEnumerable_int_ranges_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lazily generate integers from any number of provided ranges </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ranges</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="keyword">int</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">Range</span>(<span class="ident">IEnumerable</span>&lt;<span class="keyword">int</span>&gt; ranges)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Range__IEnumerable_int_ranges_"><div class="section_title">SOURCE</div><div class="code">
            from range in ranges
            from i in range
            select i</div></div></div><div class="member-title"><a name="Range"></a>Range(IEnumerable&lt;char&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Range__IEnumerable_char_ranges_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lazily generate chars from any number of provided ranges </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ranges</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt; <span class="ident">Range</span>(<span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt; ranges)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="keyword">char</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Range__IEnumerable_char_ranges_"><div class="section_title">SOURCE</div><div class="code">
            from range in ranges
            from c in range
            select c</div></div></div><div class="member-title"><a name="Reader&lt;Env, A>"></a>Reader&lt;Env, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Reader_Env_A_A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reader monad constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc"><span >Wrapped value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt; <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;</div><div class="normal"><span >Reader monad</span></div></div></div><div style="display:none" id="code-Reader_Env_A_A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(MReader&lt;Env, A&gt;).Return(_ =&gt; value)</div></div></div><div class="member-title"><a name="Reader&lt;Env, A>"></a>Reader&lt;Env, A&gt;(Func&lt;Env, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Reader_Env_A_Func_Env_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reader monad constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt; <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;</div><div class="normal"><span >Reader monad</span></div></div></div><div style="display:none" id="code-Reader_Env_A_Func_Env_A_f_"><div class="section_title">SOURCE</div><div class="code">
            default(MReader&lt;Env, A&gt;).Return(f)</div></div></div><div class="member-title"><a name="Right&lt;L, R>"></a>Right&lt;L, R&gt;(R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Right_L_R_R__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Either constructor Constructs an Either in a Right state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Right value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">Right</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">R</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >A new Either instance</span></div></div></div><div style="display:none" id="code-Right_L_R_R__value_"><div class="section_title">SOURCE</div><div class="code">
            Either&lt;L, R&gt;.Right(value)</div></div></div><div class="member-title"><a name="Right&lt;L, R>"></a>Right&lt;L, R&gt;(R?)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Right_L_R_R__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Either constructor from Nullable Constructs an Either in a Right state or throws a ValueIsNullException if the value is null </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">R</span>?</div></div><div class="arg-desc"><span >Right value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">Right</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">R</span>? value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >A new Either instance</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">R</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-Right_L_R_R__value_"><div class="section_title">SOURCE</div><div class="code">
            isnull(value)
                ? raise&lt;Either&lt;L, R&gt;&gt;(new ValueIsNullException())
                : Either&lt;L, R&gt;.Right(value.Value)</div></div></div><div class="member-title"><a name="rights&lt;L, R>"></a>rights&lt;L, R&gt;(IEnumerable&lt;Either&lt;L, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-rights_L_R_IEnumerable_Either&lt;L, R>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Extracts from a list of &#39;Either&#39; all the &#39;Right&#39; elements. All the &#39;Right&#39; elements are extracted in order. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Either list</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">rights</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >An enumerable of L</span></div></div></div><div style="display:none" id="code-rights_L_R_IEnumerable_Either&lt;L, R>_self_"><div class="section_title">SOURCE</div><div class="code">
            choice2s&lt;MEither&lt;L, R&gt;, Either&lt;L, R&gt;, L, R&gt;(self)</div></div></div><div class="member-title"><a name="rights&lt;L, R>"></a>rights&lt;L, R&gt;(IEnumerable&lt;EitherUnsafe&lt;L, R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-rights_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Extracts from a list of &#39;Either&#39; all the &#39;Right&#39; elements. All the &#39;Right&#39; elements are extracted in order. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Either list</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">rights</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >An enumerable of L</span></div></div></div><div style="display:none" id="code-rights_L_R_IEnumerable_EitherUnsafe&lt;L, R>_self_"><div class="section_title">SOURCE</div><div class="code">
            choice2s&lt;MEitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;, L, R&gt;(self)</div></div></div><div class="member-title"><a name="rightToArray&lt;L, R>"></a>rightToArray&lt;L, R&gt;(Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-rightToArray_L_R_Either_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into an ImmutableArray R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">R</span>&gt; <span class="ident">rightToArray</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</span></div></div></div><div style="display:none" id="code-rightToArray_L_R_Either_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.RightToArray()</div></div></div><div class="member-title"><a name="rightToArray&lt;L, R>"></a>rightToArray&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-rightToArray_L_R_EitherUnsafe_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into an ImmutableArray R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">R</span>&gt; <span class="ident">rightToArray</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</span></div></div></div><div style="display:none" id="code-rightToArray_L_R_EitherUnsafe_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.RightToArray()</div></div></div><div class="member-title"><a name="rightToList&lt;L, R>"></a>rightToList&lt;L, R&gt;(Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-rightToList_L_R_Either_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into a Lst R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt; <span class="ident">rightToList</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</span></div></div></div><div style="display:none" id="code-rightToList_L_R_Either_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.RightToList()</div></div></div><div class="member-title"><a name="rightToList&lt;L, R>"></a>rightToList&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-rightToList_L_R_EitherUnsafe_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into a Lst R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt; <span class="ident">rightToList</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</span></div></div></div><div style="display:none" id="code-rightToList_L_R_EitherUnsafe_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.RightToList()</div></div></div><div class="member-title"><a name="rightToQuery&lt;L, R>"></a>rightToQuery&lt;L, R&gt;(Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-rightToQuery_L_R_Either_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into an IQueryable of R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IQueryable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">rightToQuery</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IQueryable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, an IQueryable of R with one item.  A zero length IQueryable R otherwise</span></div></div></div><div style="display:none" id="code-rightToQuery_L_R_Either_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.RightAsEnumerable().AsQueryable()</div></div></div><div class="member-title"><a name="rightToQuery&lt;L, R>"></a>rightToQuery&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-rightToQuery_L_R_EitherUnsafe_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into an IQueryable of R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IQueryable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">rightToQuery</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IQueryable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, an IQueryable of R with one item.  A zero length IQueryable R otherwise</span></div></div></div><div style="display:none" id="code-rightToQuery_L_R_EitherUnsafe_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.RightAsEnumerable().AsQueryable()</div></div></div><div class="member-title"><a name="RightUnsafe&lt;L, R>"></a>RightUnsafe&lt;L, R&gt;(R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-RightUnsafe_L_R_R__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Either constructor Constructs an Either in a Right state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Right value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">RightUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">R</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >A new Either instance</span></div></div></div><div style="display:none" id="code-RightUnsafe_L_R_R__value_"><div class="section_title">SOURCE</div><div class="code">
            EitherUnsafe&lt;L, R&gt;.Right(value)</div></div></div><div class="member-title"><a name="septFold&lt;A, B, C, D, E, F, G, S>"></a>septFold&lt;A, B, C, D, E, F, G, S&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, F, S&gt;, Func&lt;S, G, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-septFold_A_B_C_D_E_F_G_S_Tuple_A_B_C_D_E_F_G_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold__Func_S_E_S_fifthFold__Func_S_F_S_sixthFold__Func_S_G_S_seventhFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">seventhFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">septFold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; fourthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt; fifthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt; sixthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt; seventhFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-septFold_A_B_C_D_E_F_G_S_Tuple_A_B_C_D_E_F_G_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold__Func_S_E_S_fifthFold__Func_S_F_S_sixthFold__Func_S_G_S_seventhFold_"><div class="section_title">SOURCE</div><div class="code">
            seventhFold(sixthFold(fifthFold(fourthFold(thirdFold(secondFold(firstFold(state, self.Item1), self.Item2), self.Item3), self.Item4), self.Item5), self.Item6), self.Item7)</div></div></div><div class="member-title"><a name="septFold&lt;A, B, C, D, E, F, G, S>"></a>septFold&lt;A, B, C, D, E, F, G, S&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, F, S&gt;, Func&lt;S, G, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-septFold_A_B_C_D_E_F_G_S_ValueTuple_A_B_C_D_E_F_G_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold__Func_S_E_S_fifthFold__Func_S_F_S_sixthFold__Func_S_G_S_seventhFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">seventhFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">septFold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; fourthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt; fifthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt; sixthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt; seventhFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-septFold_A_B_C_D_E_F_G_S_ValueTuple_A_B_C_D_E_F_G_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold__Func_S_E_S_fifthFold__Func_S_F_S_sixthFold__Func_S_G_S_seventhFold_"><div class="section_title">SOURCE</div><div class="code">
            seventhFold(sixthFold(fifthFold(fourthFold(thirdFold(secondFold(firstFold(state, self.Item1), self.Item2), self.Item3), self.Item4), self.Item5), self.Item6), self.Item7)</div></div></div><div class="member-title"><a name="septFoldBack&lt;A, B, C, D, E, F, G, S>"></a>septFoldBack&lt;A, B, C, D, E, F, G, S&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;, S, Func&lt;S, G, S&gt;, Func&lt;S, F, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-septFoldBack_A_B_C_D_E_F_G_S_Tuple_A_B_C_D_E_F_G_self__S__state__Func_S_G_S_firstFold__Func_S_F_S_secondFold__Func_S_E_S_thirdFold__Func_S_D_S_fourthFold__Func_S_C_S_fifthFold__Func_S_B_S_sixthFold__Func_S_A_S_seventhFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold back </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">seventhFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">septFoldBack</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; fourthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; fifthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; sixthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; seventhFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-septFoldBack_A_B_C_D_E_F_G_S_Tuple_A_B_C_D_E_F_G_self__S__state__Func_S_G_S_firstFold__Func_S_F_S_secondFold__Func_S_E_S_thirdFold__Func_S_D_S_fourthFold__Func_S_C_S_fifthFold__Func_S_B_S_sixthFold__Func_S_A_S_seventhFold_"><div class="section_title">SOURCE</div><div class="code">
            seventhFold(sixthFold(fifthFold(fourthFold(thirdFold(secondFold(firstFold(state, self.Item7), self.Item6), self.Item5), self.Item4), self.Item3), self.Item2), self.Item1)</div></div></div><div class="member-title"><a name="septFoldBack&lt;A, B, C, D, E, F, G, S>"></a>septFoldBack&lt;A, B, C, D, E, F, G, S&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;, S, Func&lt;S, G, S&gt;, Func&lt;S, F, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-septFoldBack_A_B_C_D_E_F_G_S_ValueTuple_A_B_C_D_E_F_G_self__S__state__Func_S_G_S_firstFold__Func_S_F_S_secondFold__Func_S_E_S_thirdFold__Func_S_D_S_fourthFold__Func_S_C_S_fifthFold__Func_S_B_S_sixthFold__Func_S_A_S_seventhFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold back </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">seventhFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">septFoldBack</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">G</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; fourthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; fifthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; sixthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; seventhFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-septFoldBack_A_B_C_D_E_F_G_S_ValueTuple_A_B_C_D_E_F_G_self__S__state__Func_S_G_S_firstFold__Func_S_F_S_secondFold__Func_S_E_S_thirdFold__Func_S_D_S_fourthFold__Func_S_C_S_fifthFold__Func_S_B_S_sixthFold__Func_S_A_S_seventhFold_"><div class="section_title">SOURCE</div><div class="code">
            seventhFold(sixthFold(fifthFold(fourthFold(thirdFold(secondFold(firstFold(state, self.Item7), self.Item6), self.Item5), self.Item4), self.Item3), self.Item2), self.Item1)</div></div></div><div class="member-title"><a name="seq&lt;L, T>"></a>seq&lt;L, T&gt;(Either&lt;L, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_L_T_Either_L_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert an either to an enumerable<div class='code-line'>     Right(x) : [x]</div><div class='code-line'>     Left(y)  : []</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_L_T_Either_L_T_value_"><div class="section_title">SOURCE</div><div class="code">
            value.RightAsEnumerable()</div></div></div><div class="member-title"><a name="seq&lt;L, T>"></a>seq&lt;L, T&gt;(EitherUnsafe&lt;L, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_L_T_EitherUnsafe_L_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert an either to an enumerable<div class='code-line'>     Right(x) : [x]</div><div class='code-line'>     Left(y)  : []</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_L_T_EitherUnsafe_L_T_value_"><div class="section_title">SOURCE</div><div class="code">
            value.RightAsEnumerable()</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(T?)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a nullable to an enumerable<div class='code-line'>     HasValue == true  : [x]</div><div class='code-line'>     HasValue == false : []</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span>?</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-seq_T_T__value_"><div class="section_title">SOURCE</div><div class="code">
            value.AsEnumerable()</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_IEnumerable_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert an Enumerable to an Enumerable Deals with <span class='code-inline'>value == null</span> by returning <span class='code-inline'>[]</span> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_IEnumerable_T_value_"><div class="section_title">SOURCE</div><div class="code">
            value?.AsEnumerable() ?? new T[0]</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(Option&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_Option_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert an option to an enumerable<div class='code-line'>     Some(x) : [x]</div><div class='code-line'>     None    : []</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_Option_T_value_"><div class="section_title">SOURCE</div><div class="code">
            value.AsEnumerable()</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_OptionUnsafe_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert an option to an enumerable<div class='code-line'>     Some(x) : [x]</div><div class='code-line'>     None    : []</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_OptionUnsafe_T_value_"><div class="section_title">SOURCE</div><div class="code">
            value.AsEnumerable()</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(Try&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_Try_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a Try to an enumerable<div class='code-line'>     Succ(x) : [x]</div><div class='code-line'>     Fail(e) : []</div><div class='code-line'>     null    : []</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_Try_T_value_"><div class="section_title">SOURCE</div><div class="code">
            value?.AsEnumerable() ?? new T[0]</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_TryOption_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a TryOption to an enumerable<div class='code-line'>     Succ(x) : [x]</div><div class='code-line'>     Fail(e) : []</div><div class='code-line'>     None    : []</div><div class='code-line'>     null    : []</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_TryOption_T_value_"><div class="section_title">SOURCE</div><div class="code">
            value?.AsEnumerable() ?? new T[0]</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(TryAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_TryAsync_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a TryOption to an enumerable<div class='code-line'>     Succ(x) : [x]</div><div class='code-line'>     Fail(e) : []</div><div class='code-line'>     None    : []</div><div class='code-line'>     null    : []</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_TryAsync_T_value_"><div class="section_title">SOURCE</div><div class="code">
            value?.AsEnumerable() ?? Task.FromResult(new T[0].AsEnumerable())</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(TryOptionAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_TryOptionAsync_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a TryOption to an enumerable<div class='code-line'>     Succ(x) : [x]</div><div class='code-line'>     Fail(e) : []</div><div class='code-line'>     None    : []</div><div class='code-line'>     null    : []</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_TryOptionAsync_T_value_"><div class="section_title">SOURCE</div><div class="code">
            value?.AsEnumerable() ?? Task.FromResult(new T[0].AsEnumerable())</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(Tuple&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_Tuple_T_tup_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a tuple to an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tup</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T</span>&gt; tup)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_Tuple_T_tup_"><div class="section_title">SOURCE</div><div class="code">
            tup == null
                ? new T[0]
                : new[] { tup.Item1 }</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(Tuple&lt;T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_Tuple_T_T_tup_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a tuple to an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tup</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; tup)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_Tuple_T_T_tup_"><div class="section_title">SOURCE</div><div class="code">
            tup == null
                ? new T[0]
                : new[] { tup.Item1, tup.Item2 }</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(Tuple&lt;T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_Tuple_T_T_T_tup_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a tuple to an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tup</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; tup)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_Tuple_T_T_T_tup_"><div class="section_title">SOURCE</div><div class="code">
            tup == null
                ? new T[0]
                : new[] { tup.Item1, tup.Item2, tup.Item3 }</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(Tuple&lt;T, T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_Tuple_T_T_T_T_tup_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a tuple to an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tup</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; tup)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_Tuple_T_T_T_T_tup_"><div class="section_title">SOURCE</div><div class="code">
            tup == null
                ? new T[0]
                : new[] { tup.Item1, tup.Item2, tup.Item3, tup.Item4 }</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(Tuple&lt;T, T, T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_Tuple_T_T_T_T_T_tup_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a tuple to an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tup</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; tup)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_Tuple_T_T_T_T_T_tup_"><div class="section_title">SOURCE</div><div class="code">
            tup == null
                ? new T[0]
                : new[] { tup.Item1, tup.Item2, tup.Item3, tup.Item4, tup.Item5 }</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(Tuple&lt;T, T, T, T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_Tuple_T_T_T_T_T_T_tup_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a tuple to an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tup</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; tup)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_Tuple_T_T_T_T_T_T_tup_"><div class="section_title">SOURCE</div><div class="code">
            tup == null
                ? new T[0]
                : new[] { tup.Item1, tup.Item2, tup.Item3, tup.Item4, tup.Item5, tup.Item6 }</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(Tuple&lt;T, T, T, T, T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_Tuple_T_T_T_T_T_T_T_tup_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a tuple to an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tup</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; tup)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_Tuple_T_T_T_T_T_T_T_tup_"><div class="section_title">SOURCE</div><div class="code">
            tup == null
                ? new T[0]
                : new[] { tup.Item1, tup.Item2, tup.Item3, tup.Item4, tup.Item5, tup.Item6, tup.Item7 }</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(ValueTuple&lt;T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_ValueTuple_T_T_tup_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a tuple to an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tup</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; tup)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_ValueTuple_T_T_tup_"><div class="section_title">SOURCE</div><div class="code">
            new[] { tup.Item1, tup.Item2 }</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(ValueTuple&lt;T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_ValueTuple_T_T_T_tup_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a tuple to an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tup</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; tup)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_ValueTuple_T_T_T_tup_"><div class="section_title">SOURCE</div><div class="code">
            new[] { tup.Item1, tup.Item2, tup.Item3 }</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(ValueTuple&lt;T, T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_ValueTuple_T_T_T_T_tup_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a tuple to an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tup</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; tup)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_ValueTuple_T_T_T_T_tup_"><div class="section_title">SOURCE</div><div class="code">
            new[] { tup.Item1, tup.Item2, tup.Item3, tup.Item4 }</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(ValueTuple&lt;T, T, T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_ValueTuple_T_T_T_T_T_tup_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a tuple to an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tup</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; tup)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_ValueTuple_T_T_T_T_T_tup_"><div class="section_title">SOURCE</div><div class="code">
            new[] { tup.Item1, tup.Item2, tup.Item3, tup.Item4, tup.Item5 }</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(ValueTuple&lt;T, T, T, T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_ValueTuple_T_T_T_T_T_T_tup_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a tuple to an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tup</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; tup)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_ValueTuple_T_T_T_T_T_T_tup_"><div class="section_title">SOURCE</div><div class="code">
            new[] { tup.Item1, tup.Item2, tup.Item3, tup.Item4, tup.Item5, tup.Item6 }</div></div></div><div class="member-title"><a name="seq&lt;T>"></a>seq&lt;T&gt;(ValueTuple&lt;T, T, T, T, T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seq_T_ValueTuple_T_T_T_T_T_T_T_tup_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a tuple to an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tup</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; tup)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seq_T_ValueTuple_T_T_T_T_T_T_T_tup_"><div class="section_title">SOURCE</div><div class="code">
            new[] { tup.Item1, tup.Item2, tup.Item3, tup.Item4, tup.Item5, tup.Item6, tup.Item7 }</div></div></div><div class="member-title"><a name="seqOne&lt;T>"></a>seqOne&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-seqOne_T_T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert any value to an enumerable<div class='code-line'>     T     : [x]</div><div class='code-line'>     null  : []</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">seqOne</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-seqOne_T_T__value_"><div class="section_title">SOURCE</div><div class="code">
            value.IsNull() ? new T[0] : new T[1] { value }</div></div></div><div class="member-title"><a name="Set&lt;OrdT, T>"></a>Set&lt;OrdT, T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Set_OrdT_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable set </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-Set_OrdT_T_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Set.create&lt;OrdT, T&gt;()</div></div></div><div class="member-title"><a name="Set&lt;OrdT, T>"></a>Set&lt;OrdT, T&gt;(T, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Set_OrdT_T_T__head__T__tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">T</span> head, <span class="ident">T</span> tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-Set_OrdT_T_T__head__T__tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Set.createRange&lt;OrdT, T&gt;(head.Cons(tail))</div></div></div><div class="member-title"><a name="set&lt;T>"></a>set&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-set_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable set </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Set&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-set_T_"><div class="section_title">SOURCE</div><div class="code">
            new Set&lt;T&gt;()</div></div></div><div class="member-title"><a name="set&lt;T>"></a>set&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-set_T_T__item_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Set&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> item)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-set_T_T__item_"><div class="section_title">SOURCE</div><div class="code">
            new Set&lt;T&gt;().Add(item)</div></div></div><div class="member-title"><a name="set&lt;T>"></a>set&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-set_T_T__items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Set&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">set</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-set_T_T__items_"><div class="section_title">SOURCE</div><div class="code">
            new Set&lt;T&gt;(items)</div></div></div><div class="member-title"><a name="Set&lt;T>"></a>Set&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Set_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable set </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Set_T_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Set.create&lt;T&gt;()</div></div></div><div class="member-title"><a name="Set&lt;T>"></a>Set&lt;T&gt;(T, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Set_T_T__head__T__tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> head, <span class="ident">T</span> tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Set_T_T__head__T__tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Set.createRange(head.Cons(tail))</div></div></div><div class="member-title"><a name="sextFold&lt;A, B, C, D, E, F, S>"></a>sextFold&lt;A, B, C, D, E, F, S&gt;(Tuple&lt;A, B, C, D, E, F&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, F, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sextFold_A_B_C_D_E_F_S_Tuple_A_B_C_D_E_F_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold__Func_S_E_S_fifthFold__Func_S_F_S_sixthFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">sextFold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; fourthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt; fifthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt; sixthFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-sextFold_A_B_C_D_E_F_S_Tuple_A_B_C_D_E_F_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold__Func_S_E_S_fifthFold__Func_S_F_S_sixthFold_"><div class="section_title">SOURCE</div><div class="code">
            sixthFold(fifthFold(fourthFold(thirdFold(secondFold(firstFold(state, self.Item1), self.Item2), self.Item3), self.Item4), self.Item5), self.Item6)</div></div></div><div class="member-title"><a name="sextFold&lt;A, B, C, D, E, F, S>"></a>sextFold&lt;A, B, C, D, E, F, S&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, F, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sextFold_A_B_C_D_E_F_S_ValueTuple_A_B_C_D_E_F_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold__Func_S_E_S_fifthFold__Func_S_F_S_sixthFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">sextFold</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; fourthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt; fifthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt; sixthFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-sextFold_A_B_C_D_E_F_S_ValueTuple_A_B_C_D_E_F_self__S__state__Func_S_A_S_firstFold__Func_S_B_S_secondFold__Func_S_C_S_thirdFold__Func_S_D_S_fourthFold__Func_S_E_S_fifthFold__Func_S_F_S_sixthFold_"><div class="section_title">SOURCE</div><div class="code">
            sixthFold(fifthFold(fourthFold(thirdFold(secondFold(firstFold(state, self.Item1), self.Item2), self.Item3), self.Item4), self.Item5), self.Item6)</div></div></div><div class="member-title"><a name="sextFoldBack&lt;A, B, C, D, E, F, S>"></a>sextFoldBack&lt;A, B, C, D, E, F, S&gt;(Tuple&lt;A, B, C, D, E, F&gt;, S, Func&lt;S, F, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sextFoldBack_A_B_C_D_E_F_S_Tuple_A_B_C_D_E_F_self__S__state__Func_S_F_S_firstFold__Func_S_E_S_secondFold__Func_S_D_S_thirdFold__Func_S_C_S_fourthFold__Func_S_B_S_fifthFold__Func_S_A_S_sixthFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold back </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">sextFoldBack</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; fourthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; fifthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; sixthFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-sextFoldBack_A_B_C_D_E_F_S_Tuple_A_B_C_D_E_F_self__S__state__Func_S_F_S_firstFold__Func_S_E_S_secondFold__Func_S_D_S_thirdFold__Func_S_C_S_fourthFold__Func_S_B_S_fifthFold__Func_S_A_S_sixthFold_"><div class="section_title">SOURCE</div><div class="code">
            sixthFold(fifthFold(fourthFold(thirdFold(secondFold(firstFold(state, self.Item6), self.Item5), self.Item4), self.Item3), self.Item2), self.Item1)</div></div></div><div class="member-title"><a name="sextFoldBack&lt;A, B, C, D, E, F, S>"></a>sextFoldBack&lt;A, B, C, D, E, F, S&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;, S, Func&lt;S, F, S&gt;, Func&lt;S, E, S&gt;, Func&lt;S, D, S&gt;, Func&lt;S, C, S&gt;, Func&lt;S, B, S&gt;, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sextFoldBack_A_B_C_D_E_F_S_ValueTuple_A_B_C_D_E_F_self__S__state__Func_S_F_S_firstFold__Func_S_E_S_secondFold__Func_S_D_S_thirdFold__Func_S_C_S_fourthFold__Func_S_B_S_fifthFold__Func_S_A_S_sixthFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold back </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fourthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fifthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">sixthFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">sextFoldBack</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">F</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">E</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">D</span>, <span class="ident">S</span>&gt; thirdFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">C</span>, <span class="ident">S</span>&gt; fourthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; fifthFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; sixthFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-sextFoldBack_A_B_C_D_E_F_S_ValueTuple_A_B_C_D_E_F_self__S__state__Func_S_F_S_firstFold__Func_S_E_S_secondFold__Func_S_D_S_thirdFold__Func_S_C_S_fourthFold__Func_S_B_S_fifthFold__Func_S_A_S_sixthFold_"><div class="section_title">SOURCE</div><div class="code">
            sixthFold(fifthFold(fourthFold(thirdFold(secondFold(firstFold(state, self.Item6), self.Item5), self.Item4), self.Item3), self.Item2), self.Item1)</div></div></div><div class="member-title"><a name="Some&lt;T>"></a>Some&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Some_T_T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a Some of T (Option&lt;T&gt;) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Non-null value to be made optional</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Some</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Option&lt;T&gt; in a Some state or throws ValueIsNullException if isnull(value).</span></div></div></div><div style="display:none" id="code-Some_T_T__value_"><div class="section_title">SOURCE</div><div class="code">
            isnull(value)
                ? raise&lt;Option&lt;T&gt;&gt;(new ValueIsNullException())
                : MOption&lt;T&gt;.Inst.Return(value)</div></div></div><div class="member-title"><a name="Some&lt;T>"></a>Some&lt;T&gt;(T?)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Some_T_T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a Some of T from a Nullable&lt;T&gt; (Option&lt;T&gt;) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc"><span >Non-null value to be made optional</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Some</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Option&lt;T&gt; in a Some state or throws ValueIsNullException if isnull(value)</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-Some_T_T__value_"><div class="section_title">SOURCE</div><div class="code">
            value.HasValue
                ? MOption&lt;T&gt;.Inst.Return(value.Value)
                : raise&lt;Option&lt;T&gt;&gt;(new ValueIsNullException())</div></div></div><div class="member-title"><a name="somes&lt;T>"></a>somes&lt;T&gt;(IEnumerable&lt;T?&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-somes_T_IEnumerable_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Extracts from a list of &#39;Option&#39; all the &#39;Some&#39; elements. All the &#39;Some&#39; elements are extracted in order. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>?&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">somes</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>?&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-somes_T_IEnumerable_T_self_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in self)
            {
                if (item.HasValue)
                {
                    yield return item.Value;
                }
            }
        </div></div></div><div class="member-title"><a name="somes&lt;T>"></a>somes&lt;T&gt;(IEnumerable&lt;Option&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-somes_T_IEnumerable_Option&lt;T>_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Extracts from a list of &#39;Option&#39; all the &#39;Some&#39; elements. All the &#39;Some&#39; elements are extracted in order. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">somes</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-somes_T_IEnumerable_Option&lt;T>_list_"><div class="section_title">SOURCE</div><div class="code">
            list.Somes()</div></div></div><div class="member-title"><a name="somes&lt;T>"></a>somes&lt;T&gt;(IEnumerable&lt;OptionUnsafe&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-somes_T_IEnumerable_OptionUnsafe&lt;T>_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Extracts from a list of &#39;OptionUnsafe&#39; all the &#39;Some&#39; elements. All the &#39;Some&#39; elements are extracted in order. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">somes</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-somes_T_IEnumerable_OptionUnsafe&lt;T>_list_"><div class="section_title">SOURCE</div><div class="code">
            list.Somes()</div></div></div><div class="member-title"><a name="SomeUnsafe&lt;T>"></a>SomeUnsafe&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SomeUnsafe_T_T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a Some of T (OptionUnsafe&lt;T&gt;) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Non-null value to be made optional</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; <span class="ident">SomeUnsafe</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >OptionUnsafe&lt;T&gt; in a Some state or throws ValueIsNullException if isnull(value).</span></div></div></div><div style="display:none" id="code-SomeUnsafe_T_T__value_"><div class="section_title">SOURCE</div><div class="code">
            default(MOptionUnsafe&lt;T&gt;).Return(value)</div></div></div><div class="member-title"><a name="stack&lt;T>"></a>stack&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-stack_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable stack </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Stack&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">stack</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-stack_T_"><div class="section_title">SOURCE</div><div class="code">
            new Stck&lt;T&gt;()</div></div></div><div class="member-title"><a name="Stack&lt;T>"></a>Stack&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Stack_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable stack </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Stack</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Stack_T_"><div class="section_title">SOURCE</div><div class="code">
            new Stck&lt;T&gt;()</div></div></div><div class="member-title"><a name="Stack&lt;T>"></a>Stack&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Stack_T_T__items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable stack </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Stack</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Stack_T_T__items_"><div class="section_title">SOURCE</div><div class="code">
            new Stck&lt;T&gt;(items)</div></div></div><div class="member-title"><a name="State&lt;S, A>"></a>State&lt;S, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-State_S_A_A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >State monad constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc"><span >Value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt; <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;</div><div class="normal"><span >State monad</span></div></div></div><div style="display:none" id="code-State_S_A_A__value_"><div class="section_title">SOURCE</div><div class="code">
            default(MState&lt;S, A&gt;).Return(_ =&gt; value)</div></div></div><div class="member-title"><a name="State&lt;S, A>"></a>State&lt;S, A&gt;(Func&lt;S, ValueTuple&lt;A, S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-State_S_A_Func_S_ValueTuple&lt;A, S>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >State monad constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt; <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;</div><div class="normal"><span >State monad</span></div></div></div><div style="display:none" id="code-State_S_A_Func_S_ValueTuple&lt;A, S>_f_"><div class="section_title">SOURCE</div><div class="code">
            state =&gt; f(state).Add(false)</div></div></div><div class="member-title"><a name="Subj&lt;A>"></a>Subj&lt;A&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subj_A_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Conditional computation constructor.  Represents a computation that could  succeed or fail.  The result of the computation is an Option data-type.   Use the fluent API methods of Then and Else to extract the monadic value. </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; <span class="ident">Subj</span>&lt;<span class="ident">A</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div><div class="normal"><span >Conditional computation</span></div></div></div><div style="display:none" id="code-Subj_A_"><div class="section_title">SOURCE</div><div class="code">
            input =&gt;
                Optional(input)</div></div></div><div class="member-title"><a name="subtract&lt;NUM, L, R>"></a>subtract&lt;NUM, L, R&gt;(Either&lt;L, R&gt;, Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_NUM_L_R_Either_L_R_x__Either_L_R_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the subtract between the two bound values of x and y, uses a Subtract type-class  to provide the subtract operation for type A.  For example x.Subtract&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">subtract</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >An option with the subtract between x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-subtract_NUM_L_R_Either_L_R_x__Either_L_R_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Subtract(a, b)</div></div></div><div class="member-title"><a name="subtract&lt;NUM, L, R>"></a>subtract&lt;NUM, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the subtract between the two bound values of x and y, uses a Subtract type-class  to provide the subtract operation for type A.  For example x.Subtract&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">subtract</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >An option with the subtract between x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-subtract_NUM_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Subtract(a, b)</div></div></div><div class="member-title"><a name="subtract&lt;NUM, T>"></a>subtract&lt;NUM, T&gt;(T?, T?)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_NUM_T_T__lhs__T__rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subtract the Some(x) of one nullable from the Some(y) of another. For numeric values the behaviour is to find the subtract between the Somes (lhs - rhs) For Lst values the behaviour is to remove items in the rhs from the lhs For Map or Set values the behaviour is to remove items in the rhs from the lhs Otherwise if the T type derives from ISubtractable then the behaviour is to call lhs.Subtract(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span>? <span class="ident">subtract</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">T</span>? lhs, <span class="ident">T</span>? rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span>?</div><div class="normal"><span >lhs - rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-subtract_NUM_T_T__lhs__T__rhs_"><div class="section_title">SOURCE</div><div class="code">
            if (!lhs.HasValue) return rhs;
            if (!rhs.HasValue) return lhs;
            return default(NUM).Subtract(lhs.Value, rhs.Value);
        </div></div></div><div class="member-title"><a name="subtract&lt;NUM, T>"></a>subtract&lt;NUM, T&gt;(Option&lt;T&gt;, Option&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_NUM_T_Option_T_lhs__Option_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subtract the Ts </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">subtract</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs - rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-subtract_NUM_T_Option_T_lhs__Option_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Subtract&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="subtract&lt;NUM, T>"></a>subtract&lt;NUM, T&gt;(OptionUnsafe&lt;T&gt;, OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_NUM_T_OptionUnsafe_T_lhs__OptionUnsafe_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subtract the Ts </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; <span class="ident">subtract</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs - rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-subtract_NUM_T_OptionUnsafe_T_lhs__OptionUnsafe_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Subtract&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="subtract&lt;NUM, T>"></a>subtract&lt;NUM, T&gt;(Try&lt;T&gt;, Try&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_NUM_T_Try_T_lhs__Try_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subtract the Try(x) from Try(y).  If either of the Trys throw then the result is Fail For numeric values the behaviour is to find the subtract between the Trys (lhs - rhs) For Lst values the behaviour is to remove items in the rhs from the lhs For Map or Set values the behaviour is to remove items in the rhs from the lhs Otherwise if the R type derives from ISubtractable then the behaviour is to call lhs.Subtract(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; <span class="ident">subtract</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs - rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-subtract_NUM_T_Try_T_lhs__Try_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Subtract&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="subtract&lt;NUM, T>"></a>subtract&lt;NUM, T&gt;(TryAsync&lt;T&gt;, TryAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_NUM_T_TryAsync_T_lhs__TryAsync_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subtract the TryAsync(x) from TryAsync(y).  If either of the Trys throw then the result is Fail For numeric values the behaviour is to find the subtract between the Trys (lhs - rhs) For Lst values the behaviour is to remove items in the rhs from the lhs For Map or Set values the behaviour is to remove items in the rhs from the lhs Otherwise if the R type derives from ISubtractable then the behaviour is to call lhs.Subtract(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">subtract</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs - rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-subtract_NUM_T_TryAsync_T_lhs__TryAsync_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Subtract&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="subtract&lt;NUM, T>"></a>subtract&lt;NUM, T&gt;(TryOption&lt;T&gt;, TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_NUM_T_TryOption_T_lhs__TryOption_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subtract the Try(x) from Try(y).  If either of the Trys throw then the result is Fail For numeric values the behaviour is to find the subtract between the Trys (lhs - rhs) For Lst values the behaviour is to remove items in the rhs from the lhs For Map or Set values the behaviour is to remove items in the rhs from the lhs Otherwise if the R type derives from ISubtractable then the behaviour is to call lhs.Subtract(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">subtract</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs - rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-subtract_NUM_T_TryOption_T_lhs__TryOption_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Subtract&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="subtract&lt;NUM, T>"></a>subtract&lt;NUM, T&gt;(TryOptionAsync&lt;T&gt;, TryOptionAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_NUM_T_TryOptionAsync_T_lhs__TryOptionAsync_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subtract the TryOptionAsync(x) from TryOptionAsync(y).  If either of the Trys throw then the result is Fail For numeric values the behaviour is to find the subtract between the Trys (lhs - rhs) For Lst values the behaviour is to remove items in the rhs from the lhs For Map or Set values the behaviour is to remove items in the rhs from the lhs Otherwise if the R type derives from ISubtractable then the behaviour is to call lhs.Subtract(rhs); </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">subtract</span>&lt;<span class="ident">NUM</span>, <span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >lhs - rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-subtract_NUM_T_TryOptionAsync_T_lhs__TryOptionAsync_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            lhs.Subtract&lt;NUM, T&gt;(rhs)</div></div></div><div class="member-title"><a name="subtract&lt;NUMTYPE, NUM, A, PRED>"></a>subtract&lt;NUMTYPE, NUM, A, PRED&gt;(NumType&lt;NUMTYPE, NUM, A, PRED&gt;, NUMTYPE)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_NUMTYPE_NUM_A_PRED_NumType_NUMTYPE_NUM_A_PRED_x__NUMTYPE__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the subtract between the two bound values of x and y, uses a Subtract type-class  to provide the subtract operation for type A.  For example x.Subtract&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">NUMTYPE</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NUMTYPE</span> <span class="ident">subtract</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; x, <span class="ident">NUMTYPE</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NUMTYPE</span></div><div class="normal"><span >An NewType with the subtract between x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-subtract_NUMTYPE_NUM_A_PRED_NumType_NUMTYPE_NUM_A_PRED_x__NUMTYPE__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Subtract(a, b)</div></div></div><div class="member-title"><a name="subtract&lt;NUMTYPE, NUM, A>"></a>subtract&lt;NUMTYPE, NUM, A&gt;(NumType&lt;NUMTYPE, NUM, A&gt;, NUMTYPE)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_NUMTYPE_NUM_A_NumType_NUMTYPE_NUM_A_x__NUMTYPE__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the subtract between the two bound values of x and y, uses a Subtract type-class  to provide the subtract operation for type A.  For example x.Subtract&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">NUMTYPE</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NUMTYPE</span> <span class="ident">subtract</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt; x, <span class="ident">NUMTYPE</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NUMTYPE</span></div><div class="normal"><span >An NewType with the subtract between x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtract_NUMTYPE_NUM_A_NumType_NUMTYPE_NUM_A_x__NUMTYPE__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Subtract(a, b)</div></div></div><div class="member-title"><a name="subtract&lt;SELF, FLOAT, A, PRED>"></a>subtract&lt;SELF, FLOAT, A, PRED&gt;(FloatType&lt;SELF, FLOAT, A, PRED&gt;, SELF)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_SELF_FLOAT_A_PRED_FloatType_SELF_FLOAT_A_PRED_x__SELF__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the subtract between the two bound values of x and y, uses a Subtract type-class  to provide the subtract operation for type A.  For example x.Subtract&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">SELF</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SELF</span> <span class="ident">subtract</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; x, <span class="ident">SELF</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SELF</span></div><div class="normal"><span >An NewType with the subtract between x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-subtract_SELF_FLOAT_A_PRED_FloatType_SELF_FLOAT_A_PRED_x__SELF__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(FLOAT).Subtract(a, b)</div></div></div><div class="member-title"><a name="subtract&lt;SELF, FLOAT, A>"></a>subtract&lt;SELF, FLOAT, A&gt;(FloatType&lt;SELF, FLOAT, A&gt;, SELF)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_SELF_FLOAT_A_FloatType_SELF_FLOAT_A_x__SELF__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the subtract between the two bound values of x and y, uses a Subtract type-class  to provide the subtract operation for type A.  For example x.Subtract&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">SELF</span></div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SELF</span> <span class="ident">subtract</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt; x, <span class="ident">SELF</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SELF</span></div><div class="normal"><span >An NewType with the subtract between x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtract_SELF_FLOAT_A_FloatType_SELF_FLOAT_A_x__SELF__y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(FLOAT).Subtract(a, b)</div></div></div><div class="member-title"><a name="sum"></a>sum(int?)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum__int__self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="keyword">int</span>?</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">sum</span>(<span class="keyword">int</span>? self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-sum__int__self_"><div class="section_title">SOURCE</div><div class="code">
            self ?? 0</div></div></div><div class="member-title"><a name="sum"></a>sum(Task&lt;int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum__Task_int_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the Sum of a Task int.  Returns either the wrapped value or 0 if cancelled or faulted. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">sum</span>(<span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-sum__Task_int_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Sum()</div></div></div><div class="member-title"><a name="sum&lt;MonoidW, W>"></a>sum&lt;MonoidW, W&gt;(Writer&lt;MonoidW, W, int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_MonoidW_W_Writer_MonoidW_W_int_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt; <span class="ident">sum</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="keyword">int</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-sum_MonoidW_W_Writer_MonoidW_W_int_self_"><div class="section_title">SOURCE</div><div class="code">
                self</div></div></div><div class="member-title"><a name="sum&lt;NUM, A>"></a>sum&lt;NUM, A&gt;(Tuple&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUM_A_Tuple_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUM_A_Tuple_A_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="sum&lt;NUM, A>"></a>sum&lt;NUM, A&gt;(Tuple&lt;A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUM_A_Tuple_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUM_A_Tuple_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).Plus(self.Item1, self.Item2)</div></div></div><div class="member-title"><a name="sum&lt;NUM, A>"></a>sum&lt;NUM, A&gt;(Tuple&lt;A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUM_A_Tuple_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUM_A_Tuple_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).Plus(self.Item1, default(NUM).Product(self.Item2, self.Item3))</div></div></div><div class="member-title"><a name="sum&lt;NUM, A>"></a>sum&lt;NUM, A&gt;(Tuple&lt;A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUM_A_Tuple_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUM_A_Tuple_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.sum&lt;NUM, FoldTuple&lt;A&gt;, Tuple&lt;A, A, A, A&gt;, A&gt;(self)</div></div></div><div class="member-title"><a name="sum&lt;NUM, A>"></a>sum&lt;NUM, A&gt;(Tuple&lt;A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUM_A_Tuple_A_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUM_A_Tuple_A_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.sum&lt;NUM, FoldTuple&lt;A&gt;, Tuple&lt;A, A, A, A, A&gt;, A&gt;(self)</div></div></div><div class="member-title"><a name="sum&lt;NUM, A>"></a>sum&lt;NUM, A&gt;(Tuple&lt;A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUM_A_Tuple_A_A_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUM_A_Tuple_A_A_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.sum&lt;NUM, FoldTuple&lt;A&gt;, Tuple&lt;A, A, A, A, A, A&gt;, A&gt;(self)</div></div></div><div class="member-title"><a name="sum&lt;NUM, A>"></a>sum&lt;NUM, A&gt;(Tuple&lt;A, A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUM_A_Tuple_A_A_A_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUM_A_Tuple_A_A_A_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.sum&lt;NUM, FoldTuple&lt;A&gt;, Tuple&lt;A, A, A, A, A, A, A&gt;, A&gt;(self)</div></div></div><div class="member-title"><a name="sum&lt;NUM, A>"></a>sum&lt;NUM, A&gt;(ValueTuple&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUM_A_ValueTuple_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUM_A_ValueTuple_A_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Item1</div></div></div><div class="member-title"><a name="sum&lt;NUM, A>"></a>sum&lt;NUM, A&gt;(ValueTuple&lt;A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUM_A_ValueTuple_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUM_A_ValueTuple_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).Plus(self.Item1, self.Item2)</div></div></div><div class="member-title"><a name="sum&lt;NUM, A>"></a>sum&lt;NUM, A&gt;(ValueTuple&lt;A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUM_A_ValueTuple_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUM_A_ValueTuple_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).Plus(self.Item1, default(NUM).Product(self.Item2, self.Item3))</div></div></div><div class="member-title"><a name="sum&lt;NUM, A>"></a>sum&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUM_A_ValueTuple_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUM_A_ValueTuple_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.sum&lt;NUM, FoldTuple&lt;A&gt;, (A, A, A, A), A&gt;(self)</div></div></div><div class="member-title"><a name="sum&lt;NUM, A>"></a>sum&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUM_A_ValueTuple_A_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUM_A_ValueTuple_A_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.sum&lt;NUM, FoldTuple&lt;A&gt;, (A, A, A, A, A), A&gt;(self)</div></div></div><div class="member-title"><a name="sum&lt;NUM, A>"></a>sum&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUM_A_ValueTuple_A_A_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUM_A_ValueTuple_A_A_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.sum&lt;NUM, FoldTuple&lt;A&gt;, (A, A, A, A, A, A), A&gt;(self)</div></div></div><div class="member-title"><a name="sum&lt;NUM, A>"></a>sum&lt;NUM, A&gt;(ValueTuple&lt;A, A, A, A, A, A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUM_A_ValueTuple_A_A_A_A_A_A_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum of the items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUM_A_ValueTuple_A_A_A_A_A_A_A_self_"><div class="section_title">SOURCE</div><div class="code">
            TypeClass.sum&lt;NUM, FoldTuple&lt;A&gt;, (A, A, A, A, A, A, A), A&gt;(self)</div></div></div><div class="member-title"><a name="sum&lt;NUMTYPE, NUM, A, PRED>"></a>sum&lt;NUMTYPE, NUM, A, PRED&gt;(NumType&lt;NUMTYPE, NUM, A, PRED&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUMTYPE_NUM_A_PRED_NumType_NUMTYPE_NUM_A_PRED_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUMTYPE_NUM_A_PRED_NumType_NUMTYPE_NUM_A_PRED_self_"><div class="section_title">SOURCE</div><div class="code">
                (A)self</div></div></div><div class="member-title"><a name="sum&lt;NUMTYPE, NUM, A>"></a>sum&lt;NUMTYPE, NUM, A&gt;(NumType&lt;NUMTYPE, NUM, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUMTYPE_NUM_A_NumType_NUMTYPE_NUM_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUMTYPE_NUM_A_NumType_NUMTYPE_NUM_A_self_"><div class="section_title">SOURCE</div><div class="code">
            (A)self</div></div></div><div class="member-title"><a name="sum&lt;SELF, FLOAT, A, PRED>"></a>sum&lt;SELF, FLOAT, A, PRED&gt;(FloatType&lt;SELF, FLOAT, A, PRED&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_SELF_FLOAT_A_PRED_FloatType_SELF_FLOAT_A_PRED_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;(<span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SELF</span> : <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOAT</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_SELF_FLOAT_A_PRED_FloatType_SELF_FLOAT_A_PRED_self_"><div class="section_title">SOURCE</div><div class="code">
                (A)self</div></div></div><div class="member-title"><a name="tail&lt;A, B, C, D, E, F, G>"></a>tail&lt;A, B, C, D, E, F, G&gt;(Tuple&lt;A, B, C, D, E, F, G&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tail_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_G_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the second item onwards and build a new tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">tail</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tail_A_B_C_D_E_F_G_Tuple_A_B_C_D_E_F_G_self_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="tail&lt;A, B, C, D, E, F, G>"></a>tail&lt;A, B, C, D, E, F, G&gt;(ValueTuple&lt;A, B, C, D, E, F, G&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tail_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_G_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the second item onwards and build a new tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; <span class="ident">tail</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>, <span class="ident">G</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tail_A_B_C_D_E_F_G_ValueTuple_A_B_C_D_E_F_G_self_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="tail&lt;A, B, C, D, E, F>"></a>tail&lt;A, B, C, D, E, F&gt;(Tuple&lt;A, B, C, D, E, F&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tail_A_B_C_D_E_F_Tuple_A_B_C_D_E_F_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the second item onwards and build a new tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">tail</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tail_A_B_C_D_E_F_Tuple_A_B_C_D_E_F_self_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item2, self.Item3, self.Item4, self.Item5, self.Item6)</div></div></div><div class="member-title"><a name="tail&lt;A, B, C, D, E, F>"></a>tail&lt;A, B, C, D, E, F&gt;(ValueTuple&lt;A, B, C, D, E, F&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tail_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_F_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the second item onwards and build a new tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; <span class="ident">tail</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>, <span class="ident">F</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tail_A_B_C_D_E_F_ValueTuple_A_B_C_D_E_F_self_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item2, self.Item3, self.Item4, self.Item5, self.Item6)</div></div></div><div class="member-title"><a name="tail&lt;A, B, C, D, E>"></a>tail&lt;A, B, C, D, E&gt;(Tuple&lt;A, B, C, D, E&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tail_A_B_C_D_E_Tuple_A_B_C_D_E_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the second item onwards and build a new tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; <span class="ident">tail</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tail_A_B_C_D_E_Tuple_A_B_C_D_E_self_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item2, self.Item3, self.Item4, self.Item5)</div></div></div><div class="member-title"><a name="tail&lt;A, B, C, D, E>"></a>tail&lt;A, B, C, D, E&gt;(ValueTuple&lt;A, B, C, D, E&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tail_A_B_C_D_E_ValueTuple_A_B_C_D_E_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the second item onwards and build a new tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; <span class="ident">tail</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">E</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tail_A_B_C_D_E_ValueTuple_A_B_C_D_E_self_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item2, self.Item3, self.Item4, self.Item5)</div></div></div><div class="member-title"><a name="tail&lt;A, B, C, D>"></a>tail&lt;A, B, C, D&gt;(Tuple&lt;A, B, C, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tail_A_B_C_D_Tuple_A_B_C_D_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the second item onwards and build a new tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; <span class="ident">tail</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tail_A_B_C_D_Tuple_A_B_C_D_self_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item2, self.Item3, self.Item4)</div></div></div><div class="member-title"><a name="tail&lt;A, B, C, D>"></a>tail&lt;A, B, C, D&gt;(ValueTuple&lt;A, B, C, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tail_A_B_C_D_ValueTuple_A_B_C_D_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the second item onwards and build a new tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; <span class="ident">tail</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tail_A_B_C_D_ValueTuple_A_B_C_D_self_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item2, self.Item3, self.Item4)</div></div></div><div class="member-title"><a name="tail&lt;T1, T2, T3>"></a>tail&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2, T3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tail_T1_T2_T3_Tuple_T1_T2_T3_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the second item onwards and build a new tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt; <span class="ident">tail</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tail_T1_T2_T3_Tuple_T1_T2_T3_self_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item2, self.Item3)</div></div></div><div class="member-title"><a name="tail&lt;T1, T2, T3>"></a>tail&lt;T1, T2, T3&gt;(ValueTuple&lt;T1, T2, T3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tail_T1_T2_T3_ValueTuple_T1_T2_T3_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the second item onwards and build a new tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt; <span class="ident">tail</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tail_T1_T2_T3_ValueTuple_T1_T2_T3_self_"><div class="section_title">SOURCE</div><div class="code">
            (self.Item2, self.Item3)</div></div></div><div class="member-title"><a name="tail&lt;T1, T2>"></a>tail&lt;T1, T2&gt;(Tuple&lt;T1, T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tail_T1_T2_Tuple_T1_T2_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the second item onwards and build a new tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T2</span>&gt; <span class="ident">tail</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T2</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tail_T1_T2_Tuple_T1_T2_self_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(self.Item2)</div></div></div><div class="member-title"><a name="tail&lt;T1, T2>"></a>tail&lt;T1, T2&gt;(ValueTuple&lt;T1, T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tail_T1_T2_ValueTuple_T1_T2_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Take the second item onwards and build a new tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">T2</span>&gt; <span class="ident">tail</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">T2</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tail_T1_T2_ValueTuple_T1_T2_self_"><div class="section_title">SOURCE</div><div class="code">
            VTuple(self.Item2)</div></div></div><div class="member-title"><a name="tell&lt;MonoidW, W>"></a>tell&lt;MonoidW, W&gt;(W)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tell_MonoidW_W_W__what_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tells the monad what you want it to hear.  The monad carries this &#39;packet&#39; upwards, merging it if needed (hence the Monoid requirement). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">what</div><div class="arg-type"><span class="ident">W</span></div></div><div class="arg-desc"><span >The value to tell</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">Unit</span>&gt; <span class="ident">tell</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>&gt;(<span class="ident">W</span> what)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Updated writer monad</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-tell_MonoidW_W_W__what_"><div class="section_title">SOURCE</div><div class="code">
                default(MWriter&lt;MonoidW, W, Unit&gt;).Tell(what)</div></div></div><div class="member-title"><a name="toArray&lt;L, R>"></a>toArray&lt;L, R&gt;(Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toArray_L_R_Either_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into an ImmutableArray R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;ToArray has been deprecated.  Please use RightToArray.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">R</span>&gt; <span class="ident">toArray</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</span></div></div></div><div style="display:none" id="code-toArray_L_R_Either_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.ToArray()</div></div></div><div class="member-title"><a name="toArray&lt;T>"></a>toArray&lt;T&gt;(Option&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toArray_T_Option_T_option_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Option to an enumerable of zero or one items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toArray</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; option)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >An enumerable of zero or one items</span></div></div></div><div style="display:none" id="code-toArray_T_Option_T_option_"><div class="section_title">SOURCE</div><div class="code">
            option.ToArray()</div></div></div><div class="member-title"><a name="toArray&lt;T>"></a>toArray&lt;T&gt;(OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toArray_T_OptionUnsafe_T_option_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the OptionUnsafe to an enumerable of zero or one items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toArray</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; option)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >An enumerable of zero or one items</span></div></div></div><div style="display:none" id="code-toArray_T_OptionUnsafe_T_option_"><div class="section_title">SOURCE</div><div class="code">
            option.ToArray()</div></div></div><div class="member-title"><a name="toArray&lt;T>"></a>toArray&lt;T&gt;(Try&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toArray_T_Try_T_tryDel_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toArray</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; tryDel)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toArray_T_Try_T_tryDel_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.ToArray()</div></div></div><div class="member-title"><a name="toArray&lt;T>"></a>toArray&lt;T&gt;(TryAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toArray_T_TryAsync_T_tryDel_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">toArray</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; tryDel)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toArray_T_TryAsync_T_tryDel_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.ToArray()</div></div></div><div class="member-title"><a name="toArray&lt;T>"></a>toArray&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toArray_T_TryOption_T_tryDel_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toArray</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; tryDel)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toArray_T_TryOption_T_tryDel_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.ToArray()</div></div></div><div class="member-title"><a name="toArray&lt;T>"></a>toArray&lt;T&gt;(TryOptionAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toArray_T_TryOptionAsync_T_tryDel_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">toArray</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; tryDel)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toArray_T_TryOptionAsync_T_tryDel_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.ToArray()</div></div></div><div class="member-title"><a name="toArray&lt;T>"></a>toArray&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toArray_T_IEnumerable_T_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable queue </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toArray</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toArray_T_IEnumerable_T_items_"><div class="section_title">SOURCE</div><div class="code">
            new Arr&lt;T&gt;(items)</div></div></div><div class="member-title"><a name="toEither&lt;L, T>"></a>toEither&lt;L, T&gt;(T?, L)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toEither_L_T_T__self__L__defaultLeftValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; <span class="ident">toEither</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">L</span> defaultLeftValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-toEither_L_T_T__self__L__defaultLeftValue_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? Right&lt;L, T&gt;(self.Value)
                : Left&lt;L, T&gt;(defaultLeftValue)</div></div></div><div class="member-title"><a name="toEither&lt;L, T>"></a>toEither&lt;L, T&gt;(T?, Func&lt;L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toEither_L_T_T__self__Func_L_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; <span class="ident">toEither</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-toEither_L_T_T__self__Func_L_Left_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? Right&lt;L, T&gt;(self.Value)
                : Left&lt;L, T&gt;(Left())</div></div></div><div class="member-title"><a name="toEitherUnsafe&lt;L, T>"></a>toEitherUnsafe&lt;L, T&gt;(T?, L)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toEitherUnsafe_L_T_T__self__L__defaultLeftValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; <span class="ident">toEitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">L</span> defaultLeftValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-toEitherUnsafe_L_T_T__self__L__defaultLeftValue_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? RightUnsafe&lt;L, T&gt;(self.Value)
                : LeftUnsafe&lt;L, T&gt;(defaultLeftValue)</div></div></div><div class="member-title"><a name="toEitherUnsafe&lt;L, T>"></a>toEitherUnsafe&lt;L, T&gt;(T?, Func&lt;L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toEitherUnsafe_L_T_T__self__Func_L_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt; <span class="ident">toEitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-toEitherUnsafe_L_T_T__self__Func_L_Left_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? RightUnsafe&lt;L, T&gt;(self.Value)
                : LeftUnsafe&lt;L, T&gt;(Left())</div></div></div><div class="member-title"><a name="toHashMap&lt;EqK, K, V>"></a>toHashMap&lt;EqK, K, V&gt;(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toHashMap_EqK_K_V_IEnumerable_Tuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">toHashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EqK</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-toHashMap_EqK_K_V_IEnumerable_Tuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashMap.createRange&lt;EqK, K, V&gt;(items)</div></div></div><div class="member-title"><a name="toHashMap&lt;EqK, K, V>"></a>toHashMap&lt;EqK, K, V&gt;(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toHashMap_EqK_K_V_IEnumerable_ValueTuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">toHashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EqK</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-toHashMap_EqK_K_V_IEnumerable_ValueTuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashMap.createRange&lt;EqK, K, V&gt;(items)</div></div></div><div class="member-title"><a name="toHashMap&lt;EqK, K, V>"></a>toHashMap&lt;EqK, K, V&gt;(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toHashMap_EqK_K_V_IEnumerable_KeyValuePair&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">toHashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EqK</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-toHashMap_EqK_K_V_IEnumerable_KeyValuePair&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashMap.createRange&lt;EqK, K, V&gt;(items)</div></div></div><div class="member-title"><a name="toHashMap&lt;K, V>"></a>toHashMap&lt;K, V&gt;(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toHashMap_K_V_IEnumerable_ValueTuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">toHashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toHashMap_K_V_IEnumerable_ValueTuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashMap.createRange(items)</div></div></div><div class="member-title"><a name="toHashMap&lt;K, V>"></a>toHashMap&lt;K, V&gt;(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toHashMap_K_V_IEnumerable_Tuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">toHashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toHashMap_K_V_IEnumerable_Tuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashMap.createRange(items)</div></div></div><div class="member-title"><a name="toHashMap&lt;K, V>"></a>toHashMap&lt;K, V&gt;(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toHashMap_K_V_IEnumerable_KeyValuePair&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">toHashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toHashMap_K_V_IEnumerable_KeyValuePair&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashMap.createRange(items)</div></div></div><div class="member-title"><a name="toHashSet&lt;EqT, T>"></a>toHashSet&lt;EqT, T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toHashSet_EqT_T_IEnumerable_T_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EqT</span>, <span class="ident">T</span>&gt; <span class="ident">toHashSet</span>&lt;<span class="ident">EqT</span>, <span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EqT</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EqT</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-toHashSet_EqT_T_IEnumerable_T_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashSet.createRange&lt;EqT, T&gt;(items)</div></div></div><div class="member-title"><a name="toHashSet&lt;T>"></a>toHashSet&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toHashSet_T_IEnumerable_T_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable hash-set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toHashSet</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toHashSet_T_IEnumerable_T_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.HashSet.createRange(items)</div></div></div><div class="member-title"><a name="toList&lt;L, R>"></a>toList&lt;L, R&gt;(Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toList_L_R_Either_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into a Lst R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;toList has been deprecated.  Please use rightToList.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt; <span class="ident">toList</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</span></div></div></div><div style="display:none" id="code-toList_L_R_Either_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.ToList()</div></div></div><div class="member-title"><a name="toList&lt;T>"></a>toList&lt;T&gt;(Option&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toList_T_Option_T_option_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Option to an immutable list of zero or one items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toList</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; option)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >An immutable list of zero or one items</span></div></div></div><div style="display:none" id="code-toList_T_Option_T_option_"><div class="section_title">SOURCE</div><div class="code">
            option.ToList()</div></div></div><div class="member-title"><a name="toList&lt;T>"></a>toList&lt;T&gt;(OptionUnsafe&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toList_T_OptionUnsafe_T_option_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the OptionUnsafe to an immutable list of zero or one items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">option</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toList</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">T</span>&gt; option)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >An immutable list of zero or one items</span></div></div></div><div style="display:none" id="code-toList_T_OptionUnsafe_T_option_"><div class="section_title">SOURCE</div><div class="code">
            option.ToList()</div></div></div><div class="member-title"><a name="toList&lt;T>"></a>toList&lt;T&gt;(Try&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toList_T_Try_T_tryDel_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toList</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; tryDel)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toList_T_Try_T_tryDel_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.ToList()</div></div></div><div class="member-title"><a name="toList&lt;T>"></a>toList&lt;T&gt;(TryAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toList_T_TryAsync_T_tryDel_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">toList</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; tryDel)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toList_T_TryAsync_T_tryDel_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.ToList()</div></div></div><div class="member-title"><a name="toList&lt;T>"></a>toList&lt;T&gt;(TryOption&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toList_T_TryOption_T_tryDel_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toList</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; tryDel)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toList_T_TryOption_T_tryDel_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.ToList()</div></div></div><div class="member-title"><a name="toList&lt;T>"></a>toList&lt;T&gt;(TryOptionAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toList_T_TryOptionAsync_T_tryDel_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">toList</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; tryDel)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toList_T_TryOptionAsync_T_tryDel_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.ToList()</div></div></div><div class="member-title"><a name="toList&lt;T>"></a>toList&lt;T&gt;(Arr&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toList_T_Arr_T_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable list </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toList</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Arr</span>&lt;<span class="ident">T</span>&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toList_T_Arr_T_items_"><div class="section_title">SOURCE</div><div class="code">
            new Lst&lt;T&gt;(items.Value)</div></div></div><div class="member-title"><a name="toList&lt;T>"></a>toList&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toList_T_IEnumerable_T_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable list </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toList</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toList_T_IEnumerable_T_items_"><div class="section_title">SOURCE</div><div class="code">
            items is Lst&lt;T&gt;
                ? (Lst&lt;T&gt;)items
                : new Lst&lt;T&gt;(items)</div></div></div><div class="member-title"><a name="toMap&lt;K, V>"></a>toMap&lt;K, V&gt;(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toMap_K_V_IEnumerable_Tuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">toMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toMap_K_V_IEnumerable_Tuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.createRange(items)</div></div></div><div class="member-title"><a name="toMap&lt;K, V>"></a>toMap&lt;K, V&gt;(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toMap_K_V_IEnumerable_ValueTuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">toMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toMap_K_V_IEnumerable_ValueTuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.createRange(items)</div></div></div><div class="member-title"><a name="toMap&lt;K, V>"></a>toMap&lt;K, V&gt;(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toMap_K_V_IEnumerable_KeyValuePair&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">toMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toMap_K_V_IEnumerable_KeyValuePair&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.createRange(items)</div></div></div><div class="member-title"><a name="toMap&lt;OrdK, K, V>"></a>toMap&lt;OrdK, K, V&gt;(KeyValuePair&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toMap_OrdK_K_V_KeyValuePair_K_V_head__KeyValuePair_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">toMap</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-toMap_OrdK_K_V_KeyValuePair_K_V_head__KeyValuePair_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.create&lt;OrdK, K, V&gt;(head, tail)</div></div></div><div class="member-title"><a name="toMap&lt;OrdK, K, V>"></a>toMap&lt;OrdK, K, V&gt;(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toMap_OrdK_K_V_IEnumerable_ValueTuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">toMap</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-toMap_OrdK_K_V_IEnumerable_ValueTuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.createRange&lt;OrdK, K, V&gt;(items)</div></div></div><div class="member-title"><a name="toMap&lt;OrdK, K, V>"></a>toMap&lt;OrdK, K, V&gt;(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toMap_OrdK_K_V_IEnumerable_Tuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">toMap</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-toMap_OrdK_K_V_IEnumerable_Tuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.createRange&lt;OrdK, K, V&gt;(items)</div></div></div><div class="member-title"><a name="toMap&lt;OrdK, K, V>"></a>toMap&lt;OrdK, K, V&gt;(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toMap_OrdK_K_V_IEnumerable_KeyValuePair&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">toMap</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-toMap_OrdK_K_V_IEnumerable_KeyValuePair&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Map.createRange&lt;OrdK, K, V&gt;(items)</div></div></div><div class="member-title"><a name="toOption&lt;T>"></a>toOption&lt;T&gt;(T?)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toOption_T_T__self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert NullableT to OptionT </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div><div class="arg-desc"><span >Value to convert</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toOption</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span>? self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >OptionT with Some or None, depending on HasValue</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-toOption_T_T__self_"><div class="section_title">SOURCE</div><div class="code">
            self.HasValue
                ? Some(self.Value)
                : None</div></div></div><div class="member-title"><a name="toQuery&lt;L, R>"></a>toQuery&lt;L, R&gt;(Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toQuery_L_R_Either_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into an IQueryable of R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;ToQuery has been deprecated.  Please use RightToQuery.&quot;)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IQueryable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">toQuery</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IQueryable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, an IQueryable of R with one item.  A zero length IQueryable R otherwise</span></div></div></div><div style="display:none" id="code-toQuery_L_R_Either_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.RightAsEnumerable().AsQueryable()</div></div></div><div class="member-title"><a name="toQuery&lt;L, R>"></a>toQuery&lt;L, R&gt;(EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toQuery_L_R_EitherUnsafe_L_R_either_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into an IQueryable of R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">either</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Either to project</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;ToQuery has been deprecated.  Please use RightToQuery.&quot;)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IQueryable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">toQuery</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; either)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IQueryable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, an IQueryable of R with one item.  A zero length IQueryable R otherwise</span></div></div></div><div style="display:none" id="code-toQuery_L_R_EitherUnsafe_L_R_either_"><div class="section_title">SOURCE</div><div class="code">
            either.RightAsEnumerable().AsQueryable()</div></div></div><div class="member-title"><a name="toQuery&lt;T>"></a>toQuery&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toQuery_T_IEnumerable_T_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert to queryable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IQueryable</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toQuery</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IQueryable</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toQuery_T_IEnumerable_T_items_"><div class="section_title">SOURCE</div><div class="code">
            items.AsQueryable()</div></div></div><div class="member-title"><a name="toQueue&lt;T>"></a>toQueue&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toQueue_T_IEnumerable_T_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable queue </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Que</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toQueue</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Que</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toQueue_T_IEnumerable_T_items_"><div class="section_title">SOURCE</div><div class="code">
            var q = new QueInternal&lt;T&gt;();
            foreach (var item in items)
            {
                q = q.Enqueue(item);
            }
            return new Que&lt;T&gt;(q);
        </div></div></div><div class="member-title"><a name="toSet&lt;OrdT, T>"></a>toSet&lt;OrdT, T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toSet_OrdT_T_IEnumerable_T_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">toSet</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-toSet_OrdT_T_IEnumerable_T_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Set.createRange&lt;OrdT, T&gt;(items)</div></div></div><div class="member-title"><a name="toSet&lt;T>"></a>toSet&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toSet_T_IEnumerable_T_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toSet</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toSet_T_IEnumerable_T_items_"><div class="section_title">SOURCE</div><div class="code">
            LanguageExt.Set.createRange(items)</div></div></div><div class="member-title"><a name="toStack&lt;T>"></a>toStack&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toStack_T_IEnumerable_T_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an immutable stack </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toStack</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-toStack_T_IEnumerable_T_items_"><div class="section_title">SOURCE</div><div class="code">
            new Stck&lt;T&gt;(items)</div></div></div><div class="member-title"><a name="toString&lt;T>"></a>toString&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toString_T_T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert a value to string </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="ident">toString</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">string</span></div><div class="normal"></div></div></div><div style="display:none" id="code-toString_T_T__value_"><div class="section_title">SOURCE</div><div class="code">
            value?.ToString()</div></div></div><div class="member-title"><a name="toTryOption&lt;L, T>"></a>toTryOption&lt;L, T&gt;(T?, L)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toTryOption_L_T_T__self__L__defaultLeftValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">T</span>?</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">toTryOption</span>&lt;<span class="ident">L</span>, <span class="ident">T</span>&gt;(<span class="ident">T</span>? self, <span class="ident">L</span> defaultLeftValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-toTryOption_L_T_T__self__L__defaultLeftValue_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt; Optional(self)</div></div></div><div class="member-title"><a name="tribind&lt;T, R>"></a>tribind&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, TryOption&lt;R&gt;&gt;, Func&lt;TryOption&lt;R&gt;&gt;, Func&lt;Exception, TryOption&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tribind_T_R_TryOption_T_self__Func_T_TryOption&lt;R>_Some__Func_TryOption&lt;R>_None__Func_Exception_TryOption&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">tribind</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tribind_T_R_TryOption_T_self__Func_T_TryOption&lt;R>_Some__Func_TryOption&lt;R>_None__Func_Exception_TryOption&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.TriBind(Some, None, Fail)</div></div></div><div class="member-title"><a name="trifold&lt;S, T>"></a>trifold&lt;S, T&gt;(TryOption&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trifold_S_T_TryOption_T_self__S__state__Func_S_T_S_Some__Func_S_S_None__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds the result of Try into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function when Try succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function when Try fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">trifold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-trifold_S_T_TryOption_T_self__S__state__Func_S_T_S_Some__Func_S_S_None__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
            self.TriFold(state, Some, None, Fail)</div></div></div><div class="member-title"><a name="trifold&lt;T1, T2, T3, S>"></a>trifold&lt;T1, T2, T3, S&gt;(Tuple&lt;T1, T2, T3&gt;, S, Func&lt;S, T1, S&gt;, Func&lt;S, T2, S&gt;, Func&lt;S, T3, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trifold_T1_T2_T3_S_Tuple_T1_T2_T3_self__S__state__Func_S_T1_S_firstFold__Func_S_T2_S_secondFold__Func_S_T3_S_thirdFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tri-fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">trifold</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt; thirdFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-trifold_T1_T2_T3_S_Tuple_T1_T2_T3_self__S__state__Func_S_T1_S_firstFold__Func_S_T2_S_secondFold__Func_S_T3_S_thirdFold_"><div class="section_title">SOURCE</div><div class="code">
            thirdFold(secondFold(firstFold(state, self.Item1), self.Item2), self.Item3)</div></div></div><div class="member-title"><a name="trifold&lt;T1, T2, T3, S>"></a>trifold&lt;T1, T2, T3, S&gt;(ValueTuple&lt;T1, T2, T3&gt;, S, Func&lt;S, T1, S&gt;, Func&lt;S, T2, S&gt;, Func&lt;S, T3, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trifold_T1_T2_T3_S_ValueTuple_T1_T2_T3_self__S__state__Func_S_T1_S_firstFold__Func_S_T2_S_secondFold__Func_S_T3_S_thirdFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tri-fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">trifold</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt; thirdFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-trifold_T1_T2_T3_S_ValueTuple_T1_T2_T3_self__S__state__Func_S_T1_S_firstFold__Func_S_T2_S_secondFold__Func_S_T3_S_thirdFold_"><div class="section_title">SOURCE</div><div class="code">
            thirdFold(secondFold(firstFold(state, self.Item1), self.Item2), self.Item3)</div></div></div><div class="member-title"><a name="trifoldBack&lt;T1, T2, T3, S>"></a>trifoldBack&lt;T1, T2, T3, S&gt;(Tuple&lt;T1, T2, T3&gt;, S, Func&lt;S, T3, S&gt;, Func&lt;S, T2, S&gt;, Func&lt;S, T1, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trifoldBack_T1_T2_T3_S_Tuple_T1_T2_T3_self__S__state__Func_S_T3_S_firstFold__Func_S_T2_S_secondFold__Func_S_T1_S_thirdFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tri-fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">trifoldBack</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt; thirdFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-trifoldBack_T1_T2_T3_S_Tuple_T1_T2_T3_self__S__state__Func_S_T3_S_firstFold__Func_S_T2_S_secondFold__Func_S_T1_S_thirdFold_"><div class="section_title">SOURCE</div><div class="code">
            thirdFold(secondFold(firstFold(state, self.Item3), self.Item2), self.Item1)</div></div></div><div class="member-title"><a name="trifoldBack&lt;T1, T2, T3, S>"></a>trifoldBack&lt;T1, T2, T3, S&gt;(ValueTuple&lt;T1, T2, T3&gt;, S, Func&lt;S, T3, S&gt;, Func&lt;S, T2, S&gt;, Func&lt;S, T1, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trifoldBack_T1_T2_T3_S_ValueTuple_T1_T2_T3_self__S__state__Func_S_T3_S_firstFold__Func_S_T2_S_secondFold__Func_S_T1_S_thirdFold_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tri-fold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdFold</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">trifoldBack</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T3</span>, <span class="ident">S</span>&gt; firstFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T2</span>, <span class="ident">S</span>&gt; secondFold, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T1</span>, <span class="ident">S</span>&gt; thirdFold)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-trifoldBack_T1_T2_T3_S_ValueTuple_T1_T2_T3_self__S__state__Func_S_T3_S_firstFold__Func_S_T2_S_secondFold__Func_S_T1_S_thirdFold_"><div class="section_title">SOURCE</div><div class="code">
            thirdFold(secondFold(firstFold(state, self.Item3), self.Item2), self.Item1)</div></div></div><div class="member-title"><a name="trimap&lt;T, R>"></a>trimap&lt;T, R&gt;(TryOption&lt;T&gt;, Func&lt;T, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trimap_T_R_TryOption_T_tryDel__Func_T_R_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt; <span class="ident">trimap</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; tryDel, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped Try computation</span></div></div></div><div style="display:none" id="code-trimap_T_R_TryOption_T_tryDel__Func_T_R_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
            tryDel.TriMap(Some, None, Fail)</div></div></div><div class="member-title"><a name="trimap&lt;T1, T2, T3, R1, R2, R3>"></a>trimap&lt;T1, T2, T3, R1, R2, R3&gt;(Tuple&lt;T1, T2, T3&gt;, Func&lt;T1, R1&gt;, Func&lt;T2, R2&gt;, Func&lt;T3, R3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trimap_T1_T2_T3_R1_R2_R3_Tuple_T1_T2_T3_self__Func_T1_R1_firstMap__Func_T2_R2_secondMap__Func_T3_R3_thirdMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tri-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">R1</span>, <span class="ident">R2</span>, <span class="ident">R3</span>&gt; <span class="ident">trimap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R1</span>, <span class="ident">R2</span>, <span class="ident">R3</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R1</span>&gt; firstMap, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R2</span>&gt; secondMap, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R3</span>&gt; thirdMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">R1</span>, <span class="ident">R2</span>, <span class="ident">R3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-trimap_T1_T2_T3_R1_R2_R3_Tuple_T1_T2_T3_self__Func_T1_R1_firstMap__Func_T2_R2_secondMap__Func_T3_R3_thirdMap_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(firstMap(self.Item1), secondMap(self.Item2), thirdMap(self.Item3))</div></div></div><div class="member-title"><a name="trimap&lt;T1, T2, T3, R1, R2, R3>"></a>trimap&lt;T1, T2, T3, R1, R2, R3&gt;(ValueTuple&lt;T1, T2, T3&gt;, Func&lt;T1, R1&gt;, Func&lt;T2, R2&gt;, Func&lt;T3, R3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trimap_T1_T2_T3_R1_R2_R3_ValueTuple_T1_T2_T3_self__Func_T1_R1_firstMap__Func_T2_R2_secondMap__Func_T3_R3_thirdMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tri-map to tuple </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">firstMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R1</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">secondMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">thirdMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">R1</span>, <span class="ident">R2</span>, <span class="ident">R3</span>&gt; <span class="ident">trimap</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R1</span>, <span class="ident">R2</span>, <span class="ident">R3</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">R1</span>&gt; firstMap, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">R2</span>&gt; secondMap, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">R3</span>&gt; thirdMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">R1</span>, <span class="ident">R2</span>, <span class="ident">R3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-trimap_T1_T2_T3_R1_R2_R3_ValueTuple_T1_T2_T3_self__Func_T1_R1_firstMap__Func_T2_R2_secondMap__Func_T3_R3_thirdMap_"><div class="section_title">SOURCE</div><div class="code">
            ValueTuple.Create(firstMap(self.Item1), secondMap(self.Item2), thirdMap(self.Item3))</div></div></div><div class="member-title"><a name="Try&lt;A>"></a>Try&lt;A&gt;(Func&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Try_A_Func_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Try constructor function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Function to run when invoked</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >A lifted operation that returns a value of A</span></div></div></div><div style="display:none" id="code-Try_A_Func_A_f_"><div class="section_title">SOURCE</div><div class="code">
            TryExtensions.Memo&lt;A&gt;(() =&gt; f())</div></div></div><div class="member-title"><a name="Try&lt;A>"></a>Try&lt;A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Try_A_A__v_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Try identity constructor function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">v</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc"><span >Bound value to return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">A</span> v)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >A lifted operation that returns a value of A</span></div></div></div><div style="display:none" id="code-Try_A_A__v_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt; v</div></div></div><div class="member-title"><a name="Try&lt;A>"></a>Try&lt;A&gt;(Exception)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Try_A_Exception__ex_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Try identity constructor function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ex</div><div class="arg-type"><span class="ident">Exception</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Exception</span> ex)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >A lifted operation that returns a value of A</span></div></div></div><div style="display:none" id="code-Try_A_Exception__ex_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
            new Result&lt;A&gt;(ex)</div></div></div><div class="member-title"><a name="TryAsync&lt;A>"></a>TryAsync&lt;A&gt;(Func&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryAsync_A_Func_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >TryAsync constructor function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Function to run asynchronously</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >A lifted operation that returns a value of A</span></div></div></div><div style="display:none" id="code-TryAsync_A_Func_A_f_"><div class="section_title">SOURCE</div><div class="code"> 
            TryAsyncExtensions.Memo&lt;A&gt;(() =&gt;
                Task.Run(() =&gt; new Result&lt;A&gt;(f())))</div></div></div><div class="member-title"><a name="TryAsync&lt;A>"></a>TryAsync&lt;A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryAsync_A_A__v_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >TryAsync identity constructor function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">v</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc"><span >Bound value to return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">A</span> v)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >A lifted operation that returns a value of A</span></div></div></div><div style="display:none" id="code-TryAsync_A_A__v_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
            Task.FromResult(new Result&lt;A&gt;(v))</div></div></div><div class="member-title"><a name="TryAsync&lt;A>"></a>TryAsync&lt;A&gt;(Exception)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryAsync_A_Exception__ex_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >TryOptionAsync constructor function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ex</div><div class="arg-type"><span class="ident">Exception</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Exception</span> ex)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >A lifted operation that returns a value of A</span></div></div></div><div style="display:none" id="code-TryAsync_A_Exception__ex_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
            Task.FromResult(new Result&lt;A&gt;(ex))</div></div></div><div class="member-title"><a name="tryfun&lt;Env, A>"></a>tryfun&lt;Env, A&gt;(Reader&lt;Env, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryfun_Env_A_Reader_Env_A_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">tryfun</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;(<span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tryfun_Env_A_Reader_Env_A_ma_"><div class="section_title">SOURCE</div><div class="code"> () =&gt; 
            from x in ma
            select x</div></div></div><div class="member-title"><a name="tryfun&lt;MonoidW, W, A>"></a>tryfun&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryfun_MonoidW_W_A_Writer_MonoidW_W_A_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">tryfun</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-tryfun_MonoidW_W_A_Writer_MonoidW_W_A_ma_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
                from x in ma
                select x</div></div></div><div class="member-title"><a name="tryfun&lt;S, A>"></a>tryfun&lt;S, A&gt;(State&lt;S, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryfun_S_A_State_S_A_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">tryfun</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tryfun_S_A_State_S_A_ma_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
            from x in ma
            select x</div></div></div><div class="member-title"><a name="tryfun&lt;T>"></a>tryfun&lt;T&gt;(Func&lt;Try&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryfun_T_Func_Try&lt;T>_tryDel_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; <span class="ident">tryfun</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;&gt; tryDel)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tryfun_T_Func_Try&lt;T>_tryDel_"><div class="section_title">SOURCE</div><div class="code"> () =&gt; 
            tryDel()().Value</div></div></div><div class="member-title"><a name="tryfun&lt;T>"></a>tryfun&lt;T&gt;(Func&lt;TryAsync&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryfun_T_Func_TryAsync&lt;T>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">tryfun</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tryfun_T_Func_TryAsync&lt;T>_f_"><div class="section_title">SOURCE</div><div class="code"> () =&gt; 
            f().Try()</div></div></div><div class="member-title"><a name="tryfun&lt;T>"></a>tryfun&lt;T&gt;(Func&lt;TryOption&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryfun_T_Func_TryOption&lt;T>_tryDel_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">tryDel</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">tryfun</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;&gt; tryDel)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tryfun_T_Func_TryOption&lt;T>_tryDel_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt; tryDel()()</div></div></div><div class="member-title"><a name="tryfun&lt;T>"></a>tryfun&lt;T&gt;(Func&lt;TryOptionAsync&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryfun_T_Func_TryOptionAsync&lt;T>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">tryfun</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tryfun_T_Func_TryOptionAsync&lt;T>_f_"><div class="section_title">SOURCE</div><div class="code"> () =&gt; 
            f().Try()</div></div></div><div class="member-title"><a name="TryOption&lt;T>"></a>TryOption&lt;T&gt;(Func&lt;Option&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryOption_T_Func_Option&lt;T>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >TryOption constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-TryOption_T_Func_Option&lt;T>_f_"><div class="section_title">SOURCE</div><div class="code">
            TryOptionExtensions.Memo&lt;T&gt;(() =&gt; f())</div></div></div><div class="member-title"><a name="TryOption&lt;T>"></a>TryOption&lt;T&gt;(Func&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryOption_T_Func_T_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >TryOption constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-TryOption_T_Func_T_f_"><div class="section_title">SOURCE</div><div class="code">
            TryOptionExtensions.Memo&lt;T&gt;(() =&gt; Optional(f()))</div></div></div><div class="member-title"><a name="TryOption&lt;T>"></a>TryOption&lt;T&gt;(T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryOption_T_T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >TryOption constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-TryOption_T_T__value_"><div class="section_title">SOURCE</div><div class="code"> () =&gt; 
            Optional(value)</div></div></div><div class="member-title"><a name="TryOption&lt;T>"></a>TryOption&lt;T&gt;(Option&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryOption_T_Option_T_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >TryOption constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-TryOption_T_Option_T_value_"><div class="section_title">SOURCE</div><div class="code"> () =&gt; 
            value</div></div></div><div class="member-title"><a name="TryOption&lt;T>"></a>TryOption&lt;T&gt;(Exception)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryOption_T_Exception__ex_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >TryOption constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ex</div><div class="arg-type"><span class="ident">Exception</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt; <span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Exception</span> ex)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-TryOption_T_Exception__ex_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
            new OptionalResult&lt;T&gt;(ex)</div></div></div><div class="member-title"><a name="TryOptionAsync&lt;A>"></a>TryOptionAsync&lt;A&gt;(Func&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryOptionAsync_A_Func_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >TryOptionAsync constructor function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Function to run asynchronously</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >A lifted operation that returns a value of A</span></div></div></div><div style="display:none" id="code-TryOptionAsync_A_Func_A_f_"><div class="section_title">SOURCE</div><div class="code">
            TryOptionAsyncExtensions.Memo&lt;A&gt;(() =&gt;
                Task.Run(() =&gt; new OptionalResult&lt;A&gt;(f())))</div></div></div><div class="member-title"><a name="TryOptionAsync&lt;A>"></a>TryOptionAsync&lt;A&gt;(Func&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryOptionAsync_A_Func_Option&lt;A>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >TryOptionAsync constructor function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to run asynchronously</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >A lifted operation that returns a value of A</span></div></div></div><div style="display:none" id="code-TryOptionAsync_A_Func_Option&lt;A>_f_"><div class="section_title">SOURCE</div><div class="code">
            TryOptionAsyncExtensions.Memo&lt;A&gt;(() =&gt;
                Task.Run(() =&gt; new OptionalResult&lt;A&gt;(f())))</div></div></div><div class="member-title"><a name="TryOptionAsync&lt;A>"></a>TryOptionAsync&lt;A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryOptionAsync_A_A__v_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >TryOptionAsync constructor function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">v</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc"><span >Bound value to return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">A</span> v)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >A lifted operation that returns a value of A</span></div></div></div><div style="display:none" id="code-TryOptionAsync_A_A__v_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
            Task.FromResult(new OptionalResult&lt;A&gt;(v))</div></div></div><div class="member-title"><a name="TryOptionAsync&lt;A>"></a>TryOptionAsync&lt;A&gt;(Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryOptionAsync_A_Option_A_v_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >TryOptionAsync constructor function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">v</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Bound value to return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; v)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >A lifted operation that returns a value of A</span></div></div></div><div style="display:none" id="code-TryOptionAsync_A_Option_A_v_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
            Task.FromResult(new OptionalResult&lt;A&gt;(v))</div></div></div><div class="member-title"><a name="TryOptionAsync&lt;A>"></a>TryOptionAsync&lt;A&gt;(Exception)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryOptionAsync_A_Exception__ex_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >TryOptionAsync constructor function </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ex</div><div class="arg-type"><span class="ident">Exception</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Exception</span> ex)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >A lifted operation that returns a value of A</span></div></div></div><div style="display:none" id="code-TryOptionAsync_A_Exception__ex_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
            Task.FromResult(new OptionalResult&lt;A&gt;(ex))</div></div></div><div class="member-title"><a name="tryread&lt;Env, A>"></a>tryread&lt;Env, A&gt;(Reader&lt;Env, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryread_Env_A_Reader_Env_A_m_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Run the reader and catch exceptions </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">m</div><div class="arg-type"><span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt; <span class="ident">tryread</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;(<span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt; m)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tryread_Env_A_Reader_Env_A_m_"><div class="section_title">SOURCE</div><div class="code">
            state =&gt;
            {
                try
                {
                    return m(state);
                }
                catch
                {
                    return (default(A), true);
                }
            }</div></div></div><div class="member-title"><a name="trystate&lt;S, A>"></a>trystate&lt;S, A&gt;(State&lt;S, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trystate_S_A_State_S_A_value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt; <span class="ident">trystate</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt; value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-trystate_S_A_State_S_A_value_"><div class="section_title">SOURCE</div><div class="code">
            state =&gt;
            {
                try
                {
                    return value(state);
                }
                catch
                {
                    return (default(A), state, true);
                }
            }</div></div></div><div class="member-title"><a name="tryuse&lt;T, R>"></a>tryuse&lt;T, R&gt;(Func&lt;T&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryuse_T_R_Func_T_disposable__Func_T_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functional implementation of the using(...) { } pattern </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">disposable</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Disposable to use</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Inner map function that uses the disposable value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt; <span class="ident">tryuse</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; disposable, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Result of f(disposable)</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="ident">IDisposable</span></div></div><div style="display:none" id="code-tryuse_T_R_Func_T_disposable__Func_T_R_f_"><div class="section_title">SOURCE</div><div class="code">
            Try(disposable)
                .Map(v =&gt;
                {
                    try
                    {
                        return f(v);
                    }
                    finally
                    {
                        v.Dispose();
                    }
                })</div></div></div><div class="member-title"><a name="tryuse&lt;T, R>"></a>tryuse&lt;T, R&gt;(T, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryuse_T_R_T__disposable__Func_T_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functional implementation of the using(...) { } pattern </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">disposable</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Disposable to use</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Inner map function that uses the disposable value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">R</span>&gt; <span class="ident">tryuse</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">T</span> disposable, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Result of f(disposable)</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="ident">IDisposable</span></div></div><div style="display:none" id="code-tryuse_T_R_T__disposable__Func_T_R_f_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
        {
            try
            {
                return f(disposable);
            }
            finally
            {
                disposable.Dispose();
            }
        }</div></div></div><div class="member-title"><a name="trywrite&lt;MonoidW, W, A>"></a>trywrite&lt;MonoidW, W, A&gt;(Writer&lt;MonoidW, W, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trywrite_MonoidW_W_A_Writer_MonoidW_W_A_m_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Run the writer and catch exceptions </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">m</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">trywrite</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; m)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-trywrite_MonoidW_W_A_Writer_MonoidW_W_A_m_"><div class="section_title">SOURCE</div><div class="code">
                () =&gt;
                {
                    try
                    {
                        return m();
                    }
                    catch
                    {
                        return (default(A), default(MonoidW).Empty(), true);
                    }
                }</div></div></div><div class="member-title"><a name="tuple&lt;T1, T2, T3, T4, T5, T6, T7>"></a>tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;(T1, T2, T3, T4, T5, T6, T7)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tuple_T1_T2_T3_T4_T5_T6_T7_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5__T6__item6__T7__item7_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item4</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item5</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item6</div><div class="arg-type"><span class="ident">T6</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item7</div><div class="arg-type"><span class="ident">T7</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Tuple&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; <span class="ident">tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2, <span class="ident">T3</span> item3, <span class="ident">T4</span> item4, <span class="ident">T5</span> item5, <span class="ident">T6</span> item6, <span class="ident">T7</span> item7)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tuple_T1_T2_T3_T4_T5_T6_T7_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5__T6__item6__T7__item7_"><div class="section_title">SOURCE</div><div class="code">
            System.Tuple.Create(item1, item2, item3, item4, item5, item6, item7)</div></div></div><div class="member-title"><a name="Tuple&lt;T1, T2, T3, T4, T5, T6, T7>"></a>Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;(T1, T2, T3, T4, T5, T6, T7)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tuple_T1_T2_T3_T4_T5_T6_T7_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5__T6__item6__T7__item7_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tuple constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item4</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item5</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item6</div><div class="arg-type"><span class="ident">T6</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item7</div><div class="arg-type"><span class="ident">T7</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2, <span class="ident">T3</span> item3, <span class="ident">T4</span> item4, <span class="ident">T5</span> item5, <span class="ident">T6</span> item6, <span class="ident">T7</span> item7)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Tuple_T1_T2_T3_T4_T5_T6_T7_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5__T6__item6__T7__item7_"><div class="section_title">SOURCE</div><div class="code">
            System.Tuple.Create(item1, item2, item3, item4, item5, item6, item7)</div></div></div><div class="member-title"><a name="tuple&lt;T1, T2, T3, T4, T5, T6>"></a>tuple&lt;T1, T2, T3, T4, T5, T6&gt;(T1, T2, T3, T4, T5, T6)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tuple_T1_T2_T3_T4_T5_T6_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5__T6__item6_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item4</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item5</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item6</div><div class="arg-type"><span class="ident">T6</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Tuple&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; <span class="ident">tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2, <span class="ident">T3</span> item3, <span class="ident">T4</span> item4, <span class="ident">T5</span> item5, <span class="ident">T6</span> item6)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tuple_T1_T2_T3_T4_T5_T6_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5__T6__item6_"><div class="section_title">SOURCE</div><div class="code">
            System.Tuple.Create(item1, item2, item3, item4, item5, item6)</div></div></div><div class="member-title"><a name="Tuple&lt;T1, T2, T3, T4, T5, T6>"></a>Tuple&lt;T1, T2, T3, T4, T5, T6&gt;(T1, T2, T3, T4, T5, T6)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tuple_T1_T2_T3_T4_T5_T6_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5__T6__item6_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tuple constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item4</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item5</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item6</div><div class="arg-type"><span class="ident">T6</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2, <span class="ident">T3</span> item3, <span class="ident">T4</span> item4, <span class="ident">T5</span> item5, <span class="ident">T6</span> item6)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Tuple_T1_T2_T3_T4_T5_T6_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5__T6__item6_"><div class="section_title">SOURCE</div><div class="code">
            System.Tuple.Create(item1, item2, item3, item4, item5, item6)</div></div></div><div class="member-title"><a name="tuple&lt;T1, T2, T3, T4, T5>"></a>tuple&lt;T1, T2, T3, T4, T5&gt;(T1, T2, T3, T4, T5)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tuple_T1_T2_T3_T4_T5_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item4</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item5</div><div class="arg-type"><span class="ident">T5</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Tuple&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; <span class="ident">tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2, <span class="ident">T3</span> item3, <span class="ident">T4</span> item4, <span class="ident">T5</span> item5)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tuple_T1_T2_T3_T4_T5_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5_"><div class="section_title">SOURCE</div><div class="code">
            System.Tuple.Create(item1, item2, item3, item4, item5)</div></div></div><div class="member-title"><a name="Tuple&lt;T1, T2, T3, T4, T5>"></a>Tuple&lt;T1, T2, T3, T4, T5&gt;(T1, T2, T3, T4, T5)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tuple_T1_T2_T3_T4_T5_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tuple constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item4</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item5</div><div class="arg-type"><span class="ident">T5</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2, <span class="ident">T3</span> item3, <span class="ident">T4</span> item4, <span class="ident">T5</span> item5)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Tuple_T1_T2_T3_T4_T5_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5_"><div class="section_title">SOURCE</div><div class="code">
            System.Tuple.Create(item1, item2, item3, item4, item5)</div></div></div><div class="member-title"><a name="tuple&lt;T1, T2, T3, T4>"></a>tuple&lt;T1, T2, T3, T4&gt;(T1, T2, T3, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tuple_T1_T2_T3_T4_T1__item1__T2__item2__T3__item3__T4__item4_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item4</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Tuple&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; <span class="ident">tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2, <span class="ident">T3</span> item3, <span class="ident">T4</span> item4)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tuple_T1_T2_T3_T4_T1__item1__T2__item2__T3__item3__T4__item4_"><div class="section_title">SOURCE</div><div class="code">
            System.Tuple.Create(item1, item2, item3, item4)</div></div></div><div class="member-title"><a name="Tuple&lt;T1, T2, T3, T4>"></a>Tuple&lt;T1, T2, T3, T4&gt;(T1, T2, T3, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tuple_T1_T2_T3_T4_T1__item1__T2__item2__T3__item3__T4__item4_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tuple constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item4</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2, <span class="ident">T3</span> item3, <span class="ident">T4</span> item4)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Tuple_T1_T2_T3_T4_T1__item1__T2__item2__T3__item3__T4__item4_"><div class="section_title">SOURCE</div><div class="code">
            System.Tuple.Create(item1, item2, item3, item4)</div></div></div><div class="member-title"><a name="tuple&lt;T1, T2, T3>"></a>tuple&lt;T1, T2, T3&gt;(T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tuple_T1_T2_T3_T1__item1__T2__item2__T3__item3_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item3</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Tuple&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; <span class="ident">tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2, <span class="ident">T3</span> item3)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tuple_T1_T2_T3_T1__item1__T2__item2__T3__item3_"><div class="section_title">SOURCE</div><div class="code">
            System.Tuple.Create(item1, item2, item3)</div></div></div><div class="member-title"><a name="Tuple&lt;T1, T2, T3>"></a>Tuple&lt;T1, T2, T3&gt;(T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tuple_T1_T2_T3_T1__item1__T2__item2__T3__item3_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tuple constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item3</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2, <span class="ident">T3</span> item3)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Tuple_T1_T2_T3_T1__item1__T2__item2__T3__item3_"><div class="section_title">SOURCE</div><div class="code">
            System.Tuple.Create(item1, item2, item3)</div></div></div><div class="member-title"><a name="tuple&lt;T1, T2>"></a>tuple&lt;T1, T2&gt;(T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tuple_T1_T2_T1__item1__T2__item2_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;Use &#39;Tuple&#39;.  All constructor functions are renamed to have their first letter as a capital.&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; <span class="ident">tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-tuple_T1_T2_T1__item1__T2__item2_"><div class="section_title">SOURCE</div><div class="code">
            System.Tuple.Create(item1, item2)</div></div></div><div class="member-title"><a name="Tuple&lt;T1, T2>"></a>Tuple&lt;T1, T2&gt;(T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tuple_T1_T2_T1__item1__T2__item2_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tuple constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Tuple_T1_T2_T1__item1__T2__item2_"><div class="section_title">SOURCE</div><div class="code">
            System.Tuple.Create(item1, item2)</div></div></div><div class="member-title"><a name="Tuple&lt;T1>"></a>Tuple&lt;T1&gt;(T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tuple_T1_T1__item1_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tuple constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>&gt; <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>&gt;(<span class="ident">T1</span> item1)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Tuple_T1_T1__item1_"><div class="section_title">SOURCE</div><div class="code">
            System.Tuple.Create(item1)</div></div></div><div class="member-title"><a name="uncurry&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult>"></a>uncurry&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, Func&lt;T8, TResult&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-uncurry_T1_T2_T3_T4_T5_T6_T7_T8_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, Func&lt;T8, TResult>>>>>>>_function_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Transforms a curried function into a function that takes multiple arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">function</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">TResult</span>&gt; <span class="ident">uncurry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">TResult</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; function)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">TResult</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-uncurry_T1_T2_T3_T4_T5_T6_T7_T8_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, Func&lt;T8, TResult>>>>>>>_function_"><div class="section_title">SOURCE</div><div class="code">
            (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) =&gt; function(arg1)(arg2)(arg3)(arg4)(arg5)(arg6)(arg7)(arg8)</div></div></div><div class="member-title"><a name="Uncurry&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult>"></a>Uncurry&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, Func&lt;T8, TResult&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Uncurry_T1_T2_T3_T4_T5_T6_T7_T8_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, Func&lt;T8, TResult>>>>>>>_function_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Transforms a curried function into a function that takes multiple arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">function</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">TResult</span>&gt; <span class="ident">Uncurry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">TResult</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">Func</span>&lt;<span class="ident">T8</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; function)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">T8</span>, <span class="ident">TResult</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Uncurry_T1_T2_T3_T4_T5_T6_T7_T8_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, Func&lt;T8, TResult>>>>>>>_function_"><div class="section_title">SOURCE</div><div class="code">
            (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) =&gt; function(arg1)(arg2)(arg3)(arg4)(arg5)(arg6)(arg7)(arg8)</div></div></div><div class="member-title"><a name="uncurry&lt;T1, T2, T3, T4, T5, T6, T7, TResult>"></a>uncurry&lt;T1, T2, T3, T4, T5, T6, T7, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, TResult&gt;&gt;&gt;&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-uncurry_T1_T2_T3_T4_T5_T6_T7_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, TResult>>>>>>_function_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Transforms a curried function into a function that takes multiple arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">function</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">TResult</span>&gt; <span class="ident">uncurry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">TResult</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt; function)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">TResult</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-uncurry_T1_T2_T3_T4_T5_T6_T7_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, TResult>>>>>>_function_"><div class="section_title">SOURCE</div><div class="code">
            (arg1, arg2, arg3, arg4, arg5, arg6, arg7) =&gt; function(arg1)(arg2)(arg3)(arg4)(arg5)(arg6)(arg7)</div></div></div><div class="member-title"><a name="Uncurry&lt;T1, T2, T3, T4, T5, T6, T7, TResult>"></a>Uncurry&lt;T1, T2, T3, T4, T5, T6, T7, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, TResult&gt;&gt;&gt;&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Uncurry_T1_T2_T3_T4_T5_T6_T7_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, TResult>>>>>>_function_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Transforms a curried function into a function that takes multiple arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">function</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">TResult</span>&gt; <span class="ident">Uncurry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">TResult</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">Func</span>&lt;<span class="ident">T7</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt; function)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">TResult</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Uncurry_T1_T2_T3_T4_T5_T6_T7_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, Func&lt;T7, TResult>>>>>>_function_"><div class="section_title">SOURCE</div><div class="code">
            (arg1, arg2, arg3, arg4, arg5, arg6, arg7) =&gt; function(arg1)(arg2)(arg3)(arg4)(arg5)(arg6)(arg7)</div></div></div><div class="member-title"><a name="uncurry&lt;T1, T2, T3, T4, T5, T6, TResult>"></a>uncurry&lt;T1, T2, T3, T4, T5, T6, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, TResult&gt;&gt;&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-uncurry_T1_T2_T3_T4_T5_T6_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, TResult>>>>>_function_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Transforms a curried function into a function that takes multiple arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">function</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">TResult</span>&gt; <span class="ident">uncurry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">TResult</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt;&gt; function)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">TResult</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-uncurry_T1_T2_T3_T4_T5_T6_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, TResult>>>>>_function_"><div class="section_title">SOURCE</div><div class="code">
            (arg1, arg2, arg3, arg4, arg5, arg6) =&gt; function(arg1)(arg2)(arg3)(arg4)(arg5)(arg6)</div></div></div><div class="member-title"><a name="Uncurry&lt;T1, T2, T3, T4, T5, T6, TResult>"></a>Uncurry&lt;T1, T2, T3, T4, T5, T6, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, TResult&gt;&gt;&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Uncurry_T1_T2_T3_T4_T5_T6_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, TResult>>>>>_function_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Transforms a curried function into a function that takes multiple arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">function</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">TResult</span>&gt; <span class="ident">Uncurry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">TResult</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">Func</span>&lt;<span class="ident">T6</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt;&gt; function)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">TResult</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Uncurry_T1_T2_T3_T4_T5_T6_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, Func&lt;T6, TResult>>>>>_function_"><div class="section_title">SOURCE</div><div class="code">
            (arg1, arg2, arg3, arg4, arg5, arg6) =&gt; function(arg1)(arg2)(arg3)(arg4)(arg5)(arg6)</div></div></div><div class="member-title"><a name="uncurry&lt;T1, T2, T3, T4, T5, TResult>"></a>uncurry&lt;T1, T2, T3, T4, T5, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, TResult&gt;&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-uncurry_T1_T2_T3_T4_T5_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, TResult>>>>_function_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Transforms a curried function into a function that takes multiple arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">function</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">TResult</span>&gt; <span class="ident">uncurry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">TResult</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt; function)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">TResult</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-uncurry_T1_T2_T3_T4_T5_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, TResult>>>>_function_"><div class="section_title">SOURCE</div><div class="code">
            (arg1, arg2, arg3, arg4, arg5) =&gt; function(arg1)(arg2)(arg3)(arg4)(arg5)</div></div></div><div class="member-title"><a name="Uncurry&lt;T1, T2, T3, T4, T5, TResult>"></a>Uncurry&lt;T1, T2, T3, T4, T5, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, TResult&gt;&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Uncurry_T1_T2_T3_T4_T5_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, TResult>>>>_function_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Transforms a curried function into a function that takes multiple arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">function</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">TResult</span>&gt; <span class="ident">Uncurry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">TResult</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">Func</span>&lt;<span class="ident">T5</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;&gt; function)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">TResult</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Uncurry_T1_T2_T3_T4_T5_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, Func&lt;T5, TResult>>>>_function_"><div class="section_title">SOURCE</div><div class="code">
            (arg1, arg2, arg3, arg4, arg5) =&gt; function(arg1)(arg2)(arg3)(arg4)(arg5)</div></div></div><div class="member-title"><a name="uncurry&lt;T1, T2, T3, T4, TResult>"></a>uncurry&lt;T1, T2, T3, T4, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, TResult&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-uncurry_T1_T2_T3_T4_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, TResult>>>_function_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Transforms a curried function into a function that takes multiple arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">function</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">TResult</span>&gt; <span class="ident">uncurry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">TResult</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt; function)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">TResult</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-uncurry_T1_T2_T3_T4_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, TResult>>>_function_"><div class="section_title">SOURCE</div><div class="code">
            (arg1, arg2, arg3, arg4) =&gt; function(arg1)(arg2)(arg3)(arg4)</div></div></div><div class="member-title"><a name="Uncurry&lt;T1, T2, T3, T4, TResult>"></a>Uncurry&lt;T1, T2, T3, T4, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, Func&lt;T4, TResult&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Uncurry_T1_T2_T3_T4_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, TResult>>>_function_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Transforms a curried function into a function that takes multiple arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">function</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">TResult</span>&gt; <span class="ident">Uncurry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">TResult</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">Func</span>&lt;<span class="ident">T4</span>, <span class="ident">TResult</span>&gt;&gt;&gt;&gt; function)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">TResult</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Uncurry_T1_T2_T3_T4_TResult_Func_T1_Func&lt;T2, Func&lt;T3, Func&lt;T4, TResult>>>_function_"><div class="section_title">SOURCE</div><div class="code">
            (arg1, arg2, arg3, arg4) =&gt; function(arg1)(arg2)(arg3)(arg4)</div></div></div><div class="member-title"><a name="uncurry&lt;T1, T2, T3, TResult>"></a>uncurry&lt;T1, T2, T3, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, TResult&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-uncurry_T1_T2_T3_TResult_Func_T1_Func&lt;T2, Func&lt;T3, TResult>>_function_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Transforms a curried function into a function that takes multiple arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">function</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">TResult</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">TResult</span>&gt; <span class="ident">uncurry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">TResult</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">TResult</span>&gt;&gt;&gt; function)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">TResult</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-uncurry_T1_T2_T3_TResult_Func_T1_Func&lt;T2, Func&lt;T3, TResult>>_function_"><div class="section_title">SOURCE</div><div class="code">
            (arg1, arg2, arg3) =&gt; function(arg1)(arg2)(arg3)</div></div></div><div class="member-title"><a name="Uncurry&lt;T1, T2, T3, TResult>"></a>Uncurry&lt;T1, T2, T3, TResult&gt;(Func&lt;T1, Func&lt;T2, Func&lt;T3, TResult&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Uncurry_T1_T2_T3_TResult_Func_T1_Func&lt;T2, Func&lt;T3, TResult>>_function_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Transforms a curried function into a function that takes multiple arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">function</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">TResult</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">TResult</span>&gt; <span class="ident">Uncurry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">TResult</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">Func</span>&lt;<span class="ident">T3</span>, <span class="ident">TResult</span>&gt;&gt;&gt; function)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">TResult</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Uncurry_T1_T2_T3_TResult_Func_T1_Func&lt;T2, Func&lt;T3, TResult>>_function_"><div class="section_title">SOURCE</div><div class="code">
            (arg1, arg2, arg3) =&gt; function(arg1)(arg2)(arg3)</div></div></div><div class="member-title"><a name="uncurry&lt;T1, T2, TResult>"></a>uncurry&lt;T1, T2, TResult&gt;(Func&lt;T1, Func&lt;T2, TResult&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-uncurry_T1_T2_TResult_Func_T1_Func&lt;T2, TResult>_function_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Transforms a curried function into a function that takes multiple arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">function</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">TResult</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">TResult</span>&gt; <span class="ident">uncurry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">TResult</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">TResult</span>&gt;&gt; function)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">TResult</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-uncurry_T1_T2_TResult_Func_T1_Func&lt;T2, TResult>_function_"><div class="section_title">SOURCE</div><div class="code">
            (arg1, arg2) =&gt; function(arg1)(arg2)</div></div></div><div class="member-title"><a name="Uncurry&lt;T1, T2, TResult>"></a>Uncurry&lt;T1, T2, TResult&gt;(Func&lt;T1, Func&lt;T2, TResult&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Uncurry_T1_T2_TResult_Func_T1_Func&lt;T2, TResult>_function_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Transforms a curried function into a function that takes multiple arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">function</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">TResult</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">TResult</span>&gt; <span class="ident">Uncurry</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">TResult</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">Func</span>&lt;<span class="ident">T2</span>, <span class="ident">TResult</span>&gt;&gt; function)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">TResult</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Uncurry_T1_T2_TResult_Func_T1_Func&lt;T2, TResult>_function_"><div class="section_title">SOURCE</div><div class="code">
            (arg1, arg2) =&gt; function(arg1)(arg2)</div></div></div><div class="member-title"><a name="use&lt;T, R>"></a>use&lt;T, R&gt;(Func&lt;T&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-use_T_R_Func_T_generator__Func_T_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functional implementation of the using(...) { } pattern </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">generator</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Disposable to use</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Inner map function that uses the disposable value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">use</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>&gt; generator, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Result of f(disposable)</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">class</span> <span class="ident">IDisposable</span></div></div><div style="display:none" id="code-use_T_R_Func_T_generator__Func_T_R_f_"><div class="section_title">SOURCE</div><div class="code">
            var value = generator();
            try
            {
                return f(value);
            }
            finally
            {
                value.Dispose();
            }
        </div></div></div><div class="member-title"><a name="use&lt;T, R>"></a>use&lt;T, R&gt;(T, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-use_T_R_T__disposable__Func_T_R_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functional implementation of the using(...) { } pattern </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">disposable</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Disposable to use</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Inner map function that uses the disposable value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">use</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">T</span> disposable, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Result of f(disposable)</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="ident">IDisposable</span></div></div><div style="display:none" id="code-use_T_R_T__disposable__Func_T_R_f_"><div class="section_title">SOURCE</div><div class="code">
            try
            {
                return f(disposable);
            }
            finally
            {
                disposable.Dispose();
            }
        </div></div></div><div class="member-title"><a name="use&lt;T, U>"></a>use&lt;T, U&gt;(Try&lt;T&gt;, Func&lt;T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-use_T_U_Try_T_computation__Func_T_U_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Use with Try monad in LINQ expressions to auto-clean up disposable items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">computation</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">U</span>&gt; <span class="ident">use</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; computation, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">U</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">class</span> <span class="ident">IDisposable</span></div></div><div style="display:none" id="code-use_T_U_Try_T_computation__Func_T_U_map_"><div class="section_title">SOURCE</div><div class="code">
            computation.Use(map)</div></div></div><div class="member-title"><a name="use&lt;T, U>"></a>use&lt;T, U&gt;(Try&lt;T&gt;, Func&lt;T, Try&lt;U&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-use_T_U_Try_T_computation__Func_T_Try&lt;U>_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Use with Try monad in LINQ expressions to auto-clean up disposable items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">computation</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Try</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">U</span>&gt; <span class="ident">use</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">T</span>&gt; computation, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Try</span>&lt;<span class="ident">U</span>&gt;&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">U</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">class</span> <span class="ident">IDisposable</span></div></div><div style="display:none" id="code-use_T_U_Try_T_computation__Func_T_Try&lt;U>_bind_"><div class="section_title">SOURCE</div><div class="code">
            computation.Use(bind)</div></div></div><div class="member-title"><a name="use&lt;T, U>"></a>use&lt;T, U&gt;(Task&lt;T&gt;, Func&lt;T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-use_T_U_Task_T_computation__Func_T_U_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Use with Task in LINQ expressions to auto-clean up disposable items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">computation</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">U</span>&gt; <span class="ident">use</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt; computation, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">U</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">class</span> <span class="ident">IDisposable</span></div></div><div style="display:none" id="code-use_T_U_Task_T_computation__Func_T_U_map_"><div class="section_title">SOURCE</div><div class="code">
            T t = null;
            try
            {
                t = await computation;
                return map(t);
            }
            finally
            {
                t?.Dispose();
            }
        </div></div></div><div class="member-title"><a name="use&lt;T, U>"></a>use&lt;T, U&gt;(Task&lt;T&gt;, Func&lt;T, Task&lt;U&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-use_T_U_Task_T_computation__Func_T_Task&lt;U>_bind_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Use with Task in LINQ expressions to auto-clean up disposable items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">computation</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">U</span>&gt; <span class="ident">use</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">Task</span>&lt;<span class="ident">T</span>&gt; computation, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Task</span>&lt;<span class="ident">U</span>&gt;&gt; bind)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">U</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="keyword">class</span> <span class="ident">IDisposable</span></div></div><div style="display:none" id="code-use_T_U_Task_T_computation__Func_T_Task&lt;U>_bind_"><div class="section_title">SOURCE</div><div class="code">
            T t = null;
            try
            {
                t = await computation;
                return await bind(t);
            }
            finally
            {
                t?.Dispose();
            }
        </div></div></div><div class="member-title"><a name="VTuple"></a>VTuple()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-VTuple__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tuple constructor </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span> <span class="ident">VTuple</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span></div><div class="normal"></div></div></div><div style="display:none" id="code-VTuple__"><div class="section_title">SOURCE</div><div class="code">
            ValueTuple.Create()</div></div></div><div class="member-title"><a name="VTuple&lt;T1, T2, T3, T4, T5, T6, T7>"></a>VTuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;(T1, T2, T3, T4, T5, T6, T7)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-VTuple_T1_T2_T3_T4_T5_T6_T7_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5__T6__item6__T7__item7_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tuple constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item4</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item5</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item6</div><div class="arg-type"><span class="ident">T6</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item7</div><div class="arg-type"><span class="ident">T7</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; <span class="ident">VTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2, <span class="ident">T3</span> item3, <span class="ident">T4</span> item4, <span class="ident">T5</span> item5, <span class="ident">T6</span> item6, <span class="ident">T7</span> item7)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-VTuple_T1_T2_T3_T4_T5_T6_T7_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5__T6__item6__T7__item7_"><div class="section_title">SOURCE</div><div class="code">
            ValueTuple.Create(item1, item2, item3, item4, item5, item6, item7)</div></div></div><div class="member-title"><a name="VTuple&lt;T1, T2, T3, T4, T5, T6>"></a>VTuple&lt;T1, T2, T3, T4, T5, T6&gt;(T1, T2, T3, T4, T5, T6)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-VTuple_T1_T2_T3_T4_T5_T6_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5__T6__item6_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tuple constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item4</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item5</div><div class="arg-type"><span class="ident">T5</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item6</div><div class="arg-type"><span class="ident">T6</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; <span class="ident">VTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2, <span class="ident">T3</span> item3, <span class="ident">T4</span> item4, <span class="ident">T5</span> item5, <span class="ident">T6</span> item6)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-VTuple_T1_T2_T3_T4_T5_T6_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5__T6__item6_"><div class="section_title">SOURCE</div><div class="code">
            ValueTuple.Create(item1, item2, item3, item4, item5, item6)</div></div></div><div class="member-title"><a name="VTuple&lt;T1, T2, T3, T4, T5>"></a>VTuple&lt;T1, T2, T3, T4, T5&gt;(T1, T2, T3, T4, T5)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-VTuple_T1_T2_T3_T4_T5_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tuple constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item4</div><div class="arg-type"><span class="ident">T4</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item5</div><div class="arg-type"><span class="ident">T5</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; <span class="ident">VTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2, <span class="ident">T3</span> item3, <span class="ident">T4</span> item4, <span class="ident">T5</span> item5)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-VTuple_T1_T2_T3_T4_T5_T1__item1__T2__item2__T3__item3__T4__item4__T5__item5_"><div class="section_title">SOURCE</div><div class="code">
            ValueTuple.Create(item1, item2, item3, item4, item5)</div></div></div><div class="member-title"><a name="VTuple&lt;T1, T2, T3, T4>"></a>VTuple&lt;T1, T2, T3, T4&gt;(T1, T2, T3, T4)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-VTuple_T1_T2_T3_T4_T1__item1__T2__item2__T3__item3__T4__item4_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tuple constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item4</div><div class="arg-type"><span class="ident">T4</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; <span class="ident">VTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2, <span class="ident">T3</span> item3, <span class="ident">T4</span> item4)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-VTuple_T1_T2_T3_T4_T1__item1__T2__item2__T3__item3__T4__item4_"><div class="section_title">SOURCE</div><div class="code">
            ValueTuple.Create(item1, item2, item3, item4)</div></div></div><div class="member-title"><a name="VTuple&lt;T1, T2, T3>"></a>VTuple&lt;T1, T2, T3&gt;(T1, T2, T3)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-VTuple_T1_T2_T3_T1__item1__T2__item2__T3__item3_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tuple constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item3</div><div class="arg-type"><span class="ident">T3</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; <span class="ident">VTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2, <span class="ident">T3</span> item3)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-VTuple_T1_T2_T3_T1__item1__T2__item2__T3__item3_"><div class="section_title">SOURCE</div><div class="code">
            ValueTuple.Create(item1, item2, item3)</div></div></div><div class="member-title"><a name="VTuple&lt;T1, T2>"></a>VTuple&lt;T1, T2&gt;(T1, T2)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-VTuple_T1_T2_T1__item1__T2__item2_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tuple constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">item2</div><div class="arg-type"><span class="ident">T2</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; <span class="ident">VTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">T1</span> item1, <span class="ident">T2</span> item2)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-VTuple_T1_T2_T1__item1__T2__item2_"><div class="section_title">SOURCE</div><div class="code">
            ValueTuple.Create(item1, item2)</div></div></div><div class="member-title"><a name="VTuple&lt;T1>"></a>VTuple&lt;T1&gt;(T1)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-VTuple_T1_T1__item1_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tuple constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item1</div><div class="arg-type"><span class="ident">T1</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>&gt; <span class="ident">VTuple</span>&lt;<span class="ident">T1</span>&gt;(<span class="ident">T1</span> item1)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">T1</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-VTuple_T1_T1__item1_"><div class="section_title">SOURCE</div><div class="code">
            ValueTuple.Create(item1)</div></div></div><div class="member-title"><a name="with&lt;T, R>"></a>with&lt;T, R&gt;(T, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T_R_T__value__Func_T_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Use with the &#39;match&#39; function to match values and map a result </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">with</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">T</span> value, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-with_T_R_T__value__Func_T_R_map_"><div class="section_title">SOURCE</div><div class="code">
            (T input) =&gt;
                EqualityComparer&lt;T&gt;.Default.Equals(input, value)
                    ? Some(map(input))
                    : None</div></div></div><div class="member-title"><a name="with&lt;T, R>"></a>with&lt;T, R&gt;(Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T_R_Func_T_R_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Use with the &#39;match&#39; function to match values and map a result </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt; <span class="ident">with</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="ident">Exception</span></div></div><div style="display:none" id="code-with_T_R_Func_T_R_map_"><div class="section_title">SOURCE</div><div class="code">
            (Exception input) =&gt;
                input is T
                    ? Some(map((T)input))
                    : None</div></div></div><div class="member-title"><a name="with&lt;T1, T2, R>"></a>with&lt;T1, T2, R&gt;(Tuple&lt;T1, T2&gt;, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T1_T2_R_Tuple_T1_T2_self__Func_T1_T2_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;&#39;with&#39; has been renamed to &#39;map&#39;, please use that instead&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">with</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-with_T1_T2_R_Tuple_T1_T2_self__Func_T1_T2_R_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2)</div></div></div><div class="member-title"><a name="with&lt;T1, T2, R>"></a>with&lt;T1, T2, R&gt;(T1, T2, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T1_T2_R_T1__value1__T2__value2__Func_T1_T2_R_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projects values into a lambda Useful when one needs to declare a local variable which breaks your expression.  This allows you to keep the expression going. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;&#39;with&#39; has been renamed to &#39;map&#39;, please use that instead&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">with</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="ident">T1</span> value1, <span class="ident">T2</span> value2, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-with_T1_T2_R_T1__value1__T2__value2__Func_T1_T2_R_project_"><div class="section_title">SOURCE</div><div class="code">
            project(value1, value2)</div></div></div><div class="member-title"><a name="With&lt;T1, T2, R>"></a>With&lt;T1, T2, R&gt;(Tuple&lt;T1, T2&gt;, Func&lt;T1, T2, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-With_T1_T2_R_Tuple_T1_T2_self__Func_T1_T2_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;With&#39; has been renamed to &#39;Map&#39;, please use that instead&quot;)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">With</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-With_T1_T2_R_Tuple_T1_T2_self__Func_T1_T2_R_func_"><div class="section_title">SOURCE</div><div class="code">
            return func(self.Item1, self.Item2);
        </div></div></div><div class="member-title"><a name="with&lt;T1, T2, T3, R>"></a>with&lt;T1, T2, T3, R&gt;(Tuple&lt;T1, T2, T3&gt;, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T1_T2_T3_R_Tuple_T1_T2_T3_self__Func_T1_T2_T3_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;&#39;with&#39; has been renamed to &#39;map&#39;, please use that instead&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">with</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-with_T1_T2_T3_R_Tuple_T1_T2_T3_self__Func_T1_T2_T3_R_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3)</div></div></div><div class="member-title"><a name="with&lt;T1, T2, T3, R>"></a>with&lt;T1, T2, T3, R&gt;(T1, T2, T3, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T1_T2_T3_R_T1__value1__T2__value2__T3__value3__Func_T1_T2_T3_R_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projects values into a lambda Useful when one needs to declare a local variable which breaks your expression.  This allows you to keep the expression going. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value1</div><div class="arg-type"><span class="ident">T1</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value2</div><div class="arg-type"><span class="ident">T2</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value3</div><div class="arg-type"><span class="ident">T3</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;&#39;with&#39; has been renamed to &#39;map&#39;, please use that instead&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">with</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="ident">T1</span> value1, <span class="ident">T2</span> value2, <span class="ident">T3</span> value3, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-with_T1_T2_T3_R_T1__value1__T2__value2__T3__value3__Func_T1_T2_T3_R_project_"><div class="section_title">SOURCE</div><div class="code">
            project(value1, value2, value3)</div></div></div><div class="member-title"><a name="With&lt;T1, T2, T3, R>"></a>With&lt;T1, T2, T3, R&gt;(Tuple&lt;T1, T2, T3&gt;, Func&lt;T1, T2, T3, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-With_T1_T2_T3_R_Tuple_T1_T2_T3_self__Func_T1_T2_T3_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;With&#39; has been renamed to &#39;Map&#39;, please use that instead&quot;)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">With</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-With_T1_T2_T3_R_Tuple_T1_T2_T3_self__Func_T1_T2_T3_R_func_"><div class="section_title">SOURCE</div><div class="code">
            return func(self.Item1, self.Item2, self.Item3);
        </div></div></div><div class="member-title"><a name="with&lt;T1, T2, T3, T4, R>"></a>with&lt;T1, T2, T3, T4, R&gt;(Tuple&lt;T1, T2, T3, T4&gt;, Func&lt;T1, T2, T3, T4, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T1_T2_T3_T4_R_Tuple_T1_T2_T3_T4_self__Func_T1_T2_T3_T4_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;&#39;with&#39; has been renamed to &#39;map&#39;, please use that instead&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">with</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-with_T1_T2_T3_T4_R_Tuple_T1_T2_T3_T4_self__Func_T1_T2_T3_T4_R_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4)</div></div></div><div class="member-title"><a name="With&lt;T1, T2, T3, T4, R>"></a>With&lt;T1, T2, T3, T4, R&gt;(Tuple&lt;T1, T2, T3, T4&gt;, Func&lt;T1, T2, T3, T4, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-With_T1_T2_T3_T4_R_Tuple_T1_T2_T3_T4_self__Func_T1_T2_T3_T4_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;With&#39; has been renamed to &#39;Map&#39;, please use that instead&quot;)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">With</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-With_T1_T2_T3_T4_R_Tuple_T1_T2_T3_T4_self__Func_T1_T2_T3_T4_R_func_"><div class="section_title">SOURCE</div><div class="code">
            return func(self.Item1, self.Item2, self.Item3, self.Item4);
        </div></div></div><div class="member-title"><a name="with&lt;T1, T2, T3, T4, T5, R>"></a>with&lt;T1, T2, T3, T4, T5, R&gt;(Tuple&lt;T1, T2, T3, T4, T5&gt;, Func&lt;T1, T2, T3, T4, T5, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T1_T2_T3_T4_T5_R_Tuple_T1_T2_T3_T4_T5_self__Func_T1_T2_T3_T4_T5_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;&#39;with&#39; has been renamed to &#39;map&#39;, please use that instead&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">with</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-with_T1_T2_T3_T4_T5_R_Tuple_T1_T2_T3_T4_T5_self__Func_T1_T2_T3_T4_T5_R_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5)</div></div></div><div class="member-title"><a name="With&lt;T1, T2, T3, T4, T5, R>"></a>With&lt;T1, T2, T3, T4, T5, R&gt;(Tuple&lt;T1, T2, T3, T4, T5&gt;, Func&lt;T1, T2, T3, T4, T5, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-With_T1_T2_T3_T4_T5_R_Tuple_T1_T2_T3_T4_T5_self__Func_T1_T2_T3_T4_T5_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;With&#39; has been renamed to &#39;Map&#39;, please use that instead&quot;)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">With</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-With_T1_T2_T3_T4_T5_R_Tuple_T1_T2_T3_T4_T5_self__Func_T1_T2_T3_T4_T5_R_func_"><div class="section_title">SOURCE</div><div class="code">
            return func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5);
        </div></div></div><div class="member-title"><a name="with&lt;T1, T2, T3, T4, T5, T6, R>"></a>with&lt;T1, T2, T3, T4, T5, T6, R&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6&gt;, Func&lt;T1, T2, T3, T4, T5, T6, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T1_T2_T3_T4_T5_T6_R_Tuple_T1_T2_T3_T4_T5_T6_self__Func_T1_T2_T3_T4_T5_T6_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;&#39;with&#39; has been renamed to &#39;map&#39;, please use that instead&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">with</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-with_T1_T2_T3_T4_T5_T6_R_Tuple_T1_T2_T3_T4_T5_T6_self__Func_T1_T2_T3_T4_T5_T6_R_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6)</div></div></div><div class="member-title"><a name="With&lt;T1, T2, T3, T4, T5, T6, R>"></a>With&lt;T1, T2, T3, T4, T5, T6, R&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6&gt;, Func&lt;T1, T2, T3, T4, T5, T6, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-With_T1_T2_T3_T4_T5_T6_R_Tuple_T1_T2_T3_T4_T5_T6_self__Func_T1_T2_T3_T4_T5_T6_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;With&#39; has been renamed to &#39;Map&#39;, please use that instead&quot;)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">With</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-With_T1_T2_T3_T4_T5_T6_R_Tuple_T1_T2_T3_T4_T5_T6_self__Func_T1_T2_T3_T4_T5_T6_R_func_"><div class="section_title">SOURCE</div><div class="code">
            return func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6);
        </div></div></div><div class="member-title"><a name="with&lt;T1, T2, T3, T4, T5, T6, T7, R>"></a>with&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;, Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T1_T2_T3_T4_T5_T6_T7_R_Tuple_T1_T2_T3_T4_T5_T6_T7_self__Func_T1_T2_T3_T4_T5_T6_T7_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;&#39;with&#39; has been renamed to &#39;map&#39;, please use that instead&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">with</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-with_T1_T2_T3_T4_T5_T6_T7_R_Tuple_T1_T2_T3_T4_T5_T6_T7_self__Func_T1_T2_T3_T4_T5_T6_T7_R_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7)</div></div></div><div class="member-title"><a name="With&lt;T1, T2, T3, T4, T5, T6, T7, R>"></a>With&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;, Func&lt;T1, T2, T3, T4, T5, T6, T7, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-With_T1_T2_T3_T4_T5_T6_T7_R_Tuple_T1_T2_T3_T4_T5_T6_T7_self__Func_T1_T2_T3_T4_T5_T6_T7_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;With&#39; has been renamed to &#39;Map&#39;, please use that instead&quot;)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">With</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"></div></div></div><div style="display:none" id="code-With_T1_T2_T3_T4_T5_T6_T7_R_Tuple_T1_T2_T3_T4_T5_T6_T7_self__Func_T1_T2_T3_T4_T5_T6_T7_R_func_"><div class="section_title">SOURCE</div><div class="code">
            return func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7);
        </div></div></div><div class="member-title"><a name="with&lt;T1, T2, T3, T4, T5, T6, T7>"></a>with&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;, Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T1_T2_T3_T4_T5_T6_T7_Tuple_T1_T2_T3_T4_T5_T6_T7_self__Action_T1_T2_T3_T4_T5_T6_T7_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;&#39;with&#39; has been renamed to &#39;map&#39;, please use that instead&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">with</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; func)</div></div><div style="display:none" id="code-with_T1_T2_T3_T4_T5_T6_T7_Tuple_T1_T2_T3_T4_T5_T6_T7_self__Action_T1_T2_T3_T4_T5_T6_T7_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="With&lt;T1, T2, T3, T4, T5, T6, T7>"></a>With&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;, Action&lt;T1, T2, T3, T4, T5, T6, T7&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-With_T1_T2_T3_T4_T5_T6_T7_Tuple_T1_T2_T3_T4_T5_T6_T7_self__Action_T1_T2_T3_T4_T5_T6_T7_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;With&#39; has been renamed to &#39;Map&#39;, please use that instead&quot;)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">With</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>, <span class="ident">T7</span>&gt; func)</div></div><div style="display:none" id="code-With_T1_T2_T3_T4_T5_T6_T7_Tuple_T1_T2_T3_T4_T5_T6_T7_self__Action_T1_T2_T3_T4_T5_T6_T7_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="with&lt;T1, T2, T3, T4, T5, T6>"></a>with&lt;T1, T2, T3, T4, T5, T6&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6&gt;, Action&lt;T1, T2, T3, T4, T5, T6&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T1_T2_T3_T4_T5_T6_Tuple_T1_T2_T3_T4_T5_T6_self__Action_T1_T2_T3_T4_T5_T6_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;&#39;with&#39; has been renamed to &#39;map&#39;, please use that instead&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">with</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; func)</div></div><div style="display:none" id="code-with_T1_T2_T3_T4_T5_T6_Tuple_T1_T2_T3_T4_T5_T6_self__Action_T1_T2_T3_T4_T5_T6_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="With&lt;T1, T2, T3, T4, T5, T6>"></a>With&lt;T1, T2, T3, T4, T5, T6&gt;(Tuple&lt;T1, T2, T3, T4, T5, T6&gt;, Action&lt;T1, T2, T3, T4, T5, T6&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-With_T1_T2_T3_T4_T5_T6_Tuple_T1_T2_T3_T4_T5_T6_self__Action_T1_T2_T3_T4_T5_T6_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;With&#39; has been renamed to &#39;Map&#39;, please use that instead&quot;)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">With</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>, <span class="ident">T6</span>&gt; func)</div></div><div style="display:none" id="code-With_T1_T2_T3_T4_T5_T6_Tuple_T1_T2_T3_T4_T5_T6_self__Action_T1_T2_T3_T4_T5_T6_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="with&lt;T1, T2, T3, T4, T5>"></a>with&lt;T1, T2, T3, T4, T5&gt;(Tuple&lt;T1, T2, T3, T4, T5&gt;, Action&lt;T1, T2, T3, T4, T5&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T1_T2_T3_T4_T5_Tuple_T1_T2_T3_T4_T5_self__Action_T1_T2_T3_T4_T5_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;&#39;with&#39; has been renamed to &#39;map&#39;, please use that instead&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">with</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; func)</div></div><div style="display:none" id="code-with_T1_T2_T3_T4_T5_Tuple_T1_T2_T3_T4_T5_self__Action_T1_T2_T3_T4_T5_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="With&lt;T1, T2, T3, T4, T5>"></a>With&lt;T1, T2, T3, T4, T5&gt;(Tuple&lt;T1, T2, T3, T4, T5&gt;, Action&lt;T1, T2, T3, T4, T5&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-With_T1_T2_T3_T4_T5_Tuple_T1_T2_T3_T4_T5_self__Action_T1_T2_T3_T4_T5_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;With&#39; has been renamed to &#39;Map&#39;, please use that instead&quot;)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">With</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>, <span class="ident">T5</span>&gt; func)</div></div><div style="display:none" id="code-With_T1_T2_T3_T4_T5_Tuple_T1_T2_T3_T4_T5_self__Action_T1_T2_T3_T4_T5_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="with&lt;T1, T2, T3, T4>"></a>with&lt;T1, T2, T3, T4&gt;(Tuple&lt;T1, T2, T3, T4&gt;, Action&lt;T1, T2, T3, T4&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T1_T2_T3_T4_Tuple_T1_T2_T3_T4_self__Action_T1_T2_T3_T4_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;&#39;with&#39; has been renamed to &#39;map&#39;, please use that instead&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">with</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; func)</div></div><div style="display:none" id="code-with_T1_T2_T3_T4_Tuple_T1_T2_T3_T4_self__Action_T1_T2_T3_T4_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="With&lt;T1, T2, T3, T4>"></a>With&lt;T1, T2, T3, T4&gt;(Tuple&lt;T1, T2, T3, T4&gt;, Action&lt;T1, T2, T3, T4&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-With_T1_T2_T3_T4_Tuple_T1_T2_T3_T4_self__Action_T1_T2_T3_T4_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;With&#39; has been renamed to &#39;Map&#39;, please use that instead&quot;)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">With</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>, <span class="ident">T4</span>&gt; func)</div></div><div style="display:none" id="code-With_T1_T2_T3_T4_Tuple_T1_T2_T3_T4_self__Action_T1_T2_T3_T4_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3, self.Item4);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="with&lt;T1, T2, T3>"></a>with&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2, T3&gt;, Action&lt;T1, T2, T3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T1_T2_T3_Tuple_T1_T2_T3_self__Action_T1_T2_T3_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;&#39;with&#39; has been renamed to &#39;map&#39;, please use that instead&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">with</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; func)</div></div><div style="display:none" id="code-with_T1_T2_T3_Tuple_T1_T2_T3_self__Action_T1_T2_T3_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="With&lt;T1, T2, T3>"></a>With&lt;T1, T2, T3&gt;(Tuple&lt;T1, T2, T3&gt;, Action&lt;T1, T2, T3&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-With_T1_T2_T3_Tuple_T1_T2_T3_self__Action_T1_T2_T3_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;&#39;With&#39; has been renamed to &#39;Map&#39;, please use that instead&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">With</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>, <span class="ident">T3</span>&gt; func)</div></div><div style="display:none" id="code-With_T1_T2_T3_Tuple_T1_T2_T3_self__Action_T1_T2_T3_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2, self.Item3);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="with&lt;T1, T2>"></a>with&lt;T1, T2&gt;(Tuple&lt;T1, T2&gt;, Action&lt;T1, T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-with_T1_T2_Tuple_T1_T2_self__Action_T1_T2_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Obsolete(&quot;&#39;with&#39; has been renamed to &#39;map&#39;, please use that instead&quot;)]</div><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">with</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; func)</div></div><div style="display:none" id="code-with_T1_T2_Tuple_T1_T2_self__Action_T1_T2_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="With&lt;T1, T2>"></a>With&lt;T1, T2&gt;(Tuple&lt;T1, T2&gt;, Action&lt;T1, T2&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-With_T1_T2_Tuple_T1_T2_self__Action_T1_T2_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[EditorBrowsable(EditorBrowsableState.Never)]</div><div class="attr">[Obsolete(&quot;&#39;With&#39; has been renamed to &#39;Map&#39;, please use that instead&quot;)]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">With</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt;(<span class="keyword">this</span> <span class="ident">Tuple</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">T1</span>, <span class="ident">T2</span>&gt; func)</div></div><div style="display:none" id="code-With_T1_T2_Tuple_T1_T2_self__Action_T1_T2_func_"><div class="section_title">SOURCE</div><div class="code">
            func(self.Item1, self.Item2);
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="Writer&lt;MonoidW, W, A>"></a>Writer&lt;MonoidW, W, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Writer_MonoidW_W_A_A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Writer monad constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc"><span >Value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"><span >Writer monad</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonoidW</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">W</span>&gt;</div></div><div style="display:none" id="code-Writer_MonoidW_W_A_A__value_"><div class="section_title">SOURCE</div><div class="code"> () =&gt; 
            (value, default(MonoidW).Empty(), false)</div></div></div></div></body></html>