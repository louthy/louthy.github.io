<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <span class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</span></div><div class="nav-panel"><h3 >NAMESPACES</h3><a class="nav-link" href="SomeHelp/index.htm">SomeHelp</a><h3 >DELEGATES</h3><a class="nav-link" href="#Cond_A_B">Cond&lt;A, B&gt;</a><a class="nav-link" href="#CondAsync_A_B">CondAsync&lt;A, B&gt;</a><a class="nav-link" href="#Reader_Env_A">Reader&lt;Env, A&gt;</a><a class="nav-link" href="#State_S_A">State&lt;S, A&gt;</a><a class="nav-link" href="#Try_A">Try&lt;A&gt;</a><a class="nav-link" href="#TryAsync_A">TryAsync&lt;A&gt;</a><a class="nav-link" href="#TryOption_A">TryOption&lt;A&gt;</a><a class="nav-link" href="#TryOptionAsync_A">TryOptionAsync&lt;A&gt;</a><a class="nav-link" href="#Writer_MonoidW_W_A">Writer&lt;MonoidW, W, A&gt;</a><h3 >STRUCTS</h3><a class="nav-link" href="#Arr_A">Arr&lt;A&gt;</a><a class="nav-link" href="#bigint_">bigint</a><a class="nav-link" href="#Either_L_R">Either&lt;L, R&gt;</a><a class="nav-link" href="#EitherContext_L_R_Ret">EitherContext&lt;L, R, Ret&gt;</a><a class="nav-link" href="#EitherUnitContext_L_R">EitherUnitContext&lt;L, R&gt;</a><a class="nav-link" href="#EitherUnsafe_L_R">EitherUnsafe&lt;L, R&gt;</a><a class="nav-link" href="#EitherUnsafeContext_L_R_Ret">EitherUnsafeContext&lt;L, R, Ret&gt;</a><a class="nav-link" href="#EitherUnsafeUnitContext_L_R">EitherUnsafeUnitContext&lt;L, R&gt;</a><a class="nav-link" href="#HashMap_EqK_K_V">HashMap&lt;EqK, K, V&gt;</a><a class="nav-link" href="#HashMap_K_V">HashMap&lt;K, V&gt;</a><a class="nav-link" href="#HashSet_A">HashSet&lt;A&gt;</a><a class="nav-link" href="#HashSet_EqA_A">HashSet&lt;EqA, A&gt;</a><a class="nav-link" href="#Identity_A">Identity&lt;A&gt;</a><a class="nav-link" href="#Lst_A">Lst&lt;A&gt;</a><a class="nav-link" href="#Lst_PRED_A">Lst&lt;PRED, A&gt;</a><a class="nav-link" href="#Lst_PredList_PredItem_A">Lst&lt;PredList, PredItem, A&gt;</a><a class="nav-link" href="#Map_K_V">Map&lt;K, V&gt;</a><a class="nav-link" href="#Map_OrdK_K_V">Map&lt;OrdK, K, V&gt;</a><a class="nav-link" href="#Option_A">Option&lt;A&gt;</a><a class="nav-link" href="#OptionalResult_A">OptionalResult&lt;A&gt;</a><a class="nav-link" href="#OptionAsync_A">OptionAsync&lt;A&gt;</a><a class="nav-link" href="#OptionNone_">OptionNone</a><a class="nav-link" href="#OptionUnsafe_A">OptionUnsafe&lt;A&gt;</a><a class="nav-link" href="#Que_T">Que&lt;T&gt;</a><a class="nav-link" href="#Ratio_A">Ratio&lt;A&gt;</a><a class="nav-link" href="#Result_A">Result&lt;A&gt;</a><a class="nav-link" href="#Set_A">Set&lt;A&gt;</a><a class="nav-link" href="#Set_OrdA_A">Set&lt;OrdA, A&gt;</a><a class="nav-link" href="#Some_A">Some&lt;A&gt;</a><a class="nav-link" href="#Stck_T">Stck&lt;T&gt;</a><a class="nav-link" href="#Trans_OuterMonad_OuterType_InnerMonad_InnerType_A">Trans&lt;OuterMonad, OuterType, InnerMonad, InnerType, A&gt;</a><a class="nav-link" href="#Trans_OuterMonad_OuterType_InnerMonad_InnerType_NumA_A">Trans&lt;OuterMonad, OuterType, InnerMonad, InnerType, NumA, A&gt;</a><a class="nav-link" href="#TryAsyncSuccContext_A_B">TryAsyncSuccContext&lt;A, B&gt;</a><a class="nav-link" href="#TryAsyncSuccUnitContext_A">TryAsyncSuccUnitContext&lt;A&gt;</a><a class="nav-link" href="#TryOptionAsyncSuccContext_A_B">TryOptionAsyncSuccContext&lt;A, B&gt;</a><a class="nav-link" href="#TryOptionAsyncSuccContext_A">TryOptionAsyncSuccContext&lt;A&gt;</a><a class="nav-link" href="#TryOptionNoneContext_T_R">TryOptionNoneContext&lt;T, R&gt;</a><a class="nav-link" href="#TryOptionNoneUnitContext_T">TryOptionNoneUnitContext&lt;T&gt;</a><a class="nav-link" href="#TryOptionSomeContext_T_R">TryOptionSomeContext&lt;T, R&gt;</a><a class="nav-link" href="#TryOptionSomeUnitContext_T">TryOptionSomeUnitContext&lt;T&gt;</a><a class="nav-link" href="#TrySuccContext_T_R">TrySuccContext&lt;T, R&gt;</a><a class="nav-link" href="#TrySuccUnitContext_T">TrySuccUnitContext&lt;T&gt;</a><a class="nav-link" href="#Unit_">Unit</a><h3 >CLASSES</h3><a class="nav-link" href="#ActionObservable_T">ActionObservable&lt;T&gt;</a><a class="nav-link" href="#Arr_">Arr</a><a class="nav-link" href="#ArrT_">ArrT</a><a class="nav-link" href="#ArrT_Extensions_">ArrT_Extensions</a><a class="nav-link" href="#BigIntegerRange_">BigIntegerRange</a><a class="nav-link" href="#BottomException_">BottomException</a><a class="nav-link" href="#CharRange_">CharRange</a><a class="nav-link" href="#ClockEntry_">ClockEntry</a><a class="nav-link" href="#ComposeExtensions_">ComposeExtensions</a><a class="nav-link" href="#CondAsyncExt_">CondAsyncExt</a><a class="nav-link" href="#CondExt_">CondExt</a><a class="nav-link" href="#CondSyncToAsyncExt_">CondSyncToAsyncExt</a><a class="nav-link" href="#DecimalRange_">DecimalRange</a><a class="nav-link" href="#DoubleRange_">DoubleRange</a><a class="nav-link" href="#EitherIsNotLeftException_">EitherIsNotLeftException</a><a class="nav-link" href="#EitherIsNotRightException_">EitherIsNotRightException</a><a class="nav-link" href="#EitherT_">EitherT</a><a class="nav-link" href="#EitherT_Extensions_">EitherT_Extensions</a><a class="nav-link" href="#EitherUnsafeT_">EitherUnsafeT</a><a class="nav-link" href="#EitherUnsafeT_Extensions_">EitherUnsafeT_Extensions</a><a class="nav-link" href="#ExceptionAsyncExtensions_">ExceptionAsyncExtensions</a><a class="nav-link" href="#ExceptionExtensions_">ExceptionExtensions</a><a class="nav-link" href="#ExceptionMatch_R">ExceptionMatch&lt;R&gt;</a><a class="nav-link" href="#ExceptionMatchAsync_R">ExceptionMatchAsync&lt;R&gt;</a><a class="nav-link" href="#ExceptionMatchOptionalAsync_R">ExceptionMatchOptionalAsync&lt;R&gt;</a><a class="nav-link" href="#ExceptionOptionalAsyncExtensions_">ExceptionOptionalAsyncExtensions</a><a class="nav-link" href="#FloatRange_">FloatRange</a><a class="nav-link" href="#FloatType_SELF_FLOATING_A_PRED">FloatType&lt;SELF, FLOATING, A, PRED&gt;</a><a class="nav-link" href="#FloatType_SELF_FLOATING_A">FloatType&lt;SELF, FLOATING, A&gt;</a><a class="nav-link" href="#HashMap_">HashMap</a><a class="nav-link" href="#HashSet_">HashSet</a><a class="nav-link" href="#HashSetT_">HashSetT</a><a class="nav-link" href="#HashSetT_Extensions_">HashSetT_Extensions</a><a class="nav-link" href="#IEnumerableT_">IEnumerableT</a><a class="nav-link" href="#IEnumerableT_Extensions_">IEnumerableT_Extensions</a><a class="nav-link" href="#IL_">IL</a><a class="nav-link" href="#InnerException_">InnerException</a><a class="nav-link" href="#IntegerRange_">IntegerRange</a><a class="nav-link" href="#List_">List</a><a class="nav-link" href="#LongRange_">LongRange</a><a class="nav-link" href="#LstT_">LstT</a><a class="nav-link" href="#LstT_Extensions_">LstT_Extensions</a><a class="nav-link" href="#Map_">Map</a><a class="nav-link" href="#MapExtensions_">MapExtensions</a><a class="nav-link" href="#MapOrdExtensions_">MapOrdExtensions</a><a class="nav-link" href="#MemoExtensions_">MemoExtensions</a><a class="nav-link" href="#MonadTransExtensions_">MonadTransExtensions</a><a class="nav-link" href="#NewType_NEWTYPE_A_PRED">NewType&lt;NEWTYPE, A, PRED&gt;</a><a class="nav-link" href="#NewType_NEWTYPE_A">NewType&lt;NEWTYPE, A&gt;</a><a class="nav-link" href="#NotAppendableException_">NotAppendableException</a><a class="nav-link" href="#NotDivisibleException_">NotDivisibleException</a><a class="nav-link" href="#NotMultiplicableException_">NotMultiplicableException</a><a class="nav-link" href="#NotSubtractableException_">NotSubtractableException</a><a class="nav-link" href="#NullableExtensions_">NullableExtensions</a><a class="nav-link" href="#NumType_NUMTYPE_NUM_A_PRED">NumType&lt;NUMTYPE, NUM, A, PRED&gt;</a><a class="nav-link" href="#NumType_NUMTYPE_NUM_A">NumType&lt;NUMTYPE, NUM, A&gt;</a><a class="nav-link" href="#ObjectExt_">ObjectExt</a><a class="nav-link" href="#ObservableExt_">ObservableExt</a><a class="nav-link" href="#OptionAsyncT_">OptionAsyncT</a><a class="nav-link" href="#OptionAsyncT_Extensions_">OptionAsyncT_Extensions</a><a class="nav-link" href="#OptionIsNoneException_">OptionIsNoneException</a><a class="nav-link" href="#OptionT_">OptionT</a><a class="nav-link" href="#OptionT_Extensions_">OptionT_Extensions</a><a class="nav-link" href="#OptionUnsafeT_">OptionUnsafeT</a><a class="nav-link" href="#OptionUnsafeT_Extensions_">OptionUnsafeT_Extensions</a><a class="nav-link" href="#OutExtensions_">OutExtensions</a><a class="nav-link" href="#Prelude_">Prelude</a><a class="nav-link" href="#Query_">Query</a><a class="nav-link" href="#Queue_">Queue</a><a class="nav-link" href="#QueueExtensions_">QueueExtensions</a><a class="nav-link" href="#Range_SELF_MonoidOrdA_A">Range&lt;SELF, MonoidOrdA, A&gt;</a><a class="nav-link" href="#ReaderResult_">ReaderResult</a><a class="nav-link" href="#ResultIsNullException_">ResultIsNullException</a><a class="nav-link" href="#Set_">Set</a><a class="nav-link" href="#SetT_">SetT</a><a class="nav-link" href="#SetT_Extensions_">SetT_Extensions</a><a class="nav-link" href="#ShortRange_">ShortRange</a><a class="nav-link" href="#Some_">Some</a><a class="nav-link" href="#SomeContext_OPT_OA_A_B">SomeContext&lt;OPT, OA, A, B&gt;</a><a class="nav-link" href="#SomeNotInitialisedException_">SomeNotInitialisedException</a><a class="nav-link" href="#SomeUnitContext_OPT_OA_A">SomeUnitContext&lt;OPT, OA, A&gt;</a><a class="nav-link" href="#Stack_">Stack</a><a class="nav-link" href="#StateResult_">StateResult</a><a class="nav-link" href="#TaskT_">TaskT</a><a class="nav-link" href="#TaskT_Extensions_">TaskT_Extensions</a><a class="nav-link" href="#TryAsyncT_">TryAsyncT</a><a class="nav-link" href="#TryAsyncT_Extensions_">TryAsyncT_Extensions</a><a class="nav-link" href="#TryConfig_">TryConfig</a><a class="nav-link" href="#TryOptionAsyncT_">TryOptionAsyncT</a><a class="nav-link" href="#TryOptionAsyncT_Extensions_">TryOptionAsyncT_Extensions</a><a class="nav-link" href="#TryOptionT_">TryOptionT</a><a class="nav-link" href="#TryOptionT_Extensions_">TryOptionT_Extensions</a><a class="nav-link" href="#TryT_">TryT</a><a class="nav-link" href="#TryT_Extensions_">TryT_Extensions</a><a class="nav-link" href="#TypeClass_">TypeClass</a><a class="nav-link" href="#TypeClassExtensions_">TypeClassExtensions</a><a class="nav-link" href="#ValueIsNoneException_">ValueIsNoneException</a><a class="nav-link" href="#ValueIsNullException_">ValueIsNullException</a><a class="nav-link" href="#VectorClock_">VectorClock</a><a class="nav-link" href="#Versioned_">Versioned</a><a class="nav-link" href="#Versioned_T">Versioned&lt;T&gt;</a><a class="nav-link" href="#WriterResult_">WriterResult</a><h3 >INTERFACES</h3><a class="nav-link" href="#IEither_">IEither</a><a class="nav-link" href="#IOptional_">IOptional</a><a class="nav-link" href="#IOptionalAsync_">IOptionalAsync</a><a class="nav-link" href="#ListInfo_">ListInfo</a><h3 >ENUMS</h3><a class="nav-link" href="#EitherStatus">EitherStatus</a></div><div class="content-panel"><h1 >LanguageExt Namespace</h1><h2 >DELEGATES</h2><div class="doc-ns-type"><a name="Cond_A_B"></a><div class="left"><p ><a class="type-name" href="Cond_A_B.htm">Cond&lt;A, B&gt;</a></p><p ><span >Conditional computation.  Represents a computation that could succeed or fail.  The result of the computation is an Option data-type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Cond</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">A</span> input)</div></div></div><div class="doc-ns-type"><a name="CondAsync_A_B"></a><div class="left"><p ><a class="type-name" href="CondAsync_A_B.htm">CondAsync&lt;A, B&gt;</a></p><p ><span >Conditional asynchronous computation.  Represents a computation that could  succeed or fail.  The result of the computation is an Option data-type promise. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">CondAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">A</span> input)</div></div></div><div class="doc-ns-type"><a name="Reader_Env_A"></a><div class="left"><p ><a class="type-name" href="Reader_Env_A.htm">Reader&lt;Env, A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;(<span class="ident">Env</span> env)</div></div></div><div class="doc-ns-type"><a name="State_S_A"></a><div class="left"><p ><a class="type-name" href="State_S_A.htm">State&lt;S, A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>, <span class="keyword">bool</span>&gt; <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;(<span class="ident">S</span> state)</div></div></div><div class="doc-ns-type"><a name="Try_A"></a><div class="left"><p ><a class="type-name" href="Try_A.htm">Try&lt;A&gt;</a></p><p ><span >The Try monad captures exceptions and uses them to cancel the computation.  Primarily useful for expression based processing of errors. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="ident">Result</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;()</div></div></div><div class="doc-ns-type"><a name="TryAsync_A"></a><div class="left"><p ><a class="type-name" href="TryAsync_A.htm">TryAsync&lt;A&gt;</a></p><p ><span >The Try monad captures exceptions and uses them to cancel the computation.  Primarily useful for expression based processing of errors. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="ident">Task</span>&lt;<span class="ident">Result</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;()</div></div></div><div class="doc-ns-type"><a name="TryOption_A"></a><div class="left"><p ><a class="type-name" href="TryOption_A.htm">TryOption&lt;A&gt;</a></p><p ><span >The Try monad captures exceptions and uses them to cancel the computation.  Primarily useful for expression based processing of errors. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="ident">OptionalResult</span>&lt;<span class="ident">A</span>&gt; <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;()</div></div></div><div class="doc-ns-type"><a name="TryOptionAsync_A"></a><div class="left"><p ><a class="type-name" href="TryOptionAsync_A.htm">TryOptionAsync&lt;A&gt;</a></p><p ><span >The Try monad captures exceptions and uses them to cancel the computation.  Primarily useful for expression based processing of errors. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="ident">Task</span>&lt;<span class="ident">OptionalResult</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;()</div></div></div><div class="doc-ns-type"><a name="Writer_MonoidW_W_A"></a><div class="left"><p ><a class="type-name" href="Writer_MonoidW_W_A.htm">Writer&lt;MonoidW, W, A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">W</span>, <span class="keyword">bool</span>&gt; <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;()</div></div></div><h2 >STRUCTS</h2><div class="doc-ns-type"><a name="Arr_A"></a><div class="left"><p ><a class="type-name" href="Arr_A.htm">Arr&lt;A&gt;</a></p><p ><span >Immutable array Native array O(1) read performance.  Modifications require copying of the entire  array to generate the newly mutated version.  This is will be very expensive  for large arrays. </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyList</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyCollection</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="bigint_"></a><div class="left"><p ><a class="type-name" href="bigint_.htm">bigint</a></p><p ><span >BigInteger convenience wrapper </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">bigint</span></div></div></div><div class="doc-ns-type"><a name="Either_L_R"></a><div class="left"><p ><a class="type-name" href="Either_L_R.htm">Either&lt;L, R&gt;</a></p><p ><span >Either L R Holds one of two values &#39;Left&#39; or &#39;Right&#39;.  Usually &#39;Left&#39; is considered &#39;wrong&#39; or &#39;in error&#39;, and &#39;Right&#39; is, well, right.  So when the Either is in a Left state, it cancels computations like bind or map, etc.  So you can see Left as an &#39;early out, with a message&#39;.  Unlike Option that has None as its alternative value (i.e. it has an &#39;early out, but no message&#39;). </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherData</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEither</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">R</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EitherContext_L_R_Ret"></a><div class="left"><p ><a class="type-name" href="EitherContext_L_R_Ret.htm">EitherContext&lt;L, R, Ret&gt;</a></p><p ><span >Context for the fluent Either matching </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EitherContext</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;</div></div></div><div class="doc-ns-type"><a name="EitherUnitContext_L_R"></a><div class="left"><p ><a class="type-name" href="EitherUnitContext_L_R.htm">EitherUnitContext&lt;L, R&gt;</a></p><p ><span >Context for the fluent Either matching </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EitherUnitContext</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="EitherUnsafe_L_R"></a><div class="left"><p ><a class="type-name" href="EitherUnsafe_L_R.htm">EitherUnsafe&lt;L, R&gt;</a></p><p ><span >Either L R Holds one of two values &#39;Left&#39; or &#39;Right&#39;.  Usually &#39;Left&#39; is considered &#39;wrong&#39; or &#39;in error&#39;, and &#39;Right&#39; is, well, right.  So when the Either is in a Left state, it cancels computations like bind or map, etc.  So you can see Left as an &#39;early out, with a message&#39;.  Unlike Option that has None as its alternative value (i.e. it has an &#39;early out, but no message&#39;). </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherData</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEither</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">R</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EitherUnsafeContext_L_R_Ret"></a><div class="left"><p ><a class="type-name" href="EitherUnsafeContext_L_R_Ret.htm">EitherUnsafeContext&lt;L, R, Ret&gt;</a></p><p ><span >Context for the fluent EitherUnsafe matching </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EitherUnsafeContext</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">Ret</span>&gt;</div></div></div><div class="doc-ns-type"><a name="EitherUnsafeUnitContext_L_R"></a><div class="left"><p ><a class="type-name" href="EitherUnsafeUnitContext_L_R.htm">EitherUnsafeUnitContext&lt;L, R&gt;</a></p><p ><span >Context for the fluent Either matching </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EitherUnsafeUnitContext</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="HashMap_EqK_K_V"></a><div class="left"><p ><a class="type-name" href="HashMap_EqK_K_V.htm">HashMap&lt;EqK, K, V&gt;</a></p><p ><span >Unsorted immutable hash-map </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="HashMap_K_V"></a><div class="left"><p ><a class="type-name" href="HashMap_K_V.htm">HashMap&lt;K, V&gt;</a></p><p ><span >Unsorted immutable hash-map </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="HashSet_A"></a><div class="left"><p ><a class="type-name" href="HashSet_A.htm">HashSet&lt;A&gt;</a></p><p ><span >Unsorted immutable hash-set </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="HashSet_EqA_A"></a><div class="left"><p ><a class="type-name" href="HashSet_EqA_A.htm">HashSet&lt;EqA, A&gt;</a></p><p ><span >Unsorted immutable hash-set </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">HashSet</span>&lt;<span class="ident">EqA</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">EqA</span>, <span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="Identity_A"></a><div class="left"><p ><a class="type-name" href="Identity_A.htm">Identity&lt;A&gt;</a></p><p ><span >Identity monad </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Identity</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="doc-ns-type"><a name="Lst_A"></a><div class="left"><p ><a class="type-name" href="Lst_A.htm">Lst&lt;A&gt;</a></p><p ><span >Immutable list </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyList</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyCollection</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="Lst_PRED_A"></a><div class="left"><p ><a class="type-name" href="Lst_PRED_A.htm">Lst&lt;PRED, A&gt;</a></p><p ><span >Immutable list with validation predicate </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Lst</span>&lt;<span class="ident">PRED</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyList</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyCollection</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ListInfo</span></span></div></div></div><div class="doc-ns-type"><a name="Lst_PredList_PredItem_A"></a><div class="left"><p ><a class="type-name" href="Lst_PredList_PredItem_A.htm">Lst&lt;PredList, PredItem, A&gt;</a></p><p ><span >Immutable list with validation predicate </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Lst</span>&lt;<span class="ident">PredList</span>, <span class="ident">PredItem</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyList</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyCollection</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">ListInfo</span></span></div></div></div><div class="doc-ns-type"><a name="Map_K_V"></a><div class="left"><p ><a class="type-name" href="Map_K_V.htm">Map&lt;K, V&gt;</a></p><p ><span >Immutable map AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="Map_OrdK_K_V"></a><div class="left"><p ><a class="type-name" href="Map_OrdK_K_V.htm">Map&lt;OrdK, K, V&gt;</a></p><p ><span >Immutable map AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="Option_A"></a><div class="left"><p ><a class="type-name" href="Option_A.htm">Option&lt;A&gt;</a></p><p ><span >Discriminated union type.  Can be in one of two states:<br/><br/><div class='code-line'>     Some(a)</div><div class='code-line'>     None</div><br/><br/> Typeclass instances available for this type:<br/><br/><div class='code-line'>     BiFoldable  : MOption</div><div class='code-line'>     Eq          : EqOpt</div><div class='code-line'>     Foldable    : MOption</div><div class='code-line'>     Functor     : FOption</div><div class='code-line'>     MonadPlus   : MOption</div><div class='code-line'>     Optional    : MOption</div><div class='code-line'>     Ord         : OrdOpt</div> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IOptional</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="OptionalResult_A"></a><div class="left"><p ><a class="type-name" href="OptionalResult_A.htm">OptionalResult&lt;A&gt;</a></p><p ><span >Represents the result of an operation:<br/><br/><div class='code-line'>     Some(A) | None | Exception</div><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OptionalResult</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">OptionalResult</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="OptionAsync_A"></a><div class="left"><p ><a class="type-name" href="OptionAsync_A.htm">OptionAsync&lt;A&gt;</a></p><p ><span >Discriminated union type.  Can be in one of two states:<br/><br/><div class='code-line'>     Some(a)</div><div class='code-line'>     None</div><br/><br/> Typeclass instances available for this type:<br/><br/><div class='code-line'>     Applicative   : ApplOptionAsync</div><div class='code-line'>     BiFoldable    : MOptionAsync</div><div class='code-line'>     Foldable      : MOptionAsync</div><div class='code-line'>     Functor       : FOptionAsync</div><div class='code-line'>     Monad         : MOptionAsync</div><div class='code-line'>     OptionalAsync : MOptionAsync</div><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IOptionalAsync</span></span></div></div></div><div class="doc-ns-type"><a name="OptionNone_"></a><div class="left"><p ><a class="type-name" href="OptionNone_.htm">OptionNone</a></p><p ><span >A unit type that represents <span class='code-inline'>Option.None</span>.  This type can be implicitly converted to Option or OptionUnsafe. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OptionNone</span></div></div></div><div class="doc-ns-type"><a name="OptionUnsafe_A"></a><div class="left"><p ><a class="type-name" href="OptionUnsafe_A.htm">OptionUnsafe&lt;A&gt;</a></p><p ><span >Discriminated union type.  Can be in one of two states:<br/><br/><div class='code-line'>     Some(a)</div><div class='code-line'>     None</div><br/><br/> Typeclass instances available for this type:<br/><br/><div class='code-line'>     BiFoldable  : MOptionUnsafe</div><div class='code-line'>     Eq          : EqOpt</div><div class='code-line'>     Foldable    : MOptionUnsafe</div><div class='code-line'>     Functor     : FOptionUnsafe</div><div class='code-line'>     MonadPlus   : MOptionUnsafe</div><div class='code-line'>     Optional    : MOptionUnsafe</div><div class='code-line'>     Ord         : OrdOpt</div> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IOptional</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="Que_T"></a><div class="left"><p ><a class="type-name" href="Que_T.htm">Que&lt;T&gt;</a></p><p ></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Que</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Que</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="Ratio_A"></a><div class="left"><p ><a class="type-name" href="Ratio_A.htm">Ratio&lt;A&gt;</a></p><p ><span >A ratio between two values. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Ratio</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="doc-ns-type"><a name="Result_A"></a><div class="left"><p ><a class="type-name" href="Result_A.htm">Result&lt;A&gt;</a></p><p ><span >Represents the result of an operation:<br/><br/><div class='code-line'>     A | Exception</div><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Result</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Result</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="Set_A"></a><div class="left"><p ><a class="type-name" href="Set_A.htm">Set&lt;A&gt;</a></p><p ><span >Immutable set AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyCollection</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="Set_OrdA_A"></a><div class="left"><p ><a class="type-name" href="Set_OrdA_A.htm">Set&lt;OrdA, A&gt;</a></p><p ><span >Immutable set AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Set</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="Some_A"></a><div class="left"><p ><a class="type-name" href="Some_A.htm">Some&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Some</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IOptional</span></span></div></div></div><div class="doc-ns-type"><a name="Stck_T"></a><div class="left"><p ><a class="type-name" href="Stck_T.htm">Stck&lt;T&gt;</a></p><p ><span >Immutable stack </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="Trans_OuterMonad_OuterType_InnerMonad_InnerType_A"></a><div class="left"><p ><a class="type-name" href="Trans_OuterMonad_OuterType_InnerMonad_InnerType_A.htm">Trans&lt;OuterMonad, OuterType, InnerMonad, InnerType, A&gt;</a></p><p ><span >Default monad transformer, can nest any two monadic types and provide the correct default behaviour based on their Bind operations.<br/><br/><div class='code-line'>     i.e.</div><br/><br/><div class='code-line'>         Trans&lt;MLst&lt;Option&lt;int&gt;&gt;, Lst&lt;Option&lt;int&gt;&gt;, MOption&lt;int&gt;, Option&lt;int&gt;, int&gt;</div><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Trans</span>&lt;<span class="ident">OuterMonad</span>, <span class="ident">OuterType</span>, <span class="ident">InnerMonad</span>, <span class="ident">InnerType</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">MonadTrans</span>&lt;<span class="ident">OuterMonad</span>, <span class="ident">OuterType</span>, <span class="ident">InnerMonad</span>, <span class="ident">InnerType</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="Trans_OuterMonad_OuterType_InnerMonad_InnerType_NumA_A"></a><div class="left"><p ><a class="type-name" href="Trans_OuterMonad_OuterType_InnerMonad_InnerType_NumA_A.htm">Trans&lt;OuterMonad, OuterType, InnerMonad, InnerType, NumA, A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Trans</span>&lt;<span class="ident">OuterMonad</span>, <span class="ident">OuterType</span>, <span class="ident">InnerMonad</span>, <span class="ident">InnerType</span>, <span class="ident">NumA</span>, <span class="ident">A</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TryAsyncSuccContext_A_B"></a><div class="left"><p ><a class="type-name" href="TryAsyncSuccContext_A_B.htm">TryAsyncSuccContext&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TryAsyncSuccContext</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TryAsyncSuccUnitContext_A"></a><div class="left"><p ><a class="type-name" href="TryAsyncSuccUnitContext_A.htm">TryAsyncSuccUnitContext&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TryAsyncSuccUnitContext</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TryOptionAsyncSuccContext_A_B"></a><div class="left"><p ><a class="type-name" href="TryOptionAsyncSuccContext_A_B.htm">TryOptionAsyncSuccContext&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TryOptionAsyncSuccContext</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TryOptionAsyncSuccContext_A"></a><div class="left"><p ><a class="type-name" href="TryOptionAsyncSuccContext_A.htm">TryOptionAsyncSuccContext&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TryOptionAsyncSuccContext</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TryOptionNoneContext_T_R"></a><div class="left"><p ><a class="type-name" href="TryOptionNoneContext_T_R.htm">TryOptionNoneContext&lt;T, R&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TryOptionNoneContext</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TryOptionNoneUnitContext_T"></a><div class="left"><p ><a class="type-name" href="TryOptionNoneUnitContext_T.htm">TryOptionNoneUnitContext&lt;T&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TryOptionNoneUnitContext</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TryOptionSomeContext_T_R"></a><div class="left"><p ><a class="type-name" href="TryOptionSomeContext_T_R.htm">TryOptionSomeContext&lt;T, R&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TryOptionSomeContext</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TryOptionSomeUnitContext_T"></a><div class="left"><p ><a class="type-name" href="TryOptionSomeUnitContext_T.htm">TryOptionSomeUnitContext&lt;T&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TryOptionSomeUnitContext</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TrySuccContext_T_R"></a><div class="left"><p ><a class="type-name" href="TrySuccContext_T_R.htm">TrySuccContext&lt;T, R&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TrySuccContext</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="TrySuccUnitContext_T"></a><div class="left"><p ><a class="type-name" href="TrySuccUnitContext_T.htm">TrySuccUnitContext&lt;T&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TrySuccUnitContext</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="doc-ns-type"><a name="Unit_"></a><div class="left"><p ><a class="type-name" href="Unit_.htm">Unit</a></p><p ><span >A unit type is a type that allows only one value (and thus can hold no information) </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Unit</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Unit</span>&gt;</span></div></div></div><h2 >CLASSES</h2><div class="doc-ns-type"><a name="ActionObservable_T"></a><div class="left"><p ><a class="type-name" href="ActionObservable_T.htm">ActionObservable&lt;T&gt;</a></p><p ><span >Executes an action post-subscription.  This is useful when the action is  going to publish to the observable.  A kind of request/response. Use the IObservable extension method: PostSubscribe(() =&gt; ...) </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ActionObservable</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IObservable</span>&lt;<span class="ident">T</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="Arr_"></a><div class="left"><p ><a class="type-name" href="Arr_.htm">Arr</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">Arr</span></div></div></div><div class="doc-ns-type"><a name="ArrT_"></a><div class="left"><p ><a class="type-name" href="ArrT_.htm">ArrT</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">ArrT</span></div></div></div><div class="doc-ns-type"><a name="ArrT_Extensions_"></a><div class="left"><p ><a class="type-name" href="ArrT_Extensions_.htm">ArrT_Extensions</a></p><p ><span >Monad transformer for Arr, provides functionality for working  with the inner value of the nested type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">ArrT_Extensions</span></div></div></div><div class="doc-ns-type"><a name="BigIntegerRange_"></a><div class="left"><p ><a class="type-name" href="BigIntegerRange_.htm">BigIntegerRange</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">BigIntegerRange</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Range</span>&lt;<span class="ident">BigIntegerRange</span>, <span class="ident">TBigInt</span>, <span class="ident">bigint</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="BottomException_"></a><div class="left"><p ><a class="type-name" href="BottomException_.htm">BottomException</a></p><p ><span >Value is bottom </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">BottomException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="CharRange_"></a><div class="left"><p ><a class="type-name" href="CharRange_.htm">CharRange</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">CharRange</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Range</span>&lt;<span class="ident">CharRange</span>, <span class="ident">TNumericChar</span>, <span class="keyword">char</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="ClockEntry_"></a><div class="left"><p ><a class="type-name" href="ClockEntry_.htm">ClockEntry</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ClockEntry</span></div></div></div><div class="doc-ns-type"><a name="ComposeExtensions_"></a><div class="left"><p ><a class="type-name" href="ComposeExtensions_.htm">ComposeExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">ComposeExtensions</span></div></div></div><div class="doc-ns-type"><a name="CondAsyncExt_"></a><div class="left"><p ><a class="type-name" href="CondAsyncExt_.htm">CondAsyncExt</a></p><p ><span >Extensions to the CondAsync type </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">CondAsyncExt</span></div></div></div><div class="doc-ns-type"><a name="CondExt_"></a><div class="left"><p ><a class="type-name" href="CondExt_.htm">CondExt</a></p><p ><span >Extensions to the Cond type </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">CondExt</span></div></div></div><div class="doc-ns-type"><a name="CondSyncToAsyncExt_"></a><div class="left"><p ><a class="type-name" href="CondSyncToAsyncExt_.htm">CondSyncToAsyncExt</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">CondSyncToAsyncExt</span></div></div></div><div class="doc-ns-type"><a name="DecimalRange_"></a><div class="left"><p ><a class="type-name" href="DecimalRange_.htm">DecimalRange</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">DecimalRange</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Range</span>&lt;<span class="ident">DecimalRange</span>, <span class="ident">TDecimal</span>, <span class="keyword">decimal</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="DoubleRange_"></a><div class="left"><p ><a class="type-name" href="DoubleRange_.htm">DoubleRange</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">DoubleRange</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Range</span>&lt;<span class="ident">DoubleRange</span>, <span class="ident">TDouble</span>, <span class="keyword">double</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EitherIsNotLeftException_"></a><div class="left"><p ><a class="type-name" href="EitherIsNotLeftException_.htm">EitherIsNotLeftException</a></p><p ><span >Either is not left </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">EitherIsNotLeftException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="EitherIsNotRightException_"></a><div class="left"><p ><a class="type-name" href="EitherIsNotRightException_.htm">EitherIsNotRightException</a></p><p ><span >Either is not right </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">EitherIsNotRightException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="EitherT_"></a><div class="left"><p ><a class="type-name" href="EitherT_.htm">EitherT</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">EitherT</span></div></div></div><div class="doc-ns-type"><a name="EitherT_Extensions_"></a><div class="left"><p ><a class="type-name" href="EitherT_Extensions_.htm">EitherT_Extensions</a></p><p ><span >Monad transformer for Either, provides functionality for working  with the inner value of the nested type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">EitherT_Extensions</span></div></div></div><div class="doc-ns-type"><a name="EitherUnsafeT_"></a><div class="left"><p ><a class="type-name" href="EitherUnsafeT_.htm">EitherUnsafeT</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">EitherUnsafeT</span></div></div></div><div class="doc-ns-type"><a name="EitherUnsafeT_Extensions_"></a><div class="left"><p ><a class="type-name" href="EitherUnsafeT_Extensions_.htm">EitherUnsafeT_Extensions</a></p><p ><span >Monad transformer for EitherUnsafe, provides functionality for working  with the inner value of the nested type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">EitherUnsafeT_Extensions</span></div></div></div><div class="doc-ns-type"><a name="ExceptionAsyncExtensions_"></a><div class="left"><p ><a class="type-name" href="ExceptionAsyncExtensions_.htm">ExceptionAsyncExtensions</a></p><p ><span >Exception extensions </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">ExceptionAsyncExtensions</span></div></div></div><div class="doc-ns-type"><a name="ExceptionExtensions_"></a><div class="left"><p ><a class="type-name" href="ExceptionExtensions_.htm">ExceptionExtensions</a></p><p ><span >Exception extensions </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">ExceptionExtensions</span></div></div></div><div class="doc-ns-type"><a name="ExceptionMatch_R"></a><div class="left"><p ><a class="type-name" href="ExceptionMatch_R.htm">ExceptionMatch&lt;R&gt;</a></p><p ><span >Pattern matching for exceptions.  This is to aid expression based error handling. </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ExceptionMatch</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="ExceptionMatchAsync_R"></a><div class="left"><p ><a class="type-name" href="ExceptionMatchAsync_R.htm">ExceptionMatchAsync&lt;R&gt;</a></p><p ><span >Pattern matching for exceptions.  This is to aid expression based error handling. </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ExceptionMatchAsync</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="ExceptionMatchOptionalAsync_R"></a><div class="left"><p ><a class="type-name" href="ExceptionMatchOptionalAsync_R.htm">ExceptionMatchOptionalAsync&lt;R&gt;</a></p><p ><span >Pattern matching for exceptions.  This is to aid expression based error handling. </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ExceptionMatchOptionalAsync</span>&lt;<span class="ident">R</span>&gt;</div></div></div><div class="doc-ns-type"><a name="ExceptionOptionalAsyncExtensions_"></a><div class="left"><p ><a class="type-name" href="ExceptionOptionalAsyncExtensions_.htm">ExceptionOptionalAsyncExtensions</a></p><p ><span >Exception extensions </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">ExceptionOptionalAsyncExtensions</span></div></div></div><div class="doc-ns-type"><a name="FloatRange_"></a><div class="left"><p ><a class="type-name" href="FloatRange_.htm">FloatRange</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">FloatRange</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Range</span>&lt;<span class="ident">FloatRange</span>, <span class="ident">TFloat</span>, <span class="keyword">float</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FloatType_SELF_FLOATING_A_PRED"></a><div class="left"><p ><a class="type-name" href="FloatType_SELF_FLOATING_A_PRED.htm">FloatType&lt;SELF, FLOATING, A, PRED&gt;</a></p><p ><span >FloatType - inspired by Haskell&#39;s &#39;newtype&#39; keyword.  This is setup for floating point numeric types,and expects a Floating&lt;A&gt; class-instance as an argument (TFloat, TDouble,  TDecimal, etc.)<br/><br/> https://wiki.haskell.org/Newtype<br/><br/> Derive type from this one to get: Equatable, Comparable, Appendable, Foldable,  Functor, Iterable: strongly typed values.<br/><br/> For example:<br/><br/><div class='code-line'>     class Metres : FloatType&lt;Metres, TDouble, double&gt; { public Metres(double x) : base(x) {} }</div><br/><br/> Will not accept null values </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOATING</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">SELF</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">SELF</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FloatType_SELF_FLOATING_A"></a><div class="left"><p ><a class="type-name" href="FloatType_SELF_FLOATING_A.htm">FloatType&lt;SELF, FLOATING, A&gt;</a></p><p ><span >FloatType - inspired by Haskell&#39;s &#39;newtype&#39; keyword.  This is setup for floating point numeric types,and expects a Floating&lt;A&gt; class-instance as an argument (TFloat, TDouble,  TDecimal, etc.)<br/><br/> https://wiki.haskell.org/Newtype<br/><br/> Derive type from this one to get: Equatable, Comparable, Appendable, Foldable,  Functor, Iterable: strongly typed values.<br/><br/> For example:<br/><br/><div class='code-line'>     class Metres : FloatType&lt;Metres, TDouble, double&gt; { public Metres(double x) : base(x) {} }</div><br/><br/> Will not accept null values </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOATING</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">FloatType</span>&lt;<span class="ident">SELF</span>, <span class="ident">FLOATING</span>, <span class="ident">A</span>, <span class="ident">True</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="HashMap_"></a><div class="left"><p ><a class="type-name" href="HashMap_.htm">HashMap</a></p><p ><span >Immutable hash-map module </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">HashMap</span></div></div></div><div class="doc-ns-type"><a name="HashSet_"></a><div class="left"><p ><a class="type-name" href="HashSet_.htm">HashSet</a></p><p ><span >Immutable hash-set module </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">HashSet</span></div></div></div><div class="doc-ns-type"><a name="HashSetT_"></a><div class="left"><p ><a class="type-name" href="HashSetT_.htm">HashSetT</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">HashSetT</span></div></div></div><div class="doc-ns-type"><a name="HashSetT_Extensions_"></a><div class="left"><p ><a class="type-name" href="HashSetT_Extensions_.htm">HashSetT_Extensions</a></p><p ><span >Monad transformer for HashSet, provides functionality for working  with the inner value of the nested type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">HashSetT_Extensions</span></div></div></div><div class="doc-ns-type"><a name="IEnumerableT_"></a><div class="left"><p ><a class="type-name" href="IEnumerableT_.htm">IEnumerableT</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">IEnumerableT</span></div></div></div><div class="doc-ns-type"><a name="IEnumerableT_Extensions_"></a><div class="left"><p ><a class="type-name" href="IEnumerableT_Extensions_.htm">IEnumerableT_Extensions</a></p><p ><span >Monad transformer for IEnumerable, provides functionality for working  with the inner value of the nested type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">IEnumerableT_Extensions</span></div></div></div><div class="doc-ns-type"><a name="IL_"></a><div class="left"><p ><a class="type-name" href="IL_.htm">IL</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">IL</span></div></div></div><div class="doc-ns-type"><a name="InnerException_"></a><div class="left"><p ><a class="type-name" href="InnerException_.htm">InnerException</a></p><p ></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">InnerException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="IntegerRange_"></a><div class="left"><p ><a class="type-name" href="IntegerRange_.htm">IntegerRange</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">IntegerRange</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Range</span>&lt;<span class="ident">IntegerRange</span>, <span class="ident">TInt</span>, <span class="keyword">int</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="List_"></a><div class="left"><p ><a class="type-name" href="List_.htm">List</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">List</span></div></div></div><div class="doc-ns-type"><a name="LongRange_"></a><div class="left"><p ><a class="type-name" href="LongRange_.htm">LongRange</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">LongRange</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Range</span>&lt;<span class="ident">LongRange</span>, <span class="ident">TLong</span>, <span class="keyword">long</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="LstT_"></a><div class="left"><p ><a class="type-name" href="LstT_.htm">LstT</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">LstT</span></div></div></div><div class="doc-ns-type"><a name="LstT_Extensions_"></a><div class="left"><p ><a class="type-name" href="LstT_Extensions_.htm">LstT_Extensions</a></p><p ><span >Monad transformer for Lst, provides functionality for working  with the inner value of the nested type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">LstT_Extensions</span></div></div></div><div class="doc-ns-type"><a name="Map_"></a><div class="left"><p ><a class="type-name" href="Map_.htm">Map</a></p><p ><span >Immutable map module AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">Map</span></div></div></div><div class="doc-ns-type"><a name="MapExtensions_"></a><div class="left"><p ><a class="type-name" href="MapExtensions_.htm">MapExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">MapExtensions</span></div></div></div><div class="doc-ns-type"><a name="MapOrdExtensions_"></a><div class="left"><p ><a class="type-name" href="MapOrdExtensions_.htm">MapOrdExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">MapOrdExtensions</span></div></div></div><div class="doc-ns-type"><a name="MemoExtensions_"></a><div class="left"><p ><a class="type-name" href="MemoExtensions_.htm">MemoExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">MemoExtensions</span></div></div></div><div class="doc-ns-type"><a name="MonadTransExtensions_"></a><div class="left"><p ><a class="type-name" href="MonadTransExtensions_.htm">MonadTransExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">MonadTransExtensions</span></div></div></div><div class="doc-ns-type"><a name="NewType_NEWTYPE_A_PRED"></a><div class="left"><p ><a class="type-name" href="NewType_NEWTYPE_A_PRED.htm">NewType&lt;NEWTYPE, A, PRED&gt;</a></p><p ><span >NewType - inspired by Haskell&#39;s &#39;newtype&#39; keyword. https://wiki.haskell.org/Newtype Derive type from this one to get: Equatable, Comparable, Appendable, Subtractable,  Multiplicable, Divisible, Foldable, Monadic, Functor, Interable: strongly typed values.  <br/><br/> For example:<br/><br/><div class='code-line'>     class Metres : NewType&lt;Metres, double&gt; { public Metres(double x) : base(x) {} }</div><div class='code-line'>     class Hours : NewType&lt;Hours, double&gt; { public Hours(double x) : base(x) {} }</div><br/><br/> Will not accept null values<br/><br/> </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">NEWTYPE</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">NEWTYPE</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="NewType_NEWTYPE_A"></a><div class="left"><p ><a class="type-name" href="NewType_NEWTYPE_A.htm">NewType&lt;NEWTYPE, A&gt;</a></p><p ><span >NewType - inspired by Haskell&#39;s &#39;newtype&#39; keyword. https://wiki.haskell.org/Newtype Derive type from this one to get: Equatable, Comparable, Appendable, Subtractable,  Multiplicable, Divisible, Foldable, Functor, Interable: strongly typed values.  <br/><br/> For example:<br/><br/><div class='code-line'>     class Metres : NewType&lt;Metres, double&gt; { public Metres(double x) : base(x) {} }</div><div class='code-line'>     class Hours : NewType&lt;Hours, double&gt; { public Hours(double x) : base(x) {} }</div><br/><br/> Will not accept null values<br/><br/> </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>, <span class="ident">True</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="NotAppendableException_"></a><div class="left"><p ><a class="type-name" href="NotAppendableException_.htm">NotAppendableException</a></p><p ></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">NotAppendableException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="NotDivisibleException_"></a><div class="left"><p ><a class="type-name" href="NotDivisibleException_.htm">NotDivisibleException</a></p><p ></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">NotDivisibleException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="NotMultiplicableException_"></a><div class="left"><p ><a class="type-name" href="NotMultiplicableException_.htm">NotMultiplicableException</a></p><p ></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">NotMultiplicableException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="NotSubtractableException_"></a><div class="left"><p ><a class="type-name" href="NotSubtractableException_.htm">NotSubtractableException</a></p><p ></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">NotSubtractableException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="NullableExtensions_"></a><div class="left"><p ><a class="type-name" href="NullableExtensions_.htm">NullableExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">NullableExtensions</span></div></div></div><div class="doc-ns-type"><a name="NumType_NUMTYPE_NUM_A_PRED"></a><div class="left"><p ><a class="type-name" href="NumType_NUMTYPE_NUM_A_PRED.htm">NumType&lt;NUMTYPE, NUM, A, PRED&gt;</a></p><p ><span >NumType - inspired by Haskell&#39;s &#39;newtype&#39; keyword.  This is setup for numeric types,and expects a Num&lt;A&gt; class-instance as an argument (TInt, TDouble, etc.)<br/><br/> https://wiki.haskell.org/Newtype<br/><br/> Derive type from this one to get: Equatable, Comparable, Appendable, Foldable,  Functor, Iterable: strongly typed values.<br/><br/> For example:<br/><br/><div class='code-line'>     class Metres : NumType&lt;Metres, TDouble, double&gt; { public Metres(double x) : base(x) {} }</div><br/><br/> Will not accept null values </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">NUMTYPE</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">NUMTYPE</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="NumType_NUMTYPE_NUM_A"></a><div class="left"><p ><a class="type-name" href="NumType_NUMTYPE_NUM_A.htm">NumType&lt;NUMTYPE, NUM, A&gt;</a></p><p ><span >NumType - inspired by Haskell&#39;s &#39;newtype&#39; keyword.  This is setup for numeric types,and expects a Num&lt;A&gt; class-instance as an argument (TInt, TDouble, etc.)<br/><br/> https://wiki.haskell.org/Newtype<br/><br/> Derive type from this one to get: Equatable, Comparable, Appendable, Foldable,  Functor, Iterable: strongly typed values.<br/><br/> For example:<br/><br/><div class='code-line'>     class Metres : NumType&lt;Metres, TDouble, double&gt; { public Metres(double x) : base(x) {} }</div><br/><br/> Will not accept null values </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">True</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="ObjectExt_"></a><div class="left"><p ><a class="type-name" href="ObjectExt_.htm">ObjectExt</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">ObjectExt</span></div></div></div><div class="doc-ns-type"><a name="ObservableExt_"></a><div class="left"><p ><a class="type-name" href="ObservableExt_.htm">ObservableExt</a></p><p ><span >Observable extensions </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">ObservableExt</span></div></div></div><div class="doc-ns-type"><a name="OptionAsyncT_"></a><div class="left"><p ><a class="type-name" href="OptionAsyncT_.htm">OptionAsyncT</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">OptionAsyncT</span></div></div></div><div class="doc-ns-type"><a name="OptionAsyncT_Extensions_"></a><div class="left"><p ><a class="type-name" href="OptionAsyncT_Extensions_.htm">OptionAsyncT_Extensions</a></p><p ><span >Monad transformer for OptionAsync, provides functionality for working  with the inner value of the nested type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">OptionAsyncT_Extensions</span></div></div></div><div class="doc-ns-type"><a name="OptionIsNoneException_"></a><div class="left"><p ><a class="type-name" href="OptionIsNoneException_.htm">OptionIsNoneException</a></p><p ><span >Option T is none </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">OptionIsNoneException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="OptionT_"></a><div class="left"><p ><a class="type-name" href="OptionT_.htm">OptionT</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">OptionT</span></div></div></div><div class="doc-ns-type"><a name="OptionT_Extensions_"></a><div class="left"><p ><a class="type-name" href="OptionT_Extensions_.htm">OptionT_Extensions</a></p><p ><span >Monad transformer for Option, provides functionality for working  with the inner value of the nested type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">OptionT_Extensions</span></div></div></div><div class="doc-ns-type"><a name="OptionUnsafeT_"></a><div class="left"><p ><a class="type-name" href="OptionUnsafeT_.htm">OptionUnsafeT</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">OptionUnsafeT</span></div></div></div><div class="doc-ns-type"><a name="OptionUnsafeT_Extensions_"></a><div class="left"><p ><a class="type-name" href="OptionUnsafeT_Extensions_.htm">OptionUnsafeT_Extensions</a></p><p ><span >Monad transformer for OptionUnsafe, provides functionality for working  with the inner value of the nested type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">OptionUnsafeT_Extensions</span></div></div></div><div class="doc-ns-type"><a name="OutExtensions_"></a><div class="left"><p ><a class="type-name" href="OutExtensions_.htm">OutExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">OutExtensions</span></div></div></div><div class="doc-ns-type"><a name="Prelude_"></a><div class="left"><p ><a class="type-name" href="Prelude_.htm">Prelude</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">Prelude</span></div></div></div><div class="doc-ns-type"><a name="Query_"></a><div class="left"><p ><a class="type-name" href="Query_.htm">Query</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Query</span></div></div></div><div class="doc-ns-type"><a name="Queue_"></a><div class="left"><p ><a class="type-name" href="Queue_.htm">Queue</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Queue</span></div></div></div><div class="doc-ns-type"><a name="QueueExtensions_"></a><div class="left"><p ><a class="type-name" href="QueueExtensions_.htm">QueueExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">QueueExtensions</span></div></div></div><div class="doc-ns-type"><a name="Range_SELF_MonoidOrdA_A"></a><div class="left"><p ><a class="type-name" href="Range_SELF_MonoidOrdA_A.htm">Range&lt;SELF, MonoidOrdA, A&gt;</a></p><p ><span >Represents a range of values </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Range</span>&lt;<span class="ident">SELF</span>, <span class="ident">MonoidOrdA</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="ReaderResult_"></a><div class="left"><p ><a class="type-name" href="ReaderResult_.htm">ReaderResult</a></p><p ><span >Convenience methods for returning from a Reader&lt;Env,A&gt; computation </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">ReaderResult</span></div></div></div><div class="doc-ns-type"><a name="ResultIsNullException_"></a><div class="left"><p ><a class="type-name" href="ResultIsNullException_.htm">ResultIsNullException</a></p><p ><span >Result is null </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ResultIsNullException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="Set_"></a><div class="left"><p ><a class="type-name" href="Set_.htm">Set</a></p><p ><span >Immutable set module AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">Set</span></div></div></div><div class="doc-ns-type"><a name="SetT_"></a><div class="left"><p ><a class="type-name" href="SetT_.htm">SetT</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">SetT</span></div></div></div><div class="doc-ns-type"><a name="SetT_Extensions_"></a><div class="left"><p ><a class="type-name" href="SetT_Extensions_.htm">SetT_Extensions</a></p><p ><span >Monad transformer for Set, provides functionality for working  with the inner value of the nested type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">SetT_Extensions</span></div></div></div><div class="doc-ns-type"><a name="ShortRange_"></a><div class="left"><p ><a class="type-name" href="ShortRange_.htm">ShortRange</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ShortRange</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Range</span>&lt;<span class="ident">ShortRange</span>, <span class="ident">TShort</span>, <span class="keyword">short</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="Some_"></a><div class="left"><p ><a class="type-name" href="Some_.htm">Some</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Some</span></div></div></div><div class="doc-ns-type"><a name="SomeContext_OPT_OA_A_B"></a><div class="left"><p ><a class="type-name" href="SomeContext_OPT_OA_A_B.htm">SomeContext&lt;OPT, OA, A, B&gt;</a></p><p ><span >Provides a fluent context when calling the Some(Func) method from a member of the Optional&lt;A&gt; type-class.  Must call None(Func) or  None(Value) on this context to complete the matching operation. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">SomeContext</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div><div class="doc-ns-type"><a name="SomeNotInitialisedException_"></a><div class="left"><p ><a class="type-name" href="SomeNotInitialisedException_.htm">SomeNotInitialisedException</a></p><p ><span >Some T not initialised </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">SomeNotInitialisedException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="SomeUnitContext_OPT_OA_A"></a><div class="left"><p ><a class="type-name" href="SomeUnitContext_OPT_OA_A.htm">SomeUnitContext&lt;OPT, OA, A&gt;</a></p><p ><span >Provides a fluent context when calling the Some(Action) method from Optional&lt;A&gt; type-class.  Must call None(Action) or None(Value) on this  context to complete the matching operation. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">SomeUnitContext</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div></div><div class="doc-ns-type"><a name="Stack_"></a><div class="left"><p ><a class="type-name" href="Stack_.htm">Stack</a></p><p ><span >Functional module for working with the Stck T type </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Stack</span></div></div></div><div class="doc-ns-type"><a name="StateResult_"></a><div class="left"><p ><a class="type-name" href="StateResult_.htm">StateResult</a></p><p ><span >Convenience methods for returning from a State&lt;S,A&gt; computation </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">StateResult</span></div></div></div><div class="doc-ns-type"><a name="TaskT_"></a><div class="left"><p ><a class="type-name" href="TaskT_.htm">TaskT</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TaskT</span></div></div></div><div class="doc-ns-type"><a name="TaskT_Extensions_"></a><div class="left"><p ><a class="type-name" href="TaskT_Extensions_.htm">TaskT_Extensions</a></p><p ><span >Monad transformer for Task, provides functionality for working  with the inner value of the nested type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TaskT_Extensions</span></div></div></div><div class="doc-ns-type"><a name="TryAsyncT_"></a><div class="left"><p ><a class="type-name" href="TryAsyncT_.htm">TryAsyncT</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TryAsyncT</span></div></div></div><div class="doc-ns-type"><a name="TryAsyncT_Extensions_"></a><div class="left"><p ><a class="type-name" href="TryAsyncT_Extensions_.htm">TryAsyncT_Extensions</a></p><p ><span >Monad transformer for TryAsync, provides functionality for working  with the inner value of the nested type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TryAsyncT_Extensions</span></div></div></div><div class="doc-ns-type"><a name="TryConfig_"></a><div class="left"><p ><a class="type-name" href="TryConfig_.htm">TryConfig</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">TryConfig</span></div></div></div><div class="doc-ns-type"><a name="TryOptionAsyncT_"></a><div class="left"><p ><a class="type-name" href="TryOptionAsyncT_.htm">TryOptionAsyncT</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TryOptionAsyncT</span></div></div></div><div class="doc-ns-type"><a name="TryOptionAsyncT_Extensions_"></a><div class="left"><p ><a class="type-name" href="TryOptionAsyncT_Extensions_.htm">TryOptionAsyncT_Extensions</a></p><p ><span >Monad transformer for TryOptionAsync, provides functionality for working  with the inner value of the nested type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TryOptionAsyncT_Extensions</span></div></div></div><div class="doc-ns-type"><a name="TryOptionT_"></a><div class="left"><p ><a class="type-name" href="TryOptionT_.htm">TryOptionT</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TryOptionT</span></div></div></div><div class="doc-ns-type"><a name="TryOptionT_Extensions_"></a><div class="left"><p ><a class="type-name" href="TryOptionT_Extensions_.htm">TryOptionT_Extensions</a></p><p ><span >Monad transformer for TryOption, provides functionality for working  with the inner value of the nested type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TryOptionT_Extensions</span></div></div></div><div class="doc-ns-type"><a name="TryT_"></a><div class="left"><p ><a class="type-name" href="TryT_.htm">TryT</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TryT</span></div></div></div><div class="doc-ns-type"><a name="TryT_Extensions_"></a><div class="left"><p ><a class="type-name" href="TryT_Extensions_.htm">TryT_Extensions</a></p><p ><span >Monad transformer for Try, provides functionality for working  with the inner value of the nested type. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TryT_Extensions</span></div></div></div><div class="doc-ns-type"><a name="TypeClass_"></a><div class="left"><p ><a class="type-name" href="TypeClass_.htm">TypeClass</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TypeClass</span></div></div></div><div class="doc-ns-type"><a name="TypeClassExtensions_"></a><div class="left"><p ><a class="type-name" href="TypeClassExtensions_.htm">TypeClassExtensions</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TypeClassExtensions</span></div></div></div><div class="doc-ns-type"><a name="ValueIsNoneException_"></a><div class="left"><p ><a class="type-name" href="ValueIsNoneException_.htm">ValueIsNoneException</a></p><p ><span >Value is none </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ValueIsNoneException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="ValueIsNullException_"></a><div class="left"><p ><a class="type-name" href="ValueIsNullException_.htm">ValueIsNullException</a></p><p ><span >Value is null </span></p></div><div class="right"><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">ValueIsNullException</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Exception</span></span></div></div></div><div class="doc-ns-type"><a name="VectorClock_"></a><div class="left"><p ><a class="type-name" href="VectorClock_.htm">VectorClock</a></p><p ><span >Vector clock </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">VectorClock</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">VectorClock</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="Versioned_"></a><div class="left"><p ><a class="type-name" href="Versioned_.htm">Versioned</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Versioned</span></div></div></div><div class="doc-ns-type"><a name="Versioned_T"></a><div class="left"><p ><a class="type-name" href="Versioned_T.htm">Versioned&lt;T&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Versioned</span>&lt;<span class="ident">T</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Versioned</span>&lt;<span class="ident">T</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">Versioned</span>&lt;<span class="ident">T</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="WriterResult_"></a><div class="left"><p ><a class="type-name" href="WriterResult_.htm">WriterResult</a></p><p ><span >Convenience methods for returning from a Writer&lt;MonoidW, W, A&gt; computation </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">WriterResult</span></div></div></div><h2 >INTERFACES</h2><div class="doc-ns-type"><a name="IEither_"></a><div class="left"><p ><a class="type-name" href="IEither_.htm">IEither</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">IEither</span></div></div></div><div class="doc-ns-type"><a name="IOptional_"></a><div class="left"><p ><a class="type-name" href="IOptional_.htm">IOptional</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">IOptional</span></div></div></div><div class="doc-ns-type"><a name="IOptionalAsync_"></a><div class="left"><p ><a class="type-name" href="IOptionalAsync_.htm">IOptionalAsync</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">IOptionalAsync</span></div></div></div><div class="doc-ns-type"><a name="ListInfo_"></a><div class="left"><p ><a class="type-name" href="ListInfo_.htm">ListInfo</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">ListInfo</span></div></div></div><h2 >ENUMS</h2><div class="doc-ns-type"><a name="EitherStatus"></a><div class="left"><p ><a class="type-name" href="EitherStatus.htm">EitherStatus</a></p><p ><span >Possible states of an Either </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="ident">EitherStatus</span> : <span class="keyword">byte</span></div></div></div></div></body></html>