<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="IL_.htm">IL</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Compare&lt;A>">Compare&lt;A&gt;()</a><a class="nav-link" href="#Ctor&lt;A, B, C, D, R>">Ctor&lt;A, B, C, D, R&gt;(Func&lt;ConstructorInfo, bool&gt;)</a><a class="nav-link" href="#Ctor&lt;A, B, C, R>">Ctor&lt;A, B, C, R&gt;(Func&lt;ConstructorInfo, bool&gt;)</a><a class="nav-link" href="#Ctor&lt;A, B, R>">Ctor&lt;A, B, R&gt;(Func&lt;ConstructorInfo, bool&gt;)</a><a class="nav-link" href="#Ctor&lt;A, R>">Ctor&lt;A, R&gt;(Func&lt;ConstructorInfo, bool&gt;)</a><a class="nav-link" href="#Equals&lt;A>">Equals&lt;A&gt;()</a><a class="nav-link" href="#EqualsTyped&lt;A>">EqualsTyped&lt;A&gt;()</a><a class="nav-link" href="#Func1&lt;TYPE, A, R>">Func1&lt;TYPE, A, R&gt;(Func&lt;MethodInfo, bool&gt;)</a><a class="nav-link" href="#Func1&lt;TYPE, R>">Func1&lt;TYPE, R&gt;(Type, Func&lt;MethodInfo, bool&gt;)</a><a class="nav-link" href="#Func2&lt;TYPE, A, B, R>">Func2&lt;TYPE, A, B, R&gt;(Func&lt;MethodInfo, bool&gt;)</a><a class="nav-link" href="#Func3&lt;TYPE, A, B, C, R>">Func3&lt;TYPE, A, B, C, R&gt;(Func&lt;MethodInfo, bool&gt;)</a><a class="nav-link" href="#Func4&lt;TYPE, A, B, C, D, R>">Func4&lt;TYPE, A, B, C, D, R&gt;(Func&lt;MethodInfo, bool&gt;)</a><a class="nav-link" href="#GetHashCode&lt;A>">GetHashCode&lt;A&gt;()</a></div><div class="content-panel"><h1 >IL Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">IL</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="Compare&lt;A>"></a>Compare&lt;A&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Compare_A_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Provides a function that compares two record type arguments for structural equality, this  compares the *fields* from each argument for equality and returns 0 if all are equal, -1  if X is less than Y, and 1 if X is greater than Y. </span></p><div class="section_title">REMARKS</div><span >You should cache the result of this method to reduce the work of building the IL  each time.  Better still use the <span class='code-inline'>RecordType&lt;A&gt;</span> type to provide a cached version of these results. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="keyword">int</span>&gt; <span class="ident">Compare</span>&lt;<span class="ident">A</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Compare_A_"><div class="section_title">SOURCE</div><div class="code">
            var dynamic = new DynamicMethod(&quot;Compare&quot;, typeof(int), new[] { typeof(A), typeof(A) }, true);

            var fields = typeof(A).GetTypeInfo().DeclaredFields;
            var il = dynamic.GetILGenerator();
            il.DeclareLocal(typeof(int));
            var returnTrue = il.DefineLabel();

            if (!typeof(A).GetTypeInfo().IsValueType)
            {
                var notNullEq = il.DefineLabel();
                var argNotNullY = il.DefineLabel();
                var argNotNullX = il.DefineLabel();

                // Check reference-equality on the args
                il.Emit(OpCodes.Ldarg_0);
                il.Emit(OpCodes.Ldarg_1);
                il.Emit(OpCodes.Bne_Un_S, notNullEq);

                // reference-equality on the args, so return null
                il.Emit(OpCodes.Ldc_I4_0);
                il.Emit(OpCodes.Ret);

                il.MarkLabel(notNullEq);

                // Check reference-equality with null and Y
                il.Emit(OpCodes.Ldarg_1);
                il.Emit(OpCodes.Brtrue_S, argNotNullY);

                // Y == null, return 1
                il.Emit(OpCodes.Ldc_I4_1);
                il.Emit(OpCodes.Ret);

                il.MarkLabel(argNotNullY);

                // Check reference-equality with null and X
                il.Emit(OpCodes.Ldarg_0);
                il.Emit(OpCodes.Brtrue_S, argNotNullX);

                // X == null, return 0
                il.Emit(OpCodes.Ldc_I4_M1);
                il.Emit(OpCodes.Ret);

                il.MarkLabel(argNotNullX);
            }

            foreach (var field in fields)
            {
                var continueLabel = il.DefineLabel();

                var comparerType = typeof(Comparer&lt;&gt;).MakeGenericType(field.FieldType);
                var defaultMethod = comparerType.GetTypeInfo().DeclaredMethods.Where(m =&gt; m.Name == &quot;get_Default&quot;).Single();
                var parms = new[] { field.FieldType, field.FieldType };
                var compareMethod = comparerType.GetTypeInfo()
                                                .DeclaredMethods
                                                .Where(m =&gt; m.Name == &quot;Compare&quot;)
                                                .Where(m =&gt; default(EqArray&lt;EqDefault&lt;Type&gt;, Type&gt;).Equals(
                                                                m.GetParameters().Map(p =&gt; p.ParameterType).ToArray(),
                                                                parms))
                                                .Single();


                il.Emit(OpCodes.Call, defaultMethod);
                il.Emit(OpCodes.Ldarg_0);
                il.Emit(OpCodes.Ldfld, field);
                il.Emit(OpCodes.Ldarg_1);
                il.Emit(OpCodes.Ldfld, field);
                il.Emit(OpCodes.Callvirt, compareMethod);
                il.Emit(OpCodes.Stloc_0);
                il.Emit(OpCodes.Ldloc_0);
                il.Emit(OpCodes.Brfalse_S, continueLabel);

                // Return result from compare
                il.Emit(OpCodes.Ldloc_0);
                il.Emit(OpCodes.Ret);

                // Continue
                il.MarkLabel(continueLabel);
            }

            // Return 0
            il.MarkLabel(returnTrue);
            il.Emit(OpCodes.Ldc_I4_0);
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, A, int&gt;)dynamic.CreateDelegate(typeof(Func&lt;A, A, int&gt;));
        </div></div></div><div class="member-title"><a name="Ctor&lt;A, B, C, D, R>"></a>Ctor&lt;A, B, C, D, R&gt;(Func&lt;ConstructorInfo, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Ctor_A_B_C_D_R_Func_ConstructorInfo_bool_ctorPred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Emits the IL to instantiate a type of R with four arguments to  the constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ctorPred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt; <span class="ident">Ctor</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt; ctorPred = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Ctor_A_B_C_D_R_Func_ConstructorInfo_bool_ctorPred_"><div class="section_title">SOURCE</div><div class="code">
            ctorPred = ctorPred ?? (_ =&gt; true);

            var ctorInfo = typeof(R)
                .GetTypeInfo()
                .DeclaredConstructors
                .Where(x =&gt;
                {
                    var ps = x.GetParameters();
                    if (ps.Length != 4) return false;
                    if (ps[0].ParameterType != typeof(A)) return false;
                    if (ps[1].ParameterType != typeof(B)) return false;
                    if (ps[2].ParameterType != typeof(C)) return false;
                    if (ps[3].ParameterType != typeof(D)) return false;
                    return ctorPred(x);
                })
                .FirstOrDefault();

            if (ctorInfo == null) throw new ArgumentException($&quot;Constructor not found for type {typeof(R).FullName}&quot;);

            var ctorParams = ctorInfo.GetParameters();

            var dynamic = new DynamicMethod(&quot;CreateInstance&quot;,
                                            ctorInfo.DeclaringType,
                                            ctorParams.Select(p =&gt; p.ParameterType).ToArray(),
                                            true);

            var il = dynamic.GetILGenerator();
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Ldarg_2);
            il.Emit(OpCodes.Ldarg_3);
            il.Emit(OpCodes.Newobj, ctorInfo);
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, B, C, D, R&gt;)dynamic.CreateDelegate(typeof(Func&lt;A, B, C, D, R&gt;));
        </div></div></div><div class="member-title"><a name="Ctor&lt;A, B, C, R>"></a>Ctor&lt;A, B, C, R&gt;(Func&lt;ConstructorInfo, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Ctor_A_B_C_R_Func_ConstructorInfo_bool_ctorPred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Emits the IL to instantiate a type of R with three arguments to  the constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ctorPred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt; <span class="ident">Ctor</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt; ctorPred = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Ctor_A_B_C_R_Func_ConstructorInfo_bool_ctorPred_"><div class="section_title">SOURCE</div><div class="code">
            ctorPred = ctorPred ?? (_ =&gt; true);

            var ctorInfo = typeof(R)
                .GetTypeInfo()
                .DeclaredConstructors
                .Where(x =&gt;
                {
                    var ps = x.GetParameters();
                    if (ps.Length != 3) return false;
                    if (ps[0].ParameterType != typeof(A)) return false;
                    if (ps[1].ParameterType != typeof(B)) return false;
                    if (ps[2].ParameterType != typeof(C)) return false;
                    return ctorPred(x);
                })
                .FirstOrDefault();

            if (ctorInfo == null) throw new ArgumentException($&quot;Constructor not found for type {typeof(R).FullName}&quot;);

            var ctorParams = ctorInfo.GetParameters();

            var dynamic = new DynamicMethod(&quot;CreateInstance&quot;,
                                            ctorInfo.DeclaringType,
                                            ctorParams.Select(p =&gt; p.ParameterType).ToArray(),
                                            true);

            var il = dynamic.GetILGenerator();
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Ldarg_2);
            il.Emit(OpCodes.Newobj, ctorInfo);
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, B, C, R&gt;)dynamic.CreateDelegate(typeof(Func&lt;A, B, C, R&gt;));
        </div></div></div><div class="member-title"><a name="Ctor&lt;A, B, R>"></a>Ctor&lt;A, B, R&gt;(Func&lt;ConstructorInfo, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Ctor_A_B_R_Func_ConstructorInfo_bool_ctorPred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Emits the IL to instantiate a type of R with two arguments to  the constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ctorPred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt; <span class="ident">Ctor</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt; ctorPred = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Ctor_A_B_R_Func_ConstructorInfo_bool_ctorPred_"><div class="section_title">SOURCE</div><div class="code">
            ctorPred = ctorPred ?? (_ =&gt; true);

            var ctorInfo = typeof(R)
                .GetTypeInfo()
                .DeclaredConstructors
                .Where(x =&gt;
                {
                    var ps = x.GetParameters();
                    if (ps.Length != 2) return false;
                    if (ps[0].ParameterType != typeof(A)) return false;
                    if (ps[1].ParameterType != typeof(B)) return false;
                    return ctorPred(x);
                })
                .FirstOrDefault();

            if (ctorInfo == null) throw new ArgumentException($&quot;Constructor not found for type {typeof(R).FullName}&quot;);

            var ctorParams = ctorInfo.GetParameters();

            var dynamic = new DynamicMethod(&quot;CreateInstance&quot;,
                                            ctorInfo.DeclaringType,
                                            ctorParams.Select(p =&gt; p.ParameterType).ToArray(),
                                            true);

            var il = dynamic.GetILGenerator();
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Newobj, ctorInfo);
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, B, R&gt;)dynamic.CreateDelegate(typeof(Func&lt;A, B, R&gt;));
        </div></div></div><div class="member-title"><a name="Ctor&lt;A, R>"></a>Ctor&lt;A, R&gt;(Func&lt;ConstructorInfo, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Ctor_A_R_Func_ConstructorInfo_bool_ctorPred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Emits the IL to instantiate a type of R with a single argument to  the constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ctorPred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; <span class="ident">Ctor</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt; ctorPred = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Ctor_A_R_Func_ConstructorInfo_bool_ctorPred_"><div class="section_title">SOURCE</div><div class="code">
            ctorPred = ctorPred ?? (_ =&gt; true);

            var ctorInfo = typeof(R)
                .GetTypeInfo()
                .DeclaredConstructors
                .Where(x =&gt;
                {
                    var ps = x.GetParameters();
                    if (ps.Length != 1) return false;
                    if (ps[0].ParameterType != typeof(A)) return false;
                    return ctorPred(x);
                })
                .FirstOrDefault();

            if (ctorInfo == null) throw new ArgumentException($&quot;Constructor not found for type {typeof(R).FullName}&quot;);

            var ctorParams = ctorInfo.GetParameters();

            var dynamic = new DynamicMethod(&quot;CreateInstance&quot;,
                                            ctorInfo.DeclaringType,
                                            ctorParams.Select(p =&gt; p.ParameterType).ToArray(),
                                            true);

            var il = dynamic.GetILGenerator();
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Newobj, ctorInfo);
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, R&gt;)dynamic.CreateDelegate(typeof(Func&lt;A, R&gt;));
        </div></div></div><div class="member-title"><a name="Equals&lt;A>"></a>Equals&lt;A&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals_A_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Provides a function that compares two record type arguments (one of type A and one of  object) for structural equality, this first makes sure that the <span class='code-inline'>Object</span> argument is of  type A and then compares the *fields* from each argument for equality and returns true if  all are equal.   </span></p><div class="section_title">REMARKS</div><span >You should cache the result of this method to reduce the work of building the IL  each time.  Better still use the <span class='code-inline'>RecordType&lt;A&gt;</span> type to provide a cached version of these results. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">object</span>, <span class="keyword">bool</span>&gt; <span class="ident">Equals</span>&lt;<span class="ident">A</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">object</span>, <span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Equals_A_"><div class="section_title">SOURCE</div><div class="code">
            var dynamic = new DynamicMethod(&quot;Equals&quot;, typeof(bool), new[] { typeof(A), typeof(object) }, true);
            var fields = typeof(A).GetTypeInfo().DeclaredFields;
            var isValueType = typeof(A).GetTypeInfo().IsValueType;

            var il = dynamic.GetILGenerator();

            var argNotNullY1 = il.DefineLabel();
            var argNotNullY2 = il.DefineLabel();
            var argNotNullX = il.DefineLabel();
            var argIsA = il.DefineLabel();
            var returnTrue = il.DefineLabel();

            il.DeclareLocal(typeof(A));

            if (!isValueType)
            {
                // if(x == null)
                il.Emit(OpCodes.Ldarg_0);
                il.Emit(OpCodes.Brtrue_S, argNotNullX);

                // if(y == null)
                il.Emit(OpCodes.Ldarg_1);
                il.Emit(OpCodes.Brtrue_S, argNotNullY1);

                // return true
                il.Emit(OpCodes.Ldc_I4_1);
                il.Emit(OpCodes.Ret);

                il.MarkLabel(argNotNullY1);

                // return false
                il.Emit(OpCodes.Ldc_I4_0);
                il.Emit(OpCodes.Ret);

                il.MarkLabel(argNotNullX);
            }

            // if(y == null)
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Brtrue_S, argNotNullY2);

            // return false
            il.Emit(OpCodes.Ldc_I4_0);
            il.Emit(OpCodes.Ret);

            il.MarkLabel(argNotNullY2);

            // if(y is A)
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Isinst, typeof(A));
            il.Emit(OpCodes.Brtrue_S, argIsA);

            // return false
            il.Emit(OpCodes.Ldc_I4_0);
            il.Emit(OpCodes.Ret);

            il.MarkLabel(argIsA);

            il.Emit(OpCodes.Ldarg_1);
            if (isValueType)
            {
                il.Emit(OpCodes.Unbox_Any, typeof(A));
            }
            else
            {
                il.Emit(OpCodes.Castclass, typeof(A));
            }
            il.Emit(OpCodes.Stloc_0);

            foreach (var field in fields)
            {
                var continueLabel = il.DefineLabel();

                var comparerType = typeof(EqualityComparer&lt;&gt;).MakeGenericType(field.FieldType);
                var defaultMethod = comparerType.GetTypeInfo().DeclaredMethods.Where(m =&gt; m.Name == &quot;get_Default&quot;).Single();
                var parms = new[] { field.FieldType, field.FieldType };
                var equalsMethod = comparerType.GetTypeInfo()
                                               .DeclaredMethods
                                               .Where(m =&gt; m.Name == &quot;Equals&quot;)
                                               .Where(m =&gt; default(EqArray&lt;EqDefault&lt;Type&gt;, Type&gt;).Equals(
                                                               m.GetParameters().Map(p =&gt; p.ParameterType).ToArray(),
                                                               parms))
                                               .Single();

                il.Emit(OpCodes.Call, defaultMethod);
                il.Emit(OpCodes.Ldarg_0);
                il.Emit(OpCodes.Ldfld, field);
                il.Emit(OpCodes.Ldloc_0);
                il.Emit(OpCodes.Ldfld, field);
                il.Emit(OpCodes.Callvirt, equalsMethod);
                il.Emit(OpCodes.Brtrue_S, continueLabel);

                // Return false
                il.Emit(OpCodes.Ldc_I4_0);
                il.Emit(OpCodes.Ret);

                // Continue
                il.MarkLabel(continueLabel);
            }

            // Return true
            il.MarkLabel(returnTrue);
            il.Emit(OpCodes.Ldc_I4_1);
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, object, bool&gt;)dynamic.CreateDelegate(typeof(Func&lt;A, object, bool&gt;));
        </div></div></div><div class="member-title"><a name="EqualsTyped&lt;A>"></a>EqualsTyped&lt;A&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-EqualsTyped_A_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Provides a function that compares two record type arguments for structural equality, this  first compares the *fields* from each argument for equality and returns true if all are  equal.   </span></p><div class="section_title">REMARKS</div><span >You should cache the result of this method to reduce the work of building the IL  each time.  Better still use the <span class='code-inline'>RecordType&lt;A&gt;</span> type to provide a cached version of these results. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="keyword">bool</span>&gt; <span class="ident">EqualsTyped</span>&lt;<span class="ident">A</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-EqualsTyped_A_"><div class="section_title">SOURCE</div><div class="code">
            var dynamic = new DynamicMethod(&quot;EqualsTyped&quot;, typeof(bool), new[] { typeof(A), typeof(A) }, true);

            var isValueType = typeof(A).GetTypeInfo().IsValueType;
            var fields = typeof(A).GetTypeInfo().DeclaredFields;
            var il = dynamic.GetILGenerator();
            var returnTrue = il.DefineLabel();

            if(!isValueType)
            {
                var argNotNullX = il.DefineLabel();
                var argNotNullY1 = il.DefineLabel();
                var argNotNullY2 = il.DefineLabel();

                // if(x == null)
                il.Emit(OpCodes.Ldarg_0);
                il.Emit(OpCodes.Brtrue_S, argNotNullX);

                // if(y == null)
                il.Emit(OpCodes.Ldarg_1);
                il.Emit(OpCodes.Brtrue_S, argNotNullY1);

                // return true
                il.Emit(OpCodes.Ldc_I4_1);
                il.Emit(OpCodes.Ret);

                il.MarkLabel(argNotNullY1);

                // return false
                il.Emit(OpCodes.Ldc_I4_0);
                il.Emit(OpCodes.Ret);

                il.MarkLabel(argNotNullX);

                // if(y == null)
                il.Emit(OpCodes.Ldarg_1);
                il.Emit(OpCodes.Brtrue_S, argNotNullY2);

                // return false
                il.Emit(OpCodes.Ldc_I4_0);
                il.Emit(OpCodes.Ret);

                il.MarkLabel(argNotNullY2);
            }

            foreach (var field in fields)
            {
                var continueLabel = il.DefineLabel();

                var comparerType = typeof(EqualityComparer&lt;&gt;).MakeGenericType(field.FieldType);
                var defaultMethod = comparerType.GetTypeInfo().DeclaredMethods.Where(m =&gt; m.Name == &quot;get_Default&quot;).Single();
                var parms = new[] { field.FieldType, field.FieldType };
                var equalsMethod = comparerType.GetTypeInfo()
                                               .DeclaredMethods
                                               .Where(m =&gt; m.Name == &quot;Equals&quot;)
                                               .Where(m =&gt; default(EqArray&lt;EqDefault&lt;Type&gt;, Type&gt;).Equals(
                                                               m.GetParameters().Map(p =&gt; p.ParameterType).ToArray(),
                                                               parms))
                                               .Single();

                il.Emit(OpCodes.Call, defaultMethod);
                il.Emit(OpCodes.Ldarg_0);
                il.Emit(OpCodes.Ldfld, field);
                il.Emit(OpCodes.Ldarg_1);
                il.Emit(OpCodes.Ldfld, field);
                il.Emit(OpCodes.Callvirt, equalsMethod);
                il.Emit(OpCodes.Brtrue_S, continueLabel);

                // Return false
                il.Emit(OpCodes.Ldc_I4_0);
                il.Emit(OpCodes.Ret);

                // Continue
                il.MarkLabel(continueLabel);
            }

            // Return true
            il.MarkLabel(returnTrue);
            il.Emit(OpCodes.Ldc_I4_1);
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, A, bool&gt;)dynamic.CreateDelegate(typeof(Func&lt;A, A, bool&gt;));
        </div></div></div><div class="member-title"><a name="Func1&lt;TYPE, A, R>"></a>Func1&lt;TYPE, A, R&gt;(Func&lt;MethodInfo, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Func1_TYPE_A_R_Func_MethodInfo_bool_methodPred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Emits the IL to invoke a static method with one argument </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">methodPred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">MethodInfo</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">Func1</span>&lt;<span class="ident">TYPE</span>, <span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">MethodInfo</span>, <span class="keyword">bool</span>&gt; methodPred = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Func1_TYPE_A_R_Func_MethodInfo_bool_methodPred_"><div class="section_title">SOURCE</div><div class="code">
            methodPred = methodPred ?? (_ =&gt; true);

            var methodInfo = typeof(TYPE)
                .GetTypeInfo()
                .DeclaredMethods
                .Where(x =&gt;
                {
                    if (!x.IsStatic) return false;
                    var ps = x.GetParameters();
                    if (ps.Length != 1) return false;
                    if (ps[0].ParameterType != typeof(A)) return false;
                    return methodPred(x);
                })
                .FirstOrDefault();

            if (methodInfo == null) return None;

            var methodParams = methodInfo.GetParameters();

            var dynamic = new DynamicMethod(&quot;CreateInstance&quot;,
                                            typeof(R),
                                            methodParams.Select(p =&gt; p.ParameterType).ToArray(),
                                            true);

            var il = dynamic.GetILGenerator();
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Call, methodInfo);
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, R&gt;)dynamic.CreateDelegate(typeof(Func&lt;A, R&gt;));
        </div></div></div><div class="member-title"><a name="Func1&lt;TYPE, R>"></a>Func1&lt;TYPE, R&gt;(Type, Func&lt;MethodInfo, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Func1_TYPE_R_Type__arg1__Func_MethodInfo_bool_methodPred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Emits the IL to invoke a static method </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">arg1</div><div class="arg-type"><span class="ident">Type</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">methodPred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">MethodInfo</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">Func1</span>&lt;<span class="ident">TYPE</span>, <span class="ident">R</span>&gt;(<span class="ident">Type</span> arg1, <span class="ident">Func</span>&lt;<span class="ident">MethodInfo</span>, <span class="keyword">bool</span>&gt; methodPred = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Func1_TYPE_R_Type__arg1__Func_MethodInfo_bool_methodPred_"><div class="section_title">SOURCE</div><div class="code">
            methodPred = methodPred ?? (_ =&gt; true);

            var methodInfo = typeof(TYPE)
                .GetTypeInfo()
                .DeclaredMethods
                .Where(x =&gt;
                {
                    if (!x.IsStatic) return false;
                    var ps = x.GetParameters();
                    if (ps.Length != 1) return false;
                    if (ps[0].ParameterType != arg1) return false;
                    return methodPred(x);
                })
                .FirstOrDefault();

            if (methodInfo == null) return None;

            var methodParams = methodInfo.GetParameters();

            var dynamic = new DynamicMethod(&quot;CreateInstance&quot;,
                                            typeof(R),
                                            methodParams.Select(p =&gt; typeof(object)).ToArray(),
                                            true);

            var il = dynamic.GetILGenerator();
            il.DeclareLocal(typeof(R));
            il.Emit(OpCodes.Ldarg_0);
            if (arg1.GetTypeInfo().IsValueType)
            {
                il.Emit(OpCodes.Unbox_Any, arg1);
            }
            else
            {
                il.Emit(OpCodes.Castclass, arg1);
            }
            il.Emit(OpCodes.Call, methodInfo);
            il.Emit(OpCodes.Ret);

            return (Func&lt;object, R&gt;)dynamic.CreateDelegate(typeof(Func&lt;object, R&gt;));
        </div></div></div><div class="member-title"><a name="Func2&lt;TYPE, A, B, R>"></a>Func2&lt;TYPE, A, B, R&gt;(Func&lt;MethodInfo, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Func2_TYPE_A_B_R_Func_MethodInfo_bool_methodPred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Emits the IL to invoke a static method with two arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">methodPred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">MethodInfo</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">Func2</span>&lt;<span class="ident">TYPE</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">MethodInfo</span>, <span class="keyword">bool</span>&gt; methodPred = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Func2_TYPE_A_B_R_Func_MethodInfo_bool_methodPred_"><div class="section_title">SOURCE</div><div class="code">
            methodPred = methodPred ?? (_ =&gt; true);

            var methodInfo = typeof(TYPE)
                .GetTypeInfo()
                .DeclaredMethods
                .Where(x =&gt;
                {
                    if (!x.IsStatic) return false;
                    var ps = x.GetParameters();
                    if (ps.Length != 2) return false;
                    if (ps[0].ParameterType != typeof(A)) return false;
                    if (ps[1].ParameterType != typeof(B)) return false;
                    return methodPred(x);
                })
                .FirstOrDefault();

            if (methodInfo == null) return None;

            var methodParams = methodInfo.GetParameters();

            var dynamic = new DynamicMethod(&quot;CreateInstance&quot;,
                                            typeof(R),
                                            methodParams.Select(p =&gt; p.ParameterType).ToArray(),
                                            true);

            var il = dynamic.GetILGenerator();
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Call, methodInfo);
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, B, R&gt;)dynamic.CreateDelegate(typeof(Func&lt;A, B, R&gt;));
        </div></div></div><div class="member-title"><a name="Func3&lt;TYPE, A, B, C, R>"></a>Func3&lt;TYPE, A, B, C, R&gt;(Func&lt;MethodInfo, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Func3_TYPE_A_B_C_R_Func_MethodInfo_bool_methodPred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Emits the IL to invoke a static method with three arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">methodPred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">MethodInfo</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">Func3</span>&lt;<span class="ident">TYPE</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">MethodInfo</span>, <span class="keyword">bool</span>&gt; methodPred = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Func3_TYPE_A_B_C_R_Func_MethodInfo_bool_methodPred_"><div class="section_title">SOURCE</div><div class="code">
            methodPred = methodPred ?? (_ =&gt; true);

            var methodInfo = typeof(TYPE)
                .GetTypeInfo()
                .DeclaredMethods
                .Where(x =&gt;
                {
                    if (!x.IsStatic) return false;
                    var ps = x.GetParameters();
                    if (ps.Length != 3) return false;
                    if (ps[0].ParameterType != typeof(A)) return false;
                    if (ps[1].ParameterType != typeof(B)) return false;
                    if (ps[2].ParameterType != typeof(C)) return false;
                    return methodPred(x);
                })
                .FirstOrDefault();

            if (methodInfo == null) return None;

            var methodParams = methodInfo.GetParameters();

            var dynamic = new DynamicMethod(&quot;CreateInstance&quot;,
                                            typeof(R),
                                            methodParams.Select(p =&gt; p.ParameterType).ToArray(),
                                            true);

            var il = dynamic.GetILGenerator();
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Ldarg_2);
            il.Emit(OpCodes.Call, methodInfo);
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, B, C, R&gt;)dynamic.CreateDelegate(typeof(Func&lt;A, B, C, R&gt;));
        </div></div></div><div class="member-title"><a name="Func4&lt;TYPE, A, B, C, D, R>"></a>Func4&lt;TYPE, A, B, C, D, R&gt;(Func&lt;MethodInfo, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Func4_TYPE_A_B_C_D_R_Func_MethodInfo_bool_methodPred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Emits the IL to invoke a static method with four arguments </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">methodPred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">MethodInfo</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">Func4</span>&lt;<span class="ident">TYPE</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">MethodInfo</span>, <span class="keyword">bool</span>&gt; methodPred = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Func4_TYPE_A_B_C_D_R_Func_MethodInfo_bool_methodPred_"><div class="section_title">SOURCE</div><div class="code">
            methodPred = methodPred ?? (_ =&gt; true);

            var methodInfo = typeof(TYPE)
                .GetTypeInfo()
                .DeclaredMethods
                .Where(x =&gt;
                {
                    if (!x.IsStatic) return false;
                    var ps = x.GetParameters();
                    if (ps.Length != 4) return false;
                    if (ps[0].ParameterType != typeof(A)) return false;
                    if (ps[1].ParameterType != typeof(B)) return false;
                    if (ps[2].ParameterType != typeof(C)) return false;
                    if (ps[3].ParameterType != typeof(D)) return false;
                    return methodPred(x);
                })
                .FirstOrDefault();

            if (methodInfo == null) return None;

            var methodParams = methodInfo.GetParameters();

            var dynamic = new DynamicMethod(&quot;CreateInstance&quot;,
                                            typeof(R),
                                            methodParams.Select(p =&gt; p.ParameterType).ToArray(),
                                            true);

            var il = dynamic.GetILGenerator();
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Ldarg_2);
            il.Emit(OpCodes.Ldarg_3);
            il.Emit(OpCodes.Call, methodInfo);
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, B, C, D, R &gt;)dynamic.CreateDelegate(typeof(Func&lt;A, B, C, D, R&gt;));
        </div></div></div><div class="member-title"><a name="GetHashCode&lt;A>"></a>GetHashCode&lt;A&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetHashCode_A_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Builds a function to provide a hash-code for a record type.  the hash-code is built from the hash-codes of all the *fields* that make up the type.   </span></p><div class="section_title">REMARKS</div><span >You should cache the result of this method to reduce the work of building the IL  each time.  Better still use the <span class='code-inline'>RecordType&lt;A&gt;</span> type to provide a cached version of these results. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">int</span>&gt; <span class="ident">GetHashCode</span>&lt;<span class="ident">A</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-GetHashCode_A_"><div class="section_title">SOURCE</div><div class="code">
            var dynamic = new DynamicMethod(&quot;GetHashCode&quot;, typeof(int), new[] { typeof(A) }, true);
            var fields = typeof(A).GetTypeInfo().DeclaredFields;
            var il = dynamic.GetILGenerator();
            bool isValueType = typeof(A).GetTypeInfo().IsValueType;

            // Load constant -2128831035
            il.Emit(OpCodes.Ldc_I4, -2128831035);

            foreach (var field in fields)
            {
                // Load constant 16777619
                il.Emit(OpCodes.Ldc_I4, 16777619);

                if (isValueType)
                {
                    // Load A
                    il.Emit(OpCodes.Ldarga_S, 0);
                }
                else
                {
                    // Load A
                    il.Emit(OpCodes.Ldarg_0);
                }

                if (field.FieldType.GetTypeInfo().IsValueType)
                {
                    // Load field
                    il.Emit(OpCodes.Ldflda, field);

                    // Call field GetHashCode
                    var method = field.FieldType.GetTypeInfo()
                                                .DeclaredMethods
                                                .Where(m =&gt; m.Name == &quot;GetHashCode&quot;)
                                                .Where(m =&gt; default(EqArray&lt;EqDefault&lt;Type&gt;, Type&gt;).Equals(
                                                               m.GetParameters().Map(p =&gt; p.ParameterType).ToArray(),
                                                               new Type[0]))
                                               .Single();
                    il.Emit(OpCodes.Call, method);
                }
                else
                {
                    var notNull = il.DefineLabel();
                    var useZero = il.DefineLabel();

                    // Load field
                    il.Emit(OpCodes.Ldfld, field);

                    // Duplicate top item on stack (2 of the same value on stack)
                    il.Emit(OpCodes.Dup);

                    // Test if null
                    il.Emit(OpCodes.Brtrue_S, notNull);

                    // Is null so load 0
                    il.Emit(OpCodes.Pop);
                    il.Emit(OpCodes.Ldc_I4_0);
                    il.Emit(OpCodes.Br_S, useZero);

                    il.MarkLabel(notNull);

                    // Not null so call GetHashCode
                    var method = field.FieldType.GetTypeInfo()
                                                .DeclaredMethods
                                                .Where(m =&gt; m.Name == &quot;GetHashCode&quot;)
                                                .Where(m =&gt; default(EqArray&lt;EqDefault&lt;Type&gt;, Type&gt;).Equals(
                                                               m.GetParameters().Map(p =&gt; p.ParameterType).ToArray(),
                                                               new Type[0]))
                                               .Single();
                    il.Emit(OpCodes.Callvirt, method);

                    il.MarkLabel(useZero);

                }

                // Multiply by 16777619 and Xor
                il.Emit(OpCodes.Add);
                il.Emit(OpCodes.Xor);
            }
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, int&gt;)dynamic.CreateDelegate(typeof(Func&lt;A, int&gt;));
        </div></div></div></div></body></html>