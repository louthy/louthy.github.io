<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="IL_.htm">IL</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Ctor&lt;A, B, C, D, R>">Ctor&lt;A, B, C, D, R&gt;(Func&lt;ConstructorInfo, bool&gt;)</a><a class="nav-link" href="#Ctor&lt;A, B, C, R>">Ctor&lt;A, B, C, R&gt;(Func&lt;ConstructorInfo, bool&gt;)</a><a class="nav-link" href="#Ctor&lt;A, B, R>">Ctor&lt;A, B, R&gt;(Func&lt;ConstructorInfo, bool&gt;)</a><a class="nav-link" href="#Ctor&lt;A, R>">Ctor&lt;A, R&gt;(Func&lt;ConstructorInfo, bool&gt;)</a></div><div class="content-panel"><h1 >IL Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">IL</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="Ctor&lt;A, B, C, D, R>"></a>Ctor&lt;A, B, C, D, R&gt;(Func&lt;ConstructorInfo, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Ctor_A_B_C_D_R_Func_ConstructorInfo_bool_ctorPred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Emits the IL to instantiate a type of R with four arguments to  the constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ctorPred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt; <span class="ident">Ctor</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt; ctorPred = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Ctor_A_B_C_D_R_Func_ConstructorInfo_bool_ctorPred_"><div class="section_title">SOURCE</div><div class="code">
            ctorPred = ctorPred ?? (_ =&gt; true);

            var ctorInfo = typeof(R)
                .GetTypeInfo()
                .DeclaredConstructors
                .Where(x =&gt;
                {
                    var ps = x.GetParameters();
                    if (ps.Length != 4) return false;
                    if (ps[0].ParameterType != typeof(A)) return false;
                    if (ps[1].ParameterType != typeof(B)) return false;
                    if (ps[2].ParameterType != typeof(C)) return false;
                    if (ps[3].ParameterType != typeof(D)) return false;
                    return ctorPred(x);
                })
                .FirstOrDefault();

            if (ctorPred == null) throw new ArgumentException($&quot;Constructor not found for type {typeof(R).FullName}&quot;);

            var ctorParams = ctorInfo.GetParameters();

            var boundType = typeof(A);
            var dynamic = new DynamicMethod(&quot;CreateInstance&quot;,
                                            ctorInfo.DeclaringType,
                                            ctorParams.Select(p =&gt; p.ParameterType).ToArray(),
                                            true);

            var il = dynamic.GetILGenerator();
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Ldarg_2);
            il.Emit(OpCodes.Ldarg_3);
            il.Emit(OpCodes.Newobj, ctorInfo);
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, B, C, D, R&gt;)dynamic.CreateDelegate(typeof(Func&lt;A, B, C, D, R&gt;));
        </div></div></div><div class="member-title"><a name="Ctor&lt;A, B, C, R>"></a>Ctor&lt;A, B, C, R&gt;(Func&lt;ConstructorInfo, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Ctor_A_B_C_R_Func_ConstructorInfo_bool_ctorPred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Emits the IL to instantiate a type of R with three arguments to  the constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ctorPred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt; <span class="ident">Ctor</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt; ctorPred = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Ctor_A_B_C_R_Func_ConstructorInfo_bool_ctorPred_"><div class="section_title">SOURCE</div><div class="code">
            ctorPred = ctorPred ?? (_ =&gt; true);

            var ctorInfo = typeof(R)
                .GetTypeInfo()
                .DeclaredConstructors
                .Where(x =&gt;
                {
                    var ps = x.GetParameters();
                    if (ps.Length != 3) return false;
                    if (ps[0].ParameterType != typeof(A)) return false;
                    if (ps[1].ParameterType != typeof(B)) return false;
                    if (ps[2].ParameterType != typeof(C)) return false;
                    return ctorPred(x);
                })
                .FirstOrDefault();

            if (ctorPred == null) throw new ArgumentException($&quot;Constructor not found for type {typeof(R).FullName}&quot;);

            var ctorParams = ctorInfo.GetParameters();

            var boundType = typeof(A);
            var dynamic = new DynamicMethod(&quot;CreateInstance&quot;,
                                            ctorInfo.DeclaringType,
                                            ctorParams.Select(p =&gt; p.ParameterType).ToArray(),
                                            true);

            var il = dynamic.GetILGenerator();
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Ldarg_2);
            il.Emit(OpCodes.Newobj, ctorInfo);
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, B, C, R&gt;)dynamic.CreateDelegate(typeof(Func&lt;A, B, C, R&gt;));
        </div></div></div><div class="member-title"><a name="Ctor&lt;A, B, R>"></a>Ctor&lt;A, B, R&gt;(Func&lt;ConstructorInfo, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Ctor_A_B_R_Func_ConstructorInfo_bool_ctorPred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Emits the IL to instantiate a type of R with two arguments to  the constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ctorPred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt; <span class="ident">Ctor</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt; ctorPred = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Ctor_A_B_R_Func_ConstructorInfo_bool_ctorPred_"><div class="section_title">SOURCE</div><div class="code">
            ctorPred = ctorPred ?? (_ =&gt; true);

            var ctorInfo = typeof(R)
                .GetTypeInfo()
                .DeclaredConstructors
                .Where(x =&gt;
                {
                    var ps = x.GetParameters();
                    if (ps.Length != 2) return false;
                    if (ps[0].ParameterType != typeof(A)) return false;
                    if (ps[1].ParameterType != typeof(B)) return false;
                    return ctorPred(x);
                })
                .FirstOrDefault();

            if (ctorPred == null) throw new ArgumentException($&quot;Constructor not found for type {typeof(R).FullName}&quot;);

            var ctorParams = ctorInfo.GetParameters();

            var boundType = typeof(A);
            var dynamic = new DynamicMethod(&quot;CreateInstance&quot;,
                                            ctorInfo.DeclaringType,
                                            ctorParams.Select(p =&gt; p.ParameterType).ToArray(),
                                            true);

            var il = dynamic.GetILGenerator();
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Newobj, ctorInfo);
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, B, R&gt;)dynamic.CreateDelegate(typeof(Func&lt;A, B, R&gt;));
        </div></div></div><div class="member-title"><a name="Ctor&lt;A, R>"></a>Ctor&lt;A, R&gt;(Func&lt;ConstructorInfo, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Ctor_A_R_Func_ConstructorInfo_bool_ctorPred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Emits the IL to instantiate a type of R with a single argument to  the constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ctorPred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; <span class="ident">Ctor</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">ConstructorInfo</span>, <span class="keyword">bool</span>&gt; ctorPred = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Ctor_A_R_Func_ConstructorInfo_bool_ctorPred_"><div class="section_title">SOURCE</div><div class="code">
            ctorPred = ctorPred ?? (_ =&gt; true);

            var ctorInfo = typeof(R)
                .GetTypeInfo()
                .DeclaredConstructors
                .Where(x =&gt;
                {
                    var ps = x.GetParameters();
                    if (ps.Length != 1) return false;
                    if (ps[0].ParameterType != typeof(A)) return false;
                    return ctorPred(x);
                })
                .FirstOrDefault();

            if (ctorPred == null) throw new ArgumentException($&quot;Constructor not found for type {typeof(R).FullName}&quot;);

            var ctorParams = ctorInfo.GetParameters();

            var boundType = typeof(A);
            var dynamic = new DynamicMethod(&quot;CreateInstance&quot;,
                                            ctorInfo.DeclaringType,
                                            ctorParams.Select(p =&gt; p.ParameterType).ToArray(),
                                            true);

            var il = dynamic.GetILGenerator();
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Newobj, ctorInfo);
            il.Emit(OpCodes.Ret);

            return (Func&lt;A, R&gt;)dynamic.CreateDelegate(typeof(Func&lt;A, R&gt;));
        </div></div></div></div></body></html>