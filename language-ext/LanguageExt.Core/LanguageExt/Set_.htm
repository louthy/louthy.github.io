<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Set_.htm">Set</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#add&lt;OrdT, T>">add&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, T)</a><a class="nav-link" href="#add&lt;T>">add&lt;T&gt;(Set&lt;T&gt;, T)</a><a class="nav-link" href="#addOrUpdate&lt;OrdT, T>">addOrUpdate&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, T)</a><a class="nav-link" href="#addOrUpdate&lt;T>">addOrUpdate&lt;T&gt;(Set&lt;T&gt;, T)</a><a class="nav-link" href="#addOrUpdateRange&lt;A>">addOrUpdateRange&lt;A&gt;(Set&lt;A&gt;, IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#addOrUpdateRange&lt;OrdT, T>">addOrUpdateRange&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#addRange&lt;A>">addRange&lt;A&gt;(Set&lt;A&gt;, IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#addRange&lt;OrdT, T>">addRange&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#contains&lt;OrdT, T>">contains&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, T)</a><a class="nav-link" href="#contains&lt;T>">contains&lt;T&gt;(Set&lt;T&gt;, T)</a><a class="nav-link" href="#create&lt;OrdT, T>">create&lt;OrdT, T&gt;()</a><a class="nav-link" href="#create&lt;T>">create&lt;T&gt;()</a><a class="nav-link" href="#createRange&lt;OrdT, T>">createRange&lt;OrdT, T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#createRange&lt;T>">createRange&lt;T&gt;(IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#empty&lt;OrdT, T>">empty&lt;OrdT, T&gt;()</a><a class="nav-link" href="#empty&lt;T>">empty&lt;T&gt;()</a><a class="nav-link" href="#equals&lt;OrdT, T>">equals&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)</a><a class="nav-link" href="#equals&lt;T>">equals&lt;T&gt;(Set&lt;T&gt;, Set&lt;T&gt;)</a><a class="nav-link" href="#except&lt;OrdT, T>">except&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)</a><a class="nav-link" href="#except&lt;T>">except&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#exists&lt;OrdT, T>">exists&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#exists&lt;T>">exists&lt;T&gt;(Set&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#filter&lt;OrdT, T>">filter&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#filter&lt;T>">filter&lt;T&gt;(Set&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#find&lt;OrdT, T>">find&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, T)</a><a class="nav-link" href="#find&lt;T>">find&lt;T&gt;(Set&lt;T&gt;, T)</a><a class="nav-link" href="#fold&lt;OrdT, T, S>">fold&lt;OrdT, T, S&gt;(Set&lt;OrdT, T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#fold&lt;T, S>">fold&lt;T, S&gt;(Set&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#foldBack&lt;OrdT, T, S>">foldBack&lt;OrdT, T, S&gt;(Set&lt;OrdT, T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#foldBack&lt;T, S>">foldBack&lt;T, S&gt;(Set&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#intersect&lt;OrdT, T>">intersect&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)</a><a class="nav-link" href="#intersect&lt;T>">intersect&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#isEmpty&lt;OrdT, T>">isEmpty&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;)</a><a class="nav-link" href="#isEmpty&lt;T>">isEmpty&lt;T&gt;(Set&lt;T&gt;)</a><a class="nav-link" href="#isProperSubset&lt;OrdT, T>">isProperSubset&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)</a><a class="nav-link" href="#isProperSubset&lt;T>">isProperSubset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#isProperSuperset&lt;OrdT, T>">isProperSuperset&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)</a><a class="nav-link" href="#isProperSuperset&lt;T>">isProperSuperset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#isSubset&lt;OrdT, T>">isSubset&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)</a><a class="nav-link" href="#isSubset&lt;T>">isSubset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#isSuperset&lt;OrdT, T>">isSuperset&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)</a><a class="nav-link" href="#isSuperset&lt;T>">isSuperset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#length&lt;OrdT, T>">length&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;)</a><a class="nav-link" href="#length&lt;T>">length&lt;T&gt;(Set&lt;T&gt;)</a><a class="nav-link" href="#map&lt;OrdT, OrdR, T, R>">map&lt;OrdT, OrdR, T, R&gt;(Set&lt;OrdT, T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#map&lt;OrdT, T>">map&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Func&lt;T, T&gt;)</a><a class="nav-link" href="#map&lt;T, R>">map&lt;T, R&gt;(Set&lt;T&gt;, Func&lt;T, R&gt;)</a><a class="nav-link" href="#overlaps&lt;OrdT, T>">overlaps&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)</a><a class="nav-link" href="#overlaps&lt;T>">overlaps&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#remove&lt;OrdT, T>">remove&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, T)</a><a class="nav-link" href="#remove&lt;T>">remove&lt;T&gt;(Set&lt;T&gt;, T)</a><a class="nav-link" href="#subtract&lt;OrdT, T>">subtract&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)</a><a class="nav-link" href="#subtract&lt;T>">subtract&lt;T&gt;(Set&lt;T&gt;, Set&lt;T&gt;)</a><a class="nav-link" href="#symmetricExcept&lt;OrdT, T>">symmetricExcept&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)</a><a class="nav-link" href="#symmetricExcept&lt;T>">symmetricExcept&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#tryAdd&lt;OrdT, T>">tryAdd&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, T)</a><a class="nav-link" href="#tryAdd&lt;T>">tryAdd&lt;T&gt;(Set&lt;T&gt;, T)</a><a class="nav-link" href="#tryAddRange&lt;A>">tryAddRange&lt;A&gt;(Set&lt;A&gt;, IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#tryAddRange&lt;OrdT, T>">tryAddRange&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, IEnumerable&lt;T&gt;)</a><a class="nav-link" href="#union&lt;OrdT, T>">union&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)</a><a class="nav-link" href="#union&lt;T>">union&lt;T&gt;(Set&lt;T&gt;, Set&lt;T&gt;)</a></div><div class="content-panel"><h1 >Set Class</h1><p ><span >Immutable set module AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">Set</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="add&lt;OrdT, T>"></a>add&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_OrdT_T_Set_OrdT_T_set__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add an item to the set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set to add item to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to add to the set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">add</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set, <span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >New set with the item added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-add_OrdT_T_Set_OrdT_T_set__T__value_"><div class="section_title">SOURCE</div><div class="code">
            set.Add(value)</div></div></div><div class="member-title"><a name="add&lt;T>"></a>add&lt;T&gt;(Set&lt;T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_T_Set_T_set__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add an item to the set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set to add item to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to add to the set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">add</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; set, <span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >New set with the item added</span></div></div></div><div style="display:none" id="code-add_T_Set_T_set__T__value_"><div class="section_title">SOURCE</div><div class="code">
            set.Add(value)</div></div></div><div class="member-title"><a name="addOrUpdate&lt;OrdT, T>"></a>addOrUpdate&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdate_OrdT_T_Set_OrdT_T_set__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add an item to the set.  If an item already exists then replace it. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set to add item to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to add to the set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">addOrUpdate</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set, <span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >New set with the item maybe added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-addOrUpdate_OrdT_T_Set_OrdT_T_set__T__value_"><div class="section_title">SOURCE</div><div class="code">
            set.AddOrUpdate(value)</div></div></div><div class="member-title"><a name="addOrUpdate&lt;T>"></a>addOrUpdate&lt;T&gt;(Set&lt;T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdate_T_Set_T_set__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add an item to the set.  If an item already exists then replace it. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set to add item to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to add to the set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">addOrUpdate</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; set, <span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >New set with the item maybe added</span></div></div></div><div style="display:none" id="code-addOrUpdate_T_Set_T_set__T__value_"><div class="section_title">SOURCE</div><div class="code">
            set.AddOrUpdate(value)</div></div></div><div class="member-title"><a name="addOrUpdateRange&lt;A>"></a>addOrUpdateRange&lt;A&gt;(Set&lt;A&gt;, IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdateRange_A_Set_A_set__IEnumerable_A_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the set.  If any items already exist, they&#39;re ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Range of keys to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">addOrUpdateRange</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; set, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >New Set with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException if any of the keys are null</span></div></div></div><div style="display:none" id="code-addOrUpdateRange_A_Set_A_set__IEnumerable_A_range_"><div class="section_title">SOURCE</div><div class="code">
            set.AddOrUpdateRange(range)</div></div></div><div class="member-title"><a name="addOrUpdateRange&lt;OrdT, T>"></a>addOrUpdateRange&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdateRange_OrdT_T_Set_OrdT_T_set__IEnumerable_T_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the set.  If any items already exist, they&#39;re ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Range of keys to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">addOrUpdateRange</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >New Set with the items added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException if any of the keys are null</span></div></div></div><div style="display:none" id="code-addOrUpdateRange_OrdT_T_Set_OrdT_T_set__IEnumerable_T_range_"><div class="section_title">SOURCE</div><div class="code">
            set.AddOrUpdateRange(range)</div></div></div><div class="member-title"><a name="addRange&lt;A>"></a>addRange&lt;A&gt;(Set&lt;A&gt;, IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addRange_A_Set_A_set__IEnumerable_A_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the set. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Range of keys to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">addRange</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; set, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >New Set with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException if any of the keys are null</span></div></div></div><div style="display:none" id="code-addRange_A_Set_A_set__IEnumerable_A_range_"><div class="section_title">SOURCE</div><div class="code">
            set.AddRange(range)</div></div></div><div class="member-title"><a name="addRange&lt;OrdT, T>"></a>addRange&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addRange_OrdT_T_Set_OrdT_T_set__IEnumerable_T_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the set. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Range of keys to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">addRange</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >New Set with the items added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException if any of the keys are null</span></div></div></div><div style="display:none" id="code-addRange_OrdT_T_Set_OrdT_T_set__IEnumerable_T_range_"><div class="section_title">SOURCE</div><div class="code">
            set.AddRange(range)</div></div></div><div class="member-title"><a name="contains&lt;OrdT, T>"></a>contains&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_OrdT_T_Set_OrdT_T_set__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if the value is in the set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to check</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set, <span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the item &#39;value&#39; is in the Set &#39;set&#39;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-contains_OrdT_T_Set_OrdT_T_set__T__value_"><div class="section_title">SOURCE</div><div class="code">
            set.Contains(value)</div></div></div><div class="member-title"><a name="contains&lt;T>"></a>contains&lt;T&gt;(Set&lt;T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_T_Set_T_set__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if the value is in the set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to check</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; set, <span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the item &#39;value&#39; is in the Set &#39;set&#39;</span></div></div></div><div style="display:none" id="code-contains_T_Set_T_set__T__value_"><div class="section_title">SOURCE</div><div class="code">
            set.Contains(value)</div></div></div><div class="member-title"><a name="create&lt;OrdT, T>"></a>create&lt;OrdT, T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-create_OrdT_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a new empty set </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">create</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >Empty set</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-create_OrdT_T_"><div class="section_title">SOURCE</div><div class="code">
            Set&lt;OrdT, T&gt;.Empty</div></div></div><div class="member-title"><a name="create&lt;T>"></a>create&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-create_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a new empty set </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">create</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Empty set</span></div></div></div><div style="display:none" id="code-create_T_"><div class="section_title">SOURCE</div><div class="code">
            Set&lt;T&gt;.Empty</div></div></div><div class="member-title"><a name="createRange&lt;OrdT, T>"></a>createRange&lt;OrdT, T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-createRange_OrdT_T_IEnumerable_T_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a new set pre-populated with the items in range </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Range of items</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">createRange</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >Set</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-createRange_OrdT_T_IEnumerable_T_range_"><div class="section_title">SOURCE</div><div class="code">
            new Set&lt;OrdT, T&gt;(range)</div></div></div><div class="member-title"><a name="createRange&lt;T>"></a>createRange&lt;T&gt;(IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-createRange_T_IEnumerable_T_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a new set pre-populated with the items in range </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Range of items</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">createRange</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Set</span></div></div></div><div style="display:none" id="code-createRange_T_IEnumerable_T_range_"><div class="section_title">SOURCE</div><div class="code">
            new Set&lt;T&gt;(range)</div></div></div><div class="member-title"><a name="empty&lt;OrdT, T>"></a>empty&lt;OrdT, T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-empty_OrdT_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a new empty set </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">empty</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >Empty set</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-empty_OrdT_T_"><div class="section_title">SOURCE</div><div class="code">
            Set&lt;OrdT, T&gt;.Empty</div></div></div><div class="member-title"><a name="empty&lt;T>"></a>empty&lt;T&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-empty_T_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a new empty set </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">empty</span>&lt;<span class="ident">T</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Empty set</span></div></div></div><div style="display:none" id="code-empty_T_"><div class="section_title">SOURCE</div><div class="code">
            Set&lt;T&gt;.Empty</div></div></div><div class="member-title"><a name="equals&lt;OrdT, T>"></a>equals&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equals_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if both sets contain the same elements </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equals</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setA, <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-equals_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.SetEquals(setB)</div></div></div><div class="member-title"><a name="equals&lt;T>"></a>equals&lt;T&gt;(Set&lt;T&gt;, Set&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equals_T_Set_T_setA__Set_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if both sets contain the same elements </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equals</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setA, <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-equals_T_Set_T_setA__Set_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.SetEquals(setB)</div></div></div><div class="member-title"><a name="except&lt;OrdT, T>"></a>except&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-except_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns this - other.  Only the items in this that are not in  other will be returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">except</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setA, <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-except_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.Except(setB)</div></div></div><div class="member-title"><a name="except&lt;T>"></a>except&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-except_T_Set_T_setA__IEnumerable_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns this - other.  Only the items in this that are not in  other will be returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">except</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setA, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-except_T_Set_T_setA__IEnumerable_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.Except(setB)</div></div></div><div class="member-title"><a name="exists&lt;OrdT, T>"></a>exists&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_OrdT_T_Set_OrdT_T_set__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Check the existence of an item in the set using a  predicate. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div><div class="section_title">REMARKS</div><span >Note this scans the entire set.</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if predicate returns true for any item</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-exists_OrdT_T_Set_OrdT_T_set__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            set.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;T>"></a>exists&lt;T&gt;(Set&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_T_Set_T_set__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Check the existence of an item in the set using a  predicate. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div><div class="section_title">REMARKS</div><span >Note this scans the entire set.</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; set, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if predicate returns true for any item</span></div></div></div><div style="display:none" id="code-exists_T_Set_T_set__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            set.Exists(pred)</div></div></div><div class="member-title"><a name="filter&lt;OrdT, T>"></a>filter&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_OrdT_T_Set_OrdT_T_set__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filters items from the set using the predicate.  If the predicate returns True for any item then it remains in the set, otherwise it&#39;s dropped. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >Filtered enumerable</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-filter_OrdT_T_Set_OrdT_T_set__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            set.Filter(pred)</div></div></div><div class="member-title"><a name="filter&lt;T>"></a>filter&lt;T&gt;(Set&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_T_Set_T_set__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filters items from the set using the predicate.  If the predicate returns True for any item then it remains in the set, otherwise it&#39;s dropped. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; set, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Filtered enumerable</span></div></div></div><div style="display:none" id="code-filter_T_Set_T_set__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            set.Filter(pred)</div></div></div><div class="member-title"><a name="find&lt;OrdT, T>"></a>find&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-find_OrdT_T_Set_OrdT_T_set__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Attempts to find an item in the set.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to find</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">find</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set, <span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Some(T) if found, None otherwise</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-find_OrdT_T_Set_OrdT_T_set__T__value_"><div class="section_title">SOURCE</div><div class="code">
            set.Find(value)</div></div></div><div class="member-title"><a name="find&lt;T>"></a>find&lt;T&gt;(Set&lt;T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-find_T_Set_T_set__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Attempts to find an item in the set.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to find</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">find</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; set, <span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Some(T) if found, None otherwise</span></div></div></div><div style="display:none" id="code-find_T_Set_T_set__T__value_"><div class="section_title">SOURCE</div><div class="code">
            set.Find(value)</div></div></div><div class="member-title"><a name="fold&lt;OrdT, T, S>"></a>fold&lt;OrdT, T, S&gt;(Set&lt;OrdT, T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_OrdT_T_S_Set_OrdT_T_set__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection, threading an accumulator  argument through the computation. The fold function takes the state argument, and  applies the function &#39;folder&#39; to it and the first element of the set. Then, it feeds this  result into the function &#39;folder&#39; along with the second element, and so on. It returns the  final result. (Aggregate in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-fold_OrdT_T_S_Set_OrdT_T_set__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            set.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;T, S>"></a>fold&lt;T, S&gt;(Set&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_T_S_Set_T_set__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection, threading an accumulator  argument through the computation. The fold function takes the state argument, and  applies the function &#39;folder&#39; to it and the first element of the set. Then, it feeds this  result into the function &#39;folder&#39; along with the second element, and so on. It returns the  final result. (Aggregate in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">T</span>, <span class="ident">S</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; set, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-fold_T_S_Set_T_set__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            set.Fold(state, folder)</div></div></div><div class="member-title"><a name="foldBack&lt;OrdT, T, S>"></a>foldBack&lt;OrdT, T, S&gt;(Set&lt;OrdT, T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBack_OrdT_T_S_Set_OrdT_T_set__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection (from last element to first),  threading an aggregate state through the computation. The fold function takes the state  argument, and applies the function &#39;folder&#39; to it and the first element of the set. Then,  it feeds this result into the function &#39;folder&#39; along with the second element, and so on. It  returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBack</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-foldBack_OrdT_T_S_Set_OrdT_T_set__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            set.FoldBack(state, folder)</div></div></div><div class="member-title"><a name="foldBack&lt;T, S>"></a>foldBack&lt;T, S&gt;(Set&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBack_T_S_Set_T_set__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection (from last element to first),  threading an aggregate state through the computation. The fold function takes the state  argument, and applies the function &#39;folder&#39; to it and the first element of the set. Then,  it feeds this result into the function &#39;folder&#39; along with the second element, and so on. It  returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBack</span>&lt;<span class="ident">T</span>, <span class="ident">S</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; set, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-foldBack_T_S_Set_T_set__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            set.FoldBack(state, folder)</div></div></div><div class="member-title"><a name="intersect&lt;OrdT, T>"></a>intersect&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-intersect_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the elements that are in both setA and setB </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">intersect</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setA, <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-intersect_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.Intersect(setB)</div></div></div><div class="member-title"><a name="intersect&lt;T>"></a>intersect&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-intersect_T_Set_T_setA__IEnumerable_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the elements that are in both setA and setB </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">intersect</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setA, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-intersect_T_Set_T_setA__IEnumerable_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.Intersect(setB)</div></div></div><div class="member-title"><a name="isEmpty&lt;OrdT, T>"></a>isEmpty&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isEmpty_OrdT_T_Set_OrdT_T_set_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >True if the set has no elements </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isEmpty</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the set has no elements</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-isEmpty_OrdT_T_Set_OrdT_T_set_"><div class="section_title">SOURCE</div><div class="code">
            set.IsEmpty</div></div></div><div class="member-title"><a name="isEmpty&lt;T>"></a>isEmpty&lt;T&gt;(Set&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isEmpty_T_Set_T_set_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >True if the set has no elements </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isEmpty</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; set)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the set has no elements</span></div></div></div><div style="display:none" id="code-isEmpty_T_Set_T_set_"><div class="section_title">SOURCE</div><div class="code">
            set.IsEmpty</div></div></div><div class="member-title"><a name="isProperSubset&lt;OrdT, T>"></a>isProperSubset&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isProperSubset_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if setB is a proper subset of setA </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set A</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set B</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isProperSubset</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setA, <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True is setB is a proper subset of setA</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-isProperSubset_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.IsProperSubsetOf(setB)</div></div></div><div class="member-title"><a name="isProperSubset&lt;T>"></a>isProperSubset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isProperSubset_T_Set_T_setA__IEnumerable_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if setB is a proper subset of setA </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set A</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set B</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isProperSubset</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setA, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True is setB is a proper subset of setA</span></div></div></div><div style="display:none" id="code-isProperSubset_T_Set_T_setA__IEnumerable_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.IsProperSubsetOf(setB)</div></div></div><div class="member-title"><a name="isProperSuperset&lt;OrdT, T>"></a>isProperSuperset&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isProperSuperset_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if setB is a proper superset of setA </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set A</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set B</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isProperSuperset</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setA, <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True is setB is a proper subset of setA</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-isProperSuperset_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.IsProperSupersetOf(setB)</div></div></div><div class="member-title"><a name="isProperSuperset&lt;T>"></a>isProperSuperset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isProperSuperset_T_Set_T_setA__IEnumerable_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if setB is a proper superset of setA </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set A</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set B</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isProperSuperset</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setA, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True is setB is a proper subset of setA</span></div></div></div><div style="display:none" id="code-isProperSuperset_T_Set_T_setA__IEnumerable_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.IsProperSupersetOf(setB)</div></div></div><div class="member-title"><a name="isSubset&lt;OrdT, T>"></a>isSubset&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isSubset_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if setB is a subset of setA </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set A</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set B</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isSubset</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setA, <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True is setB is a subset of setA</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-isSubset_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.IsSubsetOf(setB)</div></div></div><div class="member-title"><a name="isSubset&lt;T>"></a>isSubset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isSubset_T_Set_T_setA__IEnumerable_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if setB is a subset of setA </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set A</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set B</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isSubset</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setA, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True is setB is a subset of setA</span></div></div></div><div style="display:none" id="code-isSubset_T_Set_T_setA__IEnumerable_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.IsSubsetOf(setB)</div></div></div><div class="member-title"><a name="isSuperset&lt;OrdT, T>"></a>isSuperset&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isSuperset_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if setB is a superset of setA </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set A</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set B</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isSuperset</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setA, <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True is setB is a superset of setA</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-isSuperset_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.IsSupersetOf(setB)</div></div></div><div class="member-title"><a name="isSuperset&lt;T>"></a>isSuperset&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isSuperset_T_Set_T_setA__IEnumerable_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if setB is a superset of setA </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set A</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set B</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isSuperset</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setA, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True is setB is a superset of setA</span></div></div></div><div style="display:none" id="code-isSuperset_T_Set_T_setA__IEnumerable_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.IsSupersetOf(setB)</div></div></div><div class="member-title"><a name="length&lt;OrdT, T>"></a>length&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-length_OrdT_T_Set_OrdT_T_set_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the number of elements in the set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">length</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of elements</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-length_OrdT_T_Set_OrdT_T_set_"><div class="section_title">SOURCE</div><div class="code">
            set.Count()</div></div></div><div class="member-title"><a name="length&lt;T>"></a>length&lt;T&gt;(Set&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-length_T_Set_T_set_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the number of elements in the set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">length</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; set)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of elements</span></div></div></div><div style="display:none" id="code-length_T_Set_T_set_"><div class="section_title">SOURCE</div><div class="code">
            set.Count()</div></div></div><div class="member-title"><a name="map&lt;OrdT, OrdR, T, R>"></a>map&lt;OrdT, OrdR, T, R&gt;(Set&lt;OrdT, T&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_OrdT_OrdR_T_R_Set_OrdT_T_set__Func_T_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the values of this set into a new set of values using the mapper function to tranform the source values. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Mapping function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdR</span>, <span class="ident">R</span>&gt; <span class="ident">map</span>&lt;<span class="ident">OrdT</span>, <span class="ident">OrdR</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdR</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped enumerable</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdR</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-map_OrdT_OrdR_T_R_Set_OrdT_T_set__Func_T_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
                set.Map&lt;OrdR, R&gt;(mapper)</div></div></div><div class="member-title"><a name="map&lt;OrdT, T>"></a>map&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Func&lt;T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_OrdT_T_Set_OrdT_T_set__Func_T_T_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the values of this set into a new set of values using the mapper function to tranform the source values. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Mapping function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">map</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >Mapped enumerable</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-map_OrdT_T_Set_OrdT_T_set__Func_T_T_mapper_"><div class="section_title">SOURCE</div><div class="code">
            set.Map(mapper)</div></div></div><div class="member-title"><a name="map&lt;T, R>"></a>map&lt;T, R&gt;(Set&lt;T&gt;, Func&lt;T, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_T_R_Set_T_set__Func_T_R_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the values of this set into a new set of values using the mapper function to tranform the source values. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Mapping function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">R</span>&gt; <span class="ident">map</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; set, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >Mapped enumerable</span></div></div></div><div style="display:none" id="code-map_T_R_Set_T_set__Func_T_R_mapper_"><div class="section_title">SOURCE</div><div class="code">
            set.Map(mapper)</div></div></div><div class="member-title"><a name="overlaps&lt;OrdT, T>"></a>overlaps&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-overlaps_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if setA overlaps setB </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set A</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set B</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">overlaps</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setA, <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if setA overlaps setB</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-overlaps_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.Overlaps(setB)</div></div></div><div class="member-title"><a name="overlaps&lt;T>"></a>overlaps&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-overlaps_T_Set_T_setA__IEnumerable_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if setA overlaps setB </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set A</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set B</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">overlaps</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setA, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if setA overlaps setB</span></div></div></div><div style="display:none" id="code-overlaps_T_Set_T_setA__IEnumerable_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.Overlaps(setB)</div></div></div><div class="member-title"><a name="remove&lt;OrdT, T>"></a>remove&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-remove_OrdT_T_Set_OrdT_T_set__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Removes an item from the set (if it exists) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to check</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">remove</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set, <span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >New set with item removed</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-remove_OrdT_T_Set_OrdT_T_set__T__value_"><div class="section_title">SOURCE</div><div class="code">
            set.Remove(value)</div></div></div><div class="member-title"><a name="remove&lt;T>"></a>remove&lt;T&gt;(Set&lt;T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-remove_T_Set_T_set__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Removes an item from the set (if it exists) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to check</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">remove</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; set, <span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >New set with item removed</span></div></div></div><div style="display:none" id="code-remove_T_Set_T_set__T__value_"><div class="section_title">SOURCE</div><div class="code">
            set.Remove(value)</div></div></div><div class="member-title"><a name="subtract&lt;OrdT, T>"></a>subtract&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns setA - setB.  Only the items in setA that are not in  setB will be returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">subtract</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setA, <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-subtract_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.Except(setB)</div></div></div><div class="member-title"><a name="subtract&lt;T>"></a>subtract&lt;T&gt;(Set&lt;T&gt;, Set&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_T_Set_T_setA__Set_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns setA - setB.  Only the items in setA that are not in  setB will be returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">subtract</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setA, <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-subtract_T_Set_T_setA__Set_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.Except(setB)</div></div></div><div class="member-title"><a name="symmetricExcept&lt;OrdT, T>"></a>symmetricExcept&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-symmetricExcept_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Only items that are in one set or the other will be returned. If an item is in both, it is dropped. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">symmetricExcept</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setA, <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-symmetricExcept_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.SymmetricExcept(setB)</div></div></div><div class="member-title"><a name="symmetricExcept&lt;T>"></a>symmetricExcept&lt;T&gt;(Set&lt;T&gt;, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-symmetricExcept_T_Set_T_setA__IEnumerable_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Only items that are in one set or the other will be returned. If an item is in both, it is dropped. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">symmetricExcept</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setA, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-symmetricExcept_T_Set_T_setA__IEnumerable_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.SymmetricExcept(setB)</div></div></div><div class="member-title"><a name="tryAdd&lt;OrdT, T>"></a>tryAdd&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryAdd_OrdT_T_Set_OrdT_T_set__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Attempt to add an item to the set.  If an item already exists then return the Set as-is. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set to add item to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to add to the set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">tryAdd</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set, <span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >New set with the item maybe added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-tryAdd_OrdT_T_Set_OrdT_T_set__T__value_"><div class="section_title">SOURCE</div><div class="code">
            set.TryAdd(value)</div></div></div><div class="member-title"><a name="tryAdd&lt;T>"></a>tryAdd&lt;T&gt;(Set&lt;T&gt;, T)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryAdd_T_Set_T_set__T__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Attempt to add an item to the set.  If an item already exists then return the Set as-is. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set to add item to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">T</span></div></div><div class="arg-desc"><span >Value to add to the set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">tryAdd</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; set, <span class="ident">T</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >New set with the item maybe added</span></div></div></div><div style="display:none" id="code-tryAdd_T_Set_T_set__T__value_"><div class="section_title">SOURCE</div><div class="code">
            set.TryAdd(value)</div></div></div><div class="member-title"><a name="tryAddRange&lt;A>"></a>tryAddRange&lt;A&gt;(Set&lt;A&gt;, IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryAddRange_A_Set_A_set__IEnumerable_A_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the set.  If an item already exists, it&#39;s ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Range of keys to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">tryAddRange</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; set, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >New Set with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException if any of the keys are null</span></div></div></div><div style="display:none" id="code-tryAddRange_A_Set_A_set__IEnumerable_A_range_"><div class="section_title">SOURCE</div><div class="code">
            set.TryAddRange(range)</div></div></div><div class="member-title"><a name="tryAddRange&lt;OrdT, T>"></a>tryAddRange&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, IEnumerable&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryAddRange_OrdT_T_Set_OrdT_T_set__IEnumerable_T_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the set.  If an item already exists, it&#39;s ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">set</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Range of keys to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">tryAddRange</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; set, <span class="ident">IEnumerable</span>&lt;<span class="ident">T</span>&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >New Set with the items added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException if any of the keys are null</span></div></div></div><div style="display:none" id="code-tryAddRange_OrdT_T_Set_OrdT_T_set__IEnumerable_T_range_"><div class="section_title">SOURCE</div><div class="code">
            set.TryAddRange(range)</div></div></div><div class="member-title"><a name="union&lt;OrdT, T>"></a>union&lt;OrdT, T&gt;(Set&lt;OrdT, T&gt;, Set&lt;OrdT, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-union_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the union of two sets and produces a new set with  the results </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set A</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set A</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; <span class="ident">union</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setA, <span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">OrdT</span>, <span class="ident">T</span>&gt;</div><div class="normal"><span >A set which contains all items from both sets</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdT</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-union_OrdT_T_Set_OrdT_T_setA__Set_OrdT_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.Union(setB)</div></div></div><div class="member-title"><a name="union&lt;T>"></a>union&lt;T&gt;(Set&lt;T&gt;, Set&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-union_T_Set_T_setA__Set_T_setB_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the union of two sets and produces a new set with  the results </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">setA</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set A</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">setB</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Set A</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; <span class="ident">union</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setA, <span class="ident">Set</span>&lt;<span class="ident">T</span>&gt; setB)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A set which contains all items from both sets</span></div></div></div><div style="display:none" id="code-union_T_Set_T_setA__Set_T_setB_"><div class="section_title">SOURCE</div><div class="code">
            setA.Union(setB)</div></div></div></div></body></html>