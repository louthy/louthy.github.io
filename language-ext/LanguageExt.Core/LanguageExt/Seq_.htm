<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Seq_.htm">Seq</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#action&lt;A, B>">action&lt;A, B&gt;(Seq&lt;A&gt;, Seq&lt;B&gt;)</a><a class="nav-link" href="#append&lt;T>">append&lt;T&gt;(Seq&lt;T&gt;, Seq&lt;T&gt;)</a><a class="nav-link" href="#append&lt;T>">append&lt;T&gt;(Seq&lt;T&gt;, Seq&lt;Seq&lt;T&gt;&gt;)</a><a class="nav-link" href="#append&lt;T>">append&lt;T&gt;(Seq&lt;T&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, B, C&gt;&gt;, Seq&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Seq&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, B, C&gt;&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Seq&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Seq&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B, C>">apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)</a><a class="nav-link" href="#apply&lt;A, B>">apply&lt;A, B&gt;(Seq&lt;Func&lt;A, B&gt;&gt;, Seq&lt;A&gt;)</a><a class="nav-link" href="#apply&lt;A, B>">apply&lt;A, B&gt;(Func&lt;A, B&gt;, Seq&lt;A&gt;)</a><a class="nav-link" href="#choose&lt;A, B>">choose&lt;A, B&gt;(Seq&lt;A&gt;, Func&lt;A, Option&lt;B&gt;&gt;)</a><a class="nav-link" href="#choose&lt;A, B>">choose&lt;A, B&gt;(Seq&lt;A&gt;, Func&lt;int, A, Option&lt;B&gt;&gt;)</a><a class="nav-link" href="#create&lt;A>">create&lt;A&gt;()</a><a class="nav-link" href="#create&lt;A>">create&lt;A&gt;(A)</a><a class="nav-link" href="#createRange&lt;A>">createRange&lt;A&gt;(IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#distinct&lt;EQ, T>">distinct&lt;EQ, T&gt;(Seq&lt;T&gt;)</a><a class="nav-link" href="#distinct&lt;T, K>">distinct&lt;T, K&gt;(Seq&lt;T&gt;, Func&lt;T, K&gt;, Option&lt;Func&lt;K, K, bool&gt;&gt;)</a><a class="nav-link" href="#distinct&lt;T>">distinct&lt;T&gt;(Seq&lt;T&gt;)</a><a class="nav-link" href="#empty&lt;A>">empty&lt;A&gt;()</a><a class="nav-link" href="#exists&lt;T>">exists&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#filter&lt;A>">filter&lt;A&gt;(Seq&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#find&lt;T>">find&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#findSeq&lt;T>">findSeq&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#fold&lt;S, T>">fold&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#foldBack&lt;S, T>">foldBack&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#foldBackUntil&lt;S, T>">foldBackUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#foldBackUntil&lt;S, T>">foldBackUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</a><a class="nav-link" href="#foldBackWhile&lt;S, T>">foldBackWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#foldBackWhile&lt;S, T>">foldBackWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</a><a class="nav-link" href="#foldUntil&lt;S, T>">foldUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#foldUntil&lt;S, T>">foldUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</a><a class="nav-link" href="#foldWhile&lt;S, T>">foldWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#foldWhile&lt;S, T>">foldWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</a><a class="nav-link" href="#forall&lt;T>">forall&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#head&lt;A>">head&lt;A&gt;(Seq&lt;A&gt;)</a><a class="nav-link" href="#headOrNone&lt;A>">headOrNone&lt;A&gt;(Seq&lt;A&gt;)</a><a class="nav-link" href="#init&lt;A>">init&lt;A&gt;(int, Func&lt;int, A&gt;)</a><a class="nav-link" href="#iter&lt;T>">iter&lt;T&gt;(Seq&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#iter&lt;T>">iter&lt;T&gt;(Seq&lt;T&gt;, Action&lt;int, T&gt;)</a><a class="nav-link" href="#length&lt;T>">length&lt;T&gt;(Seq&lt;T&gt;)</a><a class="nav-link" href="#map&lt;A, B>">map&lt;A, B&gt;(Seq&lt;A&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#map&lt;A, B>">map&lt;A, B&gt;(Seq&lt;A&gt;, Func&lt;int, A, B&gt;)</a><a class="nav-link" href="#reduce&lt;T>">reduce&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, T, T&gt;)</a><a class="nav-link" href="#reduceBack&lt;T>">reduceBack&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, T, T&gt;)</a><a class="nav-link" href="#repeat&lt;A>">repeat&lt;A&gt;(A, int)</a><a class="nav-link" href="#rev&lt;T>">rev&lt;T&gt;(Seq&lt;T&gt;)</a><a class="nav-link" href="#scan&lt;S, T>">scan&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#scanBack&lt;S, T>">scanBack&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#span&lt;T>">span&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#sum">sum(Seq&lt;int&gt;)</a><a class="nav-link" href="#sum">sum(Seq&lt;float&gt;)</a><a class="nav-link" href="#sum">sum(Seq&lt;double&gt;)</a><a class="nav-link" href="#sum">sum(Seq&lt;decimal&gt;)</a><a class="nav-link" href="#tail&lt;A>">tail&lt;A&gt;(Seq&lt;A&gt;)</a><a class="nav-link" href="#tails&lt;A>">tails&lt;A&gt;(Seq&lt;A&gt;)</a><a class="nav-link" href="#tailsr&lt;A>">tailsr&lt;A&gt;(Seq&lt;A&gt;)</a><a class="nav-link" href="#take&lt;T>">take&lt;T&gt;(Seq&lt;T&gt;, int)</a><a class="nav-link" href="#takeWhile&lt;T>">takeWhile&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#takeWhile&lt;T>">takeWhile&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, int, bool&gt;)</a><a class="nav-link" href="#zip&lt;T, U, V>">zip&lt;T, U, V&gt;(Seq&lt;T&gt;, Seq&lt;U&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#zip&lt;T, U>">zip&lt;T, U&gt;(Seq&lt;T&gt;, Seq&lt;U&gt;)</a></div><div class="content-panel"><h1 >Seq Class</h1><p ><span >Cons sequence module Represents a sequence of values in a similar way to IEnumerable, but without the issues of multiple evaluation for key LINQ operators like Skip, Count, etc. </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">Seq</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="action&lt;A, B>"></a>action&lt;A, B&gt;(Seq&lt;A&gt;, Seq&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-action_A_B_Seq_A_fa__Seq_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Evaluate fa, then fb, ignoring the result of fa </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate first</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate second and then return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; <span class="ident">action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-action_A_B_Seq_A_fa__Seq_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplSeq&lt;A, B&gt;.Inst.Action(fa, fb)</div></div></div><div class="member-title"><a name="append&lt;T>"></a>append&lt;T&gt;(Seq&lt;T&gt;, Seq&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_T_Seq_T_lhs__Seq_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Concatenate two sequences (Concat in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >First sequence</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Second sequence</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">append</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Concatenated sequence</span></div></div></div><div style="display:none" id="code-append_T_Seq_T_lhs__Seq_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
            Seq(lhs.Concat(rhs))</div></div></div><div class="member-title"><a name="append&lt;T>"></a>append&lt;T&gt;(Seq&lt;T&gt;, Seq&lt;Seq&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_T_Seq_T_x__Seq_Seq&lt;T>_xs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Concatenate a sequence and a sequence of sequences </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">xs</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">append</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; x, <span class="ident">Seq</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; xs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Concatenated list</span></div></div></div><div style="display:none" id="code-append_T_Seq_T_x__Seq_Seq&lt;T>_xs_"><div class="section_title">SOURCE</div><div class="code">
            headOrNone(xs).IsNone
                ? x
                : append(x, append(xs.First(), xs.Skip(1)))</div></div></div><div class="member-title"><a name="append&lt;T>"></a>append&lt;T&gt;(Seq&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_T_Seq_T_lists_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Concatenate N sequences </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lists</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequences to concatenate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">append</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; lists)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A single sequence with all of the items concatenated</span></div></div></div><div style="display:none" id="code-append_T_Seq_T_lists_"><div class="section_title">SOURCE</div><div class="code">
            lists.Length == 0
                ? Seq&lt;T&gt;.Empty
                : lists.Length == 1
                    ? lists[0]
                    : append(lists[0], Seq(lists).Skip(1))</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, B, C&gt;&gt;, Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Seq_Func&lt;A, B, C>_fabc__Seq_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a sequence of values to a sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Returns the result of applying the sequence of argument values to the  IEnumerable of functions: a sequence of functions of arity 1</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Seq_Func&lt;A, B, C>_fabc__Seq_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplSeq&lt;A, B, C&gt;.Inst.Apply(fabc.Map(curry), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_B_C_fabc__Seq_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a sequence of values to a sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Returns the result of applying the sequence of argument values to the  sequence of functions: a sequence of functions of arity 1</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_B_C_fabc__Seq_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplSeq&lt;A, B, C&gt;.Inst.Apply(curry(fabc).Cons(), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, B, C&gt;&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Seq_Func&lt;A, B, C>_fabc__Seq_A_fa__Seq_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply sequence of values to a sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Returns the result of applying the sequence of arguments to the sequence of functions</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Seq_Func&lt;A, B, C>_fabc__Seq_A_fa__Seq_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplSeq&lt;A, B, C&gt;.Inst.Apply(fabc.Map(curry), fa, fb)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_B_C_fabc__Seq_A_fa__Seq_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply sequence of values to an sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Returns the result of applying the sequence of arguments to the sequence of functions</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_B_C_fabc__Seq_A_fa__Seq_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplSeq&lt;A, B, C&gt;.Inst.Apply(curry(fabc).Cons(), fa, fb)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Seq_Func&lt;A, Func&lt;B, C>>_fabc__Seq_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a sequence of values to a sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Returns the result of applying the sequence of argument values to the  sequence of functions: a sequence of functions of arity 1</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Seq_Func&lt;A, Func&lt;B, C>>_fabc__Seq_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplSeq&lt;A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__Seq_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply an sequence of values to an sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Returns the result of applying the sequence of argument values to the  sequence of functions: a sequence of functions of arity 1</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__Seq_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplSeq&lt;A, B, C&gt;.Inst.Apply(fabc.Cons(), fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Seq_Func&lt;A, Func&lt;B, C>>_fabc__Seq_A_fa__Seq_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply sequence of values to an sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Returns the result of applying the sequence of arguments to the sequence of functions</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Seq_Func&lt;A, Func&lt;B, C>>_fabc__Seq_A_fa__Seq_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplSeq&lt;A, B, C&gt;.Inst.Apply(fabc, fa, fb)</div></div></div><div class="member-title"><a name="apply&lt;A, B, C>"></a>apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__Seq_A_fa__Seq_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply sequence of values to a sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Returns the result of applying the sequence of arguments to the sequence of functions</span></div></div></div><div style="display:none" id="code-apply_A_B_C_Func_A_Func&lt;B, C>_fabc__Seq_A_fa__Seq_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            ApplSeq&lt;A, B, C&gt;.Inst.Apply(fabc.Cons(), fa, fb)</div></div></div><div class="member-title"><a name="apply&lt;A, B>"></a>apply&lt;A, B&gt;(Seq&lt;Func&lt;A, B&gt;&gt;, Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_Seq_Func&lt;A, B>_fabc__Seq_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a sequence of values to a sequence of functions </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence of argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Returns the result of applying the sequence argument values to the sequence functions</span></div></div></div><div style="display:none" id="code-apply_A_B_Seq_Func&lt;A, B>_fabc__Seq_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplSeq&lt;A, B&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="apply&lt;A, B>"></a>apply&lt;A, B&gt;(Func&lt;A, B&gt;, Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-apply_A_B_Func_A_B_fabc__Seq_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a sequence of values to a sequence of functions </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence of argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; <span class="ident">apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Returns the result of applying the sequence argument values to the sequence functions</span></div></div></div><div style="display:none" id="code-apply_A_B_Func_A_B_fabc__Seq_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            ApplSeq&lt;A, B&gt;.Inst.Apply(fabc.Cons(), fa)</div></div></div><div class="member-title"><a name="choose&lt;A, B>"></a>choose&lt;A, B&gt;(Seq&lt;A&gt;, Func&lt;A, Option&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choose_A_B_Seq_A_list__Func_A_Option&lt;B>_selector_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies the given function &#39;selector&#39; to each element of the sequence. Returns the sequence  comprised of the results for each element where the function returns Some(f(x)). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Selector function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; <span class="ident">choose</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;&gt; selector)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped and filtered sequence</span></div></div></div><div style="display:none" id="code-choose_A_B_Seq_A_list__Func_A_Option&lt;B>_selector_"><div class="section_title">SOURCE</div><div class="code">
            map(filter(map(list, selector), t =&gt; t.IsSome), t =&gt; t.Value)</div></div></div><div class="member-title"><a name="choose&lt;A, B>"></a>choose&lt;A, B&gt;(Seq&lt;A&gt;, Func&lt;int, A, Option&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choose_A_B_Seq_A_list__Func_int_A_Option&lt;B>_selector_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies the given function &#39;selector&#39; to each element of the sequence. Returns the  sequence comprised of the results for each element where the function returns Some(f(x)). An index value is passed through to the selector function also. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">A</span>, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Selector function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; <span class="ident">choose</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; list, <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">A</span>, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;&gt; selector)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped and filtered sequence</span></div></div></div><div style="display:none" id="code-choose_A_B_Seq_A_list__Func_int_A_Option&lt;B>_selector_"><div class="section_title">SOURCE</div><div class="code">
            map(filter(map(list, selector), t =&gt; t.IsSome), t =&gt; t.Value)</div></div></div><div class="member-title"><a name="create&lt;A>"></a>create&lt;A&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-create_A_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a new empty sequence </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; <span class="ident">create</span>&lt;<span class="ident">A</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >sequence</span></div></div></div><div style="display:none" id="code-create_A_"><div class="section_title">SOURCE</div><div class="code">
            Seq&lt;A&gt;.Empty</div></div></div><div class="member-title"><a name="create&lt;A>"></a>create&lt;A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-create_A_A__items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a sequence from a initial set of items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc"><span >Items</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; <span class="ident">create</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">A</span> items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >sequence</span></div></div></div><div style="display:none" id="code-create_A_A__items_"><div class="section_title">SOURCE</div><div class="code">
            SeqArray&lt;A&gt;.New(items)</div></div></div><div class="member-title"><a name="createRange&lt;A>"></a>createRange&lt;A&gt;(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-createRange_A_IEnumerable_A_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create a sequence from an initial set of items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Items</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; <span class="ident">createRange</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >sequence</span></div></div></div><div style="display:none" id="code-createRange_A_IEnumerable_A_items_"><div class="section_title">SOURCE</div><div class="code">
            SeqEnumerable&lt;A&gt;.New(items)</div></div></div><div class="member-title"><a name="distinct&lt;EQ, T>"></a>distinct&lt;EQ, T&gt;(Seq&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-distinct_EQ_T_Seq_T_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return a new sequence with all duplicate values removed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">distinct</span>&lt;<span class="ident">EQ</span>, <span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A new sequence with all duplicate values removed</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-distinct_EQ_T_Seq_T_list_"><div class="section_title">SOURCE</div><div class="code">
            Seq(list.Distinct(new EqCompare&lt;T&gt;((x, y) =&gt; default(EQ).Equals(x, y))))</div></div></div><div class="member-title"><a name="distinct&lt;T, K>"></a>distinct&lt;T, K&gt;(Seq&lt;T&gt;, Func&lt;T, K&gt;, Option&lt;Func&lt;K, K, bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-distinct_T_K_Seq_T_list__Func_T_K_keySelector__Option_Func&lt;K, K, bool>_compare_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return a new sequence with all duplicate values removed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keySelector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">K</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">compare</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">K</span>, <span class="keyword">bool</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">distinct</span>&lt;<span class="ident">T</span>, <span class="ident">K</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">K</span>&gt; keySelector, <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">K</span>, <span class="keyword">bool</span>&gt;&gt; compare = <span class="keyword">default</span><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">K</span>, <span class="keyword">bool</span>&gt;&gt;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A new sequence with all duplicate values removed</span></div></div></div><div style="display:none" id="code-distinct_T_K_Seq_T_list__Func_T_K_keySelector__Option_Func&lt;K, K, bool>_compare_"><div class="section_title">SOURCE</div><div class="code">
             Seq(list.Distinct(new EqCompare&lt;T&gt;((a, b) =&gt; compare.IfNone(EqualityComparer&lt;K&gt;.Default.Equals)(keySelector(a), keySelector(b)), a =&gt; keySelector(a)?.GetHashCode() ?? 0)))</div></div></div><div class="member-title"><a name="distinct&lt;T>"></a>distinct&lt;T&gt;(Seq&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-distinct_T_Seq_T_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return a new sequence with all duplicate values removed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">distinct</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A new sequence with all duplicate values removed</span></div></div></div><div style="display:none" id="code-distinct_T_Seq_T_list_"><div class="section_title">SOURCE</div><div class="code">
            Seq(list.Distinct())</div></div></div><div class="member-title"><a name="empty&lt;A>"></a>empty&lt;A&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-empty_A_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an empty sequence </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; <span class="ident">empty</span>&lt;<span class="ident">A</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-empty_A_"><div class="section_title">SOURCE</div><div class="code">
            Seq&lt;A&gt;.Empty</div></div></div><div class="member-title"><a name="exists&lt;T>"></a>exists&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_T_Seq_T_list__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any item in the sequence matches the predicate provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to test</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any item in the sequence matches the predicate provided</span></div></div></div><div style="display:none" id="code-exists_T_Seq_T_list__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            list.Exists(pred)</div></div></div><div class="member-title"><a name="filter&lt;A>"></a>filter&lt;A&gt;(Seq&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_A_Seq_A_list__Func_A_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Removes items from the sequence that do not match the given predicate (Where in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence to filter</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Filtered sequence</span></div></div></div><div style="display:none" id="code-filter_A_Seq_A_list__Func_A_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            list.Where(predicate)</div></div></div><div class="member-title"><a name="find&lt;T>"></a>find&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-find_T_Seq_T_list__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns Some(x) for the first item in the sequence that matches the predicate  provided, None otherwise. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to search</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">find</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Some(x) for the first item in the sequence that matches the predicate  provided, None otherwise.</span></div></div></div><div style="display:none" id="code-find_T_Seq_T_list__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in list)
            {
                if (pred(item)) return Some(item);
            }
            return None;
        </div></div></div><div class="member-title"><a name="findSeq&lt;T>"></a>findSeq&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-findSeq_T_Seq_T_list__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns [x] for the first item in the sequence that matches the predicate  provided, [] otherwise. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to search</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">findSeq</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >[x] for the first item in the sequence that matches the predicate  provided, [] otherwise.</span></div></div></div><div style="display:none" id="code-findSeq_T_Seq_T_list__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            IEnumerable&lt;T&gt; Yield()
            {
                foreach (var item in list)
                {
                    if (pred(item))
                    {
                        yield return item;
                        break;
                    }
                }
            }
            return Seq(Yield());
        </div></div></div><div class="member-title"><a name="fold&lt;S, T>"></a>fold&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_S_T_Seq_T_list__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence, threading an accumulator  argument through the computation. The fold function takes the state argument, and  applies the function &#39;folder&#39; to it and the first element of the sequence. Then, it feeds this  result into the function &#39;folder&#39; along with the second element, and so on. It returns the  final result. (Aggregate in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-fold_S_T_Seq_T_list__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            list.Fold(state, folder)</div></div></div><div class="member-title"><a name="foldBack&lt;S, T>"></a>foldBack&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBack_S_T_Seq_T_list__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence (from last element to first),  threading an aggregate state through the computation. The fold function takes the state  argument, and applies the function &#39;folder&#39; to it and the first element of the sequence. Then,  it feeds this result into the function &#39;folder&#39; along with the second element, and so on. It  returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBack</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-foldBack_S_T_Seq_T_list__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            list.FoldBack(state, folder)</div></div></div><div class="member-title"><a name="foldBackUntil&lt;S, T>"></a>foldBackUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence (from last element to first) whilst the predicate function returns False for the item being processed, threading an  aggregate state through the computation. The fold function takes the state argument, and  applies the function &#39;folder&#39; to it and the first element of the sequence. Then, it feeds this  result into the function &#39;folder&#39; along with the second element, and so on. It returns the  final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackUntil</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-foldBackUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            foldWhile(rev(list), state, folder, pred)</div></div></div><div class="member-title"><a name="foldBackUntil&lt;S, T>"></a>foldBackUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence (from last element to first),  threading an accumulator argument through the computation (and whilst the predicate function  returns False when passed the aggregate state). The fold function takes the state argument,  and applies the function &#39;folder&#39; to it and the first element of the sequence. Then, it feeds  this result into the function &#39;folder&#39; along with the second element, and so on. It returns  the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackUntil</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-foldBackUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            foldWhile(rev(list), state, folder, pred)</div></div></div><div class="member-title"><a name="foldBackWhile&lt;S, T>"></a>foldBackWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence (from last element to first) whilst the predicate function returns True for the item being processed, threading an  aggregate state through the computation. The fold function takes the state argument, and  applies the function &#39;folder&#39; to it and the first element of the sequence. Then, it feeds this  result into the function &#39;folder&#39; along with the second element, and so on. It returns the  final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-foldBackWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            foldWhile(rev(list), state, folder, pred)</div></div></div><div class="member-title"><a name="foldBackWhile&lt;S, T>"></a>foldBackWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBackWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence (from last element to first),  threading an accumulator argument through the computation (and whilst the predicate function  returns True when passed the aggregate state). The fold function takes the state argument,  and applies the function &#39;folder&#39; to it and the first element of the sequence. Then, it feeds  this result into the function &#39;folder&#39; along with the second element, and so on. It returns  the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBackWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-foldBackWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            foldWhile(rev(list), state, folder, pred)</div></div></div><div class="member-title"><a name="foldUntil&lt;S, T>"></a>foldUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence whilst the predicate function  returns False for the item being processed, threading an aggregate state through the  computation. The fold function takes the state argument, and applies the function &#39;folder&#39;  to it and the first element of the sequence. Then, it feeds this result into the function &#39;folder&#39;  along with the second element, and so on. It returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldUntil</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-foldUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in list)
            {
                if (pred(item))
                {
                    return state;
                }
                state = folder(state, item);
            }
            return state;
        </div></div></div><div class="member-title"><a name="foldUntil&lt;S, T>"></a>foldUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence, threading an accumulator  argument through the computation (and whilst the predicate function returns False when passed  the aggregate state). The fold function takes the state argument, and applies the function  &#39;folder&#39; to it and the first element of the sequence. Then, it feeds this result into the  function &#39;folder&#39; along with the second element, and so on. It returns the final result.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Enumerable to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldUntil</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-foldUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in list)
            {
                if (pred(state))
                {
                    return state;
                }
                state = folder(state, item);
            }
            return state;
        </div></div></div><div class="member-title"><a name="foldWhile&lt;S, T>"></a>foldWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence whilst the predicate function  returns True for the item being processed, threading an aggregate state through the  computation. The fold function takes the state argument, and applies the function &#39;folder&#39;  to it and the first element of the sequence. Then, it feeds this result into the function &#39;folder&#39;  along with the second element, and so on. It returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-foldWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in list)
            {
                if (!pred(item))
                {
                    return state;
                }
                state = folder(state, item);
            }
            return state;
        </div></div></div><div class="member-title"><a name="foldWhile&lt;S, T>"></a>foldWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence, threading an accumulator  argument through the computation (and whilst the predicate function returns True when passed  the aggregate state). The fold function takes the state argument, and applies the function  &#39;folder&#39; to it and the first element of the sequence. Then, it feeds this result into the  function &#39;folder&#39; along with the second element, and so on. It returns the final result.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-foldWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in list)
            {
                if (!pred(state))
                {
                    return state;
                }
                state = folder(state, item);
            }
            return state;
        </div></div></div><div class="member-title"><a name="forall&lt;T>"></a>forall&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_T_Seq_T_list__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all items in the sequence match a predicate (Any in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to test</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the sequence match the predicate</span></div></div></div><div style="display:none" id="code-forall_T_Seq_T_list__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            list.ForAll(pred)</div></div></div><div class="member-title"><a name="head&lt;A>"></a>head&lt;A&gt;(Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_A_Seq_A_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the item at the head (first) of the sequence </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">head</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Head item</span></div></div></div><div style="display:none" id="code-head_A_Seq_A_list_"><div class="section_title">SOURCE</div><div class="code"> list.Head</div></div></div><div class="member-title"><a name="headOrNone&lt;A>"></a>headOrNone&lt;A&gt;(Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-headOrNone_A_Seq_A_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the item at the head (first) of the sequence or None if the sequence is empty </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; <span class="ident">headOrNone</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Optional head item</span></div></div></div><div style="display:none" id="code-headOrNone_A_Seq_A_list_"><div class="section_title">SOURCE</div><div class="code">
            list.HeadOrNone()</div></div></div><div class="member-title"><a name="init&lt;A>"></a>init&lt;A&gt;(int, Func&lt;int, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-init_A_int__count__Func_int_A_generator_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Generates a sequence of A using the provided delegate to initialise each item. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">count</div><div class="arg-type"><span class="keyword">int</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">generator</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; <span class="ident">init</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">int</span> count, <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">A</span>&gt; generator)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-init_A_int__count__Func_int_A_generator_"><div class="section_title">SOURCE</div><div class="code">
            Seq(from i in Range(0, count)
                select generator(i))</div></div></div><div class="member-title"><a name="iter&lt;T>"></a>iter&lt;T&gt;(Seq&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T_Seq_T_list__Action_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes an action for each item in the sequence in order </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to iterate</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke with each item</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; action)</div></div><div style="display:none" id="code-iter_T_Seq_T_list__Action_T_action_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in list)
            {
                action(item);
            }
            return unit;
        </div></div></div><div class="member-title"><a name="iter&lt;T>"></a>iter&lt;T&gt;(Seq&lt;T&gt;, Action&lt;int, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_T_Seq_T_list__Action_int_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes an action for each item in the sequence in order and supplies a running index value. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to iterate</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke with each item</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Action</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>&gt; action)</div></div><div style="display:none" id="code-iter_T_Seq_T_list__Action_int_T_action_"><div class="section_title">SOURCE</div><div class="code">
            int i = 0;
            foreach (var item in list)
            {
                action(i++, item);
            }
            return unit;
        </div></div></div><div class="member-title"><a name="length&lt;T>"></a>length&lt;T&gt;(Seq&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-length_T_Seq_T_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the number of items in the sequence </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to count</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">length</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >The number of items in the sequence</span></div></div></div><div style="display:none" id="code-length_T_Seq_T_list_"><div class="section_title">SOURCE</div><div class="code">
           list.Count</div></div></div><div class="member-title"><a name="map&lt;A, B>"></a>map&lt;A, B&gt;(Seq&lt;A&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_Seq_A_list__Func_A_B_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projects the values in the sequence using a map function into a new sequence (Select in LINQ). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence to map</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Map function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped sequence</span></div></div></div><div style="display:none" id="code-map_A_B_Seq_A_list__Func_A_B_map_"><div class="section_title">SOURCE</div><div class="code">
            list.Select(map)</div></div></div><div class="member-title"><a name="map&lt;A, B>"></a>map&lt;A, B&gt;(Seq&lt;A&gt;, Func&lt;int, A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_A_B_Seq_A_list__Func_int_A_B_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projects the values in the sequence using a map function into a new sequence (Select in LINQ). An index value is passed through to the map function also. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence to map</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Map function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; <span class="ident">map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; list, <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped sequence</span></div></div></div><div style="display:none" id="code-map_A_B_Seq_A_list__Func_int_A_B_map_"><div class="section_title">SOURCE</div><div class="code">
            Seq(zip(list, Seq(Range(0, Int32.MaxValue)), (t, i) =&gt; map(i, t)))</div></div></div><div class="member-title"><a name="reduce&lt;T>"></a>reduce&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-reduce_T_Seq_T_list__Func_T_T_T_reducer_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function to each element of the sequence (from last element to first), threading  an accumulator argument through the computation. This function first applies the function  to the first two elements of the sequence. Then, it passes this result into the function along  with the third element and so on. Finally, it returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to reduce</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">reducer</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Reduce function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">reduce</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; reducer)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-reduce_T_Seq_T_list__Func_T_T_T_reducer_"><div class="section_title">SOURCE</div><div class="code">
            match(headOrNone(list),
                Some: x =&gt; fold(tail(list), x, reducer),
                None: () =&gt; failwith&lt;T&gt;(&quot;Input list was empty&quot;)
            )</div></div></div><div class="member-title"><a name="reduceBack&lt;T>"></a>reduceBack&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-reduceBack_T_Seq_T_list__Func_T_T_T_reducer_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function to each element of the sequence, threading an accumulator argument  through the computation. This function first applies the function to the first two  elements of the sequence. Then, it passes this result into the function along with the third  element and so on. Finally, it returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to reduce</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">reducer</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Reduce function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">reduceBack</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; reducer)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-reduceBack_T_Seq_T_list__Func_T_T_T_reducer_"><div class="section_title">SOURCE</div><div class="code">
            reduce(rev(list), reducer)</div></div></div><div class="member-title"><a name="repeat&lt;A>"></a>repeat&lt;A&gt;(A, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-repeat_A_A__item__int__count_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Generates a sequence that contains one repeated value. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">item</div><div class="arg-type"><span class="ident">A</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">count</div><div class="arg-type"><span class="keyword">int</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; <span class="ident">repeat</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">A</span> item, <span class="keyword">int</span> count)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-repeat_A_A__item__int__count_"><div class="section_title">SOURCE</div><div class="code">
            Seq(from _ in Range(0, count)
                select item)</div></div></div><div class="member-title"><a name="rev&lt;T>"></a>rev&lt;T&gt;(Seq&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-rev_T_Seq_T_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reverses the sequence (Reverse in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to reverse</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">rev</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Reversed sequence</span></div></div></div><div style="display:none" id="code-rev_T_Seq_T_list_"><div class="section_title">SOURCE</div><div class="code">
            Seq(list.Reverse())</div></div></div><div class="member-title"><a name="scan&lt;S, T>"></a>scan&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-scan_S_T_Seq_T_list__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function to each element of the sequence, threading an accumulator argument  through the computation. This function takes the state argument, and applies the function  to it and the first element of the sequence. Then, it passes this result into the function  along with the second element, and so on. Finally, it returns the list of intermediate  results and the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folding function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">S</span>&gt; <span class="ident">scan</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Aggregate state</span></div></div></div><div style="display:none" id="code-scan_S_T_Seq_T_list__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            IEnumerable&lt;S&gt; Yield()
            {
                yield return state;
                foreach (var item in list)
                {
                    state = folder(state, item);
                    yield return state;
                }
            }
            return Seq(Yield());
        </div></div></div><div class="member-title"><a name="scanBack&lt;S, T>"></a>scanBack&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-scanBack_S_T_Seq_T_list__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function to each element of the sequence (from last element to first),  threading an accumulator argument through the computation. This function takes the state  argument, and applies the function to it and the first element of the sequence. Then, it  passes this result into the function along with the second element, and so on. Finally,  it returns the list of intermediate results and the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Enumerable to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folding function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">S</span>&gt; <span class="ident">scanBack</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Aggregate state</span></div></div></div><div style="display:none" id="code-scanBack_S_T_Seq_T_list__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            scan(rev(list), state, folder)</div></div></div><div class="member-title"><a name="span&lt;T>"></a>span&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-span_T_Seq_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Span, applied to a predicate &#39;pred&#39; and a list, returns a tuple where first element is  longest prefix (possibly empty) of elements that satisfy &#39;pred&#39; and second element is the  remainder of the list: </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >List</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">span</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >Split list</span></div></div></div><div style="display:none" id="code-span_T_Seq_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            int index = 0;
            foreach (var item in self)
            {
                if (!pred(item))
                {
                    break;
                }
                index++;
            }
            return (self.Take(index), self.Skip(index));
        </div></div></div><div class="member-title"><a name="sum"></a>sum(Seq&lt;int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum__Seq_int_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the sum total of all the items in the list (Sum in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="keyword">int</span>&gt;</div></div><div class="arg-desc"><span >List to sum</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">sum</span>(<span class="ident">Seq</span>&lt;<span class="keyword">int</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Sum total</span></div></div></div><div style="display:none" id="code-sum__Seq_int_list_"><div class="section_title">SOURCE</div><div class="code">
            fold(list, 0, (s, x) =&gt; s + x)</div></div></div><div class="member-title"><a name="sum"></a>sum(Seq&lt;float&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum__Seq_float_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the sum total of all the items in the list (Sum in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="keyword">float</span>&gt;</div></div><div class="arg-desc"><span >List to sum</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="ident">sum</span>(<span class="ident">Seq</span>&lt;<span class="keyword">float</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">float</span></div><div class="normal"><span >Sum total</span></div></div></div><div style="display:none" id="code-sum__Seq_float_list_"><div class="section_title">SOURCE</div><div class="code">
            fold(list, 0.0f, (s, x) =&gt; s + x)</div></div></div><div class="member-title"><a name="sum"></a>sum(Seq&lt;double&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum__Seq_double_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the sum total of all the items in the list (Sum in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="keyword">double</span>&gt;</div></div><div class="arg-desc"><span >List to sum</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="ident">sum</span>(<span class="ident">Seq</span>&lt;<span class="keyword">double</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">double</span></div><div class="normal"><span >Sum total</span></div></div></div><div style="display:none" id="code-sum__Seq_double_list_"><div class="section_title">SOURCE</div><div class="code">
            fold(list, 0.0, (s, x) =&gt; s + x)</div></div></div><div class="member-title"><a name="sum"></a>sum(Seq&lt;decimal&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum__Seq_decimal_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the sum total of all the items in the list (Sum in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="keyword">decimal</span>&gt;</div></div><div class="arg-desc"><span >List to sum</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">decimal</span> <span class="ident">sum</span>(<span class="ident">Seq</span>&lt;<span class="keyword">decimal</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">decimal</span></div><div class="normal"><span >Sum total</span></div></div></div><div style="display:none" id="code-sum__Seq_decimal_list_"><div class="section_title">SOURCE</div><div class="code">
            fold(list, (decimal)0, (s, x) =&gt; s + x)</div></div></div><div class="member-title"><a name="tail&lt;A>"></a>tail&lt;A&gt;(Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tail_A_Seq_A_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the tail of the sequence (skips the head item) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; <span class="ident">tail</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Tail sequence</span></div></div></div><div style="display:none" id="code-tail_A_Seq_A_list_"><div class="section_title">SOURCE</div><div class="code">
            list.Tail</div></div></div><div class="member-title"><a name="tails&lt;A>"></a>tails&lt;A&gt;(Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tails_A_Seq_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The tails function returns all final segments of the argument, longest first. For example:<br/><br/><div class='code-line'>     tails([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]) == [[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;], [&#39;b&#39;,&#39;c&#39;], [&#39;c&#39;],[]]</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Seq</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">tails</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Seq of Seq of A</span></div></div></div><div style="display:none" id="code-tails_A_Seq_A_self_"><div class="section_title">SOURCE</div><div class="code">
            var res = Seq&lt;Seq&lt;A&gt;&gt;.Empty;
            while (!self.IsEmpty)
            {
                res = self.Cons(res);
                self = self.Tail;
            }
            return rev(res);
        </div></div></div><div class="member-title"><a name="tailsr&lt;A>"></a>tailsr&lt;A&gt;(Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tailsr_A_Seq_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The tailsr function returns all final segments of the argument, longest first. For example:<br/><br/><div class='code-line'>     tails([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]) == [[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;], [&#39;b&#39;,&#39;c&#39;], [&#39;c&#39;],[]]</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Seq</span></div></div><div class="section_title">REMARKS</div><span >Differs from <span class='code-inline'>tails</span> in implementation only.  The <span class='code-inline'>tailsr</span> uses recursive processing whereas <span class='code-inline'>tails</span> uses a while loop aggregation followed by a reverse.  For small sequences  <span class='code-inline'>tailsr</span> is probably more efficient. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">tailsr</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Seq of Seq of A</span></div></div></div><div style="display:none" id="code-tailsr_A_Seq_A_self_"><div class="section_title">SOURCE</div><div class="code">
            self.Match(
                () =&gt; Seq&lt;Seq&lt;A&gt;&gt;.Empty,
                xs =&gt; xs.Cons(tailsr(xs.Tail)))</div></div></div><div class="member-title"><a name="take&lt;T>"></a>take&lt;T&gt;(Seq&lt;T&gt;, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-take_T_Seq_T_list__int__count_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns a new sequence with the first &#39;count&#39; items from the sequence provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">count</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc"><span >Number of items to take</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">take</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="keyword">int</span> count)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A new sequence with the first &#39;count&#39; items from the sequence provided</span></div></div></div><div style="display:none" id="code-take_T_Seq_T_list__int__count_"><div class="section_title">SOURCE</div><div class="code">
            list.Take(count)</div></div></div><div class="member-title"><a name="takeWhile&lt;T>"></a>takeWhile&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-takeWhile_T_Seq_T_list__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate the sequence, yielding items if they match the predicate provided, and stopping  as soon as one doesn&#39;t </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">takeWhile</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A new sequence with the first items that match the predicate</span></div></div></div><div style="display:none" id="code-takeWhile_T_Seq_T_list__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            list.TakeWhile(pred)</div></div></div><div class="member-title"><a name="takeWhile&lt;T>"></a>takeWhile&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, int, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-takeWhile_T_Seq_T_list__Func_T_int_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate the sequence, yielding items if they match the predicate provided, and stopping  as soon as one doesn&#39;t.  An index value is also provided to the predicate function. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">int</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">takeWhile</span>&lt;<span class="ident">T</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">int</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A new sequence with the first items that match the predicate</span></div></div></div><div style="display:none" id="code-takeWhile_T_Seq_T_list__Func_T_int_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            list.TakeWhile(pred)</div></div></div><div class="member-title"><a name="zip&lt;T, U, V>"></a>zip&lt;T, U, V&gt;(Seq&lt;T&gt;, Seq&lt;U&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-zip_T_U_V_Seq_T_list__Seq_U_other__Func_T_U_V_zipper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Joins two sequences together either into a single sequence using the join  function provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >First sequence to join</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">U</span>&gt;</div></div><div class="arg-desc"><span >Second sequence to join</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">zipper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >Join function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">V</span>&gt; <span class="ident">zip</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Seq</span>&lt;<span class="ident">U</span>&gt; other, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; zipper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"><span >Joined sequence</span></div></div></div><div style="display:none" id="code-zip_T_U_V_Seq_T_list__Seq_U_other__Func_T_U_V_zipper_"><div class="section_title">SOURCE</div><div class="code">
            Seq(list.Zip(other, zipper))</div></div></div><div class="member-title"><a name="zip&lt;T, U>"></a>zip&lt;T, U&gt;(Seq&lt;T&gt;, Seq&lt;U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-zip_T_U_Seq_T_list__Seq_U_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Joins two sequences together either into an sequence of tuples </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >First sequence to join</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">U</span>&gt;</div></div><div class="arg-desc"><span >Second sequence to join</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;&gt; <span class="ident">zip</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Seq</span>&lt;<span class="ident">U</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;&gt;</div><div class="normal"><span >Joined sequence of tuples</span></div></div></div><div style="display:none" id="code-zip_T_U_Seq_T_list__Seq_U_other_"><div class="section_title">SOURCE</div><div class="code">
            Seq(list.Zip(other, (t, u) =&gt; (t, u)))</div></div></div></div></body></html>