<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Range_SELF_MonoidOrdA_A.htm">Range&lt;SELF, MonoidOrdA, A&gt;</span></div><div class="nav-panel"><h3 >CONSTRUCTORS</h3><a class="nav-link" href="#Range">Range(A, A, A)</a><h3 >FIELDS</h3><a class="nav-link" href="#From">From</a><a class="nav-link" href="#Step">Step</a><a class="nav-link" href="#StepIsAscending">StepIsAscending</a><a class="nav-link" href="#To">To</a><a class="nav-link" href="#Zero">Zero</a><h3 >METHODS</h3><a class="nav-link" href="#AsEnumerable">AsEnumerable()</a><a class="nav-link" href="#Fold&lt;S>">Fold&lt;S&gt;(S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FromCount">FromCount(A, A, A)</a><a class="nav-link" href="#FromMinMax">FromMinMax(A, A, A)</a><a class="nav-link" href="#GetEnumerator">GetEnumerator()</a><a class="nav-link" href="#InRange">InRange(A)</a><a class="nav-link" href="#Overlaps">Overlaps(Range&lt;SELF, MonoidOrdA, A&gt;)</a></div><div class="content-panel"><h1 >Range&lt;SELF, MonoidOrdA, A&gt; Class</h1><p ><span >Represents a range of values </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">Range</span>&lt;<span class="ident">SELF</span>, <span class="ident">MonoidOrdA</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Constructors</h2><div class="member-title"><a name="Range"></a>Range(A, A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Range__A__from__A__to__A__step_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Construct a range </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">from</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The minimum value in the range</div></div><div class="arg"><div class="arg-header"><div class="arg-name">to</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The maximum value in the range</div></div><div class="arg"><div class="arg-header"><div class="arg-name">step</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The size of each step in the range</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">protected</span> <span class="keyword">ctor</span> <span class="ident">Range</span>(<span class="ident">A</span> from, <span class="ident">A</span> to, <span class="ident">A</span> step)</div></div><div style="display:none" id="code-Range__A__from__A__to__A__step_"><div class="section_title">SOURCE</div><div class="code">
            From = from;
            To = to;
            Step = step;
            StepIsAscending = M.Compare(
                                  M.Plus(M.Empty(), step),
                                  M.Empty()) &gt;= 0;
        </div></div></div><h2 >Fields</h2><div class="member-title"><a name="From"></a>From</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >First value in the range </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">A</span> <span class="ident">From</span></div></div></div><div class="member-title"><a name="Step"></a>Step</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Step size to the next item in the range </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">A</span> <span class="ident">Step</span></div></div></div><div class="member-title"><a name="StepIsAscending"></a>StepIsAscending</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >True if adding step to n makes the resulting value greater than n </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">bool</span> <span class="ident">StepIsAscending</span></div></div></div><div class="member-title"><a name="To"></a>To</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Last (inclusive) value in the range </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">A</span> <span class="ident">To</span></div></div></div><div class="member-title"><a name="Zero"></a>Zero</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Zero range using MonoidOrdA.Empty() </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">SELF</span> <span class="ident">Zero</span></div></div></div><h2 >Methods</h2><div class="member-title"><a name="AsEnumerable"></a>AsEnumerable()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; <span class="ident">AsEnumerable</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsEnumerable__"><div class="section_title">SOURCE</div><div class="code">
            if (StepIsAscending)
            {
                for (A x = From; M.Compare(x, To) &lt;= 0; x = M.Plus(x, Step))
                {
                    yield return x;
                }
            }
            else
            {
                for (A x = From; M.Compare(x, To) &gt;= 0; x = M.Plus(x, Step))
                {
                    yield return x;
                }
            }
        </div></div></div><div class="member-title"><a name="Fold&lt;S>"></a>Fold&lt;S&gt;(S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_S_S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">S</span> <span class="ident">Fold</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Fold_S_S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            foreach(var x in AsEnumerable())
            {
                state = f(state, x);
            }
            return state;
        </div></div></div><div class="member-title"><a name="FromCount"></a>FromCount(A, A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FromCount__A__min__A__count__A__step_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Construct a new range </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">min</div><div class="arg-type"><span class="ident">A</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">count</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The number of items in the range</div></div><div class="arg"><div class="arg-header"><div class="arg-name">step</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The size of each step in the range</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SELF</span> <span class="ident">FromCount</span>(<span class="ident">A</span> min, <span class="ident">A</span> count, <span class="ident">A</span> step)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SELF</span></div><div class="normal"></div></div></div><div style="display:none" id="code-FromCount__A__min__A__count__A__step_"><div class="section_title">SOURCE</div><div class="code">
            Ctor(min, M.Plus(min, M.Subtract(M.Product(count, step), step)), step)</div></div></div><div class="member-title"><a name="FromMinMax"></a>FromMinMax(A, A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FromMinMax__A__min__A__max__A__step_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Construct a new range </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">min</div><div class="arg-type"><span class="ident">A</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">max</div><div class="arg-type"><span class="ident">A</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">step</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The size of each step in the range</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SELF</span> <span class="ident">FromMinMax</span>(<span class="ident">A</span> min, <span class="ident">A</span> max, <span class="ident">A</span> step)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SELF</span></div><div class="normal"></div></div></div><div style="display:none" id="code-FromMinMax__A__min__A__max__A__step_"><div class="section_title">SOURCE</div><div class="code">
            Ctor(min, max, step)</div></div></div><div class="member-title"><a name="GetEnumerator"></a>GetEnumerator()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetEnumerator__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">IEnumerator</span>&lt;<span class="ident">A</span>&gt; <span class="ident">GetEnumerator</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerator</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-GetEnumerator__"><div class="section_title">SOURCE</div><div class="code"> 
            AsEnumerable().GetEnumerator()</div></div></div><div class="member-title"><a name="InRange"></a>InRange(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-InRange__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if the value provided is in range </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Value to test</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">InRange</span>(<span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the value provided is in range</span></div></div></div><div style="display:none" id="code-InRange__A__value_"><div class="section_title">SOURCE</div><div class="code">
            var from = M.Compare(From, To) &gt; 0 ? To : From;
            var to   = M.Compare(From, To) &gt; 0 ? From : To;

            return M.Compare(value, from) &gt;= 0 &amp;&amp;
                   M.Compare(value, to) &lt;= 0;
        </div></div></div><div class="member-title"><a name="Overlaps"></a>Overlaps(Range&lt;SELF, MonoidOrdA, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Overlaps__Range_SELF_MonoidOrdA_A_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if the range provided overlaps this range </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Range</span>&lt;<span class="ident">SELF</span>, <span class="ident">MonoidOrdA</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc">The range to test</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Overlaps</span>(<span class="ident">Range</span>&lt;<span class="ident">SELF</span>, <span class="ident">MonoidOrdA</span>, <span class="ident">A</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the range provided overlaps this range</span></div></div></div><div style="display:none" id="code-Overlaps__Range_SELF_MonoidOrdA_A_other_"><div class="section_title">SOURCE</div><div class="code">
            var xfrom = M.Compare(From, To) &gt; 0 ? To : From;
            var xto   = M.Compare(From, To) &gt; 0 ? From : To;
            var yfrom = M.Compare(other.From, other.To) &gt; 0 ? other.To : other.From;
            var yto   = M.Compare(other.From, other.To) &gt; 0 ? other.From : other.To;

            return M.Compare(xfrom, yto) &lt; 0 &amp;&amp;
                   M.Compare(yfrom, xto) &lt; 0;
        </div></div></div></div></body></html>