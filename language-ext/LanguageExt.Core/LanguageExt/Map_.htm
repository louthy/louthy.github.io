<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Map_.htm">Map</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#add&lt;K, V>">add&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)</a><a class="nav-link" href="#add&lt;OrdK, K, V>">add&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, V)</a><a class="nav-link" href="#addOrUpdate&lt;K, V>">addOrUpdate&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)</a><a class="nav-link" href="#addOrUpdate&lt;K, V>">addOrUpdate&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;, Func&lt;V&gt;)</a><a class="nav-link" href="#addOrUpdate&lt;K, V>">addOrUpdate&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;, V)</a><a class="nav-link" href="#addOrUpdate&lt;OrdK, K, V>">addOrUpdate&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, V)</a><a class="nav-link" href="#addOrUpdate&lt;OrdK, K, V>">addOrUpdate&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, Func&lt;V, V&gt;, Func&lt;V&gt;)</a><a class="nav-link" href="#addOrUpdate&lt;OrdK, K, V>">addOrUpdate&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, Func&lt;V, V&gt;, V)</a><a class="nav-link" href="#addOrUpdateRange&lt;K, V>">addOrUpdateRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#addOrUpdateRange&lt;K, V>">addOrUpdateRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#addOrUpdateRange&lt;K, V>">addOrUpdateRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#addOrUpdateRange&lt;OrdK, K, V>">addOrUpdateRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#addOrUpdateRange&lt;OrdK, K, V>">addOrUpdateRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#addOrUpdateRange&lt;OrdK, K, V>">addOrUpdateRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#addRange&lt;K, V>">addRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#addRange&lt;K, V>">addRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#addRange&lt;K, V>">addRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#addRange&lt;OrdK, K, V>">addRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#addRange&lt;OrdK, K, V>">addRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#addRange&lt;OrdK, K, V>">addRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#choose&lt;K, T, R>">choose&lt;K, T, R&gt;(Map&lt;K, T&gt;, Func&lt;T, Option&lt;R&gt;&gt;)</a><a class="nav-link" href="#choose&lt;K, T, R>">choose&lt;K, T, R&gt;(Map&lt;K, T&gt;, Func&lt;K, T, Option&lt;R&gt;&gt;)</a><a class="nav-link" href="#choose&lt;OrdK, K, T, R>">choose&lt;OrdK, K, T, R&gt;(Map&lt;OrdK, K, T&gt;, Func&lt;T, Option&lt;R&gt;&gt;)</a><a class="nav-link" href="#choose&lt;OrdK, K, T, R>">choose&lt;OrdK, K, T, R&gt;(Map&lt;OrdK, K, T&gt;, Func&lt;K, T, Option&lt;R&gt;&gt;)</a><a class="nav-link" href="#clear&lt;K, V>">clear&lt;K, V&gt;(Map&lt;K, V&gt;)</a><a class="nav-link" href="#clear&lt;OrdK, K, V>">clear&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;)</a><a class="nav-link" href="#contains&lt;K, V>">contains&lt;K, V&gt;(Map&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)</a><a class="nav-link" href="#contains&lt;K, V>">contains&lt;K, V&gt;(Map&lt;K, V&gt;, Tuple&lt;K, V&gt;)</a><a class="nav-link" href="#contains&lt;K, V>">contains&lt;K, V&gt;(Map&lt;K, V&gt;, ValueTuple&lt;K, V&gt;)</a><a class="nav-link" href="#contains&lt;OrdK, K, V>">contains&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, KeyValuePair&lt;K, V&gt;)</a><a class="nav-link" href="#contains&lt;OrdK, K, V>">contains&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Tuple&lt;K, V&gt;)</a><a class="nav-link" href="#contains&lt;OrdK, K, V>">contains&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, ValueTuple&lt;K, V&gt;)</a><a class="nav-link" href="#containsKey&lt;K, V>">containsKey&lt;K, V&gt;(Map&lt;K, V&gt;, K)</a><a class="nav-link" href="#containsKey&lt;OrdK, K, V>">containsKey&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K)</a><a class="nav-link" href="#create&lt;K, V>">create&lt;K, V&gt;()</a><a class="nav-link" href="#create&lt;K, V>">create&lt;K, V&gt;(Tuple&lt;K, V&gt;, Tuple&lt;K, V&gt;)</a><a class="nav-link" href="#create&lt;K, V>">create&lt;K, V&gt;(KeyValuePair&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)</a><a class="nav-link" href="#create&lt;K, V>">create&lt;K, V&gt;(ValueTuple&lt;K, V&gt;, ValueTuple&lt;K, V&gt;)</a><a class="nav-link" href="#create&lt;OrdK, K, V>">create&lt;OrdK, K, V&gt;()</a><a class="nav-link" href="#create&lt;OrdK, K, V>">create&lt;OrdK, K, V&gt;(Tuple&lt;K, V&gt;, Tuple&lt;K, V&gt;)</a><a class="nav-link" href="#create&lt;OrdK, K, V>">create&lt;OrdK, K, V&gt;(KeyValuePair&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)</a><a class="nav-link" href="#create&lt;OrdK, K, V>">create&lt;OrdK, K, V&gt;(ValueTuple&lt;K, V&gt;, ValueTuple&lt;K, V&gt;)</a><a class="nav-link" href="#createRange&lt;K, V>">createRange&lt;K, V&gt;(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#createRange&lt;K, V>">createRange&lt;K, V&gt;(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#createRange&lt;K, V>">createRange&lt;K, V&gt;(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#createRange&lt;OrdK, K, V>">createRange&lt;OrdK, K, V&gt;(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#createRange&lt;OrdK, K, V>">createRange&lt;OrdK, K, V&gt;(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#createRange&lt;OrdK, K, V>">createRange&lt;OrdK, K, V&gt;(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#empty&lt;K, V>">empty&lt;K, V&gt;()</a><a class="nav-link" href="#empty&lt;OrdK, K, V>">empty&lt;OrdK, K, V&gt;()</a><a class="nav-link" href="#exists&lt;K, V>">exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;K, V, bool&gt;)</a><a class="nav-link" href="#exists&lt;K, V>">exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;Tuple&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#exists&lt;K, V>">exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;ValueTuple&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#exists&lt;K, V>">exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#exists&lt;K, V>">exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;V, bool&gt;)</a><a class="nav-link" href="#exists&lt;OrdK, K, V>">exists&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;K, V, bool&gt;)</a><a class="nav-link" href="#exists&lt;OrdK, K, V>">exists&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;Tuple&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#exists&lt;OrdK, K, V>">exists&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;ValueTuple&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#exists&lt;OrdK, K, V>">exists&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#exists&lt;OrdK, K, V>">exists&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;V, bool&gt;)</a><a class="nav-link" href="#filter&lt;K, V>">filter&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;V, bool&gt;)</a><a class="nav-link" href="#filter&lt;K, V>">filter&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;K, V, bool&gt;)</a><a class="nav-link" href="#filter&lt;OrdK, K, V>">filter&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;V, bool&gt;)</a><a class="nav-link" href="#filter&lt;OrdK, K, V>">filter&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;K, V, bool&gt;)</a><a class="nav-link" href="#find&lt;K, V, R>">find&lt;K, V, R&gt;(Map&lt;K, V&gt;, K, Func&lt;V, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#find&lt;K, V>">find&lt;K, V&gt;(Map&lt;K, V&gt;, K)</a><a class="nav-link" href="#find&lt;OrdK, K, V, R>">find&lt;OrdK, K, V, R&gt;(Map&lt;OrdK, K, V&gt;, K, Func&lt;V, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#find&lt;OrdK, K, V>">find&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K)</a><a class="nav-link" href="#findRange&lt;K, V>">findRange&lt;K, V&gt;(Map&lt;K, V&gt;, K, K)</a><a class="nav-link" href="#findRange&lt;OrdK, K, V>">findRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, K)</a><a class="nav-link" href="#findSeq&lt;K, V>">findSeq&lt;K, V&gt;(Map&lt;K, V&gt;, K)</a><a class="nav-link" href="#findSeq&lt;OrdK, K, V>">findSeq&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K)</a><a class="nav-link" href="#fold&lt;OrdK, S, K, V>">fold&lt;OrdK, S, K, V&gt;(Map&lt;OrdK, K, V&gt;, S, Func&lt;S, K, V, S&gt;)</a><a class="nav-link" href="#fold&lt;OrdK, S, K, V>">fold&lt;OrdK, S, K, V&gt;(Map&lt;OrdK, K, V&gt;, S, Func&lt;S, V, S&gt;)</a><a class="nav-link" href="#fold&lt;S, K, V>">fold&lt;S, K, V&gt;(Map&lt;K, V&gt;, S, Func&lt;S, K, V, S&gt;)</a><a class="nav-link" href="#fold&lt;S, K, V>">fold&lt;S, K, V&gt;(Map&lt;K, V&gt;, S, Func&lt;S, V, S&gt;)</a><a class="nav-link" href="#forall&lt;K, V>">forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;V, bool&gt;)</a><a class="nav-link" href="#forall&lt;K, V>">forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;K, V, bool&gt;)</a><a class="nav-link" href="#forall&lt;K, V>">forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;Tuple&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#forall&lt;K, V>">forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;ValueTuple&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#forall&lt;K, V>">forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#forall&lt;OrdK, K, V>">forall&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;V, bool&gt;)</a><a class="nav-link" href="#forall&lt;OrdK, K, V>">forall&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;K, V, bool&gt;)</a><a class="nav-link" href="#forall&lt;OrdK, K, V>">forall&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;Tuple&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#forall&lt;OrdK, K, V>">forall&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;ValueTuple&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#forall&lt;OrdK, K, V>">forall&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)</a><a class="nav-link" href="#freeze&lt;K, V>">freeze&lt;K, V&gt;(IDictionary&lt;K, V&gt;)</a><a class="nav-link" href="#Freeze&lt;K, V>">Freeze&lt;K, V&gt;(IDictionary&lt;K, V&gt;)</a><a class="nav-link" href="#freeze&lt;OrdK, K, V>">freeze&lt;OrdK, K, V&gt;(IDictionary&lt;K, V&gt;)</a><a class="nav-link" href="#Freeze&lt;OrdK, K, V>">Freeze&lt;OrdK, K, V&gt;(IDictionary&lt;K, V&gt;)</a><a class="nav-link" href="#iter&lt;K, V>">iter&lt;K, V&gt;(Map&lt;K, V&gt;, Action&lt;V&gt;)</a><a class="nav-link" href="#iter&lt;K, V>">iter&lt;K, V&gt;(Map&lt;K, V&gt;, Action&lt;K, V&gt;)</a><a class="nav-link" href="#iter&lt;OrdK, K, V>">iter&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Action&lt;V&gt;)</a><a class="nav-link" href="#iter&lt;OrdK, K, V>">iter&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Action&lt;K, V&gt;)</a><a class="nav-link" href="#length&lt;K, T>">length&lt;K, T&gt;(Map&lt;K, T&gt;)</a><a class="nav-link" href="#length&lt;OrdK, K, T>">length&lt;OrdK, K, T&gt;(Map&lt;OrdK, K, T&gt;)</a><a class="nav-link" href="#map&lt;K, T, U>">map&lt;K, T, U&gt;(Map&lt;K, T&gt;, Func&lt;T, U&gt;)</a><a class="nav-link" href="#map&lt;K, T, U>">map&lt;K, T, U&gt;(Map&lt;K, T&gt;, Func&lt;K, T, U&gt;)</a><a class="nav-link" href="#map&lt;OrdK, K, T, U>">map&lt;OrdK, K, T, U&gt;(Map&lt;OrdK, K, T&gt;, Func&lt;T, U&gt;)</a><a class="nav-link" href="#map&lt;OrdK, K, T, U>">map&lt;OrdK, K, T, U&gt;(Map&lt;OrdK, K, T&gt;, Func&lt;K, T, U&gt;)</a><a class="nav-link" href="#remove&lt;K, V>">remove&lt;K, V&gt;(Map&lt;K, V&gt;, K)</a><a class="nav-link" href="#remove&lt;OrdK, K, V>">remove&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K)</a><a class="nav-link" href="#setItem&lt;K, V>">setItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)</a><a class="nav-link" href="#setItem&lt;K, V>">setItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;)</a><a class="nav-link" href="#setItem&lt;OrdK, K, V>">setItem&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, V)</a><a class="nav-link" href="#setItem&lt;OrdK, K, V>">setItem&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, Func&lt;V, V&gt;)</a><a class="nav-link" href="#setItems&lt;K, V>">setItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#setItems&lt;K, V>">setItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#setItems&lt;K, V>">setItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#setItems&lt;OrdK, K, V>">setItems&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#setItems&lt;OrdK, K, V>">setItems&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#setItems&lt;OrdK, K, V>">setItems&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#skip&lt;K, V>">skip&lt;K, V&gt;(Map&lt;K, V&gt;, int)</a><a class="nav-link" href="#skip&lt;OrdK, K, V>">skip&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, int)</a><a class="nav-link" href="#tryAdd&lt;K, V>">tryAdd&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)</a><a class="nav-link" href="#tryAdd&lt;K, V>">tryAdd&lt;K, V&gt;(Map&lt;K, V&gt;, K, V, Func&lt;Map&lt;K, V&gt;, V, Map&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#tryAdd&lt;OrdK, K, V>">tryAdd&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, V)</a><a class="nav-link" href="#tryAdd&lt;OrdK, K, V>">tryAdd&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, V, Func&lt;Map&lt;OrdK, K, V&gt;, V, Map&lt;OrdK, K, V&gt;&gt;)</a><a class="nav-link" href="#tryAddRange&lt;K, V>">tryAddRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#tryAddRange&lt;K, V>">tryAddRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#tryAddRange&lt;K, V>">tryAddRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#tryAddRange&lt;OrdK, K, V>">tryAddRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#tryAddRange&lt;OrdK, K, V>">tryAddRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#tryAddRange&lt;OrdK, K, V>">tryAddRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#trySetItem&lt;K, V>">trySetItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)</a><a class="nav-link" href="#trySetItem&lt;K, V>">trySetItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;)</a><a class="nav-link" href="#trySetItem&lt;K, V>">trySetItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;, Func&lt;Map&lt;K, V&gt;, Map&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#trySetItem&lt;OrdK, K, V>">trySetItem&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, V)</a><a class="nav-link" href="#trySetItem&lt;OrdK, K, V>">trySetItem&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, Func&lt;V, V&gt;)</a><a class="nav-link" href="#trySetItem&lt;OrdK, K, V>">trySetItem&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, Func&lt;V, V&gt;, Func&lt;Map&lt;K, V&gt;, Map&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#trySetItems&lt;K, V>">trySetItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#trySetItems&lt;K, V>">trySetItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#trySetItems&lt;K, V>">trySetItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#trySetItems&lt;K, V>">trySetItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;K&gt;, Func&lt;V, V&gt;)</a><a class="nav-link" href="#trySetItems&lt;OrdK, K, V>">trySetItems&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#trySetItems&lt;OrdK, K, V>">trySetItems&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#trySetItems&lt;OrdK, K, V>">trySetItems&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)</a><a class="nav-link" href="#trySetItems&lt;OrdK, K, V>">trySetItems&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;K&gt;, Func&lt;V, V&gt;)</a></div><div class="content-panel"><h1 >Map Class</h1><p ><span >Immutable map module AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">Map</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="add&lt;K, V>"></a>add&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_K_V_Map_K_V_map__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">add</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if the key already exists</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-add_K_V_Map_K_V_map__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            map.Add(key, value)</div></div></div><div class="member-title"><a name="add&lt;OrdK, K, V>"></a>add&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-add_OrdK_K_V_Map_OrdK_K_V_map__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">add</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if the key already exists</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-add_OrdK_K_V_Map_OrdK_K_V_map__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            map.Add(key, value)</div></div></div><div class="member-title"><a name="addOrUpdate&lt;K, V>"></a>addOrUpdate&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdate_K_V_Map_K_V_map__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map. If the key already exists, the new item replaces it. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdate</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-addOrUpdate_K_V_Map_K_V_map__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            map.AddOrUpdate(key, value)</div></div></div><div class="member-title"><a name="addOrUpdate&lt;K, V>"></a>addOrUpdate&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;, Func&lt;V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdate_K_V_Map_K_V_map__K__key__Func_V_V_Some__Func_V_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key, map it to a new value, put it back.  If it doesn&#39;t exist, add a new one based on None result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdate</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">V</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the mapped value</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if None returns null</span></div></div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div></div><div style="display:none" id="code-addOrUpdate_K_V_Map_K_V_map__K__key__Func_V_V_Some__Func_V_None_"><div class="section_title">SOURCE</div><div class="code">
            map.AddOrUpdate(key, Some, None)</div></div></div><div class="member-title"><a name="addOrUpdate&lt;K, V>"></a>addOrUpdate&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdate_K_V_Map_K_V_map__K__key__Func_V_V_Some__V__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key, map it to a new value, put it back.  If it doesn&#39;t exist, add a new one based on None result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">V</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdate</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some, <span class="ident">V</span> None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the mapped value</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException if None is null</span></div></div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div></div><div style="display:none" id="code-addOrUpdate_K_V_Map_K_V_map__K__key__Func_V_V_Some__V__None_"><div class="section_title">SOURCE</div><div class="code">
            map.AddOrUpdate(key, Some, None)</div></div></div><div class="member-title"><a name="addOrUpdate&lt;OrdK, K, V>"></a>addOrUpdate&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdate_OrdK_K_V_Map_OrdK_K_V_map__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map. If the key already exists, the new item replaces it. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdate</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-addOrUpdate_OrdK_K_V_Map_OrdK_K_V_map__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            map.AddOrUpdate(key, value)</div></div></div><div class="member-title"><a name="addOrUpdate&lt;OrdK, K, V>"></a>addOrUpdate&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, Func&lt;V, V&gt;, Func&lt;V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdate_OrdK_K_V_Map_OrdK_K_V_map__K__key__Func_V_V_Some__Func_V_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key, map it to a new value, put it back.  If it doesn&#39;t exist, add a new one based on None result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdate</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">V</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the mapped value</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if None returns null</span></div></div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div></div><div style="display:none" id="code-addOrUpdate_OrdK_K_V_Map_OrdK_K_V_map__K__key__Func_V_V_Some__Func_V_None_"><div class="section_title">SOURCE</div><div class="code">
            map.AddOrUpdate(key, Some, None)</div></div></div><div class="member-title"><a name="addOrUpdate&lt;OrdK, K, V>"></a>addOrUpdate&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, Func&lt;V, V&gt;, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdate_OrdK_K_V_Map_OrdK_K_V_map__K__key__Func_V_V_Some__V__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key, map it to a new value, put it back.  If it doesn&#39;t exist, add a new one based on None result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">V</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdate</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some, <span class="ident">V</span> None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the mapped value</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException if None is null</span></div></div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div></div><div style="display:none" id="code-addOrUpdate_OrdK_K_V_Map_OrdK_K_V_map__K__key__Func_V_V_Some__V__None_"><div class="section_title">SOURCE</div><div class="code">
            map.AddOrUpdate(key, Some, None)</div></div></div><div class="member-title"><a name="addOrUpdateRange&lt;K, V>"></a>addOrUpdateRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdateRange_K_V_Map_K_V_map__IEnumerable_Tuple&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re replaced. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Range of tuples to add</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdateRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div></div><div style="display:none" id="code-addOrUpdateRange_K_V_Map_K_V_map__IEnumerable_Tuple&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code">
            map.AddOrUpdateRange(range)</div></div></div><div class="member-title"><a name="addOrUpdateRange&lt;K, V>"></a>addOrUpdateRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdateRange_K_V_Map_K_V_map__IEnumerable_ValueTuple&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re replaced. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Range of tuples to add</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdateRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div></div><div style="display:none" id="code-addOrUpdateRange_K_V_Map_K_V_map__IEnumerable_ValueTuple&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code">
            map.AddOrUpdateRange(range)</div></div></div><div class="member-title"><a name="addOrUpdateRange&lt;K, V>"></a>addOrUpdateRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdateRange_K_V_Map_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re replaced. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Range of KeyValuePairs to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdateRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-addOrUpdateRange_K_V_Map_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code">
            map.AddOrUpdateRange(range)</div></div></div><div class="member-title"><a name="addOrUpdateRange&lt;OrdK, K, V>"></a>addOrUpdateRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdateRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_Tuple&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re replaced. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Range of tuples to add</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdateRange</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-addOrUpdateRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_Tuple&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code">
            map.AddOrUpdateRange(range)</div></div></div><div class="member-title"><a name="addOrUpdateRange&lt;OrdK, K, V>"></a>addOrUpdateRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdateRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_ValueTuple&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re replaced. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Range of tuples to add</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdateRange</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-addOrUpdateRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_ValueTuple&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code">
            map.AddOrUpdateRange(range)</div></div></div><div class="member-title"><a name="addOrUpdateRange&lt;OrdK, K, V>"></a>addOrUpdateRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addOrUpdateRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re replaced. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Range of KeyValuePairs to add</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addOrUpdateRange</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-addOrUpdateRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_range_"><div class="section_title">SOURCE</div><div class="code">
            map.AddOrUpdateRange(range)</div></div></div><div class="member-title"><a name="addRange&lt;K, V>"></a>addRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addRange_K_V_Map_K_V_map__IEnumerable_Tuple&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-addRange_K_V_Map_K_V_map__IEnumerable_Tuple&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            map.AddRange(keyValues)</div></div></div><div class="member-title"><a name="addRange&lt;K, V>"></a>addRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addRange_K_V_Map_K_V_map__IEnumerable_ValueTuple&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-addRange_K_V_Map_K_V_map__IEnumerable_ValueTuple&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            map.AddRange(keyValues)</div></div></div><div class="member-title"><a name="addRange&lt;K, V>"></a>addRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addRange_K_V_Map_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-addRange_K_V_Map_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            map.AddRange(keyValues)</div></div></div><div class="member-title"><a name="addRange&lt;OrdK, K, V>"></a>addRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_Tuple&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addRange</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-addRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_Tuple&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            map.AddRange(keyValues)</div></div></div><div class="member-title"><a name="addRange&lt;OrdK, K, V>"></a>addRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_ValueTuple&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addRange</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-addRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_ValueTuple&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            map.AddRange(keyValues)</div></div></div><div class="member-title"><a name="addRange&lt;OrdK, K, V>"></a>addRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-addRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">addRange</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-addRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            map.AddRange(keyValues)</div></div></div><div class="member-title"><a name="choose&lt;K, T, R>"></a>choose&lt;K, T, R&gt;(Map&lt;K, T&gt;, Func&lt;T, Option&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choose_K_T_R_Map_K_T_map__Func_T_Option&lt;R>_selector_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Equivalent to map and filter but the filtering is done based on whether the returned Option is Some or None.  If the item is None then it&#39;s filtered out, if not the the mapped Some value is used. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">R</span>&gt; <span class="ident">choose</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt; selector)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >Filtered map</span></div></div></div><div style="display:none" id="code-choose_K_T_R_Map_K_T_map__Func_T_Option&lt;R>_selector_"><div class="section_title">SOURCE</div><div class="code">
            map.Choose(selector)</div></div></div><div class="member-title"><a name="choose&lt;K, T, R>"></a>choose&lt;K, T, R&gt;(Map&lt;K, T&gt;, Func&lt;K, T, Option&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choose_K_T_R_Map_K_T_map__Func_K_T_Option&lt;R>_selector_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Equivalent to map and filter but the filtering is done based on whether the returned Option is Some or None.  If the item is None then it&#39;s filtered out, if not the the mapped Some value is used. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">R</span>&gt; <span class="ident">choose</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt; selector)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >Filtered map</span></div></div></div><div style="display:none" id="code-choose_K_T_R_Map_K_T_map__Func_K_T_Option&lt;R>_selector_"><div class="section_title">SOURCE</div><div class="code">
            map.Choose(selector)</div></div></div><div class="member-title"><a name="choose&lt;OrdK, K, T, R>"></a>choose&lt;OrdK, K, T, R&gt;(Map&lt;OrdK, K, T&gt;, Func&lt;T, Option&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choose_OrdK_K_T_R_Map_OrdK_K_T_map__Func_T_Option&lt;R>_selector_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Equivalent to map and filter but the filtering is done based on whether the returned Option is Some or None.  If the item is None then it&#39;s filtered out, if not the the mapped Some value is used. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">R</span>&gt; <span class="ident">choose</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">T</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt; selector)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >Filtered map</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-choose_OrdK_K_T_R_Map_OrdK_K_T_map__Func_T_Option&lt;R>_selector_"><div class="section_title">SOURCE</div><div class="code">
            map.Choose(selector)</div></div></div><div class="member-title"><a name="choose&lt;OrdK, K, T, R>"></a>choose&lt;OrdK, K, T, R&gt;(Map&lt;OrdK, K, T&gt;, Func&lt;K, T, Option&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choose_OrdK_K_T_R_Map_OrdK_K_T_map__Func_K_T_Option&lt;R>_selector_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Equivalent to map and filter but the filtering is done based on whether the returned Option is Some or None.  If the item is None then it&#39;s filtered out, if not the the mapped Some value is used. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">R</span>&gt; <span class="ident">choose</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">T</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">Option</span>&lt;<span class="ident">R</span>&gt;&gt; selector)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >Filtered map</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-choose_OrdK_K_T_R_Map_OrdK_K_T_map__Func_K_T_Option&lt;R>_selector_"><div class="section_title">SOURCE</div><div class="code">
            map.Choose(selector)</div></div></div><div class="member-title"><a name="clear&lt;K, V>"></a>clear&lt;K, V&gt;(Map&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-clear_K_V_Map_K_V_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Clears all items from the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >Map to clear</span></div></div><div class="section_title">REMARKS</div><span >Functionally equivalent to calling Map.empty as the original structure is untouched</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">clear</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >Empty map</span></div></div></div><div style="display:none" id="code-clear_K_V_Map_K_V_map_"><div class="section_title">SOURCE</div><div class="code">
            Map&lt;K, V&gt;.Empty</div></div></div><div class="member-title"><a name="clear&lt;OrdK, K, V>"></a>clear&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-clear_OrdK_K_V_Map_OrdK_K_V_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Clears all items from the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >Map to clear</span></div></div><div class="section_title">REMARKS</div><span >Functionally equivalent to calling Map.empty as the original structure is untouched</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">clear</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >Empty map</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-clear_OrdK_K_V_Map_OrdK_K_V_map_"><div class="section_title">SOURCE</div><div class="code">
            Map&lt;OrdK, K, V&gt;.Empty</div></div></div><div class="member-title"><a name="contains&lt;K, V>"></a>contains&lt;K, V&gt;(Map&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_K_V_Map_K_V_map__KeyValuePair_K_V_kv_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Checks for existence of a key in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">kv</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; kv)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if an item with the key supplied is in the map</span></div></div></div><div style="display:none" id="code-contains_K_V_Map_K_V_map__KeyValuePair_K_V_kv_"><div class="section_title">SOURCE</div><div class="code">
            map.Contains(kv.Key, kv.Value)</div></div></div><div class="member-title"><a name="contains&lt;K, V>"></a>contains&lt;K, V&gt;(Map&lt;K, V&gt;, Tuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_K_V_Map_K_V_map__Tuple_K_V_kv_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Checks for existence of a key in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">kv</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; kv)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if an item with the key supplied is in the map</span></div></div></div><div style="display:none" id="code-contains_K_V_Map_K_V_map__Tuple_K_V_kv_"><div class="section_title">SOURCE</div><div class="code">
            map.Contains(kv.Item1, kv.Item2)</div></div></div><div class="member-title"><a name="contains&lt;K, V>"></a>contains&lt;K, V&gt;(Map&lt;K, V&gt;, ValueTuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_K_V_Map_K_V_map__ValueTuple_K_V_kv_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Checks for existence of a key in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">kv</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; kv)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if an item with the key supplied is in the map</span></div></div></div><div style="display:none" id="code-contains_K_V_Map_K_V_map__ValueTuple_K_V_kv_"><div class="section_title">SOURCE</div><div class="code">
            map.Contains(kv.Item1, kv.Item2)</div></div></div><div class="member-title"><a name="contains&lt;OrdK, K, V>"></a>contains&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, KeyValuePair&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_OrdK_K_V_Map_OrdK_K_V_map__KeyValuePair_K_V_kv_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Checks for existence of a key in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">kv</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; kv)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if an item with the key supplied is in the map</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-contains_OrdK_K_V_Map_OrdK_K_V_map__KeyValuePair_K_V_kv_"><div class="section_title">SOURCE</div><div class="code">
            map.Contains(kv.Key, kv.Value)</div></div></div><div class="member-title"><a name="contains&lt;OrdK, K, V>"></a>contains&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Tuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_OrdK_K_V_Map_OrdK_K_V_map__Tuple_K_V_kv_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Checks for existence of a key in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">kv</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; kv)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if an item with the key supplied is in the map</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-contains_OrdK_K_V_Map_OrdK_K_V_map__Tuple_K_V_kv_"><div class="section_title">SOURCE</div><div class="code">
            map.Contains(kv.Item1, kv.Item2)</div></div></div><div class="member-title"><a name="contains&lt;OrdK, K, V>"></a>contains&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, ValueTuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_OrdK_K_V_Map_OrdK_K_V_map__ValueTuple_K_V_kv_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Checks for existence of a key in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">kv</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; kv)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if an item with the key supplied is in the map</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-contains_OrdK_K_V_Map_OrdK_K_V_map__ValueTuple_K_V_kv_"><div class="section_title">SOURCE</div><div class="code">
            map.Contains(kv.Item1, kv.Item2)</div></div></div><div class="member-title"><a name="containsKey&lt;K, V>"></a>containsKey&lt;K, V&gt;(Map&lt;K, V&gt;, K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-containsKey_K_V_Map_K_V_map__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Checks for existence of a key in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to check</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">containsKey</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if an item with the key supplied is in the map</span></div></div></div><div style="display:none" id="code-containsKey_K_V_Map_K_V_map__K__key_"><div class="section_title">SOURCE</div><div class="code">
            map.ContainsKey(key)</div></div></div><div class="member-title"><a name="containsKey&lt;OrdK, K, V>"></a>containsKey&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-containsKey_OrdK_K_V_Map_OrdK_K_V_map__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Checks for existence of a key in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to check</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">containsKey</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if an item with the key supplied is in the map</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-containsKey_OrdK_K_V_Map_OrdK_K_V_map__K__key_"><div class="section_title">SOURCE</div><div class="code">
            map.ContainsKey(key)</div></div></div><div class="member-title"><a name="create&lt;K, V>"></a>create&lt;K, V&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-create_K_V_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new Map seeded with the keyValues provided </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">create</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-create_K_V_"><div class="section_title">SOURCE</div><div class="code">
            Map&lt;K, V&gt;.Empty</div></div></div><div class="member-title"><a name="create&lt;K, V>"></a>create&lt;K, V&gt;(Tuple&lt;K, V&gt;, Tuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-create_K_V_Tuple_K_V_head__Tuple_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new Map seeded with the keyValues provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">create</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-create_K_V_Tuple_K_V_head__Tuple_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            empty&lt;K, V&gt;().AddRange(head.Cons(tail))</div></div></div><div class="member-title"><a name="create&lt;K, V>"></a>create&lt;K, V&gt;(KeyValuePair&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-create_K_V_KeyValuePair_K_V_head__KeyValuePair_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new Map seeded with the keyValues provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">create</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-create_K_V_KeyValuePair_K_V_head__KeyValuePair_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            empty&lt;K, V&gt;().AddRange(head.Cons(tail))</div></div></div><div class="member-title"><a name="create&lt;K, V>"></a>create&lt;K, V&gt;(ValueTuple&lt;K, V&gt;, ValueTuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-create_K_V_ValueTuple_K_V_head__ValueTuple_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new Map seeded with the keyValues provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">create</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-create_K_V_ValueTuple_K_V_head__ValueTuple_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            empty&lt;K, V&gt;().AddRange(head.Cons(tail))</div></div></div><div class="member-title"><a name="create&lt;OrdK, K, V>"></a>create&lt;OrdK, K, V&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-create_OrdK_K_V_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new empty Map </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">create</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-create_OrdK_K_V_"><div class="section_title">SOURCE</div><div class="code">
            Map&lt;OrdK, K, V&gt;.Empty</div></div></div><div class="member-title"><a name="create&lt;OrdK, K, V>"></a>create&lt;OrdK, K, V&gt;(Tuple&lt;K, V&gt;, Tuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-create_OrdK_K_V_Tuple_K_V_head__Tuple_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new Map seeded with the keyValues provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">create</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-create_OrdK_K_V_Tuple_K_V_head__Tuple_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            empty&lt;OrdK, K, V&gt;().AddRange(head.Cons(tail))</div></div></div><div class="member-title"><a name="create&lt;OrdK, K, V>"></a>create&lt;OrdK, K, V&gt;(KeyValuePair&lt;K, V&gt;, KeyValuePair&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-create_OrdK_K_V_KeyValuePair_K_V_head__KeyValuePair_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new Map seeded with the keyValues provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">create</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-create_OrdK_K_V_KeyValuePair_K_V_head__KeyValuePair_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            empty&lt;OrdK, K, V&gt;().AddRange(head.Cons(tail))</div></div></div><div class="member-title"><a name="create&lt;OrdK, K, V>"></a>create&lt;OrdK, K, V&gt;(ValueTuple&lt;K, V&gt;, ValueTuple&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-create_OrdK_K_V_ValueTuple_K_V_head__ValueTuple_K_V_tail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new Map seeded with the keyValues provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">head</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">tail</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">create</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; head, <span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; tail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-create_OrdK_K_V_ValueTuple_K_V_head__ValueTuple_K_V_tail_"><div class="section_title">SOURCE</div><div class="code">
            empty&lt;OrdK, K, V&gt;().AddRange(head.Cons(tail))</div></div></div><div class="member-title"><a name="createRange&lt;K, V>"></a>createRange&lt;K, V&gt;(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-createRange_K_V_IEnumerable_Tuple&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new Map seeded with the keyValues provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">createRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-createRange_K_V_IEnumerable_Tuple&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            empty&lt;K, V&gt;().AddRange(keyValues)</div></div></div><div class="member-title"><a name="createRange&lt;K, V>"></a>createRange&lt;K, V&gt;(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-createRange_K_V_IEnumerable_ValueTuple&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new Map seeded with the keyValues provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">createRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-createRange_K_V_IEnumerable_ValueTuple&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            empty&lt;K, V&gt;().AddRange(keyValues)</div></div></div><div class="member-title"><a name="createRange&lt;K, V>"></a>createRange&lt;K, V&gt;(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-createRange_K_V_IEnumerable_KeyValuePair&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new Map seeded with the keyValues provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">createRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-createRange_K_V_IEnumerable_KeyValuePair&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            empty&lt;K, V&gt;().AddRange(keyValues)</div></div></div><div class="member-title"><a name="createRange&lt;OrdK, K, V>"></a>createRange&lt;OrdK, K, V&gt;(IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-createRange_OrdK_K_V_IEnumerable_Tuple&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new Map seeded with the keyValues provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">createRange</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-createRange_OrdK_K_V_IEnumerable_Tuple&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            empty&lt;OrdK, K, V&gt;().AddRange(keyValues)</div></div></div><div class="member-title"><a name="createRange&lt;OrdK, K, V>"></a>createRange&lt;OrdK, K, V&gt;(IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-createRange_OrdK_K_V_IEnumerable_ValueTuple&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new Map seeded with the keyValues provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">createRange</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-createRange_OrdK_K_V_IEnumerable_ValueTuple&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            empty&lt;OrdK, K, V&gt;().AddRange(keyValues)</div></div></div><div class="member-title"><a name="createRange&lt;OrdK, K, V>"></a>createRange&lt;OrdK, K, V&gt;(IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-createRange_OrdK_K_V_IEnumerable_KeyValuePair&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new Map seeded with the keyValues provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">createRange</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-createRange_OrdK_K_V_IEnumerable_KeyValuePair&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            empty&lt;OrdK, K, V&gt;().AddRange(keyValues)</div></div></div><div class="member-title"><a name="empty&lt;K, V>"></a>empty&lt;K, V&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-empty_K_V_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new empty Map </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">empty</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-empty_K_V_"><div class="section_title">SOURCE</div><div class="code">
            Map&lt;K, V&gt;.Empty</div></div></div><div class="member-title"><a name="empty&lt;OrdK, K, V>"></a>empty&lt;OrdK, K, V&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-empty_OrdK_K_V_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Creates a new empty Map </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">empty</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-empty_OrdK_K_V_"><div class="section_title">SOURCE</div><div class="code">
            Map&lt;OrdK, K, V&gt;.Empty</div></div></div><div class="member-title"><a name="exists&lt;K, V>"></a>exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;K, V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_K_V_Map_K_V_map__Func_K_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *any* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-exists_K_V_Map_K_V_map__Func_K_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;K, V>"></a>exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;Tuple&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_K_V_Map_K_V_map__Func_Tuple&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *any* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-exists_K_V_Map_K_V_map__Func_Tuple&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;K, V>"></a>exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;ValueTuple&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_K_V_Map_K_V_map__Func_ValueTuple&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *any* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-exists_K_V_Map_K_V_map__Func_ValueTuple&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;K, V>"></a>exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_K_V_Map_K_V_map__Func_KeyValuePair&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *any* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-exists_K_V_Map_K_V_map__Func_KeyValuePair&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;K, V>"></a>exists&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_K_V_Map_K_V_map__Func_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *any* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-exists_K_V_Map_K_V_map__Func_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;OrdK, K, V>"></a>exists&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;K, V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_OrdK_K_V_Map_OrdK_K_V_map__Func_K_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *any* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-exists_OrdK_K_V_Map_OrdK_K_V_map__Func_K_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;OrdK, K, V>"></a>exists&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;Tuple&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_OrdK_K_V_Map_OrdK_K_V_map__Func_Tuple&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *any* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-exists_OrdK_K_V_Map_OrdK_K_V_map__Func_Tuple&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;OrdK, K, V>"></a>exists&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;ValueTuple&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_OrdK_K_V_Map_OrdK_K_V_map__Func_ValueTuple&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *any* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-exists_OrdK_K_V_Map_OrdK_K_V_map__Func_ValueTuple&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;OrdK, K, V>"></a>exists&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_OrdK_K_V_Map_OrdK_K_V_map__Func_KeyValuePair&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *any* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-exists_OrdK_K_V_Map_OrdK_K_V_map__Func_KeyValuePair&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.Exists(pred)</div></div></div><div class="member-title"><a name="exists&lt;OrdK, K, V>"></a>exists&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_OrdK_K_V_Map_OrdK_K_V_map__Func_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if *any* items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-exists_OrdK_K_V_Map_OrdK_K_V_map__Func_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.Exists(pred)</div></div></div><div class="member-title"><a name="filter&lt;K, V>"></a>filter&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_K_V_Map_K_V_map__Func_V_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically filter out items that return false when a predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with items filtered</span></div></div></div><div style="display:none" id="code-filter_K_V_Map_K_V_map__Func_V_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            map.Filter(predicate)</div></div></div><div class="member-title"><a name="filter&lt;K, V>"></a>filter&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;K, V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_K_V_Map_K_V_map__Func_K_V_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically filter out items that return false when a predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with items filtered</span></div></div></div><div style="display:none" id="code-filter_K_V_Map_K_V_map__Func_K_V_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            map.Filter(predicate)</div></div></div><div class="member-title"><a name="filter&lt;OrdK, K, V>"></a>filter&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_OrdK_K_V_Map_OrdK_K_V_map__Func_V_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically filter out items that return false when a predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with items filtered</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-filter_OrdK_K_V_Map_OrdK_K_V_map__Func_V_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            map.Filter(predicate)</div></div></div><div class="member-title"><a name="filter&lt;OrdK, K, V>"></a>filter&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;K, V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_OrdK_K_V_Map_OrdK_K_V_map__Func_K_V_bool_predicate_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically filter out items that return false when a predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predicate</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">filter</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt; predicate)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with items filtered</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-filter_OrdK_K_V_Map_OrdK_K_V_map__Func_K_V_bool_predicate_"><div class="section_title">SOURCE</div><div class="code">
            map.Filter(predicate)</div></div></div><div class="member-title"><a name="find&lt;K, V, R>"></a>find&lt;K, V, R&gt;(Map&lt;K, V&gt;, K, Func&lt;V, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-find_K_V_R_Map_K_V_map__K__key__Func_V_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key and pattern match the result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">find</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">R</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Found value</span></div></div></div><div style="display:none" id="code-find_K_V_R_Map_K_V_map__K__key__Func_V_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            map.Find(key, Some, None)</div></div></div><div class="member-title"><a name="find&lt;K, V>"></a>find&lt;K, V&gt;(Map&lt;K, V&gt;, K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-find_K_V_Map_K_V_map__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">V</span>&gt; <span class="ident">find</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"><span >Found value</span></div></div></div><div style="display:none" id="code-find_K_V_Map_K_V_map__K__key_"><div class="section_title">SOURCE</div><div class="code">
            map.Find(key)</div></div></div><div class="member-title"><a name="find&lt;OrdK, K, V, R>"></a>find&lt;OrdK, K, V, R&gt;(Map&lt;OrdK, K, V&gt;, K, Func&lt;V, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-find_OrdK_K_V_R_Map_OrdK_K_V_map__K__key__Func_V_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key and pattern match the result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">find</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">R</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >Found value</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-find_OrdK_K_V_R_Map_OrdK_K_V_map__K__key__Func_V_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            map.Find(key, Some, None)</div></div></div><div class="member-title"><a name="find&lt;OrdK, K, V>"></a>find&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-find_OrdK_K_V_Map_OrdK_K_V_map__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">V</span>&gt; <span class="ident">find</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"><span >Found value</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-find_OrdK_K_V_Map_OrdK_K_V_map__K__key_"><div class="section_title">SOURCE</div><div class="code">
            map.Find(key)</div></div></div><div class="member-title"><a name="findRange&lt;K, V>"></a>findRange&lt;K, V&gt;(Map&lt;K, V&gt;, K, K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-findRange_K_V_Map_K_V_map__K__keyFrom__K__keyTo_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a range of values  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyFrom</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Range start (inclusive)</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyTo</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Range to (inclusive)</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">findRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> keyFrom, <span class="ident">K</span> keyTo)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"><span >Range of values</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keyFrom or keyTo are null</span></div></div></div><div style="display:none" id="code-findRange_K_V_Map_K_V_map__K__keyFrom__K__keyTo_"><div class="section_title">SOURCE</div><div class="code">
            map.FindRange(keyFrom, keyTo)</div></div></div><div class="member-title"><a name="findRange&lt;OrdK, K, V>"></a>findRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-findRange_OrdK_K_V_Map_OrdK_K_V_map__K__keyFrom__K__keyTo_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a range of values  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyFrom</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Range start (inclusive)</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyTo</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Range to (inclusive)</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">findRange</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> keyFrom, <span class="ident">K</span> keyTo)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"><span >Range of values</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keyFrom or keyTo are null</span></div></div></div><div style="display:none" id="code-findRange_OrdK_K_V_Map_OrdK_K_V_map__K__keyFrom__K__keyTo_"><div class="section_title">SOURCE</div><div class="code">
            map.FindRange(keyFrom, keyTo)</div></div></div><div class="member-title"><a name="findSeq&lt;K, V>"></a>findSeq&lt;K, V&gt;(Map&lt;K, V&gt;, K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-findSeq_K_V_Map_K_V_map__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key as an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">findSeq</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"><span >Found value</span></div></div></div><div style="display:none" id="code-findSeq_K_V_Map_K_V_map__K__key_"><div class="section_title">SOURCE</div><div class="code">
            map.FindSeq(key)</div></div></div><div class="member-title"><a name="findSeq&lt;OrdK, K, V>"></a>findSeq&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-findSeq_OrdK_K_V_Map_OrdK_K_V_map__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key as an enumerable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt; <span class="ident">findSeq</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"><span >Found value</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-findSeq_OrdK_K_V_Map_OrdK_K_V_map__K__key_"><div class="section_title">SOURCE</div><div class="code">
            map.FindSeq(key)</div></div></div><div class="member-title"><a name="fold&lt;OrdK, S, K, V>"></a>fold&lt;OrdK, S, K, V&gt;(Map&lt;OrdK, K, V&gt;, S, Func&lt;S, K, V, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_OrdK_S_K_V_Map_OrdK_K_V_map__S__state__Func_S_K_V_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically folds all items in the map (in order) using the folder function provided. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">OrdK</span>, <span class="ident">S</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-fold_OrdK_S_K_V_Map_OrdK_K_V_map__S__state__Func_S_K_V_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            map.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;OrdK, S, K, V>"></a>fold&lt;OrdK, S, K, V&gt;(Map&lt;OrdK, K, V&gt;, S, Func&lt;S, V, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_OrdK_S_K_V_Map_OrdK_K_V_map__S__state__Func_S_V_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically folds all items in the map (in order) using the folder function provided. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">OrdK</span>, <span class="ident">S</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-fold_OrdK_S_K_V_Map_OrdK_K_V_map__S__state__Func_S_V_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            map.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;S, K, V>"></a>fold&lt;S, K, V&gt;(Map&lt;K, V&gt;, S, Func&lt;S, K, V, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_S_K_V_Map_K_V_map__S__state__Func_S_K_V_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically folds all items in the map (in order) using the folder function provided. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">K</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-fold_S_K_V_Map_K_V_map__S__state__Func_S_K_V_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            map.Fold(state, folder)</div></div></div><div class="member-title"><a name="fold&lt;S, K, V>"></a>fold&lt;S, K, V&gt;(Map&lt;K, V&gt;, S, Func&lt;S, V, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_S_K_V_Map_K_V_map__S__state__Func_S_V_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically folds all items in the map (in order) using the folder function provided. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">S</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">V</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-fold_S_K_V_Map_K_V_map__S__state__Func_S_V_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            map.Fold(state, folder)</div></div></div><div class="member-title"><a name="forall&lt;K, V>"></a>forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_K_V_Map_K_V_map__Func_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if all items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-forall_K_V_Map_K_V_map__Func_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;K, V>"></a>forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;K, V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_K_V_Map_K_V_map__Func_K_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if all items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-forall_K_V_Map_K_V_map__Func_K_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;K, V>"></a>forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;Tuple&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_K_V_Map_K_V_map__Func_Tuple&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if all items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-forall_K_V_Map_K_V_map__Func_Tuple&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;K, V>"></a>forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;ValueTuple&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_K_V_Map_K_V_map__Func_ValueTuple&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if all items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-forall_K_V_Map_K_V_map__Func_ValueTuple&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;K, V>"></a>forall&lt;K, V&gt;(Map&lt;K, V&gt;, Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_K_V_Map_K_V_map__Func_KeyValuePair&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if all items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div></div><div style="display:none" id="code-forall_K_V_Map_K_V_map__Func_KeyValuePair&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;OrdK, K, V>"></a>forall&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_OrdK_K_V_Map_OrdK_K_V_map__Func_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if all items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-forall_OrdK_K_V_Map_OrdK_K_V_map__Func_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;OrdK, K, V>"></a>forall&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;K, V, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_OrdK_K_V_Map_OrdK_K_V_map__Func_K_V_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if all items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-forall_OrdK_K_V_Map_OrdK_K_V_map__Func_K_V_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;OrdK, K, V>"></a>forall&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;Tuple&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_OrdK_K_V_Map_OrdK_K_V_map__Func_Tuple&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if all items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-forall_OrdK_K_V_Map_OrdK_K_V_map__Func_Tuple&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;OrdK, K, V>"></a>forall&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;ValueTuple&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_OrdK_K_V_Map_OrdK_K_V_map__Func_ValueTuple&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if all items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-forall_OrdK_K_V_Map_OrdK_K_V_map__Func_ValueTuple&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.ForAll(pred)</div></div></div><div class="member-title"><a name="forall&lt;OrdK, K, V>"></a>forall&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Func&lt;KeyValuePair&lt;K, V&gt;, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_OrdK_K_V_Map_OrdK_K_V_map__Func_KeyValuePair&lt;K, V>_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return true if all items in the map return true when the predicate is applied </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all items in the map return true when the predicate is applied</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-forall_OrdK_K_V_Map_OrdK_K_V_map__Func_KeyValuePair&lt;K, V>_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            map.ForAll(pred)</div></div></div><div class="member-title"><a name="freeze&lt;K, V>"></a>freeze&lt;K, V&gt;(IDictionary&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-freeze_K_V_IDictionary_K_V_dict_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert any IDictionary into an immutable Map K V </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">dict</div><div class="arg-type"><span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">freeze</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; dict)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-freeze_K_V_IDictionary_K_V_dict_"><div class="section_title">SOURCE</div><div class="code">
            toMap(dict.AsEnumerable())</div></div></div><div class="member-title"><a name="Freeze&lt;K, V>"></a>Freeze&lt;K, V&gt;(IDictionary&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Freeze_K_V_IDictionary_K_V_dict_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert any IDictionary into an immutable Map K V </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">dict</div><div class="arg-type"><span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Freeze</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; dict)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Freeze_K_V_IDictionary_K_V_dict_"><div class="section_title">SOURCE</div><div class="code">
            toMap(dict.AsEnumerable())</div></div></div><div class="member-title"><a name="freeze&lt;OrdK, K, V>"></a>freeze&lt;OrdK, K, V&gt;(IDictionary&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-freeze_OrdK_K_V_IDictionary_K_V_dict_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert any IDictionary into an immutable Map K V </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">dict</div><div class="arg-type"><span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">freeze</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; dict)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-freeze_OrdK_K_V_IDictionary_K_V_dict_"><div class="section_title">SOURCE</div><div class="code">
            toMap&lt;OrdK, K, V&gt;(dict.AsEnumerable())</div></div></div><div class="member-title"><a name="Freeze&lt;OrdK, K, V>"></a>Freeze&lt;OrdK, K, V&gt;(IDictionary&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Freeze_OrdK_K_V_IDictionary_K_V_dict_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert any IDictionary into an immutable Map K V </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">dict</div><div class="arg-type"><span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">Freeze</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">IDictionary</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; dict)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-Freeze_OrdK_K_V_IDictionary_K_V_dict_"><div class="section_title">SOURCE</div><div class="code">
            toMap&lt;OrdK, K, V&gt;(dict.AsEnumerable())</div></div></div><div class="member-title"><a name="iter&lt;K, V>"></a>iter&lt;K, V&gt;(Map&lt;K, V&gt;, Action&lt;V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_K_V_Map_K_V_map__Action_V_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically iterate through all key/value pairs in the map (in order) and execute an action on each </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >Action to execute</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Action</span>&lt;<span class="ident">V</span>&gt; action)</div></div><div style="display:none" id="code-iter_K_V_Map_K_V_map__Action_V_action_"><div class="section_title">SOURCE</div><div class="code">
            map.Iter(action)</div></div></div><div class="member-title"><a name="iter&lt;K, V>"></a>iter&lt;K, V&gt;(Map&lt;K, V&gt;, Action&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_K_V_Map_K_V_map__Action_K_V_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically iterate through all key/value pairs in the map (in order) and execute an action on each </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >Action to execute</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Action</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; action)</div></div><div style="display:none" id="code-iter_K_V_Map_K_V_map__Action_K_V_action_"><div class="section_title">SOURCE</div><div class="code">
            map.Iter(action)</div></div></div><div class="member-title"><a name="iter&lt;OrdK, K, V>"></a>iter&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Action&lt;V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_OrdK_K_V_Map_OrdK_K_V_map__Action_V_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically iterate through all key/value pairs in the map (in order) and execute an action on each </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >Action to execute</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Action</span>&lt;<span class="ident">V</span>&gt; action)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-iter_OrdK_K_V_Map_OrdK_K_V_map__Action_V_action_"><div class="section_title">SOURCE</div><div class="code">
            map.Iter(action)</div></div></div><div class="member-title"><a name="iter&lt;OrdK, K, V>"></a>iter&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, Action&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_OrdK_K_V_Map_OrdK_K_V_map__Action_K_V_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically iterate through all key/value pairs in the map (in order) and execute an action on each </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >Action to execute</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">Action</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; action)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-iter_OrdK_K_V_Map_OrdK_K_V_map__Action_K_V_action_"><div class="section_title">SOURCE</div><div class="code">
            map.Iter(action)</div></div></div><div class="member-title"><a name="length&lt;K, T>"></a>length&lt;K, T&gt;(Map&lt;K, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-length_K_T_Map_K_T_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Number of items in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">length</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-length_K_T_Map_K_T_map_"><div class="section_title">SOURCE</div><div class="code">
            map.Count</div></div></div><div class="member-title"><a name="length&lt;OrdK, K, T>"></a>length&lt;OrdK, K, T&gt;(Map&lt;OrdK, K, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-length_OrdK_K_T_Map_OrdK_K_T_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Number of items in the map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">length</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">T</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">T</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-length_OrdK_K_T_Map_OrdK_K_T_map_"><div class="section_title">SOURCE</div><div class="code">
            map.Count</div></div></div><div class="member-title"><a name="map&lt;K, T, U>"></a>map&lt;K, T, U&gt;(Map&lt;K, T&gt;, Func&lt;T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_K_T_U_Map_K_T_map__Func_T_U_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically maps the map to a new map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt; <span class="ident">map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt;</div><div class="normal"><span >Mapped items in a new map</span></div></div></div><div style="display:none" id="code-map_K_T_U_Map_K_T_map__Func_T_U_f_"><div class="section_title">SOURCE</div><div class="code">
            (Map&lt;K, U&gt;)map.Select(f)</div></div></div><div class="member-title"><a name="map&lt;K, T, U>"></a>map&lt;K, T, U&gt;(Map&lt;K, T&gt;, Func&lt;K, T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_K_T_U_Map_K_T_map__Func_K_T_U_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically maps the map to a new map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt; <span class="ident">map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">U</span>&gt;</div><div class="normal"><span >Mapped items in a new map</span></div></div></div><div style="display:none" id="code-map_K_T_U_Map_K_T_map__Func_K_T_U_f_"><div class="section_title">SOURCE</div><div class="code">
            map.Select(f)</div></div></div><div class="member-title"><a name="map&lt;OrdK, K, T, U>"></a>map&lt;OrdK, K, T, U&gt;(Map&lt;OrdK, K, T&gt;, Func&lt;T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_OrdK_K_T_U_Map_OrdK_K_T_map__Func_T_U_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically maps the map to a new map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">U</span>&gt; <span class="ident">map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">T</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">U</span>&gt;</div><div class="normal"><span >Mapped items in a new map</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-map_OrdK_K_T_U_Map_OrdK_K_T_map__Func_T_U_f_"><div class="section_title">SOURCE</div><div class="code">
            (Map&lt;OrdK, K, U&gt;)map.Select(f)</div></div></div><div class="member-title"><a name="map&lt;OrdK, K, T, U>"></a>map&lt;OrdK, K, T, U&gt;(Map&lt;OrdK, K, T&gt;, Func&lt;K, T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_OrdK_K_T_U_Map_OrdK_K_T_map__Func_K_T_U_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically maps the map to a new map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">U</span>&gt; <span class="ident">map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">T</span>&gt; map, <span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">T</span>, <span class="ident">U</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">U</span>&gt;</div><div class="normal"><span >Mapped items in a new map</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-map_OrdK_K_T_U_Map_OrdK_K_T_map__Func_K_T_U_f_"><div class="section_title">SOURCE</div><div class="code">
            map.Select(f)</div></div></div><div class="member-title"><a name="remove&lt;K, V>"></a>remove&lt;K, V&gt;(Map&lt;K, V&gt;, K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-remove_K_V_Map_K_V_map__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically removes an item from the map If the key doesn&#39;t exists, the request is ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">remove</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the item removed</span></div></div></div><div style="display:none" id="code-remove_K_V_Map_K_V_map__K__key_"><div class="section_title">SOURCE</div><div class="code">
            map.Remove(key)</div></div></div><div class="member-title"><a name="remove&lt;OrdK, K, V>"></a>remove&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-remove_OrdK_K_V_Map_OrdK_K_V_map__K__key_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically removes an item from the map If the key doesn&#39;t exists, the request is ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">remove</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the item removed</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-remove_OrdK_K_V_Map_OrdK_K_V_map__K__key_"><div class="section_title">SOURCE</div><div class="code">
            map.Remove(key)</div></div></div><div class="member-title"><a name="setItem&lt;K, V>"></a>setItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-setItem_K_V_Map_K_V_map__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically updates an existing item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">setItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-setItem_K_V_Map_K_V_map__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            map.SetItem(key, value)</div></div></div><div class="member-title"><a name="setItem&lt;K, V>"></a>setItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-setItem_K_V_Map_K_V_map__K__key__Func_V_V_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key, map it to a new value, put it back. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">setItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the mapped value</span></div></div></div><div style="display:none" id="code-setItem_K_V_Map_K_V_map__K__key__Func_V_V_mapper_"><div class="section_title">SOURCE</div><div class="code">
            map.SetItem(key, mapper)</div></div></div><div class="member-title"><a name="setItem&lt;OrdK, K, V>"></a>setItem&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-setItem_OrdK_K_V_Map_OrdK_K_V_map__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically updates an existing item </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">setItem</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-setItem_OrdK_K_V_Map_OrdK_K_V_map__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            map.SetItem(key, value)</div></div></div><div class="member-title"><a name="setItem&lt;OrdK, K, V>"></a>setItem&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, Func&lt;V, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-setItem_OrdK_K_V_Map_OrdK_K_V_map__K__key__Func_V_V_mapper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Retrieve a value from the map by key, map it to a new value, put it back. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to find</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mapper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">setItem</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; mapper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the mapped value</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-setItem_OrdK_K_V_Map_OrdK_K_V_map__K__key__Func_V_V_mapper_"><div class="section_title">SOURCE</div><div class="code">
            map.SetItem(key, mapper)</div></div></div><div class="member-title"><a name="setItems&lt;K, V>"></a>setItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-setItems_K_V_Map_K_V_map__IEnumerable_Tuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the Tuples provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">setItems</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys aren&#39;t in the map</span></div></div></div><div style="display:none" id="code-setItems_K_V_Map_K_V_map__IEnumerable_Tuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            map.SetItems(items)</div></div></div><div class="member-title"><a name="setItems&lt;K, V>"></a>setItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-setItems_K_V_Map_K_V_map__IEnumerable_ValueTuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the Tuples provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">setItems</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys aren&#39;t in the map</span></div></div></div><div style="display:none" id="code-setItems_K_V_Map_K_V_map__IEnumerable_ValueTuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            map.SetItems(items)</div></div></div><div class="member-title"><a name="setItems&lt;K, V>"></a>setItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-setItems_K_V_Map_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the KeyValuePairs provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">setItems</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys aren&#39;t in the map</span></div></div></div><div style="display:none" id="code-setItems_K_V_Map_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            map.SetItems(items)</div></div></div><div class="member-title"><a name="setItems&lt;OrdK, K, V>"></a>setItems&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-setItems_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_Tuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the Tuples provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">setItems</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys aren&#39;t in the map</span></div></div></div><div style="display:none" id="code-setItems_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_Tuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            map.SetItems(items)</div></div></div><div class="member-title"><a name="setItems&lt;OrdK, K, V>"></a>setItems&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-setItems_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_ValueTuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the Tuples provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">setItems</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys aren&#39;t in the map</span></div></div></div><div style="display:none" id="code-setItems_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_ValueTuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            map.SetItems(items)</div></div></div><div class="member-title"><a name="setItems&lt;OrdK, K, V>"></a>setItems&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-setItems_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the KeyValuePairs provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">setItems</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys aren&#39;t in the map</span></div></div></div><div style="display:none" id="code-setItems_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            map.SetItems(items)</div></div></div><div class="member-title"><a name="skip&lt;K, V>"></a>skip&lt;K, V&gt;(Map&lt;K, V&gt;, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-skip_K_V_Map_K_V_map__int__amount_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Skips &#39;amount&#39; values and returns a new tree without the  skipped values. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">amount</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc"><span >Amount to skip</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">skip</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="keyword">int</span> amount)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"><span >Enumerable of map items</span></div></div></div><div style="display:none" id="code-skip_K_V_Map_K_V_map__int__amount_"><div class="section_title">SOURCE</div><div class="code">
            map.Skip(amount)</div></div></div><div class="member-title"><a name="skip&lt;OrdK, K, V>"></a>skip&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-skip_OrdK_K_V_Map_OrdK_K_V_map__int__amount_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Skips &#39;amount&#39; values and returns a new tree without the  skipped values. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">amount</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc"><span >Amount to skip</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; <span class="ident">skip</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="keyword">int</span> amount)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div><div class="normal"><span >Enumerable of map items</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-skip_OrdK_K_V_Map_OrdK_K_V_map__int__amount_"><div class="section_title">SOURCE</div><div class="code">
            map.Skip(amount)</div></div></div><div class="member-title"><a name="tryAdd&lt;K, V>"></a>tryAdd&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryAdd_K_V_Map_K_V_map__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map. If the key already exists, then the new item is ignored </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">tryAdd</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-tryAdd_K_V_Map_K_V_map__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            map.TryAdd(key, value)</div></div></div><div class="member-title"><a name="tryAdd&lt;K, V>"></a>tryAdd&lt;K, V&gt;(Map&lt;K, V&gt;, K, V, Func&lt;Map&lt;K, V&gt;, V, Map&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryAdd_K_V_Map_K_V_map__K__key__V__value__Func_Map&lt;K, V>_V_Map&lt;K, V>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map. If the key already exists then the Fail handler is called with the unaltered map  and the value already set for the key, it expects a new map returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">V</span>, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to handle failure, you&#39;re given the unaltered map  and the value already set for the key</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">tryAdd</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">V</span> value, <span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">V</span>, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-tryAdd_K_V_Map_K_V_map__K__key__V__value__Func_Map&lt;K, V>_V_Map&lt;K, V>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            map.TryAdd(key, value, Fail)</div></div></div><div class="member-title"><a name="tryAdd&lt;OrdK, K, V>"></a>tryAdd&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryAdd_OrdK_K_V_Map_OrdK_K_V_map__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map. If the key already exists, then the new item is ignored </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">tryAdd</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-tryAdd_OrdK_K_V_Map_OrdK_K_V_map__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            map.TryAdd(key, value)</div></div></div><div class="member-title"><a name="tryAdd&lt;OrdK, K, V>"></a>tryAdd&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, V, Func&lt;Map&lt;OrdK, K, V&gt;, V, Map&lt;OrdK, K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryAdd_OrdK_K_V_Map_OrdK_K_V_map__K__key__V__value__Func_Map&lt;OrdK, K, V>_V_Map&lt;OrdK, K, V>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a new item to the map. If the key already exists then the Fail handler is called with the unaltered map  and the value already set for the key, it expects a new map returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">V</span>, <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to handle failure, you&#39;re given the unaltered map  and the value already set for the key</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">tryAdd</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">V</span> value, <span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">V</span>, <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the key or value are null</span></div></div></div><div style="display:none" id="code-tryAdd_OrdK_K_V_Map_OrdK_K_V_map__K__key__V__value__Func_Map&lt;OrdK, K, V>_V_Map&lt;OrdK, K, V>_Fail_"><div class="section_title">SOURCE</div><div class="code">
            map.TryAdd(key, value, Fail)</div></div></div><div class="member-title"><a name="tryAddRange&lt;K, V>"></a>tryAddRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryAddRange_K_V_Map_K_V_map__IEnumerable_Tuple&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">tryAddRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-tryAddRange_K_V_Map_K_V_map__IEnumerable_Tuple&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            map.TryAddRange(keyValues)</div></div></div><div class="member-title"><a name="tryAddRange&lt;K, V>"></a>tryAddRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryAddRange_K_V_Map_K_V_map__IEnumerable_ValueTuple&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">tryAddRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-tryAddRange_K_V_Map_K_V_map__IEnumerable_ValueTuple&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            map.TryAddRange(keyValues)</div></div></div><div class="member-title"><a name="tryAddRange&lt;K, V>"></a>tryAddRange&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryAddRange_K_V_Map_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">tryAddRange</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-tryAddRange_K_V_Map_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            map.TryAddRange(keyValues)</div></div></div><div class="member-title"><a name="tryAddRange&lt;OrdK, K, V>"></a>tryAddRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryAddRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_Tuple&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">tryAddRange</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-tryAddRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_Tuple&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            map.TryAddRange(keyValues)</div></div></div><div class="member-title"><a name="tryAddRange&lt;OrdK, K, V>"></a>tryAddRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryAddRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_ValueTuple&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">tryAddRange</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-tryAddRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_ValueTuple&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            map.TryAddRange(keyValues)</div></div></div><div class="member-title"><a name="tryAddRange&lt;OrdK, K, V>"></a>tryAddRange&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tryAddRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_keyValues_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the map.  If any of the keys exist already then they&#39;re ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keyValues</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">tryAddRange</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; keyValues)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the items added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the keys or values are null</span></div></div></div><div style="display:none" id="code-tryAddRange_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_keyValues_"><div class="section_title">SOURCE</div><div class="code">
            map.TryAddRange(keyValues)</div></div></div><div class="member-title"><a name="trySetItem&lt;K, V>"></a>trySetItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trySetItem_K_V_Map_K_V_map__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically updates an existing item, unless it doesn&#39;t exist, in which case  it is ignored </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the value is null</span></div></div></div><div style="display:none" id="code-trySetItem_K_V_Map_K_V_map__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            map.TrySetItem(key, value)</div></div></div><div class="member-title"><a name="trySetItem&lt;K, V>"></a>trySetItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trySetItem_K_V_Map_K_V_map__K__key__Func_V_V_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets an item by first retrieving it, applying a map (Some), and then putting  it back. Silently fails if the value doesn&#39;t exist. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >delegate to map the existing value to a new one before setting</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the item set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div></div><div style="display:none" id="code-trySetItem_K_V_Map_K_V_map__K__key__Func_V_V_Some_"><div class="section_title">SOURCE</div><div class="code">
            map.TrySetItem(key, Some)</div></div></div><div class="member-title"><a name="trySetItem&lt;K, V>"></a>trySetItem&lt;K, V&gt;(Map&lt;K, V&gt;, K, Func&lt;V, V&gt;, Func&lt;Map&lt;K, V&gt;, Map&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trySetItem_K_V_Map_K_V_map__K__key__Func_V_V_Some__Func_Map&lt;K, V>_Map&lt;K, V>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets an item by first retrieving it, applying a map, and then putting it back. Calls the None delegate to return a new map if the item can&#39;t be found </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >delegate to map the existing value to a new one before setting</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >delegate to return a new map if the item can&#39;t be found</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItem</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the item set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if None returns null</span></div></div></div><div style="display:none" id="code-trySetItem_K_V_Map_K_V_map__K__key__Func_V_V_Some__Func_Map&lt;K, V>_Map&lt;K, V>_None_"><div class="section_title">SOURCE</div><div class="code">
            map.TrySetItem(key, Some, None)</div></div></div><div class="member-title"><a name="trySetItem&lt;OrdK, K, V>"></a>trySetItem&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, V)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trySetItem_OrdK_K_V_Map_OrdK_K_V_map__K__key__V__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically updates an existing item, unless it doesn&#39;t exist, in which case  it is ignored </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">V</span></div></div><div class="arg-desc"><span >Value</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItem</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">V</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New Map with the item added</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException the value is null</span></div></div></div><div style="display:none" id="code-trySetItem_OrdK_K_V_Map_OrdK_K_V_map__K__key__V__value_"><div class="section_title">SOURCE</div><div class="code">
            map.TrySetItem(key, value)</div></div></div><div class="member-title"><a name="trySetItem&lt;OrdK, K, V>"></a>trySetItem&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, Func&lt;V, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trySetItem_OrdK_K_V_Map_OrdK_K_V_map__K__key__Func_V_V_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets an item by first retrieving it, applying a map (Some), and then putting  it back. Silently fails if the value doesn&#39;t exist. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key to set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >delegate to map the existing value to a new one before setting</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItem</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the item set</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div></div><div style="display:none" id="code-trySetItem_OrdK_K_V_Map_OrdK_K_V_map__K__key__Func_V_V_Some_"><div class="section_title">SOURCE</div><div class="code">
            map.TrySetItem(key, Some)</div></div></div><div class="member-title"><a name="trySetItem&lt;OrdK, K, V>"></a>trySetItem&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, K, Func&lt;V, V&gt;, Func&lt;Map&lt;K, V&gt;, Map&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trySetItem_OrdK_K_V_Map_OrdK_K_V_map__K__key__Func_V_V_Some__Func_Map&lt;K, V>_Map&lt;K, V>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets an item by first retrieving it, applying a map, and then putting it back. Calls the None delegate to return a new map if the item can&#39;t be found </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">key</div><div class="arg-type"><span class="ident">K</span></div></div><div class="arg-desc"><span >Key</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >delegate to map the existing value to a new one before setting</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >delegate to return a new map if the item can&#39;t be found</span></div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key or a Value</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItem</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">K</span> key, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the item set</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if Some returns null</span></div></div><div class="code"><div class="member-title">Exception</div><div class="normal"><span >Throws Exception if None returns null</span></div></div></div><div style="display:none" id="code-trySetItem_OrdK_K_V_Map_OrdK_K_V_map__K__key__Func_V_V_Some__Func_Map&lt;K, V>_Map&lt;K, V>_None_"><div class="section_title">SOURCE</div><div class="code">
            map.TrySetItem(key, Some, None)</div></div></div><div class="member-title"><a name="trySetItems&lt;K, V>"></a>trySetItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trySetItems_K_V_Map_K_V_map__IEnumerable_Tuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the Tuples provided. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItems</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys aren&#39;t in the map</span></div></div></div><div style="display:none" id="code-trySetItems_K_V_Map_K_V_map__IEnumerable_Tuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            map.SetItems(items)</div></div></div><div class="member-title"><a name="trySetItems&lt;K, V>"></a>trySetItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trySetItems_K_V_Map_K_V_map__IEnumerable_ValueTuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the Tuples provided. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItems</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys aren&#39;t in the map</span></div></div></div><div style="display:none" id="code-trySetItems_K_V_Map_K_V_map__IEnumerable_ValueTuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            map.SetItems(items)</div></div></div><div class="member-title"><a name="trySetItems&lt;K, V>"></a>trySetItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trySetItems_K_V_Map_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the KeyValuePairs provided.  If any of the  items don&#39;t exist then they&#39;re silently ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItems</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div></div><div style="display:none" id="code-trySetItems_K_V_Map_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            map.TrySetItems(items)</div></div></div><div class="member-title"><a name="trySetItems&lt;K, V>"></a>trySetItems&lt;K, V&gt;(Map&lt;K, V&gt;, IEnumerable&lt;K&gt;, Func&lt;V, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trySetItems_K_V_Map_K_V_map__IEnumerable_K_keys__Func_V_V_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the keys provided to find the items and the Some delegate maps to a new value.  If the items don&#39;t exist then they&#39;re silently ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keys</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt;</div></div><div class="arg-desc"><span >Keys of items to set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >Function map the existing item to a new one</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItems</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt; keys, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div></div><div style="display:none" id="code-trySetItems_K_V_Map_K_V_map__IEnumerable_K_keys__Func_V_V_Some_"><div class="section_title">SOURCE</div><div class="code">
            map.TrySetItems(keys, Some)</div></div></div><div class="member-title"><a name="trySetItems&lt;OrdK, K, V>"></a>trySetItems&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;Tuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trySetItems_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_Tuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the Tuples provided. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItems</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys aren&#39;t in the map</span></div></div></div><div style="display:none" id="code-trySetItems_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_Tuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            map.SetItems(items)</div></div></div><div class="member-title"><a name="trySetItems&lt;OrdK, K, V>"></a>trySetItems&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;ValueTuple&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trySetItems_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_ValueTuple&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the Tuples provided. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItems</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys aren&#39;t in the map</span></div></div></div><div style="display:none" id="code-trySetItems_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_ValueTuple&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            map.SetItems(items)</div></div></div><div class="member-title"><a name="trySetItems&lt;OrdK, K, V>"></a>trySetItems&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;KeyValuePair&lt;K, V&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trySetItems_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the KeyValuePairs provided.  If any of the  items don&#39;t exist then they&#39;re silently ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</div></div><div class="arg-desc"><span >Items to set</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItems</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">KeyValuePair</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt; items)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-trySetItems_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_KeyValuePair&lt;K, V>_items_"><div class="section_title">SOURCE</div><div class="code">
            map.TrySetItems(items)</div></div></div><div class="member-title"><a name="trySetItems&lt;OrdK, K, V>"></a>trySetItems&lt;OrdK, K, V&gt;(Map&lt;OrdK, K, V&gt;, IEnumerable&lt;K&gt;, Func&lt;V, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trySetItems_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_K_keys__Func_V_V_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically sets a series of items using the keys provided to find the items and the Some delegate maps to a new value.  If the items don&#39;t exist then they&#39;re silently ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keys</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt;</div></div><div class="arg-desc"><span >Keys of items to set</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >Function map the existing item to a new one</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">trySetItems</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt; map, <span class="ident">IEnumerable</span>&lt;<span class="ident">K</span>&gt; keys, <span class="ident">Func</span>&lt;<span class="ident">V</span>, <span class="ident">V</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >New map with the items set</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OrdK</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">K</span>&gt;</div></div><div style="display:none" id="code-trySetItems_OrdK_K_V_Map_OrdK_K_V_map__IEnumerable_K_keys__Func_V_V_Some_"><div class="section_title">SOURCE</div><div class="code">
            map.TrySetItems(keys, Some)</div></div></div></div></body></html>