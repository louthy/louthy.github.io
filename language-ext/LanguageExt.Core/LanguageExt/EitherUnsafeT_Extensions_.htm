<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="EitherUnsafeT_Extensions_.htm">EitherUnsafeT_Extensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#AppendT&lt;SEMI, L, A>">AppendT&lt;SEMI, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#AppendT&lt;SEMI, L, A>">AppendT&lt;SEMI, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#AppendT&lt;SEMI, L, A>">AppendT&lt;SEMI, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#AppendT&lt;SEMI, L, A>">AppendT&lt;SEMI, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#AppendT&lt;SEMI, L, A>">AppendT&lt;SEMI, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#AppendT&lt;SEMI, L, A>">AppendT&lt;SEMI, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#AppendT&lt;SEMI, L, A>">AppendT&lt;SEMI, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#AppendT&lt;SEMI, L, A>">AppendT&lt;SEMI, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#AppendT&lt;SEMI, L, A>">AppendT&lt;SEMI, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#AppendT&lt;SEMI, L, A>">AppendT&lt;SEMI, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#AppendT&lt;SEMI, L, A>">AppendT&lt;SEMI, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#AppendT&lt;SEMI, L, A>">AppendT&lt;SEMI, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#AppendT&lt;SEMI, L, A>">AppendT&lt;SEMI, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#AppendT&lt;SEMI, L, A>">AppendT&lt;SEMI, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B, C>">ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B, C>">ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B, C>">ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B, C>">ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B, C>">ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B, C>">ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B, C>">ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B, C>">ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B, C>">ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B, C>">ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B, C>">ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B, C>">ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B, C>">ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B, C>">ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B>">ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B>">ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B>">ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B>">ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B>">ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B>">ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B>">ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B>">ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B>">ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B>">ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B>">ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B>">ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B>">ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ApplyT&lt;L, A, B>">ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#BindT&lt;L, A, B>">BindT&lt;L, A, B&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#BindT&lt;L, A, B>">BindT&lt;L, A, B&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#BindT&lt;L, A, B>">BindT&lt;L, A, B&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#BindT&lt;L, A, B>">BindT&lt;L, A, B&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#BindT&lt;L, A, B>">BindT&lt;L, A, B&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#BindT&lt;L, A, B>">BindT&lt;L, A, B&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#BindT&lt;L, A, B>">BindT&lt;L, A, B&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#BindT&lt;L, A, B>">BindT&lt;L, A, B&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#BindT&lt;L, A, B>">BindT&lt;L, A, B&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#BindT&lt;L, A, B>">BindT&lt;L, A, B&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#BindT&lt;L, A, B>">BindT&lt;L, A, B&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#BindT&lt;L, A, B>">BindT&lt;L, A, B&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#BindT&lt;L, A, B>">BindT&lt;L, A, B&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#BindT&lt;L, A, B>">BindT&lt;L, A, B&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)</a><a class="nav-link" href="#CompareT&lt;ORD, L, A>">CompareT&lt;ORD, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CompareT&lt;ORD, L, A>">CompareT&lt;ORD, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CompareT&lt;ORD, L, A>">CompareT&lt;ORD, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CompareT&lt;ORD, L, A>">CompareT&lt;ORD, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CompareT&lt;ORD, L, A>">CompareT&lt;ORD, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CompareT&lt;ORD, L, A>">CompareT&lt;ORD, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CompareT&lt;ORD, L, A>">CompareT&lt;ORD, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CompareT&lt;ORD, L, A>">CompareT&lt;ORD, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CompareT&lt;ORD, L, A>">CompareT&lt;ORD, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CompareT&lt;ORD, L, A>">CompareT&lt;ORD, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CompareT&lt;ORD, L, A>">CompareT&lt;ORD, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CompareT&lt;ORD, L, A>">CompareT&lt;ORD, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CompareT&lt;ORD, L, A>">CompareT&lt;ORD, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CompareT&lt;ORD, L, A>">CompareT&lt;ORD, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CountT&lt;L, A>">CountT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CountT&lt;L, A>">CountT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CountT&lt;L, A>">CountT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CountT&lt;L, A>">CountT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CountT&lt;L, A>">CountT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CountT&lt;L, A>">CountT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CountT&lt;L, A>">CountT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CountT&lt;L, A>">CountT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CountT&lt;L, A>">CountT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CountT&lt;L, A>">CountT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CountT&lt;L, A>">CountT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CountT&lt;L, A>">CountT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CountT&lt;L, A>">CountT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#CountT&lt;L, A>">CountT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#DivideT&lt;NUM, L, A>">DivideT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#DivideT&lt;NUM, L, A>">DivideT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#DivideT&lt;NUM, L, A>">DivideT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#DivideT&lt;NUM, L, A>">DivideT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#DivideT&lt;NUM, L, A>">DivideT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#DivideT&lt;NUM, L, A>">DivideT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#DivideT&lt;NUM, L, A>">DivideT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#DivideT&lt;NUM, L, A>">DivideT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#DivideT&lt;NUM, L, A>">DivideT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#DivideT&lt;NUM, L, A>">DivideT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#DivideT&lt;NUM, L, A>">DivideT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#DivideT&lt;NUM, L, A>">DivideT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#DivideT&lt;NUM, L, A>">DivideT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#DivideT&lt;NUM, L, A>">DivideT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#EqualsT&lt;EQ, L, A>">EqualsT&lt;EQ, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#EqualsT&lt;EQ, L, A>">EqualsT&lt;EQ, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#EqualsT&lt;EQ, L, A>">EqualsT&lt;EQ, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#EqualsT&lt;EQ, L, A>">EqualsT&lt;EQ, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#EqualsT&lt;EQ, L, A>">EqualsT&lt;EQ, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#EqualsT&lt;EQ, L, A>">EqualsT&lt;EQ, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#EqualsT&lt;EQ, L, A>">EqualsT&lt;EQ, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#EqualsT&lt;EQ, L, A>">EqualsT&lt;EQ, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#EqualsT&lt;EQ, L, A>">EqualsT&lt;EQ, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#EqualsT&lt;EQ, L, A>">EqualsT&lt;EQ, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#EqualsT&lt;EQ, L, A>">EqualsT&lt;EQ, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#EqualsT&lt;EQ, L, A>">EqualsT&lt;EQ, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#EqualsT&lt;EQ, L, A>">EqualsT&lt;EQ, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#EqualsT&lt;EQ, L, A>">EqualsT&lt;EQ, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ExistsT&lt;L, A>">ExistsT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ExistsT&lt;L, A>">ExistsT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ExistsT&lt;L, A>">ExistsT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ExistsT&lt;L, A>">ExistsT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ExistsT&lt;L, A>">ExistsT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ExistsT&lt;L, A>">ExistsT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ExistsT&lt;L, A>">ExistsT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ExistsT&lt;L, A>">ExistsT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ExistsT&lt;L, A>">ExistsT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ExistsT&lt;L, A>">ExistsT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ExistsT&lt;L, A>">ExistsT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ExistsT&lt;L, A>">ExistsT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ExistsT&lt;L, A>">ExistsT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ExistsT&lt;L, A>">ExistsT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterT&lt;L, A>">FilterT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterT&lt;L, A>">FilterT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterT&lt;L, A>">FilterT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterT&lt;L, A>">FilterT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterT&lt;L, A>">FilterT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterT&lt;L, A>">FilterT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterT&lt;L, A>">FilterT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterT&lt;L, A>">FilterT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterT&lt;L, A>">FilterT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterT&lt;L, A>">FilterT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterT&lt;L, A>">FilterT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterT&lt;L, A>">FilterT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterT&lt;L, A>">FilterT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FilterT&lt;L, A>">FilterT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#FoldBackT&lt;S, L, A>">FoldBackT&lt;S, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackT&lt;S, L, A>">FoldBackT&lt;S, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackT&lt;S, L, A>">FoldBackT&lt;S, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackT&lt;S, L, A>">FoldBackT&lt;S, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackT&lt;S, L, A>">FoldBackT&lt;S, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackT&lt;S, L, A>">FoldBackT&lt;S, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackT&lt;S, L, A>">FoldBackT&lt;S, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackT&lt;S, L, A>">FoldBackT&lt;S, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackT&lt;S, L, A>">FoldBackT&lt;S, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackT&lt;S, L, A>">FoldBackT&lt;S, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackT&lt;S, L, A>">FoldBackT&lt;S, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackT&lt;S, L, A>">FoldBackT&lt;S, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackT&lt;S, L, A>">FoldBackT&lt;S, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackT&lt;S, L, A>">FoldBackT&lt;S, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldT&lt;S, L, A>">FoldT&lt;S, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldT&lt;S, L, A>">FoldT&lt;S, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldT&lt;S, L, A>">FoldT&lt;S, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldT&lt;S, L, A>">FoldT&lt;S, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldT&lt;S, L, A>">FoldT&lt;S, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldT&lt;S, L, A>">FoldT&lt;S, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldT&lt;S, L, A>">FoldT&lt;S, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldT&lt;S, L, A>">FoldT&lt;S, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldT&lt;S, L, A>">FoldT&lt;S, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldT&lt;S, L, A>">FoldT&lt;S, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldT&lt;S, L, A>">FoldT&lt;S, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldT&lt;S, L, A>">FoldT&lt;S, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldT&lt;S, L, A>">FoldT&lt;S, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldT&lt;S, L, A>">FoldT&lt;S, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#ForAllT&lt;L, A>">ForAllT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAllT&lt;L, A>">ForAllT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAllT&lt;L, A>">ForAllT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAllT&lt;L, A>">ForAllT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAllT&lt;L, A>">ForAllT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAllT&lt;L, A>">ForAllT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAllT&lt;L, A>">ForAllT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAllT&lt;L, A>">ForAllT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAllT&lt;L, A>">ForAllT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAllT&lt;L, A>">ForAllT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAllT&lt;L, A>">ForAllT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAllT&lt;L, A>">ForAllT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAllT&lt;L, A>">ForAllT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAllT&lt;L, A>">ForAllT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#IterT&lt;L, A>">IterT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#IterT&lt;L, A>">IterT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#IterT&lt;L, A>">IterT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#IterT&lt;L, A>">IterT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#IterT&lt;L, A>">IterT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#IterT&lt;L, A>">IterT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#IterT&lt;L, A>">IterT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#IterT&lt;L, A>">IterT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#IterT&lt;L, A>">IterT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#IterT&lt;L, A>">IterT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#IterT&lt;L, A>">IterT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#IterT&lt;L, A>">IterT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#IterT&lt;L, A>">IterT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#IterT&lt;L, A>">IterT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#MapT&lt;L, A, B>">MapT&lt;L, A, B&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#MapT&lt;L, A, B>">MapT&lt;L, A, B&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#MapT&lt;L, A, B>">MapT&lt;L, A, B&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#MapT&lt;L, A, B>">MapT&lt;L, A, B&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#MapT&lt;L, A, B>">MapT&lt;L, A, B&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#MapT&lt;L, A, B>">MapT&lt;L, A, B&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#MapT&lt;L, A, B>">MapT&lt;L, A, B&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#MapT&lt;L, A, B>">MapT&lt;L, A, B&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#MapT&lt;L, A, B>">MapT&lt;L, A, B&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#MapT&lt;L, A, B>">MapT&lt;L, A, B&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#MapT&lt;L, A, B>">MapT&lt;L, A, B&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#MapT&lt;L, A, B>">MapT&lt;L, A, B&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#MapT&lt;L, A, B>">MapT&lt;L, A, B&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#MapT&lt;L, A, B>">MapT&lt;L, A, B&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#PlusT&lt;NUM, L, A>">PlusT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#PlusT&lt;NUM, L, A>">PlusT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#PlusT&lt;NUM, L, A>">PlusT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#PlusT&lt;NUM, L, A>">PlusT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#PlusT&lt;NUM, L, A>">PlusT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#PlusT&lt;NUM, L, A>">PlusT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#PlusT&lt;NUM, L, A>">PlusT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#PlusT&lt;NUM, L, A>">PlusT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#PlusT&lt;NUM, L, A>">PlusT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#PlusT&lt;NUM, L, A>">PlusT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#PlusT&lt;NUM, L, A>">PlusT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#PlusT&lt;NUM, L, A>">PlusT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#PlusT&lt;NUM, L, A>">PlusT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#PlusT&lt;NUM, L, A>">PlusT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ProductT&lt;NUM, L, A>">ProductT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ProductT&lt;NUM, L, A>">ProductT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ProductT&lt;NUM, L, A>">ProductT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ProductT&lt;NUM, L, A>">ProductT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ProductT&lt;NUM, L, A>">ProductT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ProductT&lt;NUM, L, A>">ProductT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ProductT&lt;NUM, L, A>">ProductT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ProductT&lt;NUM, L, A>">ProductT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ProductT&lt;NUM, L, A>">ProductT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ProductT&lt;NUM, L, A>">ProductT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ProductT&lt;NUM, L, A>">ProductT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ProductT&lt;NUM, L, A>">ProductT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ProductT&lt;NUM, L, A>">ProductT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#ProductT&lt;NUM, L, A>">ProductT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#Select&lt;L, A, B>">Select&lt;L, A, B&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Select&lt;L, A, B>">Select&lt;L, A, B&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Select&lt;L, A, B>">Select&lt;L, A, B&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Select&lt;L, A, B>">Select&lt;L, A, B&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Select&lt;L, A, B>">Select&lt;L, A, B&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Select&lt;L, A, B>">Select&lt;L, A, B&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Select&lt;L, A, B>">Select&lt;L, A, B&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Select&lt;L, A, B>">Select&lt;L, A, B&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Select&lt;L, A, B>">Select&lt;L, A, B&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Select&lt;L, A, B>">Select&lt;L, A, B&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Select&lt;L, A, B>">Select&lt;L, A, B&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Select&lt;L, A, B>">Select&lt;L, A, B&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Select&lt;L, A, B>">Select&lt;L, A, B&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Select&lt;L, A, B>">Select&lt;L, A, B&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#SelectMany&lt;L, A, B, C>">SelectMany&lt;L, A, B, C&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#SelectMany&lt;L, A, B, C>">SelectMany&lt;L, A, B, C&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#SelectMany&lt;L, A, B, C>">SelectMany&lt;L, A, B, C&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#SelectMany&lt;L, A, B, C>">SelectMany&lt;L, A, B, C&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#SelectMany&lt;L, A, B, C>">SelectMany&lt;L, A, B, C&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#SelectMany&lt;L, A, B, C>">SelectMany&lt;L, A, B, C&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#SelectMany&lt;L, A, B, C>">SelectMany&lt;L, A, B, C&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#SelectMany&lt;L, A, B, C>">SelectMany&lt;L, A, B, C&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#SelectMany&lt;L, A, B, C>">SelectMany&lt;L, A, B, C&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#SelectMany&lt;L, A, B, C>">SelectMany&lt;L, A, B, C&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#SelectMany&lt;L, A, B, C>">SelectMany&lt;L, A, B, C&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#SelectMany&lt;L, A, B, C>">SelectMany&lt;L, A, B, C&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#SelectMany&lt;L, A, B, C>">SelectMany&lt;L, A, B, C&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#SelectMany&lt;L, A, B, C>">SelectMany&lt;L, A, B, C&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#Sequence&lt;L, A>">Sequence&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#Sequence&lt;L, A>">Sequence&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#Sequence&lt;L, A>">Sequence&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#Sequence&lt;L, A>">Sequence&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#Sequence&lt;L, A>">Sequence&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#Sequence&lt;L, A>">Sequence&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#Sequence&lt;L, A>">Sequence&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#Sequence&lt;L, A>">Sequence&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#Sequence&lt;L, A>">Sequence&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#Sequence&lt;L, A>">Sequence&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#Sequence&lt;L, A>">Sequence&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#Sequence&lt;L, A>">Sequence&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#Sequence&lt;L, A>">Sequence&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#Sequence&lt;L, A>">Sequence&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SubtractT&lt;NUM, L, A>">SubtractT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SubtractT&lt;NUM, L, A>">SubtractT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SubtractT&lt;NUM, L, A>">SubtractT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SubtractT&lt;NUM, L, A>">SubtractT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SubtractT&lt;NUM, L, A>">SubtractT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SubtractT&lt;NUM, L, A>">SubtractT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SubtractT&lt;NUM, L, A>">SubtractT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SubtractT&lt;NUM, L, A>">SubtractT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SubtractT&lt;NUM, L, A>">SubtractT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SubtractT&lt;NUM, L, A>">SubtractT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SubtractT&lt;NUM, L, A>">SubtractT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SubtractT&lt;NUM, L, A>">SubtractT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SubtractT&lt;NUM, L, A>">SubtractT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SubtractT&lt;NUM, L, A>">SubtractT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SumT&lt;NumA, L, A>">SumT&lt;NumA, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SumT&lt;NumA, L, A>">SumT&lt;NumA, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SumT&lt;NumA, L, A>">SumT&lt;NumA, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SumT&lt;NumA, L, A>">SumT&lt;NumA, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SumT&lt;NumA, L, A>">SumT&lt;NumA, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SumT&lt;NumA, L, A>">SumT&lt;NumA, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SumT&lt;NumA, L, A>">SumT&lt;NumA, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SumT&lt;NumA, L, A>">SumT&lt;NumA, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SumT&lt;NumA, L, A>">SumT&lt;NumA, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SumT&lt;NumA, L, A>">SumT&lt;NumA, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SumT&lt;NumA, L, A>">SumT&lt;NumA, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SumT&lt;NumA, L, A>">SumT&lt;NumA, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SumT&lt;NumA, L, A>">SumT&lt;NumA, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#SumT&lt;NumA, L, A>">SumT&lt;NumA, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)</a><a class="nav-link" href="#Traverse&lt;L, A, B>">Traverse&lt;L, A, B&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Traverse&lt;L, A, B>">Traverse&lt;L, A, B&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Traverse&lt;L, A, B>">Traverse&lt;L, A, B&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Traverse&lt;L, A, B>">Traverse&lt;L, A, B&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Traverse&lt;L, A, B>">Traverse&lt;L, A, B&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Traverse&lt;L, A, B>">Traverse&lt;L, A, B&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Traverse&lt;L, A, B>">Traverse&lt;L, A, B&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Traverse&lt;L, A, B>">Traverse&lt;L, A, B&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Traverse&lt;L, A, B>">Traverse&lt;L, A, B&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Traverse&lt;L, A, B>">Traverse&lt;L, A, B&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Traverse&lt;L, A, B>">Traverse&lt;L, A, B&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Traverse&lt;L, A, B>">Traverse&lt;L, A, B&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Traverse&lt;L, A, B>">Traverse&lt;L, A, B&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Traverse&lt;L, A, B>">Traverse&lt;L, A, B&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Where&lt;L, A>">Where&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Where&lt;L, A>">Where&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Where&lt;L, A>">Where&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Where&lt;L, A>">Where&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Where&lt;L, A>">Where&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Where&lt;L, A>">Where&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Where&lt;L, A>">Where&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Where&lt;L, A>">Where&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Where&lt;L, A>">Where&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Where&lt;L, A>">Where&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Where&lt;L, A>">Where&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Where&lt;L, A>">Where&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Where&lt;L, A>">Where&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Where&lt;L, A>">Where&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)</a></div><div class="content-panel"><h1 >EitherUnsafeT_Extensions Class</h1><p ><span >Monad transformer for EitherUnsafe, provides functionality for working  with the inner value of the nested type. </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">EitherUnsafeT_Extensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="AppendT&lt;SEMI, L, A>"></a>AppendT&lt;SEMI, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AppendT_SEMI_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">AppendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `append` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AppendT_SEMI_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="AppendT&lt;SEMI, L, A>"></a>AppendT&lt;SEMI, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AppendT_SEMI_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">AppendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `append` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AppendT_SEMI_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="AppendT&lt;SEMI, L, A>"></a>AppendT&lt;SEMI, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AppendT_SEMI_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">AppendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `append` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AppendT_SEMI_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="AppendT&lt;SEMI, L, A>"></a>AppendT&lt;SEMI, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AppendT_SEMI_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">AppendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Option&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `append` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AppendT_SEMI_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="AppendT&lt;SEMI, L, A>"></a>AppendT&lt;SEMI, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AppendT_SEMI_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">AppendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `append` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AppendT_SEMI_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="AppendT&lt;SEMI, L, A>"></a>AppendT&lt;SEMI, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AppendT_SEMI_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">AppendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `append` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AppendT_SEMI_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="AppendT&lt;SEMI, L, A>"></a>AppendT&lt;SEMI, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AppendT_SEMI_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">AppendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `append` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AppendT_SEMI_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="AppendT&lt;SEMI, L, A>"></a>AppendT&lt;SEMI, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AppendT_SEMI_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">AppendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Task&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `append` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AppendT_SEMI_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="AppendT&lt;SEMI, L, A>"></a>AppendT&lt;SEMI, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AppendT_SEMI_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">AppendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Try&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `append` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AppendT_SEMI_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="AppendT&lt;SEMI, L, A>"></a>AppendT&lt;SEMI, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AppendT_SEMI_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">AppendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `append` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AppendT_SEMI_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="AppendT&lt;SEMI, L, A>"></a>AppendT&lt;SEMI, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AppendT_SEMI_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">AppendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `append` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AppendT_SEMI_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="AppendT&lt;SEMI, L, A>"></a>AppendT&lt;SEMI, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AppendT_SEMI_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">AppendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `append` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AppendT_SEMI_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="AppendT&lt;SEMI, L, A>"></a>AppendT&lt;SEMI, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AppendT_SEMI_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">AppendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `append` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AppendT_SEMI_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="AppendT&lt;SEMI, L, A>"></a>AppendT&lt;SEMI, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AppendT_SEMI_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Semigroup append operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">AppendT</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Set&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `append` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-AppendT_SEMI_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(SEMI).Append, x, y)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B, C>"></a>ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_C_Func_A_B_C_fabc__Arr_EitherUnsafe&lt;L, A>_fa__Arr_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa and fb to fabc </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Arr&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fabc(fa, fb)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_C_Func_A_B_C_fabc__Arr_EitherUnsafe&lt;L, A>_fa__Arr_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            FArr&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MArr&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B, C>"></a>ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_C_Func_A_B_C_fabc__HashSet_EitherUnsafe&lt;L, A>_fa__HashSet_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa and fb to fabc </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Monad of HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fabc(fa, fb)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_C_Func_A_B_C_fabc__HashSet_EitherUnsafe&lt;L, A>_fa__HashSet_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            FHashSet&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MHashSet&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B, C>"></a>ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_C_Func_A_B_C_fabc__Lst_EitherUnsafe&lt;L, A>_fa__Lst_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa and fb to fabc </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Lst&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fabc(fa, fb)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_C_Func_A_B_C_fabc__Lst_EitherUnsafe&lt;L, A>_fa__Lst_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            FLst&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MLst&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B, C>"></a>ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_C_Func_A_B_C_fabc__Option_EitherUnsafe&lt;L, A>_fa__Option_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa and fb to fabc </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Option&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fabc(fa, fb)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_C_Func_A_B_C_fabc__Option_EitherUnsafe&lt;L, A>_fa__Option_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            FOption&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MOption&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B, C>"></a>ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_C_Func_A_B_C_fabc__OptionUnsafe_EitherUnsafe&lt;L, A>_fa__OptionUnsafe_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa and fb to fabc </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Monad of OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fabc(fa, fb)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_C_Func_A_B_C_fabc__OptionUnsafe_EitherUnsafe&lt;L, A>_fa__OptionUnsafe_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            FOptionUnsafe&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MOptionUnsafe&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B, C>"></a>ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_C_Func_A_B_C_fabc__Either_L_EitherUnsafe&lt;L, A>_fa__Either_L_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa and fb to fabc </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fabc(fa, fb)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_C_Func_A_B_C_fabc__Either_L_EitherUnsafe&lt;L, A>_fa__Either_L_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            FEither&lt;L, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MEither&lt;L, Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B, C>"></a>ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_C_Func_A_B_C_fabc__EitherUnsafe_L_EitherUnsafe&lt;L, A>_fa__EitherUnsafe_L_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa and fb to fabc </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Monad of EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fabc(fa, fb)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_C_Func_A_B_C_fabc__EitherUnsafe_L_EitherUnsafe&lt;L, A>_fa__EitherUnsafe_L_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            FEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MEitherUnsafe&lt;L, Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B, C>"></a>ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_C_Func_A_B_C_fabc__Task_EitherUnsafe&lt;L, A>_fa__Task_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa and fb to fabc </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Task&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fabc(fa, fb)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_C_Func_A_B_C_fabc__Task_EitherUnsafe&lt;L, A>_fa__Task_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            FTask&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MTask&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B, C>"></a>ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_C_Func_A_B_C_fabc__Try_EitherUnsafe&lt;L, A>_fa__Try_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa and fb to fabc </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Try&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fabc(fa, fb)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_C_Func_A_B_C_fabc__Try_EitherUnsafe&lt;L, A>_fa__Try_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            FTry&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MTry&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B, C>"></a>ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_C_Func_A_B_C_fabc__TryAsync_EitherUnsafe&lt;L, A>_fa__TryAsync_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa and fb to fabc </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Monad of TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fabc(fa, fb)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_C_Func_A_B_C_fabc__TryAsync_EitherUnsafe&lt;L, A>_fa__TryAsync_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            FTryAsync&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MTryAsync&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B, C>"></a>ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_C_Func_A_B_C_fabc__TryOption_EitherUnsafe&lt;L, A>_fa__TryOption_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa and fb to fabc </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Monad of TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fabc(fa, fb)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_C_Func_A_B_C_fabc__TryOption_EitherUnsafe&lt;L, A>_fa__TryOption_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            FTryOption&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MTryOption&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B, C>"></a>ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_C_Func_A_B_C_fabc__TryOptionAsync_EitherUnsafe&lt;L, A>_fa__TryOptionAsync_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa and fb to fabc </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Monad of TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fabc(fa, fb)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_C_Func_A_B_C_fabc__TryOptionAsync_EitherUnsafe&lt;L, A>_fa__TryOptionAsync_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            FTryOptionAsync&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MTryOptionAsync&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B, C>"></a>ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_C_Func_A_B_C_fabc__IEnumerable_EitherUnsafe&lt;L, A>_fa__IEnumerable_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa and fb to fabc </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Monad of IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fabc(fa, fb)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_C_Func_A_B_C_fabc__IEnumerable_EitherUnsafe&lt;L, A>_fa__IEnumerable_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            FSeq&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MSeq&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B, C>"></a>ApplyT&lt;L, A, B, C&gt;(Func&lt;A, B, C&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_C_Func_A_B_C_fabc__Set_EitherUnsafe&lt;L, A>_fa__Set_EitherUnsafe&lt;L, B>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa and fb to fabc </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Set&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fabc(fa, fb)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_C_Func_A_B_C_fabc__Set_EitherUnsafe&lt;L, A>_fa__Set_EitherUnsafe&lt;L, B>_fb_"><div class="section_title">SOURCE</div><div class="code">
            FSet&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;.Inst.Apply(
                MSet&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, Func&lt;EitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, C&gt;&gt;&gt;&gt;.Inst.Return(
                    (EitherUnsafe&lt;L, A&gt; a) =&gt;
                        (EitherUnsafe&lt;L, B&gt; b) =&gt;
                            FEitherUnsafe&lt;L, A, B, C&gt;.Inst.Apply(
                                MEitherUnsafe&lt;L, Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), a, b)), fa, fb)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B>"></a>ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_Func_A_B_fab__Arr_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa to fab </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Arr&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fab(fa)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_Func_A_B_fab__Arr_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            FArr&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MArr&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B>"></a>ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_Func_A_B_fab__HashSet_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa to fab </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fab(fa)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_Func_A_B_fab__HashSet_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            FHashSet&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MHashSet&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B>"></a>ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_Func_A_B_fab__Lst_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa to fab </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Lst&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fab(fa)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_Func_A_B_fab__Lst_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            FLst&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MLst&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B>"></a>ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_Func_A_B_fab__Option_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa to fab </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Option&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fab(fa)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_Func_A_B_fab__Option_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            FOption&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MOption&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B>"></a>ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_Func_A_B_fab__OptionUnsafe_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa to fab </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fab(fa)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_Func_A_B_fab__OptionUnsafe_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            FOptionUnsafe&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MOptionUnsafe&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B>"></a>ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_Func_A_B_fab__Either_L_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa to fab </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fab(fa)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_Func_A_B_fab__Either_L_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            FEither&lt;L, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MEither&lt;L, Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B>"></a>ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_Func_A_B_fab__EitherUnsafe_L_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa to fab </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fab(fa)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_Func_A_B_fab__EitherUnsafe_L_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            FEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MEitherUnsafe&lt;L, Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B>"></a>ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_Func_A_B_fab__Task_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa to fab </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Task&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fab(fa)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_Func_A_B_fab__Task_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTask&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MTask&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B>"></a>ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_Func_A_B_fab__Try_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa to fab </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Try&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fab(fa)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_Func_A_B_fab__Try_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTry&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MTry&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B>"></a>ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_Func_A_B_fab__TryAsync_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa to fab </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fab(fa)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_Func_A_B_fab__TryAsync_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryAsync&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MTryAsync&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B>"></a>ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_Func_A_B_fab__TryOption_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa to fab </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fab(fa)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_Func_A_B_fab__TryOption_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryOption&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MTryOption&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B>"></a>ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_Func_A_B_fab__TryOptionAsync_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa to fab </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fab(fa)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_Func_A_B_fab__TryOptionAsync_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            FTryOptionAsync&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MTryOptionAsync&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B>"></a>ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_Func_A_B_fab__IEnumerable_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa to fab </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fab(fa)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_Func_A_B_fab__IEnumerable_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            FSeq&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MSeq&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="ApplyT&lt;L, A, B>"></a>ApplyT&lt;L, A, B&gt;(Func&lt;A, B&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ApplyT_L_A_B_Func_A_B_fab__Set_EitherUnsafe&lt;L, A>_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply fa to fab </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Functor</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">Monad of Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">ApplyT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Set&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing fab(fa)</span></div></div></div><div style="display:none" id="code-ApplyT_L_A_B_Func_A_B_fab__Set_EitherUnsafe&lt;L, A>_fa_"><div class="section_title">SOURCE</div><div class="code">
            FSet&lt; EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;.Inst.Apply(
                 MSet&lt; Func&lt;EitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, B&gt;&gt;&gt;.Inst.Return((EitherUnsafe&lt;L, A&gt; a) =&gt; FEitherUnsafe&lt;L, A, B&gt;.Inst.Apply(
                     MEitherUnsafe&lt;L, Func&lt;A, B&gt;&gt;.Inst.Return(fab), 
                     a)),
                 fa)</div></div></div><div class="member-title"><a name="BindT&lt;L, A, B>"></a>BindT&lt;L, A, B&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindT_L_A_B_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">BindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Arr&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-BindT_L_A_B_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MArr&lt;EitherUnsafe&lt;L, B&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="BindT&lt;L, A, B>"></a>BindT&lt;L, A, B&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindT_L_A_B_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">BindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-BindT_L_A_B_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MHashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="BindT&lt;L, A, B>"></a>BindT&lt;L, A, B&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindT_L_A_B_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">BindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Lst&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-BindT_L_A_B_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MLst&lt;EitherUnsafe&lt;L, B&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="BindT&lt;L, A, B>"></a>BindT&lt;L, A, B&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindT_L_A_B_Option_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Option&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">BindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Option&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-BindT_L_A_B_Option_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MOption&lt;EitherUnsafe&lt;L, B&gt;&gt;, Option&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="BindT&lt;L, A, B>"></a>BindT&lt;L, A, B&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindT_L_A_B_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">BindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-BindT_L_A_B_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="BindT&lt;L, A, B>"></a>BindT&lt;L, A, B&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindT_L_A_B_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">BindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-BindT_L_A_B_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MEither&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="BindT&lt;L, A, B>"></a>BindT&lt;L, A, B&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindT_L_A_B_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">BindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-BindT_L_A_B_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="BindT&lt;L, A, B>"></a>BindT&lt;L, A, B&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindT_L_A_B_Task_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Task&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">BindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Task&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-BindT_L_A_B_Task_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTask&lt;EitherUnsafe&lt;L, B&gt;&gt;, Task&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="BindT&lt;L, A, B>"></a>BindT&lt;L, A, B&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindT_L_A_B_Try_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Try&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">BindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Try&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-BindT_L_A_B_Try_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTry&lt;EitherUnsafe&lt;L, B&gt;&gt;, Try&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="BindT&lt;L, A, B>"></a>BindT&lt;L, A, B&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindT_L_A_B_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">BindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-BindT_L_A_B_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="BindT&lt;L, A, B>"></a>BindT&lt;L, A, B&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindT_L_A_B_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">BindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-BindT_L_A_B_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="BindT&lt;L, A, B>"></a>BindT&lt;L, A, B&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindT_L_A_B_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">BindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-BindT_L_A_B_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="BindT&lt;L, A, B>"></a>BindT&lt;L, A, B&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindT_L_A_B_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">BindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-BindT_L_A_B_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MSeq&lt;EitherUnsafe&lt;L, B&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="BindT&lt;L, A, B>"></a>BindT&lt;L, A, B&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindT_L_A_B_Set_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Set&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">BindT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Set&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-BindT_L_A_B_Set_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MSet&lt;EitherUnsafe&lt;L, B&gt;&gt;, Set&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="CompareT&lt;ORD, L, A>"></a>CompareT&lt;ORD, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareT_ORD_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ord compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CompareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `compare` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-CompareT_ORD_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="CompareT&lt;ORD, L, A>"></a>CompareT&lt;ORD, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareT_ORD_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ord compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CompareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `compare` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-CompareT_ORD_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="CompareT&lt;ORD, L, A>"></a>CompareT&lt;ORD, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareT_ORD_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ord compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CompareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `compare` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-CompareT_ORD_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="CompareT&lt;ORD, L, A>"></a>CompareT&lt;ORD, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareT_ORD_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ord compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CompareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Option&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `compare` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-CompareT_ORD_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="CompareT&lt;ORD, L, A>"></a>CompareT&lt;ORD, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareT_ORD_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ord compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CompareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `compare` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-CompareT_ORD_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="CompareT&lt;ORD, L, A>"></a>CompareT&lt;ORD, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareT_ORD_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ord compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CompareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `compare` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-CompareT_ORD_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="CompareT&lt;ORD, L, A>"></a>CompareT&lt;ORD, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareT_ORD_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ord compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CompareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `compare` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-CompareT_ORD_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="CompareT&lt;ORD, L, A>"></a>CompareT&lt;ORD, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareT_ORD_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ord compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CompareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Task&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `compare` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-CompareT_ORD_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="CompareT&lt;ORD, L, A>"></a>CompareT&lt;ORD, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareT_ORD_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ord compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CompareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Try&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `compare` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-CompareT_ORD_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="CompareT&lt;ORD, L, A>"></a>CompareT&lt;ORD, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareT_ORD_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ord compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CompareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `compare` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-CompareT_ORD_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="CompareT&lt;ORD, L, A>"></a>CompareT&lt;ORD, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareT_ORD_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ord compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CompareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `compare` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-CompareT_ORD_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="CompareT&lt;ORD, L, A>"></a>CompareT&lt;ORD, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareT_ORD_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ord compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CompareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `compare` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-CompareT_ORD_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="CompareT&lt;ORD, L, A>"></a>CompareT&lt;ORD, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareT_ORD_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ord compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CompareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `compare` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-CompareT_ORD_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="CompareT&lt;ORD, L, A>"></a>CompareT&lt;ORD, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareT_ORD_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ord compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CompareT</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Set&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x `compare` y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-CompareT_ORD_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(ORD).Compare, x, y).FoldT(0,(_, v) =&gt; v)</div></div></div><div class="member-title"><a name="CountT&lt;L, A>"></a>CountT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountT_L_A_Arr_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the count operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CountT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of As in Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-CountT_L_A_Arr_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="CountT&lt;L, A>"></a>CountT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the count operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CountT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of As in HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-CountT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="CountT&lt;L, A>"></a>CountT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountT_L_A_Lst_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the count operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CountT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of As in Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-CountT_L_A_Lst_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="CountT&lt;L, A>"></a>CountT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountT_L_A_Option_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the Option&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Option&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the count operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CountT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of As in Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-CountT_L_A_Option_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="CountT&lt;L, A>"></a>CountT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the count operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CountT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of As in OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-CountT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="CountT&lt;L, A>"></a>CountT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the count operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CountT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of As in Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-CountT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="CountT&lt;L, A>"></a>CountT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the count operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CountT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of As in EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-CountT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="CountT&lt;L, A>"></a>CountT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountT_L_A_Task_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the Task&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Task&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the count operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CountT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of As in Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-CountT_L_A_Task_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="CountT&lt;L, A>"></a>CountT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountT_L_A_Try_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the Try&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Try&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the count operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CountT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of As in Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-CountT_L_A_Try_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="CountT&lt;L, A>"></a>CountT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the count operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CountT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of As in TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-CountT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="CountT&lt;L, A>"></a>CountT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the count operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CountT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of As in TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-CountT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="CountT&lt;L, A>"></a>CountT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the count operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CountT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of As in TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-CountT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="CountT&lt;L, A>"></a>CountT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the count operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CountT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of As in IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-CountT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="CountT&lt;L, A>"></a>CountT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountT_L_A_Set_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the number of bound values in the Set&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Set&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the count operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">CountT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of As in Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-CountT_L_A_Set_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;.Inst.Count(ma)</div></div></div><div class="member-title"><a name="DivideT&lt;NUM, L, A>"></a>DivideT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides x by y, which are both Num&lt;A&gt;s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">DivideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="DivideT&lt;NUM, L, A>"></a>DivideT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides x by y, which are both Num&lt;A&gt;s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">DivideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="DivideT&lt;NUM, L, A>"></a>DivideT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides x by y, which are both Num&lt;A&gt;s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">DivideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="DivideT&lt;NUM, L, A>"></a>DivideT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides x by y, which are both Num&lt;A&gt;s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">DivideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Option&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="DivideT&lt;NUM, L, A>"></a>DivideT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides x by y, which are both Num&lt;A&gt;s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">DivideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="DivideT&lt;NUM, L, A>"></a>DivideT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides x by y, which are both Num&lt;A&gt;s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">DivideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="DivideT&lt;NUM, L, A>"></a>DivideT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides x by y, which are both Num&lt;A&gt;s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">DivideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="DivideT&lt;NUM, L, A>"></a>DivideT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides x by y, which are both Num&lt;A&gt;s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">DivideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Task&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="DivideT&lt;NUM, L, A>"></a>DivideT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides x by y, which are both Num&lt;A&gt;s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">DivideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Try&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="DivideT&lt;NUM, L, A>"></a>DivideT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides x by y, which are both Num&lt;A&gt;s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">DivideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="DivideT&lt;NUM, L, A>"></a>DivideT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides x by y, which are both Num&lt;A&gt;s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">DivideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="DivideT&lt;NUM, L, A>"></a>DivideT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides x by y, which are both Num&lt;A&gt;s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">DivideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="DivideT&lt;NUM, L, A>"></a>DivideT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides x by y, which are both Num&lt;A&gt;s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">DivideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="DivideT&lt;NUM, L, A>"></a>DivideT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-DivideT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divides x by y, which are both Num&lt;A&gt;s </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">DivideT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Set&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-DivideT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Divide, x, y)</div></div></div><div class="member-title"><a name="EqualsT&lt;EQ, L, A>"></a>EqualsT&lt;EQ, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-EqualsT_EQ_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Eq compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">EqualsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x == y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-EqualsT_EQ_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="EqualsT&lt;EQ, L, A>"></a>EqualsT&lt;EQ, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-EqualsT_EQ_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Eq compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">EqualsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x == y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-EqualsT_EQ_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="EqualsT&lt;EQ, L, A>"></a>EqualsT&lt;EQ, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-EqualsT_EQ_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Eq compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">EqualsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x == y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-EqualsT_EQ_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="EqualsT&lt;EQ, L, A>"></a>EqualsT&lt;EQ, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-EqualsT_EQ_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Eq compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">EqualsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >Option&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x == y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-EqualsT_EQ_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="EqualsT&lt;EQ, L, A>"></a>EqualsT&lt;EQ, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-EqualsT_EQ_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Eq compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">EqualsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x == y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-EqualsT_EQ_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="EqualsT&lt;EQ, L, A>"></a>EqualsT&lt;EQ, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-EqualsT_EQ_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Eq compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">EqualsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x == y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-EqualsT_EQ_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="EqualsT&lt;EQ, L, A>"></a>EqualsT&lt;EQ, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-EqualsT_EQ_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Eq compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">EqualsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x == y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-EqualsT_EQ_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="EqualsT&lt;EQ, L, A>"></a>EqualsT&lt;EQ, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-EqualsT_EQ_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Eq compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">EqualsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >Task&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x == y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-EqualsT_EQ_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="EqualsT&lt;EQ, L, A>"></a>EqualsT&lt;EQ, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-EqualsT_EQ_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Eq compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">EqualsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >Try&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x == y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-EqualsT_EQ_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="EqualsT&lt;EQ, L, A>"></a>EqualsT&lt;EQ, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-EqualsT_EQ_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Eq compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">EqualsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x == y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-EqualsT_EQ_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="EqualsT&lt;EQ, L, A>"></a>EqualsT&lt;EQ, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-EqualsT_EQ_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Eq compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">EqualsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x == y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-EqualsT_EQ_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="EqualsT&lt;EQ, L, A>"></a>EqualsT&lt;EQ, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-EqualsT_EQ_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Eq compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">EqualsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x == y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-EqualsT_EQ_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="EqualsT&lt;EQ, L, A>"></a>EqualsT&lt;EQ, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-EqualsT_EQ_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Eq compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">EqualsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x == y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-EqualsT_EQ_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="EqualsT&lt;EQ, L, A>"></a>EqualsT&lt;EQ, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-EqualsT_EQ_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Eq compare operation on the inner bound values </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">EqualsT</span>&lt;<span class="ident">EQ</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >Set&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x == y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-EqualsT_EQ_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(EQ).Equals, x, y).FoldT(true,(s, v) =&gt; s &amp;&amp; v)</div></div></div><div class="member-title"><a name="ExistsT&lt;L, A>"></a>ExistsT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ExistsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-ExistsT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="ExistsT&lt;L, A>"></a>ExistsT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ExistsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-ExistsT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="ExistsT&lt;L, A>"></a>ExistsT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ExistsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-ExistsT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="ExistsT&lt;L, A>"></a>ExistsT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Option&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ExistsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-ExistsT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="ExistsT&lt;L, A>"></a>ExistsT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ExistsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-ExistsT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="ExistsT&lt;L, A>"></a>ExistsT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ExistsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-ExistsT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="ExistsT&lt;L, A>"></a>ExistsT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ExistsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-ExistsT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="ExistsT&lt;L, A>"></a>ExistsT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Task&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ExistsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-ExistsT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="ExistsT&lt;L, A>"></a>ExistsT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Try&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ExistsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-ExistsT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="ExistsT&lt;L, A>"></a>ExistsT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ExistsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-ExistsT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="ExistsT&lt;L, A>"></a>ExistsT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ExistsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-ExistsT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="ExistsT&lt;L, A>"></a>ExistsT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ExistsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-ExistsT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="ExistsT&lt;L, A>"></a>ExistsT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ExistsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-ExistsT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="ExistsT&lt;L, A>"></a>ExistsT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ExistsT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Set&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ExistsT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if any of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then false is returned.</span></div></div></div><div style="display:none" id="code-ExistsT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, false, (s, x) =&gt; s || f(x))</div></div></div><div class="member-title"><a name="FilterT&lt;L, A>"></a>FilterT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">FilterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-FilterT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="FilterT&lt;L, A>"></a>FilterT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">FilterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-FilterT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="FilterT&lt;L, A>"></a>FilterT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">FilterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-FilterT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="FilterT&lt;L, A>"></a>FilterT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Option&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">FilterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Option&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-FilterT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="FilterT&lt;L, A>"></a>FilterT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">FilterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-FilterT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="FilterT&lt;L, A>"></a>FilterT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">FilterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-FilterT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="FilterT&lt;L, A>"></a>FilterT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">FilterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-FilterT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="FilterT&lt;L, A>"></a>FilterT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Task&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">FilterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Task&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-FilterT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="FilterT&lt;L, A>"></a>FilterT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Try&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">FilterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Try&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-FilterT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="FilterT&lt;L, A>"></a>FilterT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">FilterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-FilterT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="FilterT&lt;L, A>"></a>FilterT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">FilterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-FilterT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="FilterT&lt;L, A>"></a>FilterT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">FilterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-FilterT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="FilterT&lt;L, A>"></a>FilterT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">FilterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-FilterT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="FilterT&lt;L, A>"></a>FilterT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FilterT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Set&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">FilterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Set&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-FilterT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="FoldBackT&lt;S, L, A>"></a>FoldBackT&lt;S, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackT_S_L_A_Arr_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to Fold)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to f to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldBackT_S_L_A_Arr_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="FoldBackT&lt;S, L, A>"></a>FoldBackT&lt;S, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackT_S_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to Fold)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to f to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldBackT_S_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="FoldBackT&lt;S, L, A>"></a>FoldBackT&lt;S, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackT_S_L_A_Lst_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to Fold)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to f to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldBackT_S_L_A_Lst_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="FoldBackT&lt;S, L, A>"></a>FoldBackT&lt;S, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackT_S_L_A_Option_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to Fold)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to f to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Option&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldBackT_S_L_A_Option_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="FoldBackT&lt;S, L, A>"></a>FoldBackT&lt;S, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackT_S_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to Fold)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to f to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldBackT_S_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="FoldBackT&lt;S, L, A>"></a>FoldBackT&lt;S, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackT_S_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to Fold)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to f to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldBackT_S_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="FoldBackT&lt;S, L, A>"></a>FoldBackT&lt;S, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackT_S_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to Fold)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to f to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldBackT_S_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="FoldBackT&lt;S, L, A>"></a>FoldBackT&lt;S, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackT_S_L_A_Task_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to Fold)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to f to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Task&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldBackT_S_L_A_Task_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="FoldBackT&lt;S, L, A>"></a>FoldBackT&lt;S, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackT_S_L_A_Try_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to Fold)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to f to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Try&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldBackT_S_L_A_Try_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="FoldBackT&lt;S, L, A>"></a>FoldBackT&lt;S, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackT_S_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to Fold)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to f to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldBackT_S_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="FoldBackT&lt;S, L, A>"></a>FoldBackT&lt;S, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackT_S_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to Fold)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to f to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldBackT_S_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="FoldBackT&lt;S, L, A>"></a>FoldBackT&lt;S, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackT_S_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to Fold)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to f to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldBackT_S_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="FoldBackT&lt;S, L, A>"></a>FoldBackT&lt;S, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackT_S_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to Fold)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to f to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldBackT_S_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="FoldBackT&lt;S, L, A>"></a>FoldBackT&lt;S, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackT_S_L_A_Set_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing (in the opposite direction to Fold)  the bound value(s) of the nested monadic type, whilst applying the aggregate  state and bound value to f to produce the new aggregate state (which is then  returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Set&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldBackT_S_L_A_Set_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.FoldBack(ma, state, f)</div></div></div><div class="member-title"><a name="FoldT&lt;S, L, A>"></a>FoldT&lt;S, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_L_A_Arr_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to f to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldT_S_L_A_Arr_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="FoldT&lt;S, L, A>"></a>FoldT&lt;S, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to f to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldT_S_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="FoldT&lt;S, L, A>"></a>FoldT&lt;S, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_L_A_Lst_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to f to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldT_S_L_A_Lst_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="FoldT&lt;S, L, A>"></a>FoldT&lt;S, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_L_A_Option_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to f to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Option&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldT_S_L_A_Option_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="FoldT&lt;S, L, A>"></a>FoldT&lt;S, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to f to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldT_S_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="FoldT&lt;S, L, A>"></a>FoldT&lt;S, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to f to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldT_S_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="FoldT&lt;S, L, A>"></a>FoldT&lt;S, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to f to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldT_S_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="FoldT&lt;S, L, A>"></a>FoldT&lt;S, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_L_A_Task_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to f to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Task&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldT_S_L_A_Task_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="FoldT&lt;S, L, A>"></a>FoldT&lt;S, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_L_A_Try_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to f to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Try&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldT_S_L_A_Try_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="FoldT&lt;S, L, A>"></a>FoldT&lt;S, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to f to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldT_S_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="FoldT&lt;S, L, A>"></a>FoldT&lt;S, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to f to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldT_S_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="FoldT&lt;S, L, A>"></a>FoldT&lt;S, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to f to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldT_S_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="FoldT&lt;S, L, A>"></a>FoldT&lt;S, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to f to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldT_S_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="FoldT&lt;S, L, A>"></a>FoldT&lt;S, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldT_S_L_A_Set_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Create an aggregate value by traversing the bound value(s) of the nested monadic type, whilst applying the aggregate state and bound value to f to produce the new aggregate state (which is then returned). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Set&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">The folding function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldT</span>&lt;<span class="ident">S</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The new aggregate state (which is then returned)</span></div></div></div><div style="display:none" id="code-FoldT_S_L_A_Set_EitherUnsafe&lt;L, A>_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, state, f)</div></div></div><div class="member-title"><a name="ForAllT&lt;L, A>"></a>ForAllT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAllT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-ForAllT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="ForAllT&lt;L, A>"></a>ForAllT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAllT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-ForAllT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="ForAllT&lt;L, A>"></a>ForAllT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAllT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-ForAllT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="ForAllT&lt;L, A>"></a>ForAllT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Option&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAllT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-ForAllT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="ForAllT&lt;L, A>"></a>ForAllT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAllT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-ForAllT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="ForAllT&lt;L, A>"></a>ForAllT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAllT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-ForAllT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="ForAllT&lt;L, A>"></a>ForAllT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAllT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-ForAllT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="ForAllT&lt;L, A>"></a>ForAllT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Task&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAllT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-ForAllT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="ForAllT&lt;L, A>"></a>ForAllT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Try&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAllT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-ForAllT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="ForAllT&lt;L, A>"></a>ForAllT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAllT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-ForAllT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="ForAllT&lt;L, A>"></a>ForAllT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAllT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-ForAllT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="ForAllT&lt;L, A>"></a>ForAllT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAllT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-ForAllT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="ForAllT&lt;L, A>"></a>ForAllT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAllT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-ForAllT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="ForAllT&lt;L, A>"></a>ForAllT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAllT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Set&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">The predicate function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">ForAllT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if all of the bound value(s) return true when applied to the  predicate f.  If there are no bound values then true is returned.</span></div></div></div><div style="display:none" id="code-ForAllT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Func_A_bool_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, true, (s, x) =&gt; s &amp;&amp; f(x))</div></div></div><div class="member-title"><a name="IterT&lt;L, A>"></a>IterT&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The action that contains the side-effects</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-IterT_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="IterT&lt;L, A>"></a>IterT&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The action that contains the side-effects</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-IterT_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="IterT&lt;L, A>"></a>IterT&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The action that contains the side-effects</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-IterT_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="IterT&lt;L, A>"></a>IterT&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in Option&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Option&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The action that contains the side-effects</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-IterT_L_A_Option_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="IterT&lt;L, A>"></a>IterT&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The action that contains the side-effects</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-IterT_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="IterT&lt;L, A>"></a>IterT&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The action that contains the side-effects</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-IterT_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="IterT&lt;L, A>"></a>IterT&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The action that contains the side-effects</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-IterT_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="IterT&lt;L, A>"></a>IterT&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in Task&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Task&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The action that contains the side-effects</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-IterT_L_A_Task_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="IterT&lt;L, A>"></a>IterT&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in Try&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Try&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The action that contains the side-effects</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-IterT_L_A_Try_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="IterT&lt;L, A>"></a>IterT&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The action that contains the side-effects</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-IterT_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="IterT&lt;L, A>"></a>IterT&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The action that contains the side-effects</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-IterT_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="IterT&lt;L, A>"></a>IterT&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The action that contains the side-effects</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-IterT_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="IterT&lt;L, A>"></a>IterT&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The action that contains the side-effects</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-IterT_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="IterT&lt;L, A>"></a>IterT&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IterT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Side-effecting operation to iterate all of the bound value(s) in Set&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Set&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The action that contains the side-effects</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">IterT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-IterT_L_A_Set_EitherUnsafe&lt;L, A>_ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Fold(ma, unit, (s, x) =&gt; { f(x); return unit; })</div></div></div><div class="member-title"><a name="MapT&lt;L, A, B>"></a>MapT&lt;L, A, B&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapT_L_A_B_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">MapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Arr&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-MapT_L_A_B_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MArr&lt;EitherUnsafe&lt;L, B&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="MapT&lt;L, A, B>"></a>MapT&lt;L, A, B&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapT_L_A_B_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">MapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-MapT_L_A_B_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MHashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="MapT&lt;L, A, B>"></a>MapT&lt;L, A, B&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapT_L_A_B_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">MapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Lst&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-MapT_L_A_B_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MLst&lt;EitherUnsafe&lt;L, B&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="MapT&lt;L, A, B>"></a>MapT&lt;L, A, B&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapT_L_A_B_Option_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Option&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">MapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Option&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-MapT_L_A_B_Option_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MOption&lt;EitherUnsafe&lt;L, B&gt;&gt;, Option&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="MapT&lt;L, A, B>"></a>MapT&lt;L, A, B&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapT_L_A_B_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">MapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-MapT_L_A_B_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="MapT&lt;L, A, B>"></a>MapT&lt;L, A, B&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapT_L_A_B_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">MapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-MapT_L_A_B_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MEither&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="MapT&lt;L, A, B>"></a>MapT&lt;L, A, B&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapT_L_A_B_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">MapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-MapT_L_A_B_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="MapT&lt;L, A, B>"></a>MapT&lt;L, A, B&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapT_L_A_B_Task_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Task&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">MapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Task&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-MapT_L_A_B_Task_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MTask&lt;EitherUnsafe&lt;L, B&gt;&gt;, Task&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="MapT&lt;L, A, B>"></a>MapT&lt;L, A, B&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapT_L_A_B_Try_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Try&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">MapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Try&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-MapT_L_A_B_Try_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MTry&lt;EitherUnsafe&lt;L, B&gt;&gt;, Try&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="MapT&lt;L, A, B>"></a>MapT&lt;L, A, B&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapT_L_A_B_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">MapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-MapT_L_A_B_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MTryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="MapT&lt;L, A, B>"></a>MapT&lt;L, A, B&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapT_L_A_B_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">MapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-MapT_L_A_B_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MTryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="MapT&lt;L, A, B>"></a>MapT&lt;L, A, B&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapT_L_A_B_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">MapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-MapT_L_A_B_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="MapT&lt;L, A, B>"></a>MapT&lt;L, A, B&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapT_L_A_B_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">MapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-MapT_L_A_B_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MSeq&lt;EitherUnsafe&lt;L, B&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="MapT&lt;L, A, B>"></a>MapT&lt;L, A, B&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapT_L_A_B_Set_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Set&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">MapT</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Set&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-MapT_L_A_B_Set_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MSet&lt;EitherUnsafe&lt;L, B&gt;&gt;, Set&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="PlusT&lt;NUM, L, A>"></a>PlusT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PlusT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner Num&lt;A&gt; types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">PlusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-PlusT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="PlusT&lt;NUM, L, A>"></a>PlusT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PlusT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner Num&lt;A&gt; types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">PlusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-PlusT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="PlusT&lt;NUM, L, A>"></a>PlusT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PlusT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner Num&lt;A&gt; types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">PlusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-PlusT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="PlusT&lt;NUM, L, A>"></a>PlusT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PlusT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner Num&lt;A&gt; types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">PlusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Option&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-PlusT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="PlusT&lt;NUM, L, A>"></a>PlusT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PlusT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner Num&lt;A&gt; types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">PlusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-PlusT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="PlusT&lt;NUM, L, A>"></a>PlusT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PlusT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner Num&lt;A&gt; types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">PlusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-PlusT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="PlusT&lt;NUM, L, A>"></a>PlusT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PlusT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner Num&lt;A&gt; types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">PlusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-PlusT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="PlusT&lt;NUM, L, A>"></a>PlusT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PlusT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner Num&lt;A&gt; types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">PlusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Task&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-PlusT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="PlusT&lt;NUM, L, A>"></a>PlusT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PlusT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner Num&lt;A&gt; types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">PlusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Try&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-PlusT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="PlusT&lt;NUM, L, A>"></a>PlusT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PlusT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner Num&lt;A&gt; types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">PlusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-PlusT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="PlusT&lt;NUM, L, A>"></a>PlusT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PlusT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner Num&lt;A&gt; types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">PlusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-PlusT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="PlusT&lt;NUM, L, A>"></a>PlusT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PlusT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner Num&lt;A&gt; types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">PlusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-PlusT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="PlusT&lt;NUM, L, A>"></a>PlusT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PlusT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner Num&lt;A&gt; types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">PlusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-PlusT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="PlusT&lt;NUM, L, A>"></a>PlusT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-PlusT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Adds the two inner Num&lt;A&gt; types together </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">PlusT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Set&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x + y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-PlusT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Plus, x, y)</div></div></div><div class="member-title"><a name="ProductT&lt;NUM, L, A>"></a>ProductT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ProductT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x * y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="ProductT&lt;NUM, L, A>"></a>ProductT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ProductT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x * y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="ProductT&lt;NUM, L, A>"></a>ProductT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ProductT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x * y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="ProductT&lt;NUM, L, A>"></a>ProductT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ProductT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Option&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x * y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="ProductT&lt;NUM, L, A>"></a>ProductT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ProductT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x * y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="ProductT&lt;NUM, L, A>"></a>ProductT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ProductT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x * y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="ProductT&lt;NUM, L, A>"></a>ProductT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ProductT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x * y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="ProductT&lt;NUM, L, A>"></a>ProductT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ProductT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Task&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x * y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="ProductT&lt;NUM, L, A>"></a>ProductT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ProductT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Try&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x * y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="ProductT&lt;NUM, L, A>"></a>ProductT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ProductT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x * y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="ProductT&lt;NUM, L, A>"></a>ProductT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ProductT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x * y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="ProductT&lt;NUM, L, A>"></a>ProductT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ProductT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x * y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="ProductT&lt;NUM, L, A>"></a>ProductT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ProductT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x * y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="ProductT&lt;NUM, L, A>"></a>ProductT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ProductT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the product of two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">ProductT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Set&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x * y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ProductT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Product, x, y)</div></div></div><div class="member-title"><a name="Select&lt;L, A, B>"></a>Select&lt;L, A, B&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_L_A_B_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Select</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Arr&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-Select_L_A_B_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MArr&lt;EitherUnsafe&lt;L, B&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Select&lt;L, A, B>"></a>Select&lt;L, A, B&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_L_A_B_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Select</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-Select_L_A_B_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MHashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Select&lt;L, A, B>"></a>Select&lt;L, A, B&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_L_A_B_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Select</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Lst&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-Select_L_A_B_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MLst&lt;EitherUnsafe&lt;L, B&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Select&lt;L, A, B>"></a>Select&lt;L, A, B&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_L_A_B_Option_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Option&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Select</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Option&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-Select_L_A_B_Option_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MOption&lt;EitherUnsafe&lt;L, B&gt;&gt;, Option&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Select&lt;L, A, B>"></a>Select&lt;L, A, B&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_L_A_B_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Select</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-Select_L_A_B_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Select&lt;L, A, B>"></a>Select&lt;L, A, B&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_L_A_B_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Select</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-Select_L_A_B_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MEither&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Select&lt;L, A, B>"></a>Select&lt;L, A, B&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_L_A_B_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Select</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-Select_L_A_B_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Select&lt;L, A, B>"></a>Select&lt;L, A, B&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_L_A_B_Task_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Task&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Select</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Task&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-Select_L_A_B_Task_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MTask&lt;EitherUnsafe&lt;L, B&gt;&gt;, Task&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Select&lt;L, A, B>"></a>Select&lt;L, A, B&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_L_A_B_Try_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Try&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Select</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Try&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-Select_L_A_B_Try_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MTry&lt;EitherUnsafe&lt;L, B&gt;&gt;, Try&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Select&lt;L, A, B>"></a>Select&lt;L, A, B&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_L_A_B_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Select</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-Select_L_A_B_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MTryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Select&lt;L, A, B>"></a>Select&lt;L, A, B&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_L_A_B_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Select</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-Select_L_A_B_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MTryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Select&lt;L, A, B>"></a>Select&lt;L, A, B&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_L_A_B_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Select</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-Select_L_A_B_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Select&lt;L, A, B>"></a>Select&lt;L, A, B&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_L_A_B_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Select</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-Select_L_A_B_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MSeq&lt;EitherUnsafe&lt;L, B&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Select&lt;L, A, B>"></a>Select&lt;L, A, B&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_L_A_B_Set_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Functor map operation.  This maps the bound value(s) of the nested monads using the provided function f. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Set&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Select</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Set&lt;EitherUnsafe&lt;L, B&gt;&gt; which is the result of performing f(a)</span></div></div></div><div style="display:none" id="code-Select_L_A_B_Set_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Map&lt;MSet&lt;EitherUnsafe&lt;L, B&gt;&gt;, Set&lt;EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="SelectMany&lt;L, A, B, C>"></a>SelectMany&lt;L, A, B, C&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_L_A_B_C_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind and project operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">The projection function to apply after the bind</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Arr&lt;EitherUnsafe&lt;L, C&gt;&gt; which is the result of performing bind then project</span></div></div></div><div style="display:none" id="code-SelectMany_L_A_B_C_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                    .Inst.Bind&lt;MArr&lt;EitherUnsafe&lt;L, C&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, C&gt;&gt;, MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(ma, a =&gt;
                    {
                        var mb = bind(a);
                        return default(MEitherUnsafe&lt;L, B&gt;).Bind&lt;MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(mb, b =&gt; default(MEitherUnsafe&lt;L, C&gt;).Return(project(a, b)));
                    })</div></div></div><div class="member-title"><a name="SelectMany&lt;L, A, B, C>"></a>SelectMany&lt;L, A, B, C&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_L_A_B_C_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind and project operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">The projection function to apply after the bind</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >HashSet&lt;EitherUnsafe&lt;L, C&gt;&gt; which is the result of performing bind then project</span></div></div></div><div style="display:none" id="code-SelectMany_L_A_B_C_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                    .Inst.Bind&lt;MHashSet&lt;EitherUnsafe&lt;L, C&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, C&gt;&gt;, MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(ma, a =&gt;
                    {
                        var mb = bind(a);
                        return default(MEitherUnsafe&lt;L, B&gt;).Bind&lt;MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(mb, b =&gt; default(MEitherUnsafe&lt;L, C&gt;).Return(project(a, b)));
                    })</div></div></div><div class="member-title"><a name="SelectMany&lt;L, A, B, C>"></a>SelectMany&lt;L, A, B, C&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_L_A_B_C_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind and project operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">The projection function to apply after the bind</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Lst&lt;EitherUnsafe&lt;L, C&gt;&gt; which is the result of performing bind then project</span></div></div></div><div style="display:none" id="code-SelectMany_L_A_B_C_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                    .Inst.Bind&lt;MLst&lt;EitherUnsafe&lt;L, C&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, C&gt;&gt;, MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(ma, a =&gt;
                    {
                        var mb = bind(a);
                        return default(MEitherUnsafe&lt;L, B&gt;).Bind&lt;MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(mb, b =&gt; default(MEitherUnsafe&lt;L, C&gt;).Return(project(a, b)));
                    })</div></div></div><div class="member-title"><a name="SelectMany&lt;L, A, B, C>"></a>SelectMany&lt;L, A, B, C&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_L_A_B_C_Option_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind and project operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Option&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">The projection function to apply after the bind</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Option&lt;EitherUnsafe&lt;L, C&gt;&gt; which is the result of performing bind then project</span></div></div></div><div style="display:none" id="code-SelectMany_L_A_B_C_Option_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                    .Inst.Bind&lt;MOption&lt;EitherUnsafe&lt;L, C&gt;&gt;, Option&lt;EitherUnsafe&lt;L, C&gt;&gt;, MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(ma, a =&gt;
                    {
                        var mb = bind(a);
                        return default(MEitherUnsafe&lt;L, B&gt;).Bind&lt;MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(mb, b =&gt; default(MEitherUnsafe&lt;L, C&gt;).Return(project(a, b)));
                    })</div></div></div><div class="member-title"><a name="SelectMany&lt;L, A, B, C>"></a>SelectMany&lt;L, A, B, C&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_L_A_B_C_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind and project operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">The projection function to apply after the bind</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >OptionUnsafe&lt;EitherUnsafe&lt;L, C&gt;&gt; which is the result of performing bind then project</span></div></div></div><div style="display:none" id="code-SelectMany_L_A_B_C_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                    .Inst.Bind&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, C&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, C&gt;&gt;, MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(ma, a =&gt;
                    {
                        var mb = bind(a);
                        return default(MEitherUnsafe&lt;L, B&gt;).Bind&lt;MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(mb, b =&gt; default(MEitherUnsafe&lt;L, C&gt;).Return(project(a, b)));
                    })</div></div></div><div class="member-title"><a name="SelectMany&lt;L, A, B, C>"></a>SelectMany&lt;L, A, B, C&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_L_A_B_C_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind and project operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">The projection function to apply after the bind</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Either&lt;L, EitherUnsafe&lt;L, C&gt;&gt; which is the result of performing bind then project</span></div></div></div><div style="display:none" id="code-SelectMany_L_A_B_C_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                    .Inst.Bind&lt;MEither&lt;L, EitherUnsafe&lt;L, C&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, C&gt;&gt;, MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(ma, a =&gt;
                    {
                        var mb = bind(a);
                        return default(MEitherUnsafe&lt;L, B&gt;).Bind&lt;MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(mb, b =&gt; default(MEitherUnsafe&lt;L, C&gt;).Return(project(a, b)));
                    })</div></div></div><div class="member-title"><a name="SelectMany&lt;L, A, B, C>"></a>SelectMany&lt;L, A, B, C&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_L_A_B_C_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind and project operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">The projection function to apply after the bind</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, C&gt;&gt; which is the result of performing bind then project</span></div></div></div><div style="display:none" id="code-SelectMany_L_A_B_C_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                    .Inst.Bind&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, C&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, C&gt;&gt;, MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(ma, a =&gt;
                    {
                        var mb = bind(a);
                        return default(MEitherUnsafe&lt;L, B&gt;).Bind&lt;MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(mb, b =&gt; default(MEitherUnsafe&lt;L, C&gt;).Return(project(a, b)));
                    })</div></div></div><div class="member-title"><a name="SelectMany&lt;L, A, B, C>"></a>SelectMany&lt;L, A, B, C&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_L_A_B_C_Task_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind and project operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Task&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">The projection function to apply after the bind</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Task&lt;EitherUnsafe&lt;L, C&gt;&gt; which is the result of performing bind then project</span></div></div></div><div style="display:none" id="code-SelectMany_L_A_B_C_Task_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                    .Inst.Bind&lt;MTask&lt;EitherUnsafe&lt;L, C&gt;&gt;, Task&lt;EitherUnsafe&lt;L, C&gt;&gt;, MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(ma, a =&gt;
                    {
                        var mb = bind(a);
                        return default(MEitherUnsafe&lt;L, B&gt;).Bind&lt;MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(mb, b =&gt; default(MEitherUnsafe&lt;L, C&gt;).Return(project(a, b)));
                    })</div></div></div><div class="member-title"><a name="SelectMany&lt;L, A, B, C>"></a>SelectMany&lt;L, A, B, C&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_L_A_B_C_Try_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind and project operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Try&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">The projection function to apply after the bind</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Try&lt;EitherUnsafe&lt;L, C&gt;&gt; which is the result of performing bind then project</span></div></div></div><div style="display:none" id="code-SelectMany_L_A_B_C_Try_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                    .Inst.Bind&lt;MTry&lt;EitherUnsafe&lt;L, C&gt;&gt;, Try&lt;EitherUnsafe&lt;L, C&gt;&gt;, MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(ma, a =&gt;
                    {
                        var mb = bind(a);
                        return default(MEitherUnsafe&lt;L, B&gt;).Bind&lt;MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(mb, b =&gt; default(MEitherUnsafe&lt;L, C&gt;).Return(project(a, b)));
                    })</div></div></div><div class="member-title"><a name="SelectMany&lt;L, A, B, C>"></a>SelectMany&lt;L, A, B, C&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_L_A_B_C_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind and project operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">The projection function to apply after the bind</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >TryAsync&lt;EitherUnsafe&lt;L, C&gt;&gt; which is the result of performing bind then project</span></div></div></div><div style="display:none" id="code-SelectMany_L_A_B_C_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                    .Inst.Bind&lt;MTryAsync&lt;EitherUnsafe&lt;L, C&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, C&gt;&gt;, MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(ma, a =&gt;
                    {
                        var mb = bind(a);
                        return default(MEitherUnsafe&lt;L, B&gt;).Bind&lt;MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(mb, b =&gt; default(MEitherUnsafe&lt;L, C&gt;).Return(project(a, b)));
                    })</div></div></div><div class="member-title"><a name="SelectMany&lt;L, A, B, C>"></a>SelectMany&lt;L, A, B, C&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_L_A_B_C_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind and project operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">The projection function to apply after the bind</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >TryOption&lt;EitherUnsafe&lt;L, C&gt;&gt; which is the result of performing bind then project</span></div></div></div><div style="display:none" id="code-SelectMany_L_A_B_C_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                    .Inst.Bind&lt;MTryOption&lt;EitherUnsafe&lt;L, C&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, C&gt;&gt;, MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(ma, a =&gt;
                    {
                        var mb = bind(a);
                        return default(MEitherUnsafe&lt;L, B&gt;).Bind&lt;MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(mb, b =&gt; default(MEitherUnsafe&lt;L, C&gt;).Return(project(a, b)));
                    })</div></div></div><div class="member-title"><a name="SelectMany&lt;L, A, B, C>"></a>SelectMany&lt;L, A, B, C&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_L_A_B_C_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind and project operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">The projection function to apply after the bind</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >TryOptionAsync&lt;EitherUnsafe&lt;L, C&gt;&gt; which is the result of performing bind then project</span></div></div></div><div style="display:none" id="code-SelectMany_L_A_B_C_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                    .Inst.Bind&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, C&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, C&gt;&gt;, MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(ma, a =&gt;
                    {
                        var mb = bind(a);
                        return default(MEitherUnsafe&lt;L, B&gt;).Bind&lt;MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(mb, b =&gt; default(MEitherUnsafe&lt;L, C&gt;).Return(project(a, b)));
                    })</div></div></div><div class="member-title"><a name="SelectMany&lt;L, A, B, C>"></a>SelectMany&lt;L, A, B, C&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_L_A_B_C_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind and project operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">The projection function to apply after the bind</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >IEnumerable&lt;EitherUnsafe&lt;L, C&gt;&gt; which is the result of performing bind then project</span></div></div></div><div style="display:none" id="code-SelectMany_L_A_B_C_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                    .Inst.Bind&lt;MSeq&lt;EitherUnsafe&lt;L, C&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, C&gt;&gt;, MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(ma, a =&gt;
                    {
                        var mb = bind(a);
                        return default(MEitherUnsafe&lt;L, B&gt;).Bind&lt;MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(mb, b =&gt; default(MEitherUnsafe&lt;L, C&gt;).Return(project(a, b)));
                    })</div></div></div><div class="member-title"><a name="SelectMany&lt;L, A, B, C>"></a>SelectMany&lt;L, A, B, C&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, EitherUnsafe&lt;L, B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_L_A_B_C_Set_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind and project operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Set&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc">The bind function to apply</div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc">The projection function to apply after the bind</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Set&lt;EitherUnsafe&lt;L, C&gt;&gt; which is the result of performing bind then project</span></div></div></div><div style="display:none" id="code-SelectMany_L_A_B_C_Set_EitherUnsafe&lt;L, A>_ma__Func_A_EitherUnsafe&lt;L, B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                    .Inst.Bind&lt;MSet&lt;EitherUnsafe&lt;L, C&gt;&gt;, Set&lt;EitherUnsafe&lt;L, C&gt;&gt;, MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(ma, a =&gt;
                    {
                        var mb = bind(a);
                        return default(MEitherUnsafe&lt;L, B&gt;).Bind&lt;MEitherUnsafe&lt;L, C&gt;, EitherUnsafe&lt;L, C&gt;, C&gt;(mb, b =&gt; default(MEitherUnsafe&lt;L, C&gt;).Return(project(a, b)));
                    })</div></div></div><div class="member-title"><a name="Sequence&lt;L, A>"></a>Sequence&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sequence_L_A_Arr_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling ma.Traverse&lt;L, A, A&gt;(identity). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">Sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;</span></div></div></div><div style="display:none" id="code-Sequence_L_A_Arr_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="Sequence&lt;L, A>"></a>Sequence&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sequence_L_A_HashSet_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling ma.Traverse&lt;L, A, A&gt;(identity). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">Sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;</span></div></div></div><div style="display:none" id="code-Sequence_L_A_HashSet_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="Sequence&lt;L, A>"></a>Sequence&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sequence_L_A_Lst_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling ma.Traverse&lt;L, A, A&gt;(identity). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">Sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;</span></div></div></div><div style="display:none" id="code-Sequence_L_A_Lst_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="Sequence&lt;L, A>"></a>Sequence&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sequence_L_A_Option_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, Option&lt;A&gt;&gt;.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling ma.Traverse&lt;L, A, A&gt;(identity). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Option&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">Sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, Option&lt;A&gt;&gt;</span></div></div></div><div style="display:none" id="code-Sequence_L_A_Option_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="Sequence&lt;L, A>"></a>Sequence&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sequence_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling ma.Traverse&lt;L, A, A&gt;(identity). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">Sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;</span></div></div></div><div style="display:none" id="code-Sequence_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="Sequence&lt;L, A>"></a>Sequence&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sequence_L_A_Either_L_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling ma.Traverse&lt;L, A, A&gt;(identity). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-Sequence_L_A_Either_L_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="Sequence&lt;L, A>"></a>Sequence&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sequence_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling ma.Traverse&lt;L, A, A&gt;(identity). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></div></div></div><div style="display:none" id="code-Sequence_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="Sequence&lt;L, A>"></a>Sequence&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sequence_L_A_Task_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, Task&lt;A&gt;&gt;.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling ma.Traverse&lt;L, A, A&gt;(identity). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Task&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">Sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, Task&lt;A&gt;&gt;</span></div></div></div><div style="display:none" id="code-Sequence_L_A_Task_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="Sequence&lt;L, A>"></a>Sequence&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sequence_L_A_Try_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, Try&lt;A&gt;&gt;.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling ma.Traverse&lt;L, A, A&gt;(identity). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Try&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">Sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, Try&lt;A&gt;&gt;</span></div></div></div><div style="display:none" id="code-Sequence_L_A_Try_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="Sequence&lt;L, A>"></a>Sequence&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sequence_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, TryAsync&lt;A&gt;&gt;.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling ma.Traverse&lt;L, A, A&gt;(identity). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">Sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, TryAsync&lt;A&gt;&gt;</span></div></div></div><div style="display:none" id="code-Sequence_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="Sequence&lt;L, A>"></a>Sequence&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sequence_L_A_TryOption_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling ma.Traverse&lt;L, A, A&gt;(identity). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">Sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;</span></div></div></div><div style="display:none" id="code-Sequence_L_A_TryOption_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="Sequence&lt;L, A>"></a>Sequence&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sequence_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, TryOptionAsync&lt;A&gt;&gt;.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling ma.Traverse&lt;L, A, A&gt;(identity). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">Sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, TryOptionAsync&lt;A&gt;&gt;</span></div></div></div><div style="display:none" id="code-Sequence_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="Sequence&lt;L, A>"></a>Sequence&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sequence_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling ma.Traverse&lt;L, A, A&gt;(identity). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">Sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;</span></div></div></div><div style="display:none" id="code-Sequence_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="Sequence&lt;L, A>"></a>Sequence&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sequence_L_A_Set_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sequence operation.  Takes a value of type Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, Set&lt;A&gt;&gt;.  So it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer types.  This is the same as calling ma.Traverse&lt;L, A, A&gt;(identity). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Set&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">Sequence</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, Set&lt;A&gt;&gt;</span></div></div></div><div style="display:none" id="code-Sequence_L_A_Set_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            ma.Traverse&lt;L, A, A&gt;(identity)</div></div></div><div class="member-title"><a name="SubtractT&lt;NUM, L, A>"></a>SubtractT&lt;NUM, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">SubtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractT_NUM_L_A_Arr_EitherUnsafe&lt;L, A>_x__Arr_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="SubtractT&lt;NUM, L, A>"></a>SubtractT&lt;NUM, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">SubtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractT_NUM_L_A_HashSet_EitherUnsafe&lt;L, A>_x__HashSet_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="SubtractT&lt;NUM, L, A>"></a>SubtractT&lt;NUM, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">SubtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractT_NUM_L_A_Lst_EitherUnsafe&lt;L, A>_x__Lst_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="SubtractT&lt;NUM, L, A>"></a>SubtractT&lt;NUM, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">SubtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Option&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractT_NUM_L_A_Option_EitherUnsafe&lt;L, A>_x__Option_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="SubtractT&lt;NUM, L, A>"></a>SubtractT&lt;NUM, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">SubtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractT_NUM_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_x__OptionUnsafe_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="SubtractT&lt;NUM, L, A>"></a>SubtractT&lt;NUM, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">SubtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractT_NUM_L_A_Either_L_EitherUnsafe&lt;L, A>_x__Either_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="SubtractT&lt;NUM, L, A>"></a>SubtractT&lt;NUM, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">SubtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractT_NUM_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_x__EitherUnsafe_L_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="SubtractT&lt;NUM, L, A>"></a>SubtractT&lt;NUM, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">SubtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Task&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractT_NUM_L_A_Task_EitherUnsafe&lt;L, A>_x__Task_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="SubtractT&lt;NUM, L, A>"></a>SubtractT&lt;NUM, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">SubtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Try&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractT_NUM_L_A_Try_EitherUnsafe&lt;L, A>_x__Try_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="SubtractT&lt;NUM, L, A>"></a>SubtractT&lt;NUM, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">SubtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractT_NUM_L_A_TryAsync_EitherUnsafe&lt;L, A>_x__TryAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="SubtractT&lt;NUM, L, A>"></a>SubtractT&lt;NUM, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">SubtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractT_NUM_L_A_TryOption_EitherUnsafe&lt;L, A>_x__TryOption_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="SubtractT&lt;NUM, L, A>"></a>SubtractT&lt;NUM, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">SubtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractT_NUM_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_x__TryOptionAsync_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="SubtractT&lt;NUM, L, A>"></a>SubtractT&lt;NUM, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">SubtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractT_NUM_L_A_IEnumerable_EitherUnsafe&lt;L, A>_x__IEnumerable_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="SubtractT&lt;NUM, L, A>"></a>SubtractT&lt;NUM, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SubtractT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the difference between two inner Num&lt;A&gt; types </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">SubtractT</span>&lt;<span class="ident">NUM</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; x, <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Set&lt;EitherUnsafe&lt;L, A&gt;&gt; which is the result of performing x - y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SubtractT_NUM_L_A_Set_EitherUnsafe&lt;L, A>_x__Set_EitherUnsafe&lt;L, A>_y_"><div class="section_title">SOURCE</div><div class="code">
            ApplyT(default(NUM).Subtract, x, y)</div></div></div><div class="member-title"><a name="SumT&lt;NumA, L, A>"></a>SumT&lt;NumA, L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumT_NumA_L_A_Arr_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the Num&lt;A&gt;s in Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the sum operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">SumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all Num&lt;A&gt;s in Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SumT_NumA_L_A_Arr_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="SumT&lt;NumA, L, A>"></a>SumT&lt;NumA, L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumT_NumA_L_A_HashSet_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the Num&lt;A&gt;s in HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the sum operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">SumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all Num&lt;A&gt;s in HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SumT_NumA_L_A_HashSet_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="SumT&lt;NumA, L, A>"></a>SumT&lt;NumA, L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumT_NumA_L_A_Lst_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the Num&lt;A&gt;s in Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the sum operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">SumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all Num&lt;A&gt;s in Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SumT_NumA_L_A_Lst_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="SumT&lt;NumA, L, A>"></a>SumT&lt;NumA, L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumT_NumA_L_A_Option_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the Num&lt;A&gt;s in Option&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Option&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the sum operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">SumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all Num&lt;A&gt;s in Option&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SumT_NumA_L_A_Option_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="SumT&lt;NumA, L, A>"></a>SumT&lt;NumA, L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumT_NumA_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the Num&lt;A&gt;s in OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the sum operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">SumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all Num&lt;A&gt;s in OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SumT_NumA_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="SumT&lt;NumA, L, A>"></a>SumT&lt;NumA, L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumT_NumA_L_A_Either_L_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the Num&lt;A&gt;s in Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the sum operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">SumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all Num&lt;A&gt;s in Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SumT_NumA_L_A_Either_L_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="SumT&lt;NumA, L, A>"></a>SumT&lt;NumA, L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumT_NumA_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the Num&lt;A&gt;s in EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the sum operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">SumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all Num&lt;A&gt;s in EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SumT_NumA_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="SumT&lt;NumA, L, A>"></a>SumT&lt;NumA, L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumT_NumA_L_A_Task_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the Num&lt;A&gt;s in Task&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Task&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the sum operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">SumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all Num&lt;A&gt;s in Task&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SumT_NumA_L_A_Task_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="SumT&lt;NumA, L, A>"></a>SumT&lt;NumA, L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumT_NumA_L_A_Try_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the Num&lt;A&gt;s in Try&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Try&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the sum operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">SumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all Num&lt;A&gt;s in Try&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SumT_NumA_L_A_Try_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="SumT&lt;NumA, L, A>"></a>SumT&lt;NumA, L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumT_NumA_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the Num&lt;A&gt;s in TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the sum operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">SumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all Num&lt;A&gt;s in TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SumT_NumA_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="SumT&lt;NumA, L, A>"></a>SumT&lt;NumA, L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumT_NumA_L_A_TryOption_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the Num&lt;A&gt;s in TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the sum operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">SumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all Num&lt;A&gt;s in TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SumT_NumA_L_A_TryOption_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="SumT&lt;NumA, L, A>"></a>SumT&lt;NumA, L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumT_NumA_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the Num&lt;A&gt;s in TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the sum operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">SumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all Num&lt;A&gt;s in TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SumT_NumA_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="SumT&lt;NumA, L, A>"></a>SumT&lt;NumA, L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumT_NumA_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the Num&lt;A&gt;s in IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the sum operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">SumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all Num&lt;A&gt;s in IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SumT_NumA_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="SumT&lt;NumA, L, A>"></a>SumT&lt;NumA, L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SumT_NumA_L_A_Set_EitherUnsafe&lt;L, A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds total of all the Num&lt;A&gt;s in Set&lt;EitherUnsafe&lt;L, A&gt;&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Set&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the sum operation on</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">SumT</span>&lt;<span class="ident">NumA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Total of all Num&lt;A&gt;s in Set&lt;EitherUnsafe&lt;L, A&gt;&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NumA</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SumT_NumA_L_A_Set_EitherUnsafe&lt;L, A>_ma_"><div class="section_title">SOURCE</div><div class="code">
                Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, NumA, A&gt;.Inst.Sum(ma)</div></div></div><div class="member-title"><a name="Traverse&lt;L, A, B>"></a>Traverse&lt;L, A, B&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Traverse_L_A_B_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tarverse operation.  Takes a value of type Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, Arr&lt;B&gt;&gt; (by applying a to f).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Arr</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">Traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Arr</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, Arr&lt;B&gt;&gt;</span></div></div></div><div style="display:none" id="code-Traverse_L_A_B_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Arr&lt;B&gt;&gt;, EitherUnsafe&lt;L, Arr&lt;B&gt;&gt;, MArr&lt;B&gt;, Arr&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Traverse&lt;L, A, B>"></a>Traverse&lt;L, A, B&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Traverse_L_A_B_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tarverse operation.  Takes a value of type HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, HashSet&lt;B&gt;&gt; (by applying a to f).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">HashSet</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">Traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">HashSet</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, HashSet&lt;B&gt;&gt;</span></div></div></div><div style="display:none" id="code-Traverse_L_A_B_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, HashSet&lt;B&gt;&gt;, EitherUnsafe&lt;L, HashSet&lt;B&gt;&gt;, MHashSet&lt;B&gt;, HashSet&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Traverse&lt;L, A, B>"></a>Traverse&lt;L, A, B&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Traverse_L_A_B_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tarverse operation.  Takes a value of type Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, Lst&lt;B&gt;&gt; (by applying a to f).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Lst</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">Traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Lst</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, Lst&lt;B&gt;&gt;</span></div></div></div><div style="display:none" id="code-Traverse_L_A_B_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Lst&lt;B&gt;&gt;, EitherUnsafe&lt;L, Lst&lt;B&gt;&gt;, MLst&lt;B&gt;, Lst&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Traverse&lt;L, A, B>"></a>Traverse&lt;L, A, B&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Traverse_L_A_B_Option_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tarverse operation.  Takes a value of type Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, Option&lt;B&gt;&gt; (by applying a to f).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Option&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">Traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, Option&lt;B&gt;&gt;</span></div></div></div><div style="display:none" id="code-Traverse_L_A_B_Option_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Option&lt;B&gt;&gt;, EitherUnsafe&lt;L, Option&lt;B&gt;&gt;, MOption&lt;B&gt;, Option&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Traverse&lt;L, A, B>"></a>Traverse&lt;L, A, B&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Traverse_L_A_B_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tarverse operation.  Takes a value of type OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, OptionUnsafe&lt;B&gt;&gt; (by applying a to f).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">Traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, OptionUnsafe&lt;B&gt;&gt;</span></div></div></div><div style="display:none" id="code-Traverse_L_A_B_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, OptionUnsafe&lt;B&gt;&gt;, EitherUnsafe&lt;L, OptionUnsafe&lt;B&gt;&gt;, MOptionUnsafe&lt;B&gt;, OptionUnsafe&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Traverse&lt;L, A, B>"></a>Traverse&lt;L, A, B&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Traverse_L_A_B_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tarverse operation.  Takes a value of type Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, Either&lt;L, B&gt;&gt; (by applying a to f).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, Either&lt;L, B&gt;&gt;</span></div></div></div><div style="display:none" id="code-Traverse_L_A_B_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Either&lt;L, B&gt;&gt;, EitherUnsafe&lt;L, Either&lt;L, B&gt;&gt;, MEither&lt;L, B&gt;, Either&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Traverse&lt;L, A, B>"></a>Traverse&lt;L, A, B&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Traverse_L_A_B_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tarverse operation.  Takes a value of type EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt; (by applying a to f).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;</span></div></div></div><div style="display:none" id="code-Traverse_L_A_B_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;, MEitherUnsafe&lt;L, B&gt;, EitherUnsafe&lt;L, B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Traverse&lt;L, A, B>"></a>Traverse&lt;L, A, B&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Traverse_L_A_B_Task_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tarverse operation.  Takes a value of type Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, Task&lt;B&gt;&gt; (by applying a to f).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Task&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">Traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, Task&lt;B&gt;&gt;</span></div></div></div><div style="display:none" id="code-Traverse_L_A_B_Task_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Task&lt;B&gt;&gt;, EitherUnsafe&lt;L, Task&lt;B&gt;&gt;, MTask&lt;B&gt;, Task&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Traverse&lt;L, A, B>"></a>Traverse&lt;L, A, B&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Traverse_L_A_B_Try_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tarverse operation.  Takes a value of type Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, Try&lt;B&gt;&gt; (by applying a to f).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Try&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Try</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">Traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Try</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, Try&lt;B&gt;&gt;</span></div></div></div><div style="display:none" id="code-Traverse_L_A_B_Try_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Try&lt;B&gt;&gt;, EitherUnsafe&lt;L, Try&lt;B&gt;&gt;, MTry&lt;B&gt;, Try&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Traverse&lt;L, A, B>"></a>Traverse&lt;L, A, B&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Traverse_L_A_B_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tarverse operation.  Takes a value of type TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, TryAsync&lt;B&gt;&gt; (by applying a to f).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">Traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, TryAsync&lt;B&gt;&gt;</span></div></div></div><div style="display:none" id="code-Traverse_L_A_B_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, TryAsync&lt;B&gt;&gt;, EitherUnsafe&lt;L, TryAsync&lt;B&gt;&gt;, MTryAsync&lt;B&gt;, TryAsync&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Traverse&lt;L, A, B>"></a>Traverse&lt;L, A, B&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Traverse_L_A_B_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tarverse operation.  Takes a value of type TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, TryOption&lt;B&gt;&gt; (by applying a to f).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">Traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, TryOption&lt;B&gt;&gt;</span></div></div></div><div style="display:none" id="code-Traverse_L_A_B_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, TryOption&lt;B&gt;&gt;, EitherUnsafe&lt;L, TryOption&lt;B&gt;&gt;, MTryOption&lt;B&gt;, TryOption&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Traverse&lt;L, A, B>"></a>Traverse&lt;L, A, B&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Traverse_L_A_B_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tarverse operation.  Takes a value of type TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, TryOptionAsync&lt;B&gt;&gt; (by applying a to f).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">Traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, TryOptionAsync&lt;B&gt;&gt;</span></div></div></div><div style="display:none" id="code-Traverse_L_A_B_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, TryOptionAsync&lt;B&gt;&gt;, EitherUnsafe&lt;L, TryOptionAsync&lt;B&gt;&gt;, MTryOptionAsync&lt;B&gt;, TryOptionAsync&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Traverse&lt;L, A, B>"></a>Traverse&lt;L, A, B&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Traverse_L_A_B_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tarverse operation.  Takes a value of type IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, IEnumerable&lt;B&gt;&gt; (by applying a to f).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">Traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, IEnumerable&lt;B&gt;&gt;</span></div></div></div><div style="display:none" id="code-Traverse_L_A_B_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, IEnumerable&lt;B&gt;&gt;, EitherUnsafe&lt;L, IEnumerable&lt;B&gt;&gt;, MSeq&lt;B&gt;, IEnumerable&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Traverse&lt;L, A, B>"></a>Traverse&lt;L, A, B&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Traverse_L_A_B_Set_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tarverse operation.  Takes a value of type Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, traverses the inner values of type A, and returns EitherUnsafe&lt;L, Set&lt;B&gt;&gt; (by applying a to f).  So  it &#39;flips&#39; the types whilst maintaining the rules of the inner and outer  types.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Set&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The mapping function to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Set</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">Traverse</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Set</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, Set&lt;B&gt;&gt;</span></div></div></div><div style="display:none" id="code-Traverse_L_A_B_Set_EitherUnsafe&lt;L, A>_ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Traverse&lt;MEitherUnsafe&lt;L, Set&lt;B&gt;&gt;, EitherUnsafe&lt;L, Set&lt;B&gt;&gt;, MSet&lt;B&gt;, Set&lt;B&gt;, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="Where&lt;L, A>"></a>Where&lt;L, A&gt;(Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Where</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Arr&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-Where_L_A_Arr_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MArr&lt;EitherUnsafe&lt;L, A&gt;&gt;, Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="Where&lt;L, A>"></a>Where&lt;L, A&gt;(HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Where</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-Where_L_A_HashSet_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MHashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="Where&lt;L, A>"></a>Where&lt;L, A&gt;(Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Where</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Lst&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-Where_L_A_Lst_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MLst&lt;EitherUnsafe&lt;L, A&gt;&gt;, Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="Where&lt;L, A>"></a>Where&lt;L, A&gt;(Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_L_A_Option_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Option&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Where</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Option&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-Where_L_A_Option_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Option&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="Where&lt;L, A>"></a>Where&lt;L, A&gt;(OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Where</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-Where_L_A_OptionUnsafe_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MOptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="Where&lt;L, A>"></a>Where&lt;L, A&gt;(Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Where</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-Where_L_A_Either_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MEither&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="Where&lt;L, A>"></a>Where&lt;L, A&gt;(EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Where</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-Where_L_A_EitherUnsafe_L_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MEitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="Where&lt;L, A>"></a>Where&lt;L, A&gt;(Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_L_A_Task_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Task&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Where</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Task&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-Where_L_A_Task_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTask&lt;EitherUnsafe&lt;L, A&gt;&gt;, Task&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="Where&lt;L, A>"></a>Where&lt;L, A&gt;(Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_L_A_Try_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Try&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Where</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Try&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-Where_L_A_Try_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTry&lt;EitherUnsafe&lt;L, A&gt;&gt;, Try&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="Where&lt;L, A>"></a>Where&lt;L, A&gt;(TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Where</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-Where_L_A_TryAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="Where&lt;L, A>"></a>Where&lt;L, A&gt;(TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Where</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-Where_L_A_TryOption_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="Where&lt;L, A>"></a>Where&lt;L, A&gt;(TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Where</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-Where_L_A_TryOptionAsync_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MTryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, TryOptionAsync&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="Where&lt;L, A>"></a>Where&lt;L, A&gt;(IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Where</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-Where_L_A_IEnumerable_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MSeq&lt;EitherUnsafe&lt;L, A&gt;&gt;, IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div><div class="member-title"><a name="Where&lt;L, A>"></a>Where&lt;L, A&gt;(Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_L_A_Set_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filter operation.  Applies the bound value to the predicate f. If true then that value is retained, else filtered out. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div></div><div class="arg-desc">The Set&lt;EitherUnsafe&lt;L, A&gt;&gt; to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Where</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Set&lt;EitherUnsafe&lt;L, A&gt;&gt; with the predicate f(a) applied</span></div></div></div><div style="display:none" id="code-Where_L_A_Set_EitherUnsafe&lt;L, A>_ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Trans&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;
                .Inst.Bind&lt;MSet&lt;EitherUnsafe&lt;L, A&gt;&gt;, Set&lt;EitherUnsafe&lt;L, A&gt;&gt;, MEitherUnsafe&lt;L, A&gt;, EitherUnsafe&lt;L, A&gt;, A&gt;(ma, 
                    a =&gt; pred(a)
                        ? default(MEitherUnsafe&lt;L, A&gt;).Return(a)
                        : default(MEitherUnsafe&lt;L, A&gt;).Zero())</div></div></div></div></body></html>