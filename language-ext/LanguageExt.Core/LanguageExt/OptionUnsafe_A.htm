<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="OptionUnsafe_A.htm">OptionUnsafe&lt;A&gt;</span></div><div class="nav-panel"><h3 >CONSTRUCTORS</h3><a class="nav-link" href="#OptionUnsafe">OptionUnsafe(SerializationInfo, StreamingContext)</a><h3 >FIELDS</h3><a class="nav-link" href="#None">None</a><h3 >PROPERTIES</h3><a class="nav-link" href="#IsLazy">IsLazy</a><a class="nav-link" href="#IsNone">IsNone</a><a class="nav-link" href="#IsSome">IsSome</a><h3 >METHODS</h3><a class="nav-link" href="#AsEnumerable">AsEnumerable()</a><a class="nav-link" href="#BiBind&lt;B>">BiBind&lt;B&gt;(Func&lt;A, OptionUnsafe&lt;B&gt;&gt;, Func&lt;OptionUnsafe&lt;B&gt;&gt;)</a><a class="nav-link" href="#BiExists">BiExists(Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)</a><a class="nav-link" href="#BiExists">BiExists(Func&lt;A, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#BiFold&lt;S>">BiFold&lt;S&gt;(S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)</a><a class="nav-link" href="#BiFold&lt;S>">BiFold&lt;S&gt;(S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#BiForAll">BiForAll(Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)</a><a class="nav-link" href="#BiForAll">BiForAll(Func&lt;A, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#BiIter">BiIter(Action&lt;A&gt;, Action&lt;Unit&gt;)</a><a class="nav-link" href="#BiIter">BiIter(Action&lt;A&gt;, Action)</a><a class="nav-link" href="#BiMap&lt;B>">BiMap&lt;B&gt;(Func&lt;A, B&gt;, Func&lt;Unit, B&gt;)</a><a class="nav-link" href="#BiMap&lt;B>">BiMap&lt;B&gt;(Func&lt;A, B&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#Bind&lt;B>">Bind&lt;B&gt;(Func&lt;A, OptionUnsafe&lt;B&gt;&gt;)</a><a class="nav-link" href="#CompareTo">CompareTo(OptionUnsafe&lt;A&gt;)</a><a class="nav-link" href="#Count">Count()</a><a class="nav-link" href="#Equals">Equals(OptionUnsafe&lt;A&gt;)</a><a class="nav-link" href="#Equals">Equals(object)</a><a class="nav-link" href="#Exists">Exists(Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Filter">Filter(Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Fold&lt;S>">Fold&lt;S&gt;(S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBack&lt;S>">FoldBack&lt;S&gt;(S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#ForAll">ForAll(Func&lt;A, bool&gt;)</a><a class="nav-link" href="#GetEnumerator">GetEnumerator()</a><a class="nav-link" href="#GetHashCode">GetHashCode()</a><a class="nav-link" href="#GetObjectData">GetObjectData(SerializationInfo, StreamingContext)</a><a class="nav-link" href="#GetUnderlyingType">GetUnderlyingType()</a><a class="nav-link" href="#IfNoneUnsafe">IfNoneUnsafe(Func&lt;A&gt;)</a><a class="nav-link" href="#IfNoneUnsafe">IfNoneUnsafe(A)</a><a class="nav-link" href="#IfSomeUnsafe">IfSomeUnsafe(Action&lt;A&gt;)</a><a class="nav-link" href="#IfSomeUnsafe">IfSomeUnsafe(Func&lt;A, Unit&gt;)</a><a class="nav-link" href="#Iter">Iter(Action&lt;A&gt;)</a><a class="nav-link" href="#Join&lt;B, C, D>">Join&lt;B, C, D&gt;(OptionUnsafe&lt;B&gt;, Func&lt;A, C&gt;, Func&lt;B, C&gt;, Func&lt;A, B, D&gt;)</a><a class="nav-link" href="#Map&lt;B>">Map&lt;B&gt;(Func&lt;A, B&gt;)</a><a class="nav-link" href="#MapAsync&lt;B>">MapAsync&lt;B&gt;(Func&lt;A, Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#MatchUnsafe">MatchUnsafe(Action&lt;A&gt;, Action)</a><a class="nav-link" href="#MatchUnsafe&lt;B>">MatchUnsafe&lt;B&gt;(Func&lt;A, B&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#MatchUntyped&lt;R>">MatchUntyped&lt;R&gt;(Func&lt;object, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#ParMap&lt;B, C, D>">ParMap&lt;B, C, D&gt;(Func&lt;A, B, C, D&gt;)</a><a class="nav-link" href="#ParMap&lt;B, C>">ParMap&lt;B, C&gt;(Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#Select&lt;B>">Select&lt;B&gt;(Func&lt;A, B&gt;)</a><a class="nav-link" href="#SelectMany&lt;B, C>">SelectMany&lt;B, C&gt;(Func&lt;A, OptionUnsafe&lt;B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#Some">Some(A)</a><a class="nav-link" href="#Some">Some(Action&lt;A&gt;)</a><a class="nav-link" href="#Some&lt;B>">Some&lt;B&gt;(Func&lt;A, B&gt;)</a><a class="nav-link" href="#ToArray">ToArray()</a><a class="nav-link" href="#ToEither&lt;L>">ToEither&lt;L&gt;(L)</a><a class="nav-link" href="#ToEither&lt;L>">ToEither&lt;L&gt;(Func&lt;L&gt;)</a><a class="nav-link" href="#ToEitherUnsafe&lt;L>">ToEitherUnsafe&lt;L&gt;(L)</a><a class="nav-link" href="#ToEitherUnsafe&lt;L>">ToEitherUnsafe&lt;L&gt;(Func&lt;L&gt;)</a><a class="nav-link" href="#ToList">ToList()</a><a class="nav-link" href="#ToOption">ToOption()</a><a class="nav-link" href="#ToSeq">ToSeq()</a><a class="nav-link" href="#ToString">ToString()</a><a class="nav-link" href="#ToTryOption">ToTryOption()</a><a class="nav-link" href="#ToValidation&lt;FAIL>">ToValidation&lt;FAIL&gt;(FAIL)</a><a class="nav-link" href="#Where">Where(Func&lt;A, bool&gt;)</a></div><div class="content-panel"><h1 >OptionUnsafe&lt;A&gt; Struct</h1><p ><span >Discriminated union type.  Can be in one of two states:<br/><br/><div class='code-line'>     Some(a)</div><div class='code-line'>     None</div><br/><br/> Typeclass instances available for this type:<br/><br/><div class='code-line'>     BiFoldable  : MOptionUnsafe</div><div class='code-line'>     Eq          : EqOpt</div><div class='code-line'>     Foldable    : MOptionUnsafe</div><div class='code-line'>     Functor     : FOptionUnsafe</div><div class='code-line'>     MonadPlus   : MOptionUnsafe</div><div class='code-line'>     Optional    : MOptionUnsafe</div><div class='code-line'>     Ord         : OrdOpt</div> </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IOptional</span></span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IComparable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Constructors</h2><div class="member-title"><a name="OptionUnsafe"></a>OptionUnsafe(SerializationInfo, StreamingContext)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-OptionUnsafe__SerializationInfo__info__StreamingContext__context_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">info</div><div class="arg-type"><span class="ident">SerializationInfo</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">context</div><div class="arg-type"><span class="ident">StreamingContext</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">ctor</span> <span class="ident">OptionUnsafe</span>(<span class="ident">SerializationInfo</span> info, <span class="ident">StreamingContext</span> context)</div></div><div style="display:none" id="code-OptionUnsafe__SerializationInfo__info__StreamingContext__context_"><div class="section_title">SOURCE</div><div class="code">
            var isSome = (bool)info.GetValue(&quot;IsSome&quot;, typeof(bool));
            if (isSome)
            {
                var value = (A)info.GetValue(&quot;Value&quot;, typeof(A));
                data = OptionData.Some(value);
            }
            else
            {
                data = OptionData.None&lt;A&gt;();
            }
        </div></div></div><h2 >Fields</h2><div class="member-title"><a name="None"></a>None</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >None </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; <span class="ident">None</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="IsLazy"></a>IsLazy</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >True if this instance evaluates lazily </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsLazy</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IsNone"></a>IsNone</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Is the option in a None state </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsNone</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IsSome"></a>IsSome</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Is the option in a Some state </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsSome</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="AsEnumerable"></a>AsEnumerable()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the OptionUnsafe to an enumerable of zero or one items </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; <span class="ident">AsEnumerable</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An enumerable of zero or one items</span></div></div></div><div style="display:none" id="code-AsEnumerable__"><div class="section_title">SOURCE</div><div class="code">
            asEnumerable&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this)</div></div></div><div class="member-title"><a name="BiBind&lt;B>"></a>BiBind&lt;B&gt;(Func&lt;A, OptionUnsafe&lt;B&gt;&gt;, Func&lt;OptionUnsafe&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiBind_B_Func_A_OptionUnsafe&lt;B>_Some__Func_OptionUnsafe&lt;B>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Bi-bind.  Allows mapping of both monad states </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiBind</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiBind_B_Func_A_OptionUnsafe&lt;B>_Some__Func_OptionUnsafe&lt;B>_None_"><div class="section_title">SOURCE</div><div class="code">
            IsSome
                ? Some(Value)
                : None()</div></div></div><div class="member-title"><a name="BiExists"></a>BiExists(Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiExists__Func_A_bool_Some__Func_Unit_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the OptionUnsafe is in a None state then True is returned if invoking None returns True. If the OptionUnsafe is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">BiExists</span>(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the OptionUnsafe is in a None state then True is returned if  invoking None returns True. If the OptionUnsafe is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-BiExists__Func_A_bool_Some__Func_Unit_bool_None_"><div class="section_title">SOURCE</div><div class="code">
            biExists&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A, Unit&gt;(this, Some, None)</div></div></div><div class="member-title"><a name="BiExists"></a>BiExists(Func&lt;A, bool&gt;, Func&lt;bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiExists__Func_A_bool_Some__Func_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the OptionUnsafe is in a None state then True is returned if invoking None returns True. If the OptionUnsafe is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">BiExists</span>(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the OptionUnsafe is in a None state then True is returned if  invoking None returns True. If the OptionUnsafe is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-BiExists__Func_A_bool_Some__Func_bool_None_"><div class="section_title">SOURCE</div><div class="code">
            biExists&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A, Unit&gt;(this, Some, _ =&gt; None())</div></div></div><div class="member-title"><a name="BiFold&lt;S>"></a>BiFold&lt;S&gt;(S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFold_S_S__state__Func_S_A_S_Some__Func_S_Unit_S_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >OptionUnsafe types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/> Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if OptionUnsafe is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if OptionUnsafe is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">S</span> <span class="ident">BiFold</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-BiFold_S_S__state__Func_S_A_S_Some__Func_S_Unit_S_None_"><div class="section_title">SOURCE</div><div class="code">
            MOptionUnsafe&lt;A&gt;.Inst.BiFold(this, state, Some, None)</div></div></div><div class="member-title"><a name="BiFold&lt;S>"></a>BiFold&lt;S&gt;(S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFold_S_S__state__Func_S_A_S_Some__Func_S_S_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >OptionUnsafe types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/> Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if OptionUnsafe is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if OptionUnsafe is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">S</span> <span class="ident">BiFold</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-BiFold_S_S__state__Func_S_A_S_Some__Func_S_S_None_"><div class="section_title">SOURCE</div><div class="code">
            MOptionUnsafe&lt;A&gt;.Inst.BiFold(this, state, Some, (s, _) =&gt; None(s))</div></div></div><div class="member-title"><a name="BiForAll"></a>BiForAll(Func&lt;A, bool&gt;, Func&lt;Unit, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiForAll__Func_A_bool_Some__Func_Unit_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the OptionUnsafe is in a None state then True is returned if invoking None returns True. If the OptionUnsafe is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">BiForAll</span>(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the OptionUnsafe is in a None state then True is returned if  invoking None returns True. If the OptionUnsafe is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-BiForAll__Func_A_bool_Some__Func_Unit_bool_None_"><div class="section_title">SOURCE</div><div class="code">
            biForAll&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A, Unit&gt;(this, Some, None)</div></div></div><div class="member-title"><a name="BiForAll"></a>BiForAll(Func&lt;A, bool&gt;, Func&lt;bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiForAll__Func_A_bool_Some__Func_bool_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the OptionUnsafe is in a None state then True is returned if invoking None returns True. If the OptionUnsafe is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">BiForAll</span>(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the OptionUnsafe is in a None state then True is returned if  invoking None returns True. If the OptionUnsafe is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-BiForAll__Func_A_bool_Some__Func_bool_None_"><div class="section_title">SOURCE</div><div class="code">
            biForAll&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A, Unit&gt;(this, Some, _ =&gt; None())</div></div></div><div class="member-title"><a name="BiIter"></a>BiIter(Action&lt;A&gt;, Action&lt;Unit&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiIter__Action_A_Some__Action_Unit_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke an action depending on the state of the OptionUnsafe </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Unit</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">BiIter</span>(<span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some, <span class="ident">Action</span>&lt;<span class="ident">Unit</span>&gt; None)</div></div><div style="display:none" id="code-BiIter__Action_A_Some__Action_Unit_None_"><div class="section_title">SOURCE</div><div class="code">
            biIter&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A, Unit&gt;(this, Some, None)</div></div></div><div class="member-title"><a name="BiIter"></a>BiIter(Action&lt;A&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiIter__Action_A_Some__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke an action depending on the state of the OptionUnsafe </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke if in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >Action to invoke if in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">BiIter</span>(<span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some, <span class="ident">Action</span> None)</div></div><div style="display:none" id="code-BiIter__Action_A_Some__Action__None_"><div class="section_title">SOURCE</div><div class="code">
            biIter&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A, Unit&gt;(this, Some, _ =&gt; None())</div></div></div><div class="member-title"><a name="BiMap&lt;B>"></a>BiMap&lt;B&gt;(Func&lt;A, B&gt;, Func&lt;Unit, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMap_B_Func_A_B_Some__Func_Unit_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMap</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped functor</span></div></div></div><div style="display:none" id="code-BiMap_B_Func_A_B_Some__Func_Unit_B_None_"><div class="section_title">SOURCE</div><div class="code">
            FOptionUnsafe&lt;A, B&gt;.Inst.BiMap(this, Some, None)</div></div></div><div class="member-title"><a name="BiMap&lt;B>"></a>BiMap&lt;B&gt;(Func&lt;A, B&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMap_B_Func_A_B_Some__Func_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMap</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped functor</span></div></div></div><div style="display:none" id="code-BiMap_B_Func_A_B_Some__Func_B_None_"><div class="section_title">SOURCE</div><div class="code">
            FOptionUnsafe&lt;A, B&gt;.Inst.BiMap(this, Some, _ =&gt; None())</div></div></div><div class="member-title"><a name="Bind&lt;B>"></a>Bind&lt;B&gt;(Func&lt;A, OptionUnsafe&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_B_Func_A_OptionUnsafe&lt;B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monad bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Bind</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Bind_B_Func_A_OptionUnsafe&lt;B>_f_"><div class="section_title">SOURCE</div><div class="code">
            MOptionUnsafe&lt;A&gt;.Inst.Bind&lt;MOptionUnsafe&lt;B&gt;, OptionUnsafe&lt;B&gt;, B&gt;(this, f)</div></div></div><div class="member-title"><a name="CompareTo"></a>CompareTo(OptionUnsafe&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CompareTo__OptionUnsafe_A_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Uses the OrdDefault instance to do an ordering comparison on the bound  value.  To use anything other than the default call  compare&lt;OrdDefault&lt;A&gt;, A&gt;(this, other), where EQ is an instance derived  from Eq&lt;A&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The OptionUnsafe type to compare this type with</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">CompareTo</span>(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >True if this and other are equal</span></div></div></div><div style="display:none" id="code-CompareTo__OptionUnsafe_A_other_"><div class="section_title">SOURCE</div><div class="code">
            compare&lt;OrdDefault&lt;A&gt;, A&gt;(this, other)</div></div></div><div class="member-title"><a name="Count"></a>Count()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Count__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return the number of bound values in this structure: <br/><br/> <div class='code-line'>     None = 0</div> <br/><br/> <div class='code-line'>     Some = 1</div> <br/><br/> </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">Count</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span ></span></div></div></div><div style="display:none" id="code-Count__"><div class="section_title">SOURCE</div><div class="code">
            MOptionUnsafe&lt;A&gt;.Inst.Count(this)(unit)</div></div></div><div class="member-title"><a name="Equals"></a>Equals(OptionUnsafe&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__OptionUnsafe_A_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Uses the EqDefault instance to do an equality check on the bound value.   To use anything other than the default call equals&lt;EQ, A&gt;(a, b),  where EQ is an instance derived from Eq&lt;A&gt; </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The OptionUnsafe type to compare this type with</span></div></div><div class="section_title">REMARKS</div><span >This uses the EqDefault instance for comparison of the bound A values.   The EqDefault instance wraps up the .NET EqualityComparer.Default  behaviour.  For more control over equality you can call:<br/><br/><div class='code-line'>     equals&lt;EQ, A&gt;(lhs, rhs);</div><br/><br/> Where EQ is a struct derived from Eq&lt;A&gt;.  For example: <br/><br/><div class='code-line'>     equals&lt;EqString, string&gt;(lhs, rhs);</div><div class='code-line'>     equals&lt;EqArray&lt;int&gt;, int[]&gt;(lhs, rhs);</div><br/><br/> </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if this and other are equal</span></div></div></div><div style="display:none" id="code-Equals__OptionUnsafe_A_other_"><div class="section_title">SOURCE</div><div class="code">
            equals&lt;EqDefault&lt;A&gt;, A&gt;(this, other)</div></div></div><div class="member-title"><a name="Equals"></a>Equals(object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__object__obj_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >DO NOT USE - Use the Structural equality variant of this method Equals&lt;EQ, A&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">obj</div><div class="arg-type"><span class="keyword">object</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="keyword">object</span> obj)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Equals__object__obj_"><div class="section_title">SOURCE</div><div class="code">
            obj is OptionUnsafe&lt;A&gt; &amp;&amp; equals&lt;EqDefault&lt;A&gt;, A&gt;(this, (ReferenceEquals(obj, null) ? None : (OptionUnsafe&lt;A&gt;)obj))</div></div></div><div class="member-title"><a name="Exists"></a>Exists(Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the OptionUnsafe is in a None state then True is returned if invoking None returns True. If the OptionUnsafe is in a Some state the value is the result of running  applying the bound value to the Some predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span ></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Exists</span>(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the OptionUnsafe is in a None state then True is returned if  invoking None returns True. If the OptionUnsafe is in a Some state the value  is the result of running applying the bound value to the Some predicate  supplied.</span></div></div></div><div style="display:none" id="code-Exists__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            exists&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this, pred)</div></div></div><div class="member-title"><a name="Filter"></a>Filter(Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value (if in a Some state) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Filter</span>(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Some(x) if the OptionUnsafe is in a Some state and the predicate returns True.  None otherwise.</span></div></div></div><div style="display:none" id="code-Filter__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            filter&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this, pred)</div></div></div><div class="member-title"><a name="Fold&lt;S>"></a>Fold&lt;S&gt;(S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_S_S__state__Func_S_A_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >OptionUnsafe types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/> Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if OptionUnsafe is in a Some state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">S</span> <span class="ident">Fold</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-Fold_S_S__state__Func_S_A_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            MOptionUnsafe&lt;A&gt;.Inst.Fold(this, state, folder)(unit)</div></div></div><div class="member-title"><a name="FoldBack&lt;S>"></a>FoldBack&lt;S&gt;(S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBack_S_S__state__Func_S_A_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >OptionUnsafe types are like lists of 0 or 1 items, and therefore follow the  same rules when folding. <br/><br/> In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right: <br/><br/> Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folder function, applied if OptionUnsafe is in a Some state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">S</span> <span class="ident">FoldBack</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div></div><div style="display:none" id="code-FoldBack_S_S__state__Func_S_A_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            MOptionUnsafe&lt;A&gt;.Inst.FoldBack(this, state, folder)(unit)</div></div></div><div class="member-title"><a name="ForAll"></a>ForAll(Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value.  If the OptionUnsafe is in a None state then True is returned (because the predicate applies for-all values). If the OptionUnsafe is in a Some state the value is the result of running  applying the bound value to the predicate supplied.         </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span ></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">ForAll</span>(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >If the OptionUnsafe is in a None state then True is returned (because  the predicate applies for-all values).  If the OptionUnsafe is in a Some state the value is the result of running applying the bound value to the  predicate supplied.</span></div></div></div><div style="display:none" id="code-ForAll__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            forall&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this, pred)</div></div></div><div class="member-title"><a name="GetEnumerator"></a>GetEnumerator()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetEnumerator__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">IEnumerator</span>&lt;<span class="ident">A</span>&gt; <span class="ident">GetEnumerator</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerator</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-GetEnumerator__"><div class="section_title">SOURCE</div><div class="code">
            AsEnumerable().GetEnumerator()</div></div></div><div class="member-title"><a name="GetHashCode"></a>GetHashCode()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetHashCode__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculate the hash-code from the bound value, unless the OptionUnsafe is in a None state, in which case the hash-code will be 0 </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="ident">GetHashCode</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Hash-code from the bound value, unless the OptionUnsafe is in a None state, in which case the hash-code will be 0</span></div></div></div><div style="display:none" id="code-GetHashCode__"><div class="section_title">SOURCE</div><div class="code">
            IsSome
                ? Value.GetHashCode()
                : 0</div></div></div><div class="member-title"><a name="GetObjectData"></a>GetObjectData(SerializationInfo, StreamingContext)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetObjectData__SerializationInfo__info__StreamingContext__context_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">info</div><div class="arg-type"><span class="ident">SerializationInfo</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">context</div><div class="arg-type"><span class="ident">StreamingContext</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">void</span> <span class="ident">GetObjectData</span>(<span class="ident">SerializationInfo</span> info, <span class="ident">StreamingContext</span> context)</div></div><div style="display:none" id="code-GetObjectData__SerializationInfo__info__StreamingContext__context_"><div class="section_title">SOURCE</div><div class="code">
            info.AddValue(&quot;IsSome&quot;, IsSome);
            if(IsSome) info.AddValue(&quot;Value&quot;, data.Value);
        </div></div></div><div class="member-title"><a name="GetUnderlyingType"></a>GetUnderlyingType()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetUnderlyingType__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the Type of the bound value </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Type</span> <span class="ident">GetUnderlyingType</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Type</span></div><div class="normal"><span >Type of the bound value</span></div></div></div><div style="display:none" id="code-GetUnderlyingType__"><div class="section_title">SOURCE</div><div class="code">
            typeof(A)</div></div></div><div class="member-title"><a name="IfNoneUnsafe"></a>IfNoneUnsafe(Func&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneUnsafe__Func_A_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Operation to invoke if the structure is in a None state</span></div></div><div class="section_title">REMARKS</div><span >Will not accept a null return value from the None operation</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">A</span> <span class="ident">IfNoneUnsafe</span>(<span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Tesult of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned.</span></div></div></div><div style="display:none" id="code-IfNoneUnsafe__Func_A_None_"><div class="section_title">SOURCE</div><div class="code">
            ifNone&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this, None)</div></div></div><div class="member-title"><a name="IfNoneUnsafe"></a>IfNoneUnsafe(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneUnsafe__A__noneValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc"><span >Value to return if in a None state</span></div></div><div class="section_title">REMARKS</div><span >Will not accept a null noneValue</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">A</span> <span class="ident">IfNoneUnsafe</span>(<span class="ident">A</span> noneValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned</span></div></div></div><div style="display:none" id="code-IfNoneUnsafe__A__noneValue_"><div class="section_title">SOURCE</div><div class="code">
            ifNone&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this, noneValue)</div></div></div><div class="member-title"><a name="IfSomeUnsafe"></a>IfSomeUnsafe(Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfSomeUnsafe__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the action if OptionUnsafe is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke if OptionUnsafe is in the Some state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">IfSomeUnsafe</span>(<span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div></div><div style="display:none" id="code-IfSomeUnsafe__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            ifSome&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this, f)</div></div></div><div class="member-title"><a name="IfSomeUnsafe"></a>IfSomeUnsafe(Func&lt;A, Unit&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfSomeUnsafe__Func_A_Unit_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the f function if OptionUnsafe is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Unit</span>&gt;</div></div><div class="arg-desc"><span >Function to invoke if OptionUnsafe is in the Some state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">IfSomeUnsafe</span>(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Unit</span>&gt; f)</div></div><div style="display:none" id="code-IfSomeUnsafe__Func_A_Unit_f_"><div class="section_title">SOURCE</div><div class="code">
            ifSome&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this, f)</div></div></div><div class="member-title"><a name="Iter"></a>Iter(Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter__Action_A_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke an action for the bound value (if in a Some state) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">Iter</span>(<span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some)</div></div><div style="display:none" id="code-Iter__Action_A_Some_"><div class="section_title">SOURCE</div><div class="code">
            iter&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this, Some)</div></div></div><div class="member-title"><a name="Join&lt;B, C, D>"></a>Join&lt;B, C, D&gt;(OptionUnsafe&lt;B&gt;, Func&lt;A, C&gt;, Func&lt;B, C&gt;, Func&lt;A, B, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Join_B_C_D_OptionUnsafe_B_inner__Func_A_C_outerKeyMap__Func_B_C_innerKeyMap__Func_A_B_D_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic join </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">inner</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">outerKeyMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">innerKeyMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">D</span>&gt; <span class="ident">Join</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; inner, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt; outerKeyMap, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt; innerKeyMap, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">D</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">D</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Join_B_C_D_OptionUnsafe_B_inner__Func_A_C_outerKeyMap__Func_B_C_innerKeyMap__Func_A_B_D_project_"><div class="section_title">SOURCE</div><div class="code">
            join&lt;EqDefault&lt;C&gt;, MOptionUnsafe&lt;A&gt;, MOptionUnsafe&lt;B&gt;, MOptionUnsafe&lt;D&gt;, OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;B&gt;, OptionUnsafe&lt;D&gt;, A, B, C, D&gt;(
                this, inner, outerKeyMap, innerKeyMap, project
                )</div></div></div><div class="member-title"><a name="Map&lt;B>"></a>Map&lt;B&gt;(Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_B_Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped functor</span></div></div></div><div style="display:none" id="code-Map_B_Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            FOptionUnsafe&lt;A, B&gt;.Inst.Map(this, f)</div></div></div><div class="member-title"><a name="MapAsync&lt;B>"></a>MapAsync&lt;B&gt;(Func&lt;A, Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MapAsync_B_Func_A_Task&lt;B>_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a map operation that returns a Task result </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Mapping function to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">MapAsync</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >A task</span></div></div></div><div style="display:none" id="code-MapAsync_B_Func_A_Task&lt;B>_map_"><div class="section_title">SOURCE</div><div class="code">
            IsSome
                ? OptionUnsafe&lt;B&gt;.Some(await map(Value))
                : OptionUnsafe&lt;B&gt;.None</div></div></div><div class="member-title"><a name="MatchUnsafe"></a>MatchUnsafe(Action&lt;A&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUnsafe__Action_A_Some__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the OptionUnsafe </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Some match operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >None match operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">Unit</span> <span class="ident">MatchUnsafe</span>(<span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some, <span class="ident">Action</span> None)</div></div><div style="display:none" id="code-MatchUnsafe__Action_A_Some__Action__None_"><div class="section_title">SOURCE</div><div class="code">
            MOptionUnsafe&lt;A&gt;.Inst.Match(this, Some, None)</div></div></div><div class="member-title"><a name="MatchUnsafe&lt;B>"></a>MatchUnsafe&lt;B&gt;(Func&lt;A, B&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUnsafe_B_Func_A_B_Some__Func_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the OptionUnsafe and return a B, which can be null. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Some match operation. May return null.</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >None match operation. May return null.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">B</span> <span class="ident">MatchUnsafe</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">B</span></div><div class="normal"><span >B, or null</span></div></div></div><div style="display:none" id="code-MatchUnsafe_B_Func_A_B_Some__Func_B_None_"><div class="section_title">SOURCE</div><div class="code">
            MOptionUnsafe&lt;A&gt;.Inst.MatchUnsafe(this, Some, None)</div></div></div><div class="member-title"><a name="MatchUntyped&lt;R>"></a>MatchUntyped&lt;R&gt;(Func&lt;object, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUntyped_R_Func_object_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match operation with an untyped value for Some. This can be useful for serialisation and dealing with the IOptional interface </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Operation to perform if the option is in a Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Operation to perform if the option is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">R</span> <span class="ident">MatchUntyped</span>&lt;<span class="ident">R</span>&gt;(<span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >The result of the match operation</span></div></div></div><div style="display:none" id="code-MatchUntyped_R_Func_object_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            matchUntyped&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A, R&gt;(this, Some, None)</div></div></div><div class="member-title"><a name="ParMap&lt;B, C, D>"></a>ParMap&lt;B, C, D&gt;(Func&lt;A, B, C, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParMap_B_C_D_Func_A_B_C_D_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">D</span>&gt;&gt;&gt; <span class="ident">ParMap</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">D</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParMap_B_C_D_Func_A_B_C_D_func_"><div class="section_title">SOURCE</div><div class="code">
            Map(curry(func))</div></div></div><div class="member-title"><a name="ParMap&lt;B, C>"></a>ParMap&lt;B, C&gt;(Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParMap_B_C_Func_A_B_C_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">ParMap</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParMap_B_C_Func_A_B_C_func_"><div class="section_title">SOURCE</div><div class="code">
            Map(curry(func))</div></div></div><div class="member-title"><a name="Select&lt;B>"></a>Select&lt;B&gt;(Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_B_Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Projection function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Select</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped functor</span></div></div></div><div style="display:none" id="code-Select_B_Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            FOptionUnsafe&lt;A, B&gt;.Inst.Map(this, f)</div></div></div><div class="member-title"><a name="SelectMany&lt;B, C>"></a>SelectMany&lt;B, C&gt;(Func&lt;A, OptionUnsafe&lt;B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_B_C_Func_A_OptionUnsafe&lt;B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monad bind operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">C</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_B_C_Func_A_OptionUnsafe&lt;B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
            SelectMany&lt;MOptionUnsafe&lt;A&gt;, MOptionUnsafe&lt;B&gt;, MOptionUnsafe&lt;C&gt;, OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;B&gt;, OptionUnsafe&lt;C&gt;, A, B, C&gt;(this, bind, project)</div></div></div><div class="member-title"><a name="Some"></a>Some(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Some__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Construct an OptionUnsafe of A in a Some state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc"><span >Value to bind, must be non-null</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Some</span>(<span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >OptionUnsafe of A</span></div></div></div><div style="display:none" id="code-Some__A__value_"><div class="section_title">SOURCE</div><div class="code">
            value</div></div></div><div class="member-title"><a name="Some"></a>Some(Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Some__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fluent pattern matching.  Provide a Some handler and then follow on fluently with .None(...) to complete the matching operation. This is for dispatching actions, use Some&lt;A,B&gt;(...) to return a value from the match operation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >The Some(x) match operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">SomeUnitContext</span>&lt;<span class="ident">MOptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt; <span class="ident">Some</span>(<span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SomeUnitContext</span>&lt;<span class="ident">MOptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Some__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            new SomeUnitContext&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this, f, false)</div></div></div><div class="member-title"><a name="Some&lt;B>"></a>Some&lt;B&gt;(Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Some_B_Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fluent pattern matching.  Provide a Some handler and then follow on fluently with .None(...) to complete the matching operation. This is for returning a value from the match operation, to dispatch an action instead, use Some&lt;A&gt;(...) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >The Some(x) match operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">SomeContext</span>&lt;<span class="ident">MOptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">Some</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SomeContext</span>&lt;<span class="ident">MOptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >The result of the match operation</span></div></div></div><div style="display:none" id="code-Some_B_Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            new SomeContext&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A, B&gt;(this, f, false)</div></div></div><div class="member-title"><a name="ToArray"></a>ToArray()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToArray__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the OptionUnsafe to an enumerable of zero or one items </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToArray</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An enumerable of zero or one items</span></div></div></div><div style="display:none" id="code-ToArray__"><div class="section_title">SOURCE</div><div class="code">
            toArray&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this)</div></div></div><div class="member-title"><a name="ToEither&lt;L>"></a>ToEither&lt;L&gt;(L)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEither_L_L__defaultLeftValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to an Either </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div><div class="arg-desc"><span >Default value if the structure is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; <span class="ident">ToEither</span>&lt;<span class="ident">L</span>&gt;(<span class="ident">L</span> defaultLeftValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div><div class="normal"><span >An Either representation of the structure</span></div></div></div><div style="display:none" id="code-ToEither_L_L__defaultLeftValue_"><div class="section_title">SOURCE</div><div class="code">
            toEither&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, L, A&gt;(this, defaultLeftValue)</div></div></div><div class="member-title"><a name="ToEither&lt;L>"></a>ToEither&lt;L&gt;(Func&lt;L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEither_L_Func_L_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to an Either </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; <span class="ident">ToEither</span>&lt;<span class="ident">L</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div><div class="normal"><span >An Either representation of the structure</span></div></div></div><div style="display:none" id="code-ToEither_L_Func_L_Left_"><div class="section_title">SOURCE</div><div class="code">
            toEither&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, L, A&gt;(this, Left)</div></div></div><div class="member-title"><a name="ToEitherUnsafe&lt;L>"></a>ToEitherUnsafe&lt;L&gt;(L)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEitherUnsafe_L_L__defaultLeftValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to an EitherUnsafe </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div><div class="arg-desc"><span >Default value if the structure is in a None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; <span class="ident">ToEitherUnsafe</span>&lt;<span class="ident">L</span>&gt;(<span class="ident">L</span> defaultLeftValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div><div class="normal"><span >An EitherUnsafe representation of the structure</span></div></div></div><div style="display:none" id="code-ToEitherUnsafe_L_L__defaultLeftValue_"><div class="section_title">SOURCE</div><div class="code">
            toEitherUnsafe&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, L, A&gt;(this, defaultLeftValue)</div></div></div><div class="member-title"><a name="ToEitherUnsafe&lt;L>"></a>ToEitherUnsafe&lt;L&gt;(Func&lt;L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEitherUnsafe_L_Func_L_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to an EitherUnsafe </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; <span class="ident">ToEitherUnsafe</span>&lt;<span class="ident">L</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div><div class="normal"><span >An EitherUnsafe representation of the structure</span></div></div></div><div style="display:none" id="code-ToEitherUnsafe_L_Func_L_Left_"><div class="section_title">SOURCE</div><div class="code">
            toEitherUnsafe&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, L, A&gt;(this, Left)</div></div></div><div class="member-title"><a name="ToList"></a>ToList()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToList__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the OptionUnsafe to an immutable list of zero or one items </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToList</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An immutable list of zero or one items</span></div></div></div><div style="display:none" id="code-ToList__"><div class="section_title">SOURCE</div><div class="code">
            toList&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this)</div></div></div><div class="member-title"><a name="ToOption"></a>ToOption()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToOption__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to a Option </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToOption</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An OptionUnsafe representation of the structure</span></div></div></div><div style="display:none" id="code-ToOption__"><div class="section_title">SOURCE</div><div class="code">
            toOption&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this)</div></div></div><div class="member-title"><a name="ToSeq"></a>ToSeq()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToSeq__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the OptionUnsafe to an enumerable sequence of zero or one items </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToSeq</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An enumerable sequence of zero or one items</span></div></div></div><div style="display:none" id="code-ToSeq__"><div class="section_title">SOURCE</div><div class="code">
            toSeq&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this)</div></div></div><div class="member-title"><a name="ToString"></a>ToString()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToString__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get a string representation of the OptionUnsafe </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="ident">ToString</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">string</span></div><div class="normal"><span >String representation of the OptionUnsafe</span></div></div></div><div style="display:none" id="code-ToString__"><div class="section_title">SOURCE</div><div class="code">
            IsSome
                ? $&quot;Some({Value})&quot;
                : &quot;None&quot;</div></div></div><div class="member-title"><a name="ToTryOption"></a>ToTryOption()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToTryOption__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to a TryOption </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToTryOption</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >A TryOption representation of the structure</span></div></div></div><div style="display:none" id="code-ToTryOption__"><div class="section_title">SOURCE</div><div class="code">
            toTryOption&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this)</div></div></div><div class="member-title"><a name="ToValidation&lt;FAIL>"></a>ToValidation&lt;FAIL&gt;(FAIL)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToValidation_FAIL_FAIL__defaultFailureValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">defaultFailureValue</div><div class="arg-type"><span class="ident">FAIL</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">A</span>&gt; <span class="ident">ToValidation</span>&lt;<span class="ident">FAIL</span>&gt;(<span class="ident">FAIL</span> defaultFailureValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Validation</span>&lt;<span class="ident">FAIL</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToValidation_FAIL_FAIL__defaultFailureValue_"><div class="section_title">SOURCE</div><div class="code">
            IsSome
                ? Success&lt;FAIL, A&gt;(Value)
                : Fail&lt;FAIL, A&gt;(defaultFailureValue)</div></div></div><div class="member-title"><a name="Where"></a>Where(Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a predicate to the bound value (if in a Some state) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Where</span>(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Some(x) if the OptionUnsafe is in a Some state and the predicate returns True.  None otherwise.</span></div></div></div><div style="display:none" id="code-Where__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            filter&lt;MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;(this, pred)</div></div></div></div></body></html>