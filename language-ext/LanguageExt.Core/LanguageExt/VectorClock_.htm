<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="VectorClock_.htm">VectorClock</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#Empty">Empty</a><a class="nav-link" href="#Versions">Versions</a><h3 >METHODS</h3><a class="nav-link" href="#Compare">Compare(VectorClock, VectorClock)</a><a class="nav-link" href="#Equals">Equals(object)</a><a class="nav-link" href="#Equals">Equals(VectorClock)</a><a class="nav-link" href="#GetHashCode">GetHashCode()</a><a class="nav-link" href="#Incr">Incr(int)</a><a class="nav-link" href="#Merge">Merge(VectorClock)</a><a class="nav-link" href="#ToString">ToString()</a><h3 >ENUMS</h3><a class="nav-link" href="#Occured">Occured</a></div><div class="content-panel"><h1 >VectorClock Class</h1><p ><span >Vector clock </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">class</span> <span class="ident">VectorClock</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">VectorClock</span>&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Fields</h2><div class="member-title"><a name="Empty"></a>Empty</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">VectorClock</span> <span class="ident">Empty</span></div></div></div><div class="member-title"><a name="Versions"></a>Versions</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="ident">Lst</span>&lt;<span class="ident">ClockEntry</span>&gt; <span class="ident">Versions</span></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Compare"></a>Compare(VectorClock, VectorClock)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Compare__VectorClock__v1__VectorClock__v2_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Is this reflexive, antisymetic, and transitive? Compare two VectorClocks, the outcomes will be one of the following:  <br/><br/> <div class='code-line'>     * Clock 1 is /before/ clock 2</div><div class='code-line'>         if there exists an i such that c1(i) &lt;= c(2) and there does not </div><div class='code-line'>         exist a j such that c1(j) &gt; c2(j). </div> <br/><br/> <div class='code-line'>     * Clock 1 is /concurrent/ to clock 2 if there exists an i, j such that </div><div class='code-line'>         c1(i) &lt; c2(i) and c1(j) &gt; c2(j)</div> <br/><br/> <div class='code-line'>     * Clock 1 is /after/ clock 2  otherwise</div> <br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">v1</div><div class="arg-type"><span class="ident">VectorClock</span></div></div><div class="arg-desc"><span >The first VectorClock</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">v2</div><div class="arg-type"><span class="ident">VectorClock</span></div></div><div class="arg-desc"><span >The second VectorClock</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Occured</span> <span class="ident">Compare</span>(<span class="ident">VectorClock</span> v1, <span class="ident">VectorClock</span> v2)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Occured</span></div><div class="normal"><span >Whether the change occured before, after or concurrently</span></div></div></div><div style="display:none" id="code-Compare__VectorClock__v1__VectorClock__v2_"><div class="section_title">SOURCE</div><div class="code">
            if (v1 == null || v2 == null)
                throw new ArgumentException(&quot;Can&#39;t compare null vector clocks!&quot;);

            // We do two checks: v1 &lt;= v2 and v2 &lt;= v1 if both are true then
            bool v1Bigger = false;
            bool v2Bigger = false;
            int p1 = 0;
            int p2 = 0;

            while (p1 &lt; v1.Versions.Count &amp;&amp; p2 &lt; v2.Versions.Count)
            {
                ClockEntry ver1 = v1.Versions[p1];
                ClockEntry ver2 = v2.Versions[p2];

                if (ver1.NodeId == ver2.NodeId)
                {
                    if (ver1.Version &gt; ver2.Version)
                        v1Bigger = true;
                    else if (ver2.Version &gt; ver1.Version)
                        v2Bigger = true;
                    p1++;
                    p2++;
                }
                else if (ver1.NodeId &gt; ver2.NodeId)
                {
                    // since ver1 is bigger that means it is missing a version that ver2 has
                    v2Bigger = true;
                    p2++;
                }
                else
                {
                    // this means ver2 is bigger which means it is missing a version ver1 has
                    v1Bigger = true;
                    p1++;
                }
            }

            // Check for left overs
            if (p1 &lt; v1.Versions.Count)
            {
                v1Bigger = true;
            }
            else if (p2 &lt; v2.Versions.Count)
            {
                v2Bigger = true;
            }

            // This is the case where they are equal, return BEFORE arbitrarily
            if (!v1Bigger &amp;&amp; !v2Bigger)
            {
                return Occured.Before;
            }
            // This is the case where v1 is a successor clock to v2
            else if (v1Bigger &amp;&amp; !v2Bigger)
            {
                return Occured.After;
            }
            // This is the case where v2 is a successor clock to v1
            else if (!v1Bigger &amp;&amp; v2Bigger)
            {
                return Occured.Before;
            }
            // This is the case where both clocks are parallel to one another
            else
            {
                return Occured.Concurrently;
            }
        </div></div></div><div class="member-title"><a name="Equals"></a>Equals(object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__object__obj_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">obj</div><div class="arg-type"><span class="keyword">object</span></div></div><div class="arg-desc"><span ></span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="keyword">object</span> obj)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span ></span></div></div></div><div style="display:none" id="code-Equals__object__obj_"><div class="section_title">SOURCE</div><div class="code">
            obj is VectorClock
                ? Equals((VectorClock)obj)
                : false</div></div></div><div class="member-title"><a name="Equals"></a>Equals(VectorClock)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__VectorClock__rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">VectorClock</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="ident">VectorClock</span> rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Equals__VectorClock__rhs_"><div class="section_title">SOURCE</div><div class="code">
            if (ReferenceEquals(this, rhs)) return true;
            if (ReferenceEquals(rhs, null)) return false;
            if (Versions.Count != rhs.Versions.Count) return false;
            if (Versions.Zip(rhs.Versions, (x, y) =&gt; x == y).Exists(x =&gt; !x)) return false;
            return true;
        </div></div></div><div class="member-title"><a name="GetHashCode"></a>GetHashCode()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetHashCode__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="ident">GetHashCode</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-GetHashCode__"><div class="section_title">SOURCE</div><div class="code">
            Versions.Fold(13, (s, x) =&gt; s * Math.Max(1, x.GetHashCode()))</div></div></div><div class="member-title"><a name="Incr"></a>Incr(int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Incr__int__nodeId_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Increment the version info associated with the given node </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">nodeId</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc"><span >Node to increment</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">VectorClock</span> <span class="ident">Incr</span>(<span class="keyword">int</span> nodeId)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">VectorClock</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Incr__int__nodeId_"><div class="section_title">SOURCE</div><div class="code">
            // stop on the index greater or equal to the node
            int index = 0;
            bool found = false;
            var versions = Versions;

            foreach(var version in versions)
            {
                if (version.NodeId == nodeId)
                {
                    found = true;
                    break;
                }
                else if (version.NodeId &gt; nodeId)
                {
                    break;
                }
                index++;
            }

            if (found)
            {
                versions = versions.SetItem(index, versions[index].Incr());
            }
            else if (index &lt; versions.Count - 1)
            {
                versions = versions.Insert(index, new ClockEntry(nodeId, 1));
            }
            else
            {
                // we don&#39;t already have a version for this, so add it
                if (versions.Count &gt; MaxVersions) throw new ArgumentOutOfRangeException(&quot;Vector clock is full&quot;);
                versions.Add(new ClockEntry(nodeId, 1));
            }
            return new VectorClock(versions);
        </div></div></div><div class="member-title"><a name="Merge"></a>Merge(VectorClock)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Merge__VectorClock__clock_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Merge clocks </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">clock</div><div class="arg-type"><span class="ident">VectorClock</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="ident">VectorClock</span> <span class="ident">Merge</span>(<span class="ident">VectorClock</span> clock)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">VectorClock</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Merge__VectorClock__clock_"><div class="section_title">SOURCE</div><div class="code">
            int i = 0;
            int j = 0;

            var versions = Versions.ToArray();
            var clockVersions = clock.Versions.ToArray();
            var newClockVersions = List.empty&lt;ClockEntry&gt;();

            while (i &lt; versions.Count &amp;&amp; j &lt; clockVersions.Count)
            {
                var v1 = versions[i];
                var v2 = clockVersions[j];

                if (v1.NodeId == v2.NodeId)
                {
                    var nc = new ClockEntry(v1.NodeId, (int)Math.Max(v1.Version, v2.Version));
                    newClockVersions = newClockVersions.Add(nc);

                    i++;
                    j++;
                }
                else if (v1.NodeId &lt; v2.NodeId)
                {
                    newClockVersions = newClockVersions.Add(v1);
                    i++;
                }
                else
                {
                    newClockVersions = newClockVersions.Add(v2);
                    j++;
                }
            }

            // Okay now there may be leftovers on one or the other list remaining
            for (int k = i; k &lt; versions.Count; k++)
            {
                newClockVersions = newClockVersions.Add(versions[k]);
            }
            for (int k = j; k &lt; clockVersions.Count; k++)
            {
                newClockVersions = newClockVersions.Add(clockVersions[k]);
            }
            return new VectorClock(newClockVersions);
        </div></div></div><div class="member-title"><a name="ToString"></a>ToString()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToString__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >ToString </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="ident">ToString</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">string</span></div><div class="normal"></div></div></div><div style="display:none" id="code-ToString__"><div class="section_title">SOURCE</div><div class="code">
            var builder = new StringBuilder();
            builder.Append(&quot;version(&quot;);

            if (Versions.Count &gt; 0)
            {
                for (int i = 0; i &lt; Versions.Count - 1; i++)
                {
                    builder.Append(Versions[i]);
                    builder.Append(&quot;, &quot;);
                }
                builder.Append(Versions[Versions.Count - 1]);
            }
            builder.Append(&quot;)&quot;);
            return builder.ToString();
        </div></div></div><h2 >Enums</h2><div class="member-title"><a name="Occured"></a>Occured</div><div class="section"><p ><div class="section_title">SUMMARY</div><p ><span >The result of comparing two times<div class='code-line'>     either t1 is before t2, </div><div class='code-line'>     t1 is after t2, </div><div class='code-line'>     or t1 happens concurrently to t2</div> </span></p></p><div class="left"><div class="arg"><div class="arg-header"><div class="arg-name">Before</div><div class="arg-type"><span class="number">-1</span></div></div><div class="arg-desc"><span >Event occurred before </span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">After</div><div class="arg-type"><span class="number">1</span></div></div><div class="arg-desc"><span >Event occurred after </span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Concurrently</div><div class="arg-type"><span class="number">0</span></div></div><div class="arg-desc"><span >Event occurred independantly </span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="ident">Occured</span> : <span class="keyword">int</span></div></div></div></div></body></html>