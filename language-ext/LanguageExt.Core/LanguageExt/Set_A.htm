<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="Set_A.htm">Set&lt;A&gt;</span></div><div class="nav-panel"><h3 >CONSTRUCTORS</h3><a class="nav-link" href="#Set">Set(IEnumerable&lt;A&gt;)</a><h3 >FIELDS</h3><a class="nav-link" href="#Empty">Empty</a><h3 >PROPERTIES</h3><a class="nav-link" href="#Count">Count</a><a class="nav-link" href="#IsEmpty">IsEmpty</a><h3 >METHODS</h3><a class="nav-link" href="#Add">Add(A)</a><a class="nav-link" href="#AddOrUpdate">AddOrUpdate(A)</a><a class="nav-link" href="#AddOrUpdateRange">AddOrUpdateRange(IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#AddRange">AddRange(IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#Append">Append(Set&lt;A&gt;)</a><a class="nav-link" href="#AsEnumerable">AsEnumerable()</a><a class="nav-link" href="#Bind&lt;B>">Bind&lt;B&gt;(Func&lt;A, Set&lt;B&gt;&gt;)</a><a class="nav-link" href="#Clear">Clear()</a><a class="nav-link" href="#Contains">Contains(A)</a><a class="nav-link" href="#CopyTo">CopyTo(A, int)</a><a class="nav-link" href="#CopyTo">CopyTo(System.Array, int)</a><a class="nav-link" href="#Equals">Equals(Set&lt;A&gt;)</a><a class="nav-link" href="#Equals">Equals(object)</a><a class="nav-link" href="#Except">Except(IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#Exists">Exists(Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Filter">Filter(Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Find">Find(A)</a><a class="nav-link" href="#Fold&lt;S>">Fold&lt;S&gt;(S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBack&lt;S>">FoldBack&lt;S&gt;(S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#GetEnumerator">GetEnumerator()</a><a class="nav-link" href="#GetHashCode">GetHashCode()</a><a class="nav-link" href="#Intersect">Intersect(IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#IsProperSubsetOf">IsProperSubsetOf(IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#IsProperSupersetOf">IsProperSupersetOf(IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#IsSubsetOf">IsSubsetOf(IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#IsSupersetOf">IsSupersetOf(IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#Length">Length()</a><a class="nav-link" href="#Map&lt;B>">Map&lt;B&gt;(Func&lt;A, B&gt;)</a><a class="nav-link" href="#Overlaps">Overlaps(IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#Remove">Remove(A)</a><a class="nav-link" href="#Select&lt;B>">Select&lt;B&gt;(Func&lt;A, B&gt;)</a><a class="nav-link" href="#SelectMany&lt;B, C>">SelectMany&lt;B, C&gt;(Func&lt;A, Set&lt;B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#SetEquals">SetEquals(IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#Subtract">Subtract(Set&lt;A&gt;)</a><a class="nav-link" href="#SymmetricExcept">SymmetricExcept(IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#ToString">ToString()</a><a class="nav-link" href="#TryAdd">TryAdd(A)</a><a class="nav-link" href="#TryAddRange">TryAddRange(IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#Union">Union(IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#Where">Where(Func&lt;A, bool&gt;)</a></div><div class="content-panel"><h1 >Set&lt;A&gt; Struct</h1><p ><span >Immutable set AVL tree implementation AVL tree is a self-balancing binary search tree.  http://en.wikipedia.org/wiki/AVL_tree </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Serializable]</div><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IEquatable</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">IReadOnlyCollection</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Constructors</h2><div class="member-title"><a name="Set"></a>Set(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Set__IEnumerable_A_items_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ctor from an enumerable  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">items</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">ctor</span> <span class="ident">Set</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; items)</div></div><div style="display:none" id="code-Set__IEnumerable_A_items_"><div class="section_title">SOURCE</div><div class="code">
            value = new SetInternal&lt;OrdDefault&lt;A&gt;, A&gt;(items, true);
        </div></div></div><h2 >Fields</h2><div class="member-title"><a name="Empty"></a>Empty</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Empty</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="Count"></a>Count</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Number of items in the set </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">Count</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div></div><div class="member-title"><a name="IsEmpty"></a>IsEmpty</div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >True if the set has no elements </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsEmpty</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Add"></a>Add(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Add__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add an item to the set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Value to add to the set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Add</span>(<span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >New set with the item added</span></div></div></div><div style="display:none" id="code-Add__A__value_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.Add(value))</div></div></div><div class="member-title"><a name="AddOrUpdate"></a>AddOrUpdate(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddOrUpdate__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add an item to the set.  If an item already exists then replace it. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Value to add to the set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">AddOrUpdate</span>(<span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >New set with the item maybe added</span></div></div></div><div style="display:none" id="code-AddOrUpdate__A__value_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.AddOrUpdate(value))</div></div></div><div class="member-title"><a name="AddOrUpdateRange"></a>AddOrUpdateRange(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddOrUpdateRange__IEnumerable_A_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the set.  If any items already exist, they&#39;re ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Range of keys to add</div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">AddOrUpdateRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >New Set with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException if any of the keys are null</span></div></div></div><div style="display:none" id="code-AddOrUpdateRange__IEnumerable_A_range_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.AddOrUpdateRange(range))</div></div></div><div class="member-title"><a name="AddRange"></a>AddRange(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AddRange__IEnumerable_A_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the set. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Range of keys to add</div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">AddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >New Set with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException if any of the keys are null</span></div></div></div><div style="display:none" id="code-AddRange__IEnumerable_A_range_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.AddRange(range))</div></div></div><div class="member-title"><a name="Append"></a>Append(Set&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Append__Set_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add operator - performs a union of the two sets </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Right hand side set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Append</span>(<span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Unioned set</span></div></div></div><div style="display:none" id="code-Append__Set_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.Append(rhs.Value))</div></div></div><div class="member-title"><a name="AsEnumerable"></a>AsEnumerable()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; <span class="ident">AsEnumerable</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsEnumerable__"><div class="section_title">SOURCE</div><div class="code">
            this</div></div></div><div class="member-title"><a name="Bind&lt;B>"></a>Bind&lt;B&gt;(Func&lt;A, Set&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_B_Func_A_Set&lt;B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Set</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Bind</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Set</span>&lt;<span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Bind_B_Func_A_Set&lt;B>_f_"><div class="section_title">SOURCE</div><div class="code">
            var self = this;

            IEnumerable&lt;B&gt; Yield()
            {
                foreach (var x in self.AsEnumerable())
                {
                    foreach (var y in f(x))
                    {
                        yield return y;
                    }
                }
            }
            return new Set&lt;B&gt;(Yield(), true);
        </div></div></div><div class="member-title"><a name="Clear"></a>Clear()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Clear__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Clears the set </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Clear</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An empty set</span></div></div></div><div style="display:none" id="code-Clear__"><div class="section_title">SOURCE</div><div class="code">
            Empty</div></div></div><div class="member-title"><a name="Contains"></a>Contains(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Contains__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if the value is in the set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Value to check</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Contains</span>(<span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the item &#39;value&#39; is in the Set &#39;set&#39;</span></div></div></div><div style="display:none" id="code-Contains__A__value_"><div class="section_title">SOURCE</div><div class="code">
            Value.Contains(value)</div></div></div><div class="member-title"><a name="CopyTo"></a>CopyTo(A, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CopyTo__A__array__int__index_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Copy the items from the set into the specified array </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">array</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Array to copy to</div></div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Index into the array to start</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">void</span> <span class="ident">CopyTo</span>(<span class="ident">A</span> array, <span class="keyword">int</span> index)</div></div><div style="display:none" id="code-CopyTo__A__array__int__index_"><div class="section_title">SOURCE</div><div class="code">
            Value.CopyTo(array, index)</div></div></div><div class="member-title"><a name="CopyTo"></a>CopyTo(System.Array, int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CopyTo__System_.Array__array__int__index_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Copy the items from the set into the specified array </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">array</div><div class="arg-type"><span class="ident">System</span>.<span class="ident">Array</span></div></div><div class="arg-desc">Array to copy to</div></div><div class="arg"><div class="arg-header"><div class="arg-name">index</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">Index into the array to start</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">void</span> <span class="ident">CopyTo</span>(<span class="ident">System</span>.<span class="ident">Array</span> array, <span class="keyword">int</span> index)</div></div><div style="display:none" id="code-CopyTo__System_.Array__array__int__index_"><div class="section_title">SOURCE</div><div class="code">
            Value.CopyTo(array, index)</div></div></div><div class="member-title"><a name="Equals"></a>Equals(Set&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__Set_A_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Other set to test</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if sets are equal</span></div></div></div><div style="display:none" id="code-Equals__Set_A_other_"><div class="section_title">SOURCE</div><div class="code">
            Value.SetEquals(other.Value.AsEnumerable())</div></div></div><div class="member-title"><a name="Equals"></a>Equals(object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals__object__obj_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Equality override </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">obj</div><div class="arg-type"><span class="keyword">object</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="ident">Equals</span>(<span class="keyword">object</span> obj)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Equals__object__obj_"><div class="section_title">SOURCE</div><div class="code">
            obj is Set&lt;A&gt; &amp;&amp; 
            !ReferenceEquals(obj, null) &amp;&amp;
            Equals((Set&lt;A&gt;)obj)</div></div></div><div class="member-title"><a name="Except"></a>Except(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Except__IEnumerable_A_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns this - other.  Only the items in this that are not in  other will be returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Except</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Except__IEnumerable_A_other_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.Except(other))</div></div></div><div class="member-title"><a name="Exists"></a>Exists(Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Check the existence of an item in the set using a  predicate. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div><div class="section_title">REMARKS</div><span >Note this scans the entire set.</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Exists</span>(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if predicate returns true for any item</span></div></div></div><div style="display:none" id="code-Exists__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Value.Exists(pred)</div></div></div><div class="member-title"><a name="Filter"></a>Filter(Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filters items from the set using the predicate.  If the predicate returns True for any item then it remains in the set, otherwise it&#39;s dropped. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Filter</span>(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Filtered enumerable</span></div></div></div><div style="display:none" id="code-Filter__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.Filter(pred))</div></div></div><div class="member-title"><a name="Find"></a>Find(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Find__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Attempts to find an item in the set.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Value to find</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Find</span>(<span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Some(T) if found, None otherwise</span></div></div></div><div style="display:none" id="code-Find__A__value_"><div class="section_title">SOURCE</div><div class="code">
            Value.Find(value)</div></div></div><div class="member-title"><a name="Fold&lt;S>"></a>Fold&lt;S&gt;(S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_S_S__state__Func_S_A_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection, threading an accumulator  argument through the computation. The fold function takes the state argument, and  applies the function &#39;folder&#39; to it and the first element of the set. Then, it feeds this  result into the function &#39;folder&#39; along with the second element, and so on. It returns the  final result. (Aggregate in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">S</span> <span class="ident">Fold</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-Fold_S_S__state__Func_S_A_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            Value.Fold(state,folder)</div></div></div><div class="member-title"><a name="FoldBack&lt;S>"></a>FoldBack&lt;S&gt;(S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBack_S_S__state__Func_S_A_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the collection (from last element to first),  threading an aggregate state through the computation. The fold function takes the state  argument, and applies the function &#39;folder&#39; to it and the first element of the set. Then,  it feeds this result into the function &#39;folder&#39; along with the second element, and so on. It  returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Fold function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">S</span> <span class="ident">FoldBack</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldBack_S_S__state__Func_S_A_S_folder_"><div class="section_title">SOURCE</div><div class="code">
            Value.FoldBack(state, folder)</div></div></div><div class="member-title"><a name="GetEnumerator"></a>GetEnumerator()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetEnumerator__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get enumerator </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">IEnumerator</span>&lt;<span class="ident">A</span>&gt; <span class="ident">GetEnumerator</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerator</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >IEnumerator T</span></div></div></div><div style="display:none" id="code-GetEnumerator__"><div class="section_title">SOURCE</div><div class="code">
            Value.GetEnumerator()</div></div></div><div class="member-title"><a name="GetHashCode"></a>GetHashCode()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-GetHashCode__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the hash code.  Calculated from all items in the set. </span></p><div class="section_title">REMARKS</div><span >The hash-code is cached after the first read. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="ident">GetHashCode</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-GetHashCode__"><div class="section_title">SOURCE</div><div class="code">
            Value.GetHashCode()</div></div></div><div class="member-title"><a name="Intersect"></a>Intersect(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Intersect__IEnumerable_A_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the elements that are in both this and other </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Intersect</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Intersect__IEnumerable_A_other_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.Intersect(other))</div></div></div><div class="member-title"><a name="IsProperSubsetOf"></a>IsProperSubsetOf(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IsProperSubsetOf__IEnumerable_A_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if &#39;other&#39; is a proper subset of this set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsProperSubsetOf</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if &#39;other&#39; is a proper subset of this set</span></div></div></div><div style="display:none" id="code-IsProperSubsetOf__IEnumerable_A_other_"><div class="section_title">SOURCE</div><div class="code">
            Value.IsProperSubsetOf(other)</div></div></div><div class="member-title"><a name="IsProperSupersetOf"></a>IsProperSupersetOf(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IsProperSupersetOf__IEnumerable_A_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if &#39;other&#39; is a proper superset of this set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsProperSupersetOf</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if &#39;other&#39; is a proper superset of this set</span></div></div></div><div style="display:none" id="code-IsProperSupersetOf__IEnumerable_A_other_"><div class="section_title">SOURCE</div><div class="code">
            Value.IsProperSupersetOf(other)</div></div></div><div class="member-title"><a name="IsSubsetOf"></a>IsSubsetOf(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IsSubsetOf__IEnumerable_A_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if &#39;other&#39; is a superset of this set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsSubsetOf</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if &#39;other&#39; is a superset of this set</span></div></div></div><div style="display:none" id="code-IsSubsetOf__IEnumerable_A_other_"><div class="section_title">SOURCE</div><div class="code">
            Value.IsSubsetOf(other)</div></div></div><div class="member-title"><a name="IsSupersetOf"></a>IsSupersetOf(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IsSupersetOf__IEnumerable_A_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if &#39;other&#39; is a superset of this set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">IsSupersetOf</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if &#39;other&#39; is a superset of this set</span></div></div></div><div style="display:none" id="code-IsSupersetOf__IEnumerable_A_other_"><div class="section_title">SOURCE</div><div class="code">
            Value.IsSupersetOf(other)</div></div></div><div class="member-title"><a name="Length"></a>Length()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Length__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the number of elements in the set </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">int</span> <span class="ident">Length</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Number of elements</span></div></div></div><div style="display:none" id="code-Length__"><div class="section_title">SOURCE</div><div class="code">
            Value.Count</div></div></div><div class="member-title"><a name="Map&lt;B>"></a>Map&lt;B&gt;(Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_B_Func_A_B_map_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the values of this set into a new set of values using the mapper function to tranform the source values. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">map</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; map)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped Set</span></div></div></div><div style="display:none" id="code-Map_B_Func_A_B_map_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.Map&lt;OrdDefault&lt;B&gt;, B&gt;(map))</div></div></div><div class="member-title"><a name="Overlaps"></a>Overlaps(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Overlaps__IEnumerable_A_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns True if other overlaps this set </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">Overlaps</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if other overlaps this set</span></div></div></div><div style="display:none" id="code-Overlaps__IEnumerable_A_other_"><div class="section_title">SOURCE</div><div class="code">
            Value.Overlaps(other)</div></div></div><div class="member-title"><a name="Remove"></a>Remove(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Remove__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Removes an item from the set (if it exists) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Value to check</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Remove</span>(<span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >New set with item removed</span></div></div></div><div style="display:none" id="code-Remove__A__value_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.Remove(value))</div></div></div><div class="member-title"><a name="Select&lt;B>"></a>Select&lt;B&gt;(Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_B_Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Select</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Select_B_Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            Map(f)</div></div></div><div class="member-title"><a name="SelectMany&lt;B, C>"></a>SelectMany&lt;B, C&gt;(Func&lt;A, Set&lt;B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_B_C_Func_A_Set&lt;B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Set</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">C</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Set</span>&lt;<span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_B_C_Func_A_Set&lt;B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
            var self = this;

            IEnumerable&lt;C&gt; Yield()
            {
                foreach(var x in self.AsEnumerable())
                {
                    foreach(var y in bind(x))
                    {
                        yield return project(x, y);
                    }
                }
            }
            return new Set&lt;C&gt;(Yield(), true);
        </div></div></div><div class="member-title"><a name="SetEquals"></a>SetEquals(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SetEquals__IEnumerable_A_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if both sets contain the same elements </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Other distinct set to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">bool</span> <span class="ident">SetEquals</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the sets are equal</span></div></div></div><div style="display:none" id="code-SetEquals__IEnumerable_A_other_"><div class="section_title">SOURCE</div><div class="code">
            Value.SetEquals(other)</div></div></div><div class="member-title"><a name="Subtract"></a>Subtract(Set&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subtract__Set_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Subtract operator - performs a subtract of the two sets </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Right hand side set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Subtract</span>(<span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Subtracted set</span></div></div></div><div style="display:none" id="code-Subtract__Set_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.Subtract(rhs.Value))</div></div></div><div class="member-title"><a name="SymmetricExcept"></a>SymmetricExcept(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SymmetricExcept__IEnumerable_A_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Only items that are in one set or the other will be returned. If an item is in both, it is dropped. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">SymmetricExcept</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SymmetricExcept__IEnumerable_A_other_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.SymmetricExcept(other))</div></div></div><div class="member-title"><a name="ToString"></a>ToString()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToString__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="ident">ToString</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">string</span></div><div class="normal"></div></div></div><div style="display:none" id="code-ToString__"><div class="section_title">SOURCE</div><div class="code">
            $&quot;Set[{Count}]&quot;</div></div></div><div class="member-title"><a name="TryAdd"></a>TryAdd(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryAdd__A__value_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Attempt to add an item to the set.  If an item already exists then return the Set as-is. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Value to add to the set</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">TryAdd</span>(<span class="ident">A</span> value)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >New set with the item maybe added</span></div></div></div><div style="display:none" id="code-TryAdd__A__value_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.TryAdd(value))</div></div></div><div class="member-title"><a name="TryAddRange"></a>TryAddRange(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TryAddRange__IEnumerable_A_range_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Atomically adds a range of items to the set.  If an item already exists, it&#39;s ignored. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">range</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Range of keys to add</div></div><div class="section_title">REMARKS</div><span >Null is not allowed for a Key</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">TryAddRange</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; range)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >New Set with the items added</span></div></div><div class="section_title">EXCEPTIONS</div><div class="code"><div class="member-title">ArgumentException</div><div class="normal"><span >Throws ArgumentException if any of the keys already exist</span></div></div><div class="code"><div class="member-title">ArgumentNullException</div><div class="normal"><span >Throws ArgumentNullException if any of the keys are null</span></div></div></div><div style="display:none" id="code-TryAddRange__IEnumerable_A_range_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.TryAddRange(range))</div></div></div><div class="member-title"><a name="Union"></a>Union(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Union__IEnumerable_A_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Finds the union of two sets and produces a new set with  the results </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Other set to union with</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Union</span>(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >A set which contains all items from both sets</span></div></div></div><div style="display:none" id="code-Union__IEnumerable_A_other_"><div class="section_title">SOURCE</div><div class="code">
            Wrap(Value.Union(other))</div></div></div><div class="member-title"><a name="Where"></a>Where(Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Where</span>(<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Where__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            Filter(pred)</div></div></div></div></body></html>